(function(
	userConfig,
	defaultConfig
){
	// summary:
	//		This is the "source loader" and is the entry point for Dojo during development. You may also load Dojo with
	//		any AMD-compliant loader via the package main module dojo/main.
	// description:
	//		This is the "source loader" for Dojo. It provides an AMD-compliant loader that can be configured
	//		to operate in either synchronous or asynchronous modes. After the loader is defined, dojo is loaded
	//		IAW the package main module dojo/main. In the event you wish to use a foreign loader, you may load dojo as a package
	//		via the package main module dojo/main and this loader is not required; see dojo/package.json for details.
	//
	//		In order to keep compatibility with the v1.x line, this loader includes additional machinery that enables
	//		the dojo.provide, dojo.require et al API. This machinery is loaded by default, but may be dynamically removed
	//		via the has.js API and statically removed via the build system.
	//
	//		This loader includes sniffing machinery to determine the environment; the following environments are supported:
	//
	//		- browser
	//		- node.js
	//		- rhino
	//
	//		This is the so-called "source loader". As such, it includes many optional features that may be discarded by
	//		building a customized version with the build system.

	// Design and Implementation Notes
	//
	// This is a dojo-specific adaption of bdLoad, donated to the dojo foundation by Altoviso LLC.
	//
	// This function defines an AMD-compliant (http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition)
	// loader that can be configured to operate in either synchronous or asynchronous modes.
	//
	// Since this machinery implements a loader, it does not have the luxury of using a load system and/or
	// leveraging a utility library. This results in an unpleasantly long file; here is a road map of the contents:
	//
	//	 1. Small library for use implementing the loader.
	//	 2. Define the has.js API; this is used throughout the loader to bracket features.
	//	 3. Define the node.js and rhino sniffs and sniff.
	//	 4. Define the loader's data.
	//	 5. Define the configuration machinery.
	//	 6. Define the script element sniffing machinery and sniff for configuration data.
	//	 7. Configure the loader IAW the provided user, default, and sniffing data.
	//	 8. Define the global require function.
	//	 9. Define the module resolution machinery.
	//	10. Define the module and plugin module definition machinery
	//	11. Define the script injection machinery.
	//	12. Define the window load detection.
	//	13. Define the logging API.
	//	14. Define the tracing API.
	//	16. Define the AMD define function.
	//	17. Define the dojo v1.x provide/require machinery--so called "legacy" modes.
	//	18. Publish global variables.
	//
	// Language and Acronyms and Idioms
	//
	// moduleId: a CJS module identifier, (used for public APIs)
	// mid: moduleId (used internally)
	// packageId: a package identifier (used for public APIs)
	// pid: packageId (used internally); the implied system or default package has pid===""
	// pack: package is used internally to reference a package object (since javascript has reserved words including "package")
	// prid: plugin resource identifier
	// The integer constant 1 is used in place of true and 0 in place of false.

	// define a minimal library to help build the loader
	var	noop = function(){
		},

		isEmpty = function(it){
			for(var p in it){
				return 0;
			}
			return 1;
		},

		toString = {}.toString,

		isFunction = function(it){
			return toString.call(it) == "[object Function]";
		},

		isString = function(it){
			return toString.call(it) == "[object String]";
		},

		isArray = function(it){
			return toString.call(it) == "[object Array]";
		},

		forEach = function(vector, callback){
			if(vector){
				for(var i = 0; i < vector.length;){
					callback(vector[i++]);
				}
			}
		},

		mix = function(dest, src){
			for(var p in src){
				dest[p] = src[p];
			}
			return dest;
		},

		makeError = function(error, info){
			return mix(new Error(error), {src:"dojoLoader", info:info});
		},

		uidSeed = 1,

		uid = function(){
			// Returns a unique identifier (within the lifetime of the document) of the form /_d+/.
			return "_" + uidSeed++;
		},

		// FIXME: how to doc window.require() api

		// this will be the global require function; define it immediately so we can start hanging things off of it
		req = function(
			config,		  //(object, optional) hash of configuration properties
			dependencies, //(array of commonjs.moduleId, optional) list of modules to be loaded before applying callback
			callback	  //(function, optional) lambda expression to apply to module values implied by dependencies
		){
			return contextRequire(config, dependencies, callback, 0, req);
		},

		// the loader uses the has.js API to control feature inclusion/exclusion; define then use throughout
		global = this,

		doc = global.document,

		element = doc && doc.createElement("DiV"),

		has = req.has = function(name){
			return isFunction(hasCache[name]) ? (hasCache[name] = hasCache[name](global, doc, element)) : hasCache[name];
		},

		hasCache = has.cache = defaultConfig.hasCache;

	has.add = function(name, test, now, force){
		(hasCache[name]===undefined || force) && (hasCache[name] = test);
		return now && has(name);
	};

	 0 && has.add("host-node", userConfig.has && "host-node" in userConfig.has ?
		userConfig.has["host-node"] :
		(typeof process == "object" && process.versions && process.versions.node && process.versions.v8));
	if( 0 ){
		// fixup the default config for node.js environment
		require("./_base/configNode.js").config(defaultConfig);
		// remember node's require (with respect to baseUrl==dojo's root)
		defaultConfig.loaderPatch.nodeRequire = require;
	}

	 0 && has.add("host-rhino", userConfig.has && "host-rhino" in userConfig.has ?
		userConfig.has["host-rhino"] :
		(typeof load == "function" && (typeof Packages == "function" || typeof Packages == "object")));
	if( 0 ){
		// owing to rhino's lame feature that hides the source of the script, give the user a way to specify the baseUrl...
		for(var baseUrl = userConfig.baseUrl || ".", arg, rhinoArgs = this.arguments, i = 0; i < rhinoArgs.length;){
			arg = (rhinoArgs[i++] + "").split("=");
			if(arg[0] == "baseUrl"){
				baseUrl = arg[1];
				break;
			}
		}
		load(baseUrl + "/_base/configRhino.js");
		rhinoDojoConfig(defaultConfig, baseUrl, rhinoArgs);
	}

	has.add("host-webworker", ((typeof WorkerGlobalScope !== 'undefined') && (self instanceof WorkerGlobalScope)));
	if(has("host-webworker")){
		mix(defaultConfig.hasCache, {
			"host-browser": 0,
			"dom": 0,
			"dojo-dom-ready-api": 0,
			"dojo-sniff": 0,
			"dojo-inject-api": 1,
			"host-webworker": 1
		});

		defaultConfig.loaderPatch = {
			injectUrl: function(url, callback){
				// TODO:
				//		This is not async, nor can it be in Webworkers.  It could be made better by passing
				//		the entire require array into importScripts at.  This way the scripts are loaded in
				//		async mode; even if the callbacks are ran in sync.  It is not a major issue as webworkers
				//		tend to be long running where initial startup is not a major factor.

				try{
					importScripts(url);
					callback();
				}catch(e){
					console.info("failed to load resource (" + url + ")");
					console.error(e);
				}
			}
		};
	}

	// userConfig has tests override defaultConfig has tests; do this after the environment detection because
	// the environment detection usually sets some has feature values in the hasCache.
	for(var p in userConfig.has){
		has.add(p, userConfig.has[p], 0, 1);
	}

	//
	// define the loader data
	//

	// the loader will use these like symbols if the loader has the traceApi; otherwise
	// define magic numbers so that modules can be provided as part of defaultConfig
	var	requested = 1,
		arrived = 2,
		nonmodule = 3,
		executing = 4,
		executed = 5;

	if( false ){
		// these make debugging nice; but using strings for symbols is a gross rookie error; don't do it for production code
		requested = "requested";
		arrived = "arrived";
		nonmodule = "not-a-module";
		executing = "executing";
		executed = "executed";
	}

	var legacyMode = 0,
		sync = "sync",
		xd = "xd",
		syncExecStack = [],
		dojoRequirePlugin = 0,
		checkDojoRequirePlugin = noop,
		transformToAmd = noop,
		getXhr;
	if( false ){
		req.isXdUrl = noop;

		req.initSyncLoader = function(dojoRequirePlugin_, checkDojoRequirePlugin_, transformToAmd_){
			// the first dojo/_base/loader loaded gets to define these variables; they are designed to work
			// in the presence of zero to many mapped dojo/_base/loaders
			if(!dojoRequirePlugin){
				dojoRequirePlugin = dojoRequirePlugin_;
				checkDojoRequirePlugin = checkDojoRequirePlugin_;
				transformToAmd = transformToAmd_;
			}

			return {
				sync:sync,
				requested:requested,
				arrived:arrived,
				nonmodule:nonmodule,
				executing:executing,
				executed:executed,
				syncExecStack:syncExecStack,
				modules:modules,
				execQ:execQ,
				getModule:getModule,
				injectModule:injectModule,
				setArrived:setArrived,
				signal:signal,
				finishExec:finishExec,
				execModule:execModule,
				dojoRequirePlugin:dojoRequirePlugin,
				getLegacyMode:function(){return legacyMode;},
				guardCheckComplete:guardCheckComplete
			};
		};

		if( 1  || has("host-webworker")){
			// in legacy sync mode, the loader needs a minimal XHR library

			var locationProtocol = location.protocol,
				locationHost = location.host;
			req.isXdUrl = function(url){
				if(/^\./.test(url)){
					// begins with a dot is always relative to page URL; therefore not xdomain
					return false;
				}
				if(/^\/\//.test(url)){
					// for v1.6- backcompat, url starting with // indicates xdomain
					return true;
				}
				// get protocol and host
				// \/+ takes care of the typical file protocol that looks like file:///drive/path/to/file
				// locationHost is falsy if file protocol => if locationProtocol matches and is "file:", || will return false
				var match = url.match(/^([^\/\:]+\:)\/+([^\/]+)/);
				return match && (match[1] != locationProtocol || (locationHost && match[2] != locationHost));
			};


			// note: to get the file:// protocol to work in FF, you must set security.fileuri.strict_origin_policy to false in about:config
			 false && has.add("dojo-xhr-factory", 1);
			has.add("dojo-force-activex-xhr",  1  && !doc.addEventListener && window.location.protocol == "file:");
			has.add("native-xhr", typeof XMLHttpRequest != "undefined");
			if(has("native-xhr") && !has("dojo-force-activex-xhr")){
				getXhr = function(){
					return new XMLHttpRequest();
				};
			}else{
				// if in the browser an old IE; find an xhr
				for(var XMLHTTP_PROGIDS = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'], progid, i = 0; i < 3;){
					try{
						progid = XMLHTTP_PROGIDS[i++];
						if(new ActiveXObject(progid)){
							// this progid works; therefore, use it from now on
							break;
						}
					}catch(e){
						// squelch; we're just trying to find a good ActiveX progid
						// if they all fail, then progid ends up as the last attempt and that will signal the error
						// the first time the client actually tries to exec an xhr
					}
				}
				getXhr = function(){
					return new ActiveXObject(progid);
				};
			}
			req.getXhr = getXhr;

			has.add("dojo-gettext-api", 1);
			req.getText = function(url, async, onLoad){
				var xhr = getXhr();
				xhr.open('GET', fixupUrl(url), false);
				xhr.send(null);
				if(xhr.status == 200 || (!location.host && !xhr.status)){
					if(onLoad){
						onLoad(xhr.responseText, async);
					}
				}else{
					throw makeError("xhrFailed", xhr.status);
				}
				return xhr.responseText;
			};
		}
	}else{
		req.async = 1;
	}

	//
	// loader eval
	//
	var eval_ =
		// use the function constructor so our eval is scoped close to (but not in) in the global space with minimal pollution
		new Function('return eval(arguments[0]);');

	req.eval =
		function(text, hint){
			return eval_(text + "\r\n//# sourceURL=" + hint);
		};

	//
	// loader micro events API
	//
	var listenerQueues = {},
		error = "error",
		signal = req.signal = function(type, args){
			var queue = listenerQueues[type];
			// notice we run a copy of the queue; this allows listeners to add/remove
			// other listeners without affecting this particular signal
			forEach(queue && queue.slice(0), function(listener){
				listener.apply(null, isArray(args) ? args : [args]);
			});
		},
		on = req.on = function(type, listener){
			// notice a queue is not created until a client actually connects
			var queue = listenerQueues[type] || (listenerQueues[type] = []);
			queue.push(listener);
			return {
				remove:function(){
					for(var i = 0; i<queue.length; i++){
						if(queue[i]===listener){
							queue.splice(i, 1);
							return;
						}
					}
				}
			};
		};

	// configuration machinery; with an optimized/built defaultConfig, all configuration machinery can be discarded
	// lexical variables hold key loader data structures to help with minification; these may be completely,
	// one-time initialized by defaultConfig for optimized/built versions
	var
		aliases
			// a vector of pairs of [regexs or string, replacement] => (alias, actual)
			= [],

		paths
			// CommonJS paths
			= {},

		pathsMapProg
			// list of (from-path, to-path, regex, length) derived from paths;
			// a "program" to apply paths; see computeMapProg
			= [],

		packs
			// a map from packageId to package configuration object; see fixupPackageInfo
			= {},

		map = req.map
			// AMD map config variable; dojo/_base/kernel needs req.map to figure out the scope map
			= {},

		mapProgs
			// vector of quads as described by computeMapProg; map-key is AMD map key, map-value is AMD map value
			= [],

		modules
			// A hash:(mid) --> (module-object) the module namespace
			//
			// pid: the package identifier to which the module belongs (e.g., "dojo"); "" indicates the system or default package
			// mid: the fully-resolved (i.e., mappings have been applied) module identifier without the package identifier (e.g., "dojo/io/script")
			// url: the URL from which the module was retrieved
			// pack: the package object of the package to which the module belongs
			// executed: 0 => not executed; executing => in the process of traversing deps and running factory; executed => factory has been executed
			// deps: the dependency vector for this module (vector of modules objects)
			// def: the factory for this module
			// result: the result of the running the factory for this module
			// injected: (0 | requested | arrived) the status of the module; nonmodule means the resource did not call define
			// load: plugin load function; applicable only for plugins
			//
			// Modules go through several phases in creation:
			//
			// 1. Requested: some other module's definition or a require application contained the requested module in
			//	  its dependency vector or executing code explicitly demands a module via req.require.
			//
			// 2. Injected: a script element has been appended to the insert-point element demanding the resource implied by the URL
			//
			// 3. Loaded: the resource injected in [2] has been evaluated.
			//
			// 4. Defined: the resource contained a define statement that advised the loader about the module. Notice that some
			//	  resources may just contain a bundle of code and never formally define a module via define
			//
			// 5. Evaluated: the module was defined via define and the loader has evaluated the factory and computed a result.
			= {},

		cacheBust
			// query string to append to module URLs to bust browser cache
			= "",

		cache
			// hash:(mid | url)-->(function | string)
			//
			// A cache of resources. The resources arrive via a config.cache object, which is a hash from either mid --> function or
			// url --> string. The url key is distinguished from the mid key by always containing the prefix "url:". url keys as provided
			// by config.cache always have a string value that represents the contents of the resource at the given url. mid keys as provided
			// by configl.cache always have a function value that causes the same code to execute as if the module was script injected.
			//
			// Both kinds of key-value pairs are entered into cache via the function consumePendingCache, which may relocate keys as given
			// by any mappings *iff* the config.cache was received as part of a module resource request.
			//
			// Further, for mid keys, the implied url is computed and the value is entered into that key as well. This allows mapped modules
			// to retrieve cached items that may have arrived consequent to another namespace.
			//
			 = {},

		urlKeyPrefix
			// the prefix to prepend to a URL key in the cache.
			= "url:",

		pendingCacheInsert
			// hash:(mid)-->(function)
			//
			// Gives a set of cache modules pending entry into cache. When cached modules are published to the loader, they are
			// entered into pendingCacheInsert; modules are then pressed into cache upon (1) AMD define or (2) upon receiving another
			// independent set of cached modules. (1) is the usual case, and this case allows normalizing mids given in the pending
			// cache for the local configuration, possibly relocating modules.
			 = {},

		dojoSniffConfig
			// map of configuration variables
			// give the data-dojo-config as sniffed from the document (if any)
			= {},

		insertPointSibling
			// the nodes used to locate where scripts are injected into the document
			= 0;

	if( 1 ){
		var consumePendingCacheInsert = function(referenceModule){
				var p, item, match, now, m;
				for(p in pendingCacheInsert){
					item = pendingCacheInsert[p];
					match = p.match(/^url\:(.+)/);
					if(match){
						cache[urlKeyPrefix + toUrl(match[1], referenceModule)] =  item;
					}else if(p=="*now"){
						now = item;
					}else if(p!="*noref"){
						m = getModuleInfo(p, referenceModule, true);
						cache[m.mid] = cache[urlKeyPrefix + m.url] = item;
					}
				}
				if(now){
					now(createRequire(referenceModule));
				}
				pendingCacheInsert = {};
			},

			escapeString = function(s){
				return s.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, function(c){ return "\\" + c; });
			},

			computeMapProg = function(map, dest){
				// This routine takes a map as represented by a JavaScript object and initializes dest, a vector of
				// quads of (map-key, map-value, refex-for-map-key, length-of-map-key), sorted decreasing by length-
				// of-map-key. The regex looks for the map-key followed by either "/" or end-of-string at the beginning
				// of a the search source. Notice the map-value is irrelevant to the algorithm
				dest.splice(0, dest.length);
				for(var p in map){
					dest.push([
						p,
						map[p],
						new RegExp("^" + escapeString(p) + "(\/|$)"),
						p.length]);
				}
				dest.sort(function(lhs, rhs){ return rhs[3] - lhs[3]; });
				return dest;
			},

			computeAliases = function(config, dest){
				forEach(config, function(pair){
					// take a fixed-up copy...
					dest.push([isString(pair[0]) ? new RegExp("^" + escapeString(pair[0]) + "$") : pair[0], pair[1]]);
				});
			},


			fixupPackageInfo = function(packageInfo){
				// calculate the precise (name, location, main, mappings) for a package
				var name = packageInfo.name;
				if(!name){
					// packageInfo must be a string that gives the name
					name = packageInfo;
					packageInfo = {name:name};
				}
				packageInfo = mix({main:"main"}, packageInfo);
				packageInfo.location = packageInfo.location ? packageInfo.location : name;

				// packageMap is deprecated in favor of AMD map
				if(packageInfo.packageMap){
					map[name] = packageInfo.packageMap;
				}

				if(!packageInfo.main.indexOf("./")){
					packageInfo.main = packageInfo.main.substring(2);
				}

				// now that we've got a fully-resolved package object, push it into the configuration
				packs[name] = packageInfo;
			},

			delayedModuleConfig
				// module config cannot be consumed until the loader is completely initialized; therefore, all
				// module config detected during booting is memorized and applied at the end of loader initialization
				// TODO: this is a bit of a kludge; all config should be moved to end of loader initialization, but
				// we'll delay this chore and do it with a final loader 1.x cleanup after the 2.x loader prototyping is complete
				= [],


			config = function(config, booting, referenceModule){
				for(var p in config){
					if(p=="waitSeconds"){
						req.waitms = (config[p] || 0) * 1000;
					}
					if(p=="cacheBust"){
						cacheBust = config[p] ? (isString(config[p]) ? config[p] : (new Date()).getTime() + "") : "";
					}
					if(p=="baseUrl" || p=="combo"){
						req[p] = config[p];
					}
					if( false  && p=="async"){
						// falsy or "sync" => legacy sync loader
						// "xd" => sync but loading xdomain tree and therefore loading asynchronously (not configurable, set automatically by the loader)
						// "legacyAsync" => permanently in "xd" by choice
						// "debugAtAllCosts" => trying to load everything via script injection (not implemented)
						// otherwise, must be truthy => AMD
						// legacyMode: sync | legacyAsync | xd | false
						var mode = config[p];
						req.legacyMode = legacyMode = (isString(mode) && /sync|legacyAsync/.test(mode) ? mode : (!mode ? sync : false));
						req.async = !legacyMode;
					}
					if(config[p]!==hasCache){
						// accumulate raw config info for client apps which can use this to pass their own config
						req.rawConfig[p] = config[p];
						p!="has" && has.add("config-"+p, config[p], 0, booting);
					}
				}

				// make sure baseUrl exists
				if(!req.baseUrl){
					req.baseUrl = "./";
				}
				// make sure baseUrl ends with a slash
				if(!/\/$/.test(req.baseUrl)){
					req.baseUrl += "/";
				}

				// now do the special work for has, packages, packagePaths, paths, aliases, and cache

				for(p in config.has){
					has.add(p, config.has[p], 0, booting);
				}

				// for each package found in any packages config item, augment the packs map owned by the loader
				forEach(config.packages, fixupPackageInfo);

				// for each packagePath found in any packagePaths config item, augment the packageConfig
				// packagePaths is deprecated; remove in 2.0
				for(var baseUrl in config.packagePaths){
					forEach(config.packagePaths[baseUrl], function(packageInfo){
						var location = baseUrl + "/" + packageInfo;
						if(isString(packageInfo)){
							packageInfo = {name:packageInfo};
						}
						packageInfo.location = location;
						fixupPackageInfo(packageInfo);
					});
				}

				// notice that computeMapProg treats the dest as a reference; therefore, if/when that variable
				// is published (see dojo-publish-privates), the published variable will always hold a valid value.

				// this must come after all package processing since package processing may mutate map
				computeMapProg(mix(map, config.map), mapProgs);
				forEach(mapProgs, function(item){
					item[1] = computeMapProg(item[1], []);
					if(item[0]=="*"){
						mapProgs.star = item;
					}
				});

				// push in any paths and recompute the internal pathmap
				computeMapProg(mix(paths, config.paths), pathsMapProg);

				// aliases
				computeAliases(config.aliases, aliases);

				if(booting){
					delayedModuleConfig.push({config:config.config});
				}else{
					for(p in config.config){
						var module = getModule(p, referenceModule);
						module.config = mix(module.config || {}, config.config[p]);
					}
				}

				// push in any new cache values
				if(config.cache){
					consumePendingCacheInsert();
					pendingCacheInsert = config.cache;
					if(config.cache["*noref"]){
						consumePendingCacheInsert();
					}
				}

				signal("config", [config, req.rawConfig]);
			};

		//
		// execute the various sniffs; userConfig can override and value
		//

		if(has("dojo-cdn") ||  1 ){
			// the sniff regex looks for a src attribute ending in dojo.js, optionally preceded with a path.
			// match[3] returns the path to dojo.js (if any) without the trailing slash. This is used for the
			// dojo location on CDN deployments and baseUrl when either/both of these are not provided
			// explicitly in the config data; this is the 1.6- behavior.

			var scripts = doc.getElementsByTagName("script"),
				i = 0,
				script, dojoDir, src, match;
			while(i < scripts.length){
				script = scripts[i++];
				if((src = script.getAttribute("src")) && (match = src.match(/(((.*)\/)|^)dojo\.js(\W|$)/i))){
					// sniff dojoDir and baseUrl
					dojoDir = match[3] || "";
					defaultConfig.baseUrl = defaultConfig.baseUrl || dojoDir;

					// remember an insertPointSibling
					insertPointSibling = script;
				}

				// sniff configuration on attribute in script element
				if((src = (script.getAttribute("data-dojo-config") || script.getAttribute("djConfig")))){
					dojoSniffConfig = req.eval("({ " + src + " })", "data-dojo-config");

					// remember an insertPointSibling
					insertPointSibling = script;
				}

				// sniff requirejs attribute
				if( 0 ){
					if((src = script.getAttribute("data-main"))){
						dojoSniffConfig.deps = dojoSniffConfig.deps || [src];
					}
				}
			}
		}

		if( false ){
			// pass down doh.testConfig from parent as if it were a data-dojo-config
			try{
				if(window.parent != window && window.parent.require){
					var doh = window.parent.require("doh");
					doh && mix(dojoSniffConfig, doh.testConfig);
				}
			}catch(e){}
		}

		// configure the loader; let the user override defaults
		req.rawConfig = {};
		config(defaultConfig, 1);

		// do this before setting userConfig/sniffConfig to allow userConfig/sniff overrides
		if(has("dojo-cdn")){
			packs.dojo.location = dojoDir;
			if(dojoDir){
				dojoDir += "/";
			}
			packs.dijit.location = dojoDir + "../dijit/";
			packs.dojox.location = dojoDir + "../dojox/";
		}

		config(userConfig, 1);
		config(dojoSniffConfig, 1);

	}else{
		// no config API, assume defaultConfig has everything the loader needs...for the entire lifetime of the application
		paths = defaultConfig.paths;
		pathsMapProg = defaultConfig.pathsMapProg;
		packs = defaultConfig.packs;
		aliases = defaultConfig.aliases;
		mapProgs = defaultConfig.mapProgs;
		modules = defaultConfig.modules;
		cache = defaultConfig.cache;
		cacheBust = defaultConfig.cacheBust;

		// remember the default config for other processes (e.g., dojo/config)
		req.rawConfig = defaultConfig;
	}


	if( 0 ){
		req.combo = req.combo || {add:noop};
		var	comboPending = 0,
			combosPending = [],
			comboPendingTimer = null;
	}


	// build the loader machinery iaw configuration, including has feature tests
	var	injectDependencies = function(module){
			// checkComplete!=0 holds the idle signal; we're not idle if we're injecting dependencies
			guardCheckComplete(function(){
				forEach(module.deps, injectModule);
				if( 0  && comboPending && !comboPendingTimer){
					comboPendingTimer = setTimeout(function() {
						comboPending = 0;
						comboPendingTimer = null;
						req.combo.done(function(mids, url) {
							var onLoadCallback= function(){
								// defQ is a vector of module definitions 1-to-1, onto mids
								runDefQ(0, mids);
								checkComplete();
							};
							combosPending.push(mids);
							injectingModule = mids;
							req.injectUrl(url, onLoadCallback, mids);
							injectingModule = 0;
						}, req);
					}, 0);
				}
			});
		},

		contextRequire = function(a1, a2, a3, referenceModule, contextRequire){
			var module, syntheticMid;
			if(isString(a1)){
				// signature is (moduleId)
				module = getModule(a1, referenceModule, true);
				if(module && module.executed){
					return module.result;
				}
				throw makeError("undefinedModule", a1);
			}
			if(!isArray(a1)){
				// a1 is a configuration
				config(a1, 0, referenceModule);

				// juggle args; (a2, a3) may be (dependencies, callback)
				a1 = a2;
				a2 = a3;
			}
			if(isArray(a1)){
				// signature is (requestList [,callback])
				if(!a1.length){
					a2 && a2();
				}else{
					syntheticMid = "require*" + uid();

					// resolve the request list with respect to the reference module
					for(var mid, deps = [], i = 0; i < a1.length;){
						mid = a1[i++];
						deps.push(getModule(mid, referenceModule));
					}

					// construct a synthetic module to control execution of the requestList, and, optionally, callback
					module = mix(makeModuleInfo("", syntheticMid, 0, ""), {
						injected: arrived,
						deps: deps,
						def: a2 || noop,
						require: referenceModule ? referenceModule.require : req,
						gc: 1 //garbage collect
					});
					modules[module.mid] = module;

					// checkComplete!=0 holds the idle signal; we're not idle if we're injecting dependencies
					injectDependencies(module);

					// try to immediately execute
					// if already traversing a factory tree, then strict causes circular dependency to abort the execution; maybe
					// it's possible to execute this require later after the current traversal completes and avoid the circular dependency.
					// ...but *always* insist on immediate in synch mode
					var strict = checkCompleteGuard && legacyMode!=sync;
					guardCheckComplete(function(){
						execModule(module, strict);
					});
					if(!module.executed){
						// some deps weren't on board or circular dependency detected and strict; therefore, push into the execQ
						execQ.push(module);
					}
					checkComplete();
				}
			}
			return contextRequire;
		},

		createRequire = function(module){
			if(!module){
				return req;
			}
			var result = module.require;
			if(!result){
				result = function(a1, a2, a3){
					return contextRequire(a1, a2, a3, module, result);
				};
				module.require = mix(result, req);
				result.module = module;
				result.toUrl = function(name){
					return toUrl(name, module);
				};
				result.toAbsMid = function(mid){
					return toAbsMid(mid, module);
				};
				if( 0 ){
					result.undef = function(mid){
						req.undef(mid, module);
					};
				}
				if( false ){
					result.syncLoadNls = function(mid){
						var nlsModuleInfo = getModuleInfo(mid, module),
							nlsModule = modules[nlsModuleInfo.mid];
						if(!nlsModule || !nlsModule.executed){
							cached = cache[nlsModuleInfo.mid] || cache[urlKeyPrefix + nlsModuleInfo.url];
							if(cached){
								evalModuleText(cached);
								nlsModule = modules[nlsModuleInfo.mid];
							}
						}
						return nlsModule && nlsModule.executed && nlsModule.result;
					};
				}

			}
			return result;
		},

		execQ =
			// The list of modules that need to be evaluated.
			[],

		defQ =
			// The queue of define arguments sent to loader.
			[],

		waiting =
			// The set of modules upon which the loader is waiting for definition to arrive
			{},

		setRequested = function(module){
			module.injected = requested;
			waiting[module.mid] = 1;
			if(module.url){
				waiting[module.url] = module.pack || 1;
			}
			startTimer();
		},

		setArrived = function(module){
			module.injected = arrived;
			delete waiting[module.mid];
			if(module.url){
				delete waiting[module.url];
			}
			if(isEmpty(waiting)){
				clearTimer();
				 false  && legacyMode==xd && (legacyMode = sync);
			}
		},

		execComplete = req.idle =
			// says the loader has completed (or not) its work
			function(){
				return !defQ.length && isEmpty(waiting) && !execQ.length && !checkCompleteGuard;
			},

		runMapProg = function(targetMid, map){
			// search for targetMid in map; return the map item if found; falsy otherwise
			if(map){
			for(var i = 0; i < map.length; i++){
				if(map[i][2].test(targetMid)){
					return map[i];
				}
			}
			}
			return 0;
		},

		compactPath = function(path){
			var result = [],
				segment, lastSegment;
			path = path.replace(/\\/g, '/').split('/');
			while(path.length){
				segment = path.shift();
				if(segment==".." && result.length && lastSegment!=".."){
					result.pop();
					lastSegment = result[result.length - 1];
				}else if(segment!="."){
					result.push(lastSegment= segment);
				} // else ignore "."
			}
			return result.join("/");
		},

		makeModuleInfo = function(pid, mid, pack, url){
			if( false ){
				var xd= req.isXdUrl(url);
				return {pid:pid, mid:mid, pack:pack, url:url, executed:0, def:0, isXd:xd, isAmd:!!(xd || (packs[pid] && packs[pid].isAmd))};
			}else{
				return {pid:pid, mid:mid, pack:pack, url:url, executed:0, def:0};
			}
		},

		getModuleInfo_ = function(mid, referenceModule, packs, modules, baseUrl, mapProgs, pathsMapProg, aliases, alwaysCreate){
			// arguments are passed instead of using lexical variables so that this function my be used independent of the loader (e.g., the builder)
			// alwaysCreate is useful in this case so that getModuleInfo never returns references to real modules owned by the loader
			var pid, pack, midInPackage, mapItem, url, result, isRelative, requestedMid;
			requestedMid = mid;
			isRelative = /^\./.test(mid);
			if(/(^\/)|(\:)|(\.js$)/.test(mid) || (isRelative && !referenceModule)){
				// absolute path or protocol of .js filetype, or relative path but no reference module and therefore relative to page
				// whatever it is, it's not a module but just a URL of some sort
				// note: pid===0 indicates the routine is returning an unmodified mid

				return makeModuleInfo(0, mid, 0, mid);
			}else{
				// relative module ids are relative to the referenceModule; get rid of any dots
				mid = compactPath(isRelative ? (referenceModule.mid + "/../" + mid) : mid);
				if(/^\./.test(mid)){
					throw makeError("irrationalPath", mid);
				}
				// at this point, mid is an absolute mid

				// map the mid
				if(referenceModule){
					mapItem = runMapProg(referenceModule.mid, mapProgs);
				}
				mapItem = mapItem || mapProgs.star;
				mapItem = mapItem && runMapProg(mid, mapItem[1]);

				if(mapItem){
					mid = mapItem[1] + mid.substring(mapItem[3]);
					}

				match = mid.match(/^([^\/]+)(\/(.+))?$/);
				pid = match ? match[1] : "";
				if((pack = packs[pid])){
					mid = pid + "/" + (midInPackage = (match[3] || pack.main));
				}else{
					pid = "";
				}

				// search aliases
				var candidateLength = 0,
					candidate = 0;
				forEach(aliases, function(pair){
					var match = mid.match(pair[0]);
					if(match && match.length>candidateLength){
						candidate = isFunction(pair[1]) ? mid.replace(pair[0], pair[1]) : pair[1];
					}
				});
				if(candidate){
					return getModuleInfo_(candidate, 0, packs, modules, baseUrl, mapProgs, pathsMapProg, aliases, alwaysCreate);
				}

				result = modules[mid];
				if(result){
					return alwaysCreate ? makeModuleInfo(result.pid, result.mid, result.pack, result.url) : modules[mid];
				}
			}
			// get here iff the sought-after module does not yet exist; therefore, we need to compute the URL given the
			// fully resolved (i.e., all relative indicators and package mapping resolved) module id

			// note: pid!==0 indicates the routine is returning a url that has .js appended unmodified mid
			mapItem = runMapProg(mid, pathsMapProg);
			if(mapItem){
				url = mapItem[1] + mid.substring(mapItem[3]);
			}else if(pid){
				url = pack.location + "/" + midInPackage;
			}else if(has("config-tlmSiblingOfDojo")){
				url = "../" + mid;
			}else{
				url = mid;
			}
			// if result is not absolute, add baseUrl
			if(!(/(^\/)|(\:)/.test(url))){
				url = baseUrl + url;
			}
			url += ".js";
			return makeModuleInfo(pid, mid, pack, compactPath(url));
		},

		getModuleInfo = function(mid, referenceModule, fromPendingCache){
			return getModuleInfo_(mid, referenceModule, packs, modules, req.baseUrl, fromPendingCache ? [] : mapProgs, fromPendingCache ? [] : pathsMapProg, fromPendingCache ? [] : aliases);
		},

		resolvePluginResourceId = function(plugin, prid, referenceModule){
			return plugin.normalize ? plugin.normalize(prid, function(mid){return toAbsMid(mid, referenceModule);}) : toAbsMid(prid, referenceModule);
		},

		dynamicPluginUidGenerator = 0,

		getModule = function(mid, referenceModule, immediate){
			// compute and optionally construct (if necessary) the module implied by the mid with respect to referenceModule
			var match, plugin, prid, result;
			match = mid.match(/^(.+?)\!(.*)$/);
			if(match){
				// name was <plugin-module>!<plugin-resource-id>
				plugin = getModule(match[1], referenceModule, immediate);

				if( false  && legacyMode == sync && !plugin.executed){
					injectModule(plugin);
					if(plugin.injected===arrived && !plugin.executed){
						guardCheckComplete(function(){
							execModule(plugin);
						});
					}
					if(plugin.executed){
						promoteModuleToPlugin(plugin);
					}else{
						// we are in xdomain mode for some reason
						execQ.unshift(plugin);
					}
				}



				if(plugin.executed === executed && !plugin.load){
					// executed the module not knowing it was a plugin
					promoteModuleToPlugin(plugin);
				}

				// if the plugin has not been loaded, then can't resolve the prid and  must assume this plugin is dynamic until we find out otherwise
				if(plugin.load){
					prid = resolvePluginResourceId(plugin, match[2], referenceModule);
					mid = (plugin.mid + "!" + (plugin.dynamic ? ++dynamicPluginUidGenerator + "!" : "") + prid);
				}else{
					prid = match[2];
					mid = plugin.mid + "!" + (++dynamicPluginUidGenerator) + "!waitingForPlugin";
				}
				result = {plugin:plugin, mid:mid, req:createRequire(referenceModule), prid:prid};
			}else{
				result = getModuleInfo(mid, referenceModule);
			}
			return modules[result.mid] || (!immediate && (modules[result.mid] = result));
		},

		toAbsMid = req.toAbsMid = function(mid, referenceModule){
			return getModuleInfo(mid, referenceModule).mid;
		},

		toUrl = req.toUrl = function(name, referenceModule){
			var moduleInfo = getModuleInfo(name+"/x", referenceModule),
				url= moduleInfo.url;
			return fixupUrl(moduleInfo.pid===0 ?
				// if pid===0, then name had a protocol or absolute path; either way, toUrl is the identify function in such cases
				name :
				// "/x.js" since getModuleInfo automatically appends ".js" and we appended "/x" to make name look like a module id
				url.substring(0, url.length-5)
			);
		},

		nonModuleProps = {
			injected: arrived,
			executed: executed,
			def: nonmodule,
			result: nonmodule
		},

		makeCjs = function(mid){
			return modules[mid] = mix({mid:mid}, nonModuleProps);
		},

		cjsRequireModule = makeCjs("require"),
		cjsExportsModule = makeCjs("exports"),
		cjsModuleModule = makeCjs("module"),

		runFactory = function(module, args){
			req.trace("loader-run-factory", [module.mid]);
			var factory = module.def,
				result;
			 false  && syncExecStack.unshift(module);
			if(has("config-dojo-loader-catches")){
				try{
					result= isFunction(factory) ? factory.apply(null, args) : factory;
				}catch(e){
					signal(error, module.result = makeError("factoryThrew", [module, e]));
				}
			}else{
				result= isFunction(factory) ? factory.apply(null, args) : factory;
			}
			module.result = result===undefined && module.cjs ? module.cjs.exports : result;
			 false  && syncExecStack.shift(module);
		},

		abortExec = {},

		defOrder = 0,

		promoteModuleToPlugin = function(pluginModule){
			var plugin = pluginModule.result;
			pluginModule.dynamic = plugin.dynamic;
			pluginModule.normalize = plugin.normalize;
			pluginModule.load = plugin.load;
			return pluginModule;
		},

		resolvePluginLoadQ = function(plugin){
			// plugins is a newly executed module that has a loadQ waiting to run

			// step 1: traverse the loadQ and fixup the mid and prid; remember the map from original mid to new mid
			// recall the original mid was created before the plugin was on board and therefore it was impossible to
			// compute the final mid; accordingly, prid may or may not change, but the mid will definitely change
			var map = {};
			forEach(plugin.loadQ, function(pseudoPluginResource){
				// manufacture and insert the real module in modules
				var prid = resolvePluginResourceId(plugin, pseudoPluginResource.prid, pseudoPluginResource.req.module),
					mid = plugin.dynamic ? pseudoPluginResource.mid.replace(/waitingForPlugin$/, prid) : (plugin.mid + "!" + prid),
					pluginResource = mix(mix({}, pseudoPluginResource), {mid:mid, prid:prid, injected:0});
				if(!modules[mid]){
					// create a new (the real) plugin resource and inject it normally now that the plugin is on board
					injectPlugin(modules[mid] = pluginResource);
				} // else this was a duplicate request for the same (plugin, rid) for a nondynamic plugin

				// pluginResource is really just a placeholder with the wrong mid (because we couldn't calculate it until the plugin was on board)
				// mark is as arrived and delete it from modules; the real module was requested above
				map[pseudoPluginResource.mid] = modules[mid];
				setArrived(pseudoPluginResource);
				delete modules[pseudoPluginResource.mid];
			});
			plugin.loadQ = 0;

			// step2: replace all references to any placeholder modules with real modules
			var substituteModules = function(module){
				for(var replacement, deps = module.deps || [], i = 0; i<deps.length; i++){
					replacement = map[deps[i].mid];
					if(replacement){
						deps[i] = replacement;
					}
				}
			};
			for(var p in modules){
				substituteModules(modules[p]);
			}
			forEach(execQ, substituteModules);
		},

		finishExec = function(module){
			req.trace("loader-finish-exec", [module.mid]);
			module.executed = executed;
			module.defOrder = defOrder++;
			 false  && forEach(module.provides, function(cb){ cb(); });
			if(module.loadQ){
				// the module was a plugin
				promoteModuleToPlugin(module);
				resolvePluginLoadQ(module);
			}
			// remove all occurrences of this module from the execQ
			for(i = 0; i < execQ.length;){
				if(execQ[i] === module){
					execQ.splice(i, 1);
				}else{
					i++;
				}
			}
			// delete references to synthetic modules
			if (/^require\*/.test(module.mid)) {
				delete modules[module.mid];
			}
		},

		circleTrace = [],

		execModule = function(module, strict){
			// run the dependency vector, then run the factory for module
			if(module.executed === executing){
				req.trace("loader-circular-dependency", [circleTrace.concat(module.mid).join("->")]);
				return (!module.def || strict) ? abortExec :  (module.cjs && module.cjs.exports);
			}
			// at this point the module is either not executed or fully executed


			if(!module.executed){
				if(!module.def){
					return abortExec;
				}
				var mid = module.mid,
					deps = module.deps || [],
					arg, argResult,
					args = [],
					i = 0;

				if( false ){
					circleTrace.push(mid);
					req.trace("loader-exec-module", ["exec", circleTrace.length, mid]);
				}

				// for circular dependencies, assume the first module encountered was executed OK
				// modules that circularly depend on a module that has not run its factory will get
				// the pre-made cjs.exports===module.result. They can take a reference to this object and/or
				// add properties to it. When the module finally runs its factory, the factory can
				// read/write/replace this object. Notice that so long as the object isn't replaced, any
				// reference taken earlier while walking the deps list is still valid.
				module.executed = executing;
				while((arg = deps[i++])){
					argResult = ((arg === cjsRequireModule) ? createRequire(module) :
									((arg === cjsExportsModule) ? module.cjs.exports :
										((arg === cjsModuleModule) ? module.cjs :
											execModule(arg, strict))));
					if(argResult === abortExec){
						module.executed = 0;
						req.trace("loader-exec-module", ["abort", mid]);
						 false  && circleTrace.pop();
						return abortExec;
					}
					args.push(argResult);
				}
				runFactory(module, args);
				finishExec(module);
				 false  && circleTrace.pop();
			}
			// at this point the module is guaranteed fully executed

			return module.result;
		},


		checkCompleteGuard = 0,

		guardCheckComplete = function(proc){
			try{
				checkCompleteGuard++;
				proc();
			}finally{
				checkCompleteGuard--;
			}
			if(execComplete()){
				signal("idle", []);
			}
		},

		checkComplete = function(){
			// keep going through the execQ as long as at least one factory is executed
			// plugins, recursion, cached modules all make for many execution path possibilities
			if(checkCompleteGuard){
				return;
			}
			guardCheckComplete(function(){
				checkDojoRequirePlugin();
				for(var currentDefOrder, module, i = 0; i < execQ.length;){
					currentDefOrder = defOrder;
					module = execQ[i];
					execModule(module);
					if(currentDefOrder!=defOrder){
						// defOrder was bumped one or more times indicating something was executed (note, this indicates
						// the execQ was modified, maybe a lot (for example a later module causes an earlier module to execute)
						checkDojoRequirePlugin();
						i = 0;
					}else{
						// nothing happened; check the next module in the exec queue
						i++;
					}
				}
			});
		};


	if( 0 ){
		req.undef = function(moduleId, referenceModule){
			// In order to reload a module, it must be undefined (this routine) and then re-requested.
			// This is useful for testing frameworks (at least).
			var module = getModule(moduleId, referenceModule);
			setArrived(module);
			mix(module, {def:0, executed:0, injected:0, node:0});
		};
	}

	if( 1 ){
		if(has("dojo-loader-eval-hint-url")===undefined){
			has.add("dojo-loader-eval-hint-url", 1);
		}

		var fixupUrl= typeof userConfig.fixupUrl == "function" ? userConfig.fixupUrl : function(url){
				url += ""; // make sure url is a Javascript string (some paths may be a Java string)
				return url + (cacheBust ? ((/\?/.test(url) ? "&" : "?") + cacheBust) : "");
			},

			injectPlugin = function(
				module
			){
				// injects the plugin module given by module; may have to inject the plugin itself
				var plugin = module.plugin;

				if(plugin.executed === executed && !plugin.load){
					// executed the module not knowing it was a plugin
					promoteModuleToPlugin(plugin);
				}

				var onLoad = function(def){
						module.result = def;
						setArrived(module);
						finishExec(module);
						checkComplete();
					};

				if(plugin.load){
					plugin.load(module.prid, module.req, onLoad);
				}else if(plugin.loadQ){
					plugin.loadQ.push(module);
				}else{
					// the unshift instead of push is important: we don't want plugins to execute as
					// dependencies of some other module because this may cause circles when the plugin
					// loadQ is run; also, generally, we want plugins to run early since they may load
					// several other modules and therefore can potentially unblock many modules
					plugin.loadQ = [module];
					execQ.unshift(plugin);
					injectModule(plugin);
				}
			},

			// for IE, injecting a module may result in a recursive execution if the module is in the cache

			cached = 0,

			injectingModule = 0,

			injectingCachedModule = 0,

			evalModuleText = function(text, module){
				// see def() for the injectingCachedModule bracket; it simply causes a short, safe circuit
				if(has("config-stripStrict")){
					text = text.replace(/"use strict"/g, '');
				}
				injectingCachedModule = 1;
				if(has("config-dojo-loader-catches")){
					try{
						if(text===cached){
							cached.call(null);
						}else{
							req.eval(text, has("dojo-loader-eval-hint-url") ? module.url : module.mid);
						}
					}catch(e){
						signal(error, makeError("evalModuleThrew", module));
					}
				}else{
					if(text===cached){
						cached.call(null);
					}else{
						req.eval(text, has("dojo-loader-eval-hint-url") ? module.url : module.mid);
					}
				}
				injectingCachedModule = 0;
			},

			injectModule = function(module){
				// Inject the module. In the browser environment, this means appending a script element into
				// the document; in other environments, it means loading a file.
				//
				// If in synchronous mode, then get the module synchronously if it's not xdomainLoading.

				var mid = module.mid,
					url = module.url;
				if(module.executed || module.injected || waiting[mid] || (module.url && ((module.pack && waiting[module.url]===module.pack) || waiting[module.url]==1))){
					return;
				}
				setRequested(module);

				if( 0 ){
					var viaCombo = 0;
					if(module.plugin && module.plugin.isCombo){
						// a combo plugin; therefore, must be handled by combo service
						// the prid should have already been converted to a URL (if required by the plugin) during
						// the normalize process; in any event, there is no way for the loader to know how to
						// to the conversion; therefore the third argument is zero
						req.combo.add(module.plugin.mid, module.prid, 0, req);
						viaCombo = 1;
					}else if(!module.plugin){
						viaCombo = req.combo.add(0, module.mid, module.url, req);
					}
					if(viaCombo){
						comboPending= 1;
						return;
					}
				}

				if(module.plugin){
					injectPlugin(module);
					return;
				} // else a normal module (not a plugin)


				var onLoadCallback = function(){
					runDefQ(module);
					if(module.injected !== arrived){
						// the script that contained the module arrived and has been executed yet
						// nothing was added to the defQ (so it wasn't an AMD module) and the module
						// wasn't marked as arrived by dojo.provide (so it wasn't a v1.6- module);
						// therefore, it must not have been a module; adjust state accordingly
						if(has("dojo-enforceDefine")){
							signal(error, makeError("noDefine", module));
							return;
						}
						setArrived(module);
						mix(module, nonModuleProps);
						req.trace("loader-define-nonmodule", [module.url]);
					}

					if( false  && legacyMode){
						// must call checkComplete even in for sync loader because we may be in xdomainLoading mode;
						// but, if xd loading, then don't call checkComplete until out of the current sync traversal
						// in order to preserve order of execution of the dojo.required modules
						!syncExecStack.length && checkComplete();
					}else{
						checkComplete();
					}
				};
				cached = cache[mid] || cache[urlKeyPrefix + module.url];
				if(cached){
					req.trace("loader-inject", ["cache", module.mid, url]);
					evalModuleText(cached, module);
					onLoadCallback();
					return;
				}
				if( false  && legacyMode){
					if(module.isXd){
						// switch to async mode temporarily; if current legacyMode!=sync, then is must be one of {legacyAsync, xd, false}
						legacyMode==sync && (legacyMode = xd);
						// fall through and load via script injection
					}else if(module.isAmd && legacyMode!=sync){
						// fall through and load via script injection
					}else{
						// mode may be sync, xd/legacyAsync, or async; module may be AMD or legacy; but module is always located on the same domain
						var xhrCallback = function(text){
							if(legacyMode==sync){
								// the top of syncExecStack gives the current synchronously executing module; the loader needs
								// to know this if it has to switch to async loading in the middle of evaluating a legacy module
								// this happens when a modules dojo.require's a module that must be loaded async because it's xdomain
								// (using unshift/shift because there is no back() methods for Javascript arrays)
								syncExecStack.unshift(module);
								evalModuleText(text, module);
								syncExecStack.shift();

								// maybe the module was an AMD module
								runDefQ(module);

								// legacy modules never get to defineModule() => cjs and injected never set; also evaluation implies executing
								if(!module.cjs){
									setArrived(module);
									finishExec(module);
								}

								if(module.finish){
									// while synchronously evaluating this module, dojo.require was applied referencing a module
									// that had to be loaded async; therefore, the loader stopped answering all dojo.require
									// requests so they could be answered completely in the correct sequence; module.finish gives
									// the list of dojo.requires that must be re-applied once all target modules are available;
									// make a synthetic module to execute the dojo.require's in the correct order

									// compute a guaranteed-unique mid for the synthetic finish module; remember the finish vector; remove it from the reference module
									// TODO: can we just leave the module.finish...what's it hurting?
									var finishMid = mid + "*finish",
										finish = module.finish;
									delete module.finish;

									def(finishMid, ["dojo", ("dojo/require!" + finish.join(",")).replace(/\./g, "/")], function(dojo){
										forEach(finish, function(mid){ dojo.require(mid); });
									});
									// unshift, not push, which causes the current traversal to be reattempted from the top
									execQ.unshift(getModule(finishMid));
								}
								onLoadCallback();
							}else{
								text = transformToAmd(module, text);
								if(text){
									evalModuleText(text, module);
									onLoadCallback();
								}else{
									// if transformToAmd returned falsy, then the module was already AMD and it can be script-injected
									// do so to improve debugability(even though it means another download...which probably won't happen with a good browser cache)
									injectingModule = module;
									req.injectUrl(fixupUrl(url), onLoadCallback, module);
									injectingModule = 0;
								}
							}
						};

						req.trace("loader-inject", ["xhr", module.mid, url, legacyMode!=sync]);
						if(has("config-dojo-loader-catches")){
							try{
								req.getText(url, legacyMode!=sync, xhrCallback);
							}catch(e){
								signal(error, makeError("xhrInjectFailed", [module, e]));
							}
						}else{
							req.getText(url, legacyMode!=sync, xhrCallback);
						}
						return;
					}
				} // else async mode or fell through in xdomain loading mode; either way, load by script injection
				req.trace("loader-inject", ["script", module.mid, url]);
				injectingModule = module;
				req.injectUrl(fixupUrl(url), onLoadCallback, module);
				injectingModule = 0;
			},

			defineModule = function(module, deps, def){
				req.trace("loader-define-module", [module.mid, deps]);

				if( 0  && module.plugin && module.plugin.isCombo){
					// the module is a plugin resource loaded by the combo service
					// note: check for module.plugin should be enough since normal plugin resources should
					// not follow this path; module.plugin.isCombo is future-proofing belt and suspenders
					module.result = isFunction(def) ? def() : def;
					setArrived(module);
					finishExec(module);
					return module;
				}

				var mid = module.mid;
				if(module.injected === arrived){
					signal(error, makeError("multipleDefine", module));
					return module;
				}
				mix(module, {
					deps: deps,
					def: def,
					cjs: {
						id: module.mid,
						uri: module.url,
						exports: (module.result = {}),
						setExports: function(exports){
							module.cjs.exports = exports;
						},
						config:function(){
							return module.config;
						}
					}
				});

				// resolve deps with respect to this module
				for(var i = 0; deps[i]; i++){
					deps[i] = getModule(deps[i], module);
				}

				if( false  && legacyMode && !waiting[mid]){
					// the module showed up without being asked for; it was probably in a <script> element
					injectDependencies(module);
					execQ.push(module);
					checkComplete();
				}
				setArrived(module);

				if(!isFunction(def) && !deps.length){
					module.result = def;
					finishExec(module);
				}

				return module;
			},

			runDefQ = function(referenceModule, mids){
				// defQ is an array of [id, dependencies, factory]
				// mids (if any) is a vector of mids given by a combo service
				var definedModules = [],
					module, args;
				while(defQ.length){
					args = defQ.shift();
					mids && (args[0]= mids.shift());
					// explicit define indicates possible multiple modules in a single file; delay injecting dependencies until defQ fully
					// processed since modules earlier in the queue depend on already-arrived modules that are later in the queue
					// TODO: what if no args[0] and no referenceModule
					module = (args[0] && getModule(args[0])) || referenceModule;
					definedModules.push([module, args[1], args[2]]);
				}
				consumePendingCacheInsert(referenceModule);
				forEach(definedModules, function(args){
					injectDependencies(defineModule.apply(null, args));
				});
			};
	}

	var timerId = 0,
		clearTimer = noop,
		startTimer = noop;
	if( 1 ){
		// Timer machinery that monitors how long the loader is waiting and signals an error when the timer runs out.
		clearTimer = function(){
			timerId && clearTimeout(timerId);
			timerId = 0;
		};

		startTimer = function(){
			clearTimer();
			if(req.waitms){
				timerId = global.setTimeout(function(){
					clearTimer();
					signal(error, makeError("timeout", waiting));
				}, req.waitms);
			}
		};
	}

	if ( 1 ) {
		// Test for IE's different way of signaling when scripts finish loading.  Note that according to
		// http://bugs.dojotoolkit.org/ticket/15096#comment:14, IE9 also needs to follow the
		// IE specific code path even though it has an addEventListener() method.
		// Unknown if special path needed on IE10+, which also has a document.attachEvent() method.
		// Should evaluate to false for Opera and Windows 8 apps, even though they document.attachEvent()
		//  is defined in both those environments.
		has.add("ie-event-behavior", doc.attachEvent && typeof Windows === "undefined" &&
			(typeof opera === "undefined" || opera.toString() != "[object Opera]"));
	}

	if( 1  && ( 1  ||  1 )){
		var domOn = function(node, eventName, ieEventName, handler){
				// Add an event listener to a DOM node using the API appropriate for the current browser;
				// return a function that will disconnect the listener.
				if(!has("ie-event-behavior")){
					node.addEventListener(eventName, handler, false);
					return function(){
						node.removeEventListener(eventName, handler, false);
					};
				}else{
					node.attachEvent(ieEventName, handler);
					return function(){
						node.detachEvent(ieEventName, handler);
					};
				}
			},
			windowOnLoadListener = domOn(window, "load", "onload", function(){
				req.pageLoaded = 1;
				doc.readyState!="complete" && (doc.readyState = "complete");
				windowOnLoadListener();
			});

		if( 1 ){
			// if the loader is on the page, there must be at least one script element
			// getting its parent and then doing insertBefore solves the "Operation Aborted"
			// error in IE from appending to a node that isn't properly closed; see
			// dojo/tests/_base/loader/requirejs/simple-badbase.html for an example
			// don't use scripts with type dojo/... since these may be removed; see #15809
			// prefer to use the insertPoint computed during the config sniff in case a script is removed; see #16958
			var scripts = doc.getElementsByTagName("script"),
				i = 0,
				script;
			while(!insertPointSibling){
				if(!/^dojo/.test((script = scripts[i++]) && script.type)){
					insertPointSibling= script;
				}
			}

			req.injectUrl = function(url, callback, owner){
				// insert a script element to the insert-point element with src=url;
				// apply callback upon detecting the script has loaded.

				var node = owner.node = doc.createElement("script"),
					onLoad = function(e){
						e = e || window.event;
						var node = e.target || e.srcElement;
						if(e.type === "load" || /complete|loaded/.test(node.readyState)){
							loadDisconnector();
							errorDisconnector();
							callback && callback();
						}
					},
					loadDisconnector = domOn(node, "load", "onreadystatechange", onLoad),
					errorDisconnector = domOn(node, "error", "onerror", function(e){
						loadDisconnector();
						errorDisconnector();
						signal(error, makeError("scriptError", [url, e]));
					});

				node.type = "text/javascript";
				node.charset = "utf-8";
				node.src = url;
				insertPointSibling.parentNode.insertBefore(node, insertPointSibling);
				return node;
			};
		}
	}

	if( false ){
		req.log = function(){
			try{
				for(var i = 0; i < arguments.length; i++){
					console.log(arguments[i]);
				}
			}catch(e){}
		};
	}else{
		req.log = noop;
	}

	if( false ){
		var trace = req.trace = function(
			group,	// the trace group to which this application belongs
			args	// the contents of the trace
		){
			///
			// Tracing interface by group.
			//
			// Sends the contents of args to the console iff (req.trace.on && req.trace[group])

			if(trace.on && trace.group[group]){
				signal("trace", [group, args]);
				for(var arg, dump = [], text= "trace:" + group + (args.length ? (":" + args[0]) : ""), i= 1; i<args.length;){
					arg = args[i++];
					if(isString(arg)){
						text += ", " + arg;
					}else{
						dump.push(arg);
					}
				}
				req.log(text);
				dump.length && dump.push(".");
				req.log.apply(req, dump);
			}
		};
		mix(trace, {
			on:1,
			group:{},
			set:function(group, value){
				if(isString(group)){
					trace.group[group]= value;
				}else{
					mix(trace.group, group);
				}
			}
		});
		trace.set(mix(mix(mix({}, defaultConfig.trace), userConfig.trace), dojoSniffConfig.trace));
		on("config", function(config){
			config.trace && trace.set(config.trace);
		});
	}else{
		req.trace = noop;
	}

	var def = function(
		mid,		  //(commonjs.moduleId, optional)
		dependencies, //(array of commonjs.moduleId, optional) list of modules to be loaded before running factory
		factory		  //(any)
	){
		///
		// Advises the loader of a module factory. //Implements http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition.
		///
		//note
		// CommonJS factory scan courtesy of http://requirejs.org

		var arity = arguments.length,
			defaultDeps = ["require", "exports", "module"],
			// the predominate signature...
			args = [0, mid, dependencies];
		if(arity==1){
			args = [0, (isFunction(mid) ? defaultDeps : []), mid];
		}else if(arity==2 && isString(mid)){
			args = [mid, (isFunction(dependencies) ? defaultDeps : []), dependencies];
		}else if(arity==3){
			args = [mid, dependencies, factory];
		}

		if( 0  && args[1]===defaultDeps){
			args[2].toString()
				.replace(/(\/\*([\s\S]*?)\*\/|\/\/(.*)$)/mg, "")
				.replace(/require\(["']([\w\!\-_\.\/]+)["']\)/g, function(match, dep){
				args[1].push(dep);
			});
		}

		req.trace("loader-define", args.slice(0, 2));
		var targetModule = args[0] && getModule(args[0]),
			module;
		if(targetModule && !waiting[targetModule.mid]){
			// given a mid that hasn't been requested; therefore, defined through means other than injecting
			// consequent to a require() or define() application; examples include defining modules on-the-fly
			// due to some code path or including a module in a script element. In any case,
			// there is no callback waiting to finish processing and nothing to trigger the defQ and the
			// dependencies are never requested; therefore, do it here.
			injectDependencies(defineModule(targetModule, args[1], args[2]));
		}else if(!has("ie-event-behavior") || ! 1  || injectingCachedModule){
			// not IE path: anonymous module and therefore must have been injected; therefore, onLoad will fire immediately
			// after script finishes being evaluated and the defQ can be run from that callback to detect the module id
			defQ.push(args);
		}else{
			// IE path: possibly anonymous module and therefore injected; therefore, cannot depend on 1-to-1,
			// in-order exec of onLoad with script eval (since it's IE) and must manually detect here
			targetModule = targetModule || injectingModule;
			if(!targetModule){
				for(mid in waiting){
					module = modules[mid];
					if(module && module.node && module.node.readyState === 'interactive'){
						targetModule = module;
						break;
					}
				}
				if( 0  && !targetModule){
					for(var i = 0; i<combosPending.length; i++){
						targetModule = combosPending[i];
						if(targetModule.node && targetModule.node.readyState === 'interactive'){
							break;
						}
						targetModule= 0;
					}
				}
			}
			if( 0  && isArray(targetModule)){
				injectDependencies(defineModule(getModule(targetModule.shift()), args[1], args[2]));
				if(!targetModule.length){
					combosPending.splice(i, 1);
				}
			}else if(targetModule){
				consumePendingCacheInsert(targetModule);
				injectDependencies(defineModule(targetModule, args[1], args[2]));
			}else{
				signal(error, makeError("ieDefineFailed", args[0]));
			}
			checkComplete();
		}
	};
	def.amd = {
		vendor:"dojotoolkit.org"
	};

	if( 0 ){
		req.def = def;
	}

	// allow config to override default implementation of named functions; this is useful for
	// non-browser environments, e.g., overriding injectUrl, getText, log, etc. in node.js, Rhino, etc.
	// also useful for testing and monkey patching loader
	mix(mix(req, defaultConfig.loaderPatch), userConfig.loaderPatch);

	// now that req is fully initialized and won't change, we can hook it up to the error signal
	on(error, function(arg){
		try{
			console.error(arg);
			if(arg instanceof Error){
				for(var p in arg){
					console.log(p + ":", arg[p]);
				}
				console.log(".");
			}
		}catch(e){}
	});

	// always publish these
	mix(req, {
		uid:uid,
		cache:cache,
		packs:packs
	});


	if( false ){
		mix(req, {
			// these may be interesting to look at when debugging
			paths:paths,
			aliases:aliases,
			modules:modules,
			legacyMode:legacyMode,
			execQ:execQ,
			defQ:defQ,
			waiting:waiting,

			// these are used for testing
			// TODO: move testing infrastructure to a different has feature
			packs:packs,
			mapProgs:mapProgs,
			pathsMapProg:pathsMapProg,
			listenerQueues:listenerQueues,

			// these are used by the builder (at least)
			computeMapProg:computeMapProg,
			computeAliases:computeAliases,
			runMapProg:runMapProg,
			compactPath:compactPath,
			getModuleInfo:getModuleInfo_
		});
	}

	// the loader can be defined exactly once; look for global define which is the symbol AMD loaders are
	// *required* to define (as opposed to require, which is optional)
	if(global.define){
		if( false ){
			signal(error, makeError("defineAlreadyDefined", 0));
		}
		return;
	}else{
		global.define = def;
		global.require = req;
		if( 0 ){
			require = req;
		}
	}

	if( 0  && req.combo && req.combo.plugins){
		var plugins = req.combo.plugins,
			pluginName;
		for(pluginName in plugins){
			mix(mix(getModule(pluginName), plugins[pluginName]), {isCombo:1, executed:"executed", load:1});
		}
	}

	if( 1 ){
		forEach(delayedModuleConfig, function(c){ config(c); });
		var bootDeps = dojoSniffConfig.deps ||	userConfig.deps || defaultConfig.deps,
			bootCallback = dojoSniffConfig.callback || userConfig.callback || defaultConfig.callback;
		req.boot = (bootDeps || bootCallback) ? [bootDeps || [], bootCallback] : 0;
	}
	if(! 1 ){
		!req.async && req(["dojo"]);
		req.boot && req.apply(null, req.boot);
	}
})
(this.dojoConfig || this.djConfig || this.require || {}, {
		async:0,
		hasCache:{
				'config-selectorEngine':"lite",
				'config-tlmSiblingOfDojo':1,
				'dojo-built':1,
				'dojo-loader':1,
				dom:1,
				'host-browser':1
		},
		packages:[
				{
					 location:"../app",
					 name:"app"
				},
				{
					 location:"../dgrid",
					 main:"OnDemandGrid",
					 name:"dgrid"
				},
				{
					 location:"../dijit",
					 name:"dijit"
				},
				{
					 location:".",
					 name:"dojo"
				},
				{
					 location:"../dojox",
					 name:"dojox"
				},
				{
					 location:"../esri",
					 name:"esri"
				},
				{
					 location:"../put-selector",
					 main:"put",
					 name:"put-selector"
				},
				{
					 location:"../xstyle",
					 name:"xstyle"
				}
		]
});require({cache:{
'dojox/gfx/path':function(){
define(["./_base", "dojo/_base/lang","dojo/_base/declare", "./matrix", "./shape"],
	function(g, lang, declare, matrix, shapeLib){

	// module:
	//		dojox/gfx/path

	var Path = declare("dojox.gfx.path.Path", shapeLib.Shape, {
		// summary:
		//		a generalized path shape

		constructor: function(rawNode){
			// summary:
			//		a path constructor
			// rawNode: Node
			//		a DOM node to be used by this path object
			this.shape = lang.clone(g.defaultPath);
			this.segments = [];
			this.tbbox = null;
			this.absolute = true;
			this.last = {};
			this.rawNode = rawNode;
			this.segmented = false;
		},

		// mode manipulations
		setAbsoluteMode: function(mode){
			// summary:
			//		sets an absolute or relative mode for path points
			// mode: Boolean
			//		true/false or "absolute"/"relative" to specify the mode
			this._confirmSegmented();
			this.absolute = typeof mode == "string" ? (mode == "absolute") : mode;
			return this; // self
		},
		getAbsoluteMode: function(){
			// summary:
			//		returns a current value of the absolute mode
			this._confirmSegmented();
			return this.absolute; // Boolean
		},

		getBoundingBox: function(){
			// summary:
			//		returns the bounding box {x, y, width, height} or null
			this._confirmSegmented();
			return (this.bbox && ("l" in this.bbox)) ? {x: this.bbox.l, y: this.bbox.t, width: this.bbox.r - this.bbox.l, height: this.bbox.b - this.bbox.t} : null; // dojox/gfx.Rectangle
		},

		_getRealBBox: function(){
			// summary:
			//		returns an array of four points or null
			//		four points represent four corners of the untransformed bounding box
			this._confirmSegmented();
			if(this.tbbox){
				return this.tbbox;	// Array
			}
			var bbox = this.bbox, matrix = this._getRealMatrix();
			this.bbox = null;
			for(var i = 0, len = this.segments.length; i < len; ++i){
				this._updateWithSegment(this.segments[i], matrix);
			}
			var t = this.bbox;
			this.bbox = bbox;
			this.tbbox = t ? [
				{x: t.l, y: t.t},
				{x: t.r, y: t.t},
				{x: t.r, y: t.b},
				{x: t.l, y: t.b}
			] : null;
			return this.tbbox;	// Array
		},

		getLastPosition: function(){
			// summary:
			//		returns the last point in the path, or null
			this._confirmSegmented();
			return "x" in this.last ? this.last : null; // Object
		},

		_applyTransform: function(){
			this.tbbox = null;
			return this.inherited(arguments);
		},

		// segment interpretation
		_updateBBox: function(x, y, m){
			// summary:
			//		updates the bounding box of path with new point
			// x: Number
			//		an x coordinate
			// y: Number
			//		a y coordinate

			if(m){
				var t = matrix.multiplyPoint(m, x, y);
				x = t.x;
				y = t.y;
			}

			// we use {l, b, r, t} representation of a bbox
			if(this.bbox && ("l" in this.bbox)){
				if(this.bbox.l > x) this.bbox.l = x;
				if(this.bbox.r < x) this.bbox.r = x;
				if(this.bbox.t > y) this.bbox.t = y;
				if(this.bbox.b < y) this.bbox.b = y;
			}else{
				this.bbox = {l: x, b: y, r: x, t: y};
			}
		},
		_updateWithSegment: function(segment, matrix){
			// summary:
			//		updates the bounding box of path with new segment
			// segment: Object
			//		a segment
			var n = segment.args, l = n.length, i;
			// update internal variables: bbox, absolute, last
			switch(segment.action){
				case "M":
				case "L":
				case "C":
				case "S":
				case "Q":
				case "T":
					for(i = 0; i < l; i += 2){
						this._updateBBox(n[i], n[i + 1], matrix);
					}
					this.last.x = n[l - 2];
					this.last.y = n[l - 1];
					this.absolute = true;
					break;
				case "H":
					for(i = 0; i < l; ++i){
						this._updateBBox(n[i], this.last.y, matrix);
					}
					this.last.x = n[l - 1];
					this.absolute = true;
					break;
				case "V":
					for(i = 0; i < l; ++i){
						this._updateBBox(this.last.x, n[i], matrix);
					}
					this.last.y = n[l - 1];
					this.absolute = true;
					break;
				case "m":
					var start = 0;
					if(!("x" in this.last)){
						this._updateBBox(this.last.x = n[0], this.last.y = n[1], matrix);
						start = 2;
					}
					for(i = start; i < l; i += 2){
						this._updateBBox(this.last.x += n[i], this.last.y += n[i + 1], matrix);
					}
					this.absolute = false;
					break;
				case "l":
				case "t":
					for(i = 0; i < l; i += 2){
						this._updateBBox(this.last.x += n[i], this.last.y += n[i + 1], matrix);
					}
					this.absolute = false;
					break;
				case "h":
					for(i = 0; i < l; ++i){
						this._updateBBox(this.last.x += n[i], this.last.y, matrix);
					}
					this.absolute = false;
					break;
				case "v":
					for(i = 0; i < l; ++i){
						this._updateBBox(this.last.x, this.last.y += n[i], matrix);
					}
					this.absolute = false;
					break;
				case "c":
					for(i = 0; i < l; i += 6){
						this._updateBBox(this.last.x + n[i], this.last.y + n[i + 1], matrix);
						this._updateBBox(this.last.x + n[i + 2], this.last.y + n[i + 3], matrix);
						this._updateBBox(this.last.x += n[i + 4], this.last.y += n[i + 5], matrix);
					}
					this.absolute = false;
					break;
				case "s":
				case "q":
					for(i = 0; i < l; i += 4){
						this._updateBBox(this.last.x + n[i], this.last.y + n[i + 1], matrix);
						this._updateBBox(this.last.x += n[i + 2], this.last.y += n[i + 3], matrix);
					}
					this.absolute = false;
					break;
				case "A":
					for(i = 0; i < l; i += 7){
						this._updateBBox(n[i + 5], n[i + 6], matrix);
					}
					this.last.x = n[l - 2];
					this.last.y = n[l - 1];
					this.absolute = true;
					break;
				case "a":
					for(i = 0; i < l; i += 7){
						this._updateBBox(this.last.x += n[i + 5], this.last.y += n[i + 6], matrix);
					}
					this.absolute = false;
					break;
			}
			// add an SVG path segment
			var path = [segment.action];
			for(i = 0; i < l; ++i){
				path.push(g.formatNumber(n[i], true));
			}
			if(typeof this.shape.path == "string"){
				this.shape.path += path.join("");
			}else{
				for(i = 0, l = path.length; i < l; ++i){
					this.shape.path.push(path[i]);
				}
			}
		},

		// a dictionary, which maps segment type codes to a number of their arguments
		_validSegments: {m: 2, l: 2, h: 1, v: 1, c: 6, s: 4, q: 4, t: 2, a: 7, z: 0},

		_pushSegment: function(action, args){
			// summary:
			//		adds a segment
			// action: String
			//		valid SVG code for a segment's type
			// args: Array
			//		a list of parameters for this segment
			this.tbbox = null;
			var group = this._validSegments[action.toLowerCase()], segment;
			if(typeof group == "number"){
				if(group){
					if(args.length >= group){
						segment = {action: action, args: args.slice(0, args.length - args.length % group)};
						this.segments.push(segment);
						this._updateWithSegment(segment);
					}
				}else{
					segment = {action: action, args: []};
					this.segments.push(segment);
					this._updateWithSegment(segment);
				}
			}
		},

		_collectArgs: function(array, args){
			// summary:
			//		converts an array of arguments to plain numeric values
			// array: Array
			//		an output argument (array of numbers)
			// args: Array
			//		an input argument (can be values of Boolean, Number, dojox/gfx.Point, or an embedded array of them)
			for(var i = 0; i < args.length; ++i){
				var t = args[i];
				if(typeof t == "boolean"){
					array.push(t ? 1 : 0);
				}else if(typeof t == "number"){
					array.push(t);
				}else if(t instanceof Array){
					this._collectArgs(array, t);
				}else if("x" in t && "y" in t){
					array.push(t.x, t.y);
				}
			}
		},

		// segments
		moveTo: function(){
			// summary:
			//		forms a move segment
			this._confirmSegmented();
			var args = [];
			this._collectArgs(args, arguments);
			this._pushSegment(this.absolute ? "M" : "m", args);
			return this; // self
		},
		lineTo: function(){
			// summary:
			//		forms a line segment
			this._confirmSegmented();
			var args = [];
			this._collectArgs(args, arguments);
			this._pushSegment(this.absolute ? "L" : "l", args);
			return this; // self
		},
		hLineTo: function(){
			// summary:
			//		forms a horizontal line segment
			this._confirmSegmented();
			var args = [];
			this._collectArgs(args, arguments);
			this._pushSegment(this.absolute ? "H" : "h", args);
			return this; // self
		},
		vLineTo: function(){
			// summary:
			//		forms a vertical line segment
			this._confirmSegmented();
			var args = [];
			this._collectArgs(args, arguments);
			this._pushSegment(this.absolute ? "V" : "v", args);
			return this; // self
		},
		curveTo: function(){
			// summary:
			//		forms a curve segment
			this._confirmSegmented();
			var args = [];
			this._collectArgs(args, arguments);
			this._pushSegment(this.absolute ? "C" : "c", args);
			return this; // self
		},
		smoothCurveTo: function(){
			// summary:
			//		forms a smooth curve segment
			this._confirmSegmented();
			var args = [];
			this._collectArgs(args, arguments);
			this._pushSegment(this.absolute ? "S" : "s", args);
			return this; // self
		},
		qCurveTo: function(){
			// summary:
			//		forms a quadratic curve segment
			this._confirmSegmented();
			var args = [];
			this._collectArgs(args, arguments);
			this._pushSegment(this.absolute ? "Q" : "q", args);
			return this; // self
		},
		qSmoothCurveTo: function(){
			// summary:
			//		forms a quadratic smooth curve segment
			this._confirmSegmented();
			var args = [];
			this._collectArgs(args, arguments);
			this._pushSegment(this.absolute ? "T" : "t", args);
			return this; // self
		},
		arcTo: function(){
			// summary:
			//		forms an elliptic arc segment
			this._confirmSegmented();
			var args = [];
			this._collectArgs(args, arguments);
			this._pushSegment(this.absolute ? "A" : "a", args);
			return this; // self
		},
		closePath: function(){
			// summary:
			//		closes a path
			this._confirmSegmented();
			this._pushSegment("Z", []);
			return this; // self
		},

		_confirmSegmented: function() {
			if (!this.segmented) {
				var path = this.shape.path;
				// switch to non-updating version of path building
				this.shape.path = [];
				this._setPath(path);
				// switch back to the string path
				this.shape.path = this.shape.path.join("");
				// become segmented
				this.segmented = true;
			}
		},

		// setShape
		_setPath: function(path){
			// summary:
			//		forms a path using an SVG path string
			// path: String
			//		an SVG path string
			var p = lang.isArray(path) ? path : path.match(g.pathSvgRegExp);
			this.segments = [];
			this.absolute = true;
			this.bbox = {};
			this.last = {};
			if(!p) return;
			// create segments
			var action = "",	// current action
				args = [],		// current arguments
				l = p.length;
			for(var i = 0; i < l; ++i){
				var t = p[i], x = parseFloat(t);
				if(isNaN(x)){
					if(action){
						this._pushSegment(action, args);
					}
					args = [];
					action = t;
				}else{
					args.push(x);
				}
			}
			this._pushSegment(action, args);
		},
		setShape: function(newShape){
			// summary:
			//		forms a path using a shape
			// newShape: Object
			//		an SVG path string or a path object (see dojox/gfx.defaultPath)
			this.inherited(arguments, [typeof newShape == "string" ? {path: newShape} : newShape]);

			this.segmented = false;
			this.segments = [];
			if(!g.lazyPathSegmentation){
				this._confirmSegmented();
			}
			return this; // self
		},

		// useful constant for descendants
		_2PI: Math.PI * 2
	});

	var TextPath = declare("dojox.gfx.path.TextPath", Path, {
		// summary:
		//		a generalized TextPath shape

		constructor: function(rawNode){
			// summary:
			//		a TextPath shape constructor
			// rawNode: Node
			//		a DOM node to be used by this TextPath object
			if(!("text" in this)){
				this.text = lang.clone(g.defaultTextPath);
			}
			if(!("fontStyle" in this)){
				this.fontStyle = lang.clone(g.defaultFont);
			}
		},
		getText: function(){
			// summary:
			//		returns the current text object or null
			return this.text;	// Object
		},
		setText: function(newText){
			// summary:
			//		sets a text to be drawn along the path
			this.text = g.makeParameters(this.text,
				typeof newText == "string" ? {text: newText} : newText);
			this._setText();
			return this;	// self
		},
		getFont: function(){
			// summary:
			//		returns the current font object or null
			return this.fontStyle;	// Object
		},
		setFont: function(newFont){
			// summary:
			//		sets a font for text
			this.fontStyle = typeof newFont == "string" ?
				g.splitFontString(newFont) :
				g.makeParameters(g.defaultFont, newFont);
			this._setFont();
			return this;	// self
		}
	});

	/*=====
	g.Path = Path;
	g.TextPath = TextPath;
	=====*/

	return g.path = {
		// summary:
		//		This module contains the core graphics Path API.
		//		Path command format follows the W3C SVG 1.0 Path api.

		Path: Path,
		TextPath: TextPath
	};
});

},
'dojox/gfx/_base':function(){
define(["dojo/_base/kernel", "dojo/_base/lang", "dojo/_base/Color", "dojo/_base/sniff", "dojo/_base/window",
	    "dojo/_base/array","dojo/dom", "dojo/dom-construct","dojo/dom-geometry"],
function(kernel, lang, Color, has, win, arr, dom, domConstruct, domGeom){
	// module:
	//		dojox/gfx
	// summary:
	//		This module contains common core Graphics API used by different graphics renderers.

	var g = lang.getObject("dojox.gfx", true),
		b = g._base = {};
	
	// candidates for dojox.style (work on VML and SVG nodes)
	g._hasClass = function(/*DomNode*/node, /*String*/classStr){
		// summary:
		//		Returns whether or not the specified classes are a portion of the
		//		class list currently applied to the node.
		
		// return (new RegExp('(^|\\s+)'+classStr+'(\\s+|$)')).test(node.className)	// Boolean
		var cls = node.getAttribute("className");
		return cls && (" " + cls + " ").indexOf(" " + classStr + " ") >= 0;  // Boolean
	};
	g._addClass = function(/*DomNode*/node, /*String*/classStr){
		// summary:
		//		Adds the specified classes to the end of the class list on the
		//		passed node.
		var cls = node.getAttribute("className") || "";
		if(!cls || (" " + cls + " ").indexOf(" " + classStr + " ") < 0){
			node.setAttribute("className", cls + (cls ? " " : "") + classStr);
		}
	};
	g._removeClass = function(/*DomNode*/node, /*String*/classStr){
		// summary:
		//		Removes classes from node.
		var cls = node.getAttribute("className");
		if(cls){
			node.setAttribute(
				"className",
				cls.replace(new RegExp('(^|\\s+)' + classStr + '(\\s+|$)'), "$1$2")
			);
		}
	};

	// candidate for dojox.html.metrics (dynamic font resize handler is not implemented here)

	//		derived from Morris John's emResized measurer
	b._getFontMeasurements = function(){
		// summary:
		//		Returns an object that has pixel equivilents of standard font
		//		size values.
		var heights = {
			'1em': 0, '1ex': 0, '100%': 0, '12pt': 0, '16px': 0, 'xx-small': 0,
			'x-small': 0, 'small': 0, 'medium': 0, 'large': 0, 'x-large': 0,
			'xx-large': 0
		};
		var p, oldStyle;	
		if(has("ie")){
			//	We do a font-size fix if and only if one isn't applied already.
			// NOTE: If someone set the fontSize on the HTML Element, this will kill it.
			oldStyle = win.doc.documentElement.style.fontSize || "";
			if(!oldStyle){
				win.doc.documentElement.style.fontSize="100%";
			}
		}

		//		set up the measuring node.
		var div = domConstruct.create("div", {style: {
				position: "absolute",
				left: "0",
				top: "-100px",
				width: "30px",
				height: "1000em",
				borderWidth: "0",
				margin: "0",
				padding: "0",
				outline: "none",
				lineHeight: "1",
				overflow: "hidden"
			}}, win.body());

		//		do the measurements.
		for(p in heights){
			div.style.fontSize = p;
			heights[p] = Math.round(div.offsetHeight * 12/16) * 16/12 / 1000;
		}

		if(has("ie")){
			// Restore the font to its old style.
			win.doc.documentElement.style.fontSize = oldStyle;
		}
		win.body().removeChild(div);
		return heights; //object
	};

	var fontMeasurements = null;

	b._getCachedFontMeasurements = function(recalculate){
		if(recalculate || !fontMeasurements){
			fontMeasurements = b._getFontMeasurements();
		}
		return fontMeasurements;
	};

	// candidate for dojox.html.metrics

	var measuringNode = null, empty = {};
	b._getTextBox = function(	/*String*/ text,
								/*Object*/ style,
								/*String?*/ className){
		var m, s, al = arguments.length;
		var i, box;
		if(!measuringNode){
			measuringNode = domConstruct.create("div", {style: {
				position: "absolute",
				top: "-10000px",
				left: "0",
				visibility: "hidden"
			}}, win.body());
		}
		m = measuringNode;
		// reset styles
		m.className = "";
		s = m.style;
		s.borderWidth = "0";
		s.margin = "0";
		s.padding = "0";
		s.outline = "0";
		// set new style
		if(al > 1 && style){
			for(i in style){
				if(i in empty){ continue; }
				s[i] = style[i];
			}
		}
		// set classes
		if(al > 2 && className){
			m.className = className;
		}
		// take a measure
		m.innerHTML = text;

		if(m.getBoundingClientRect){
			var bcr = m.getBoundingClientRect();
			box = {l: bcr.left, t: bcr.top, w: bcr.width || (bcr.right - bcr.left), h: bcr.height || (bcr.bottom - bcr.top)};
		}else{
			box = domGeom.getMarginBox(m);
		}
		m.innerHTML = "";
		return box;
	};

	b._computeTextLocation = function(/*g.defaultTextShape*/textShape, /*Number*/width, /*Number*/height, /*Boolean*/fixHeight) {
		var loc = {}, align = textShape.align;
		switch (align) {
			case 'end':
				loc.x = textShape.x - width;
				break;
			case 'middle':
				loc.x = textShape.x - width / 2;
				break;
			default:
				loc.x = textShape.x;
				break;
		}
		var c = fixHeight ? 0.75 : 1;
		loc.y = textShape.y - height*c; // **rough** approximation of the ascent...
		return loc;
	};
	b._computeTextBoundingBox = function(/*shape.Text*/s){
		// summary:
		//		Compute the bbox of the given shape.Text instance. Note that this method returns an
		//		approximation of the bbox, and should be used when the underlying renderer cannot provide precise metrics.
		if(!g._base._isRendered(s)){
			return {x:0, y:0, width:0, height:0};
		}
		var loc, textShape = s.getShape(),
			font = s.getFont() || g.defaultFont,
			w = s.getTextWidth(),
			h = g.normalizedLength(font.size);
		loc = b._computeTextLocation(textShape, w, h, true);
		return {
			x: loc.x,
			y: loc.y,
			width: w,
			height: h
		};
	};
	b._isRendered = function(/*Shape*/s){
		var p = s.parent;
		while(p && p.getParent){
			p = p.parent;
		}
		return p !== null;
	};

	// candidate for dojo.dom

	var uniqueId = 0;
	b._getUniqueId = function(){
		// summary:
		//		returns a unique string for use with any DOM element
		var id;
		do{
			id = kernel._scopeName + "xUnique" + (++uniqueId);
		}while(dom.byId(id));
		return id;
	};

	// IE10

	b._fixMsTouchAction = function(/*dojox/gfx/shape.Surface*/surface){
		var r = surface.rawNode;
		if (typeof r.style.msTouchAction != 'undefined')
			r.style.msTouchAction = "none";
	};

	/*=====
	g.Stroke = {
		// summary:
		//		A stroke defines stylistic properties that are used when drawing a path.

		// color: String
		//		The color of the stroke, default value 'black'.
		color: "black",

		// style: String
		//		The style of the stroke, one of 'solid', ... . Default value 'solid'.
		style: "solid",

		// width: Number
		//		The width of a stroke, default value 1.
		width: 1,

		// cap: String
		//		The endcap style of the path. One of 'butt', 'round', ... . Default value 'butt'.
		cap: "butt",

		// join: Number
		//		The join style to use when combining path segments. Default value 4.
		join: 4
	};
	
	g.Fill = {
		// summary:
		//		Defines how to fill a shape. Four types of fills can be used: solid, linear gradient, radial gradient and pattern.
		//		See dojox/gfx.LinearGradient, dojox/gfx.RadialGradient and dojox/gfx.Pattern respectively for more information about the properties supported by each type.
		
		// type: String?
		//		The type of fill. One of 'linear', 'radial', 'pattern' or undefined. If not specified, a solid fill is assumed.
		type:"",
		
		// color: String|dojo/Color?
		//		The color of a solid fill type.
		color:null,
		
	};
	
	g.LinearGradient = {
		// summary:
		//		An object defining the default stylistic properties used for Linear Gradient fills.
		//		Linear gradients are drawn along a virtual line, which results in appearance of a rotated pattern in a given direction/orientation.

		// type: String
		//		Specifies this object is a Linear Gradient, value 'linear'
		type: "linear",

		// x1: Number
		//		The X coordinate of the start of the virtual line along which the gradient is drawn, default value 0.
		x1: 0,

		// y1: Number
		//		The Y coordinate of the start of the virtual line along which the gradient is drawn, default value 0.
		y1: 0,

		// x2: Number
		//		The X coordinate of the end of the virtual line along which the gradient is drawn, default value 100.
		x2: 100,

		// y2: Number
		//		The Y coordinate of the end of the virtual line along which the gradient is drawn, default value 100.
		y2: 100,

		// colors: Array
		//		An array of colors at given offsets (from the start of the line).  The start of the line is
		//		defined at offest 0 with the end of the line at offset 1.
		//		Default value, [{ offset: 0, color: 'black'},{offset: 1, color: 'white'}], is a gradient from black to white.
		colors: []
	};
	
	g.RadialGradient = {
		// summary:
		//		Specifies the properties for RadialGradients using in fills patterns.

		// type: String
		//		Specifies this is a RadialGradient, value 'radial'
		type: "radial",

		// cx: Number
		//		The X coordinate of the center of the radial gradient, default value 0.
		cx: 0,

		// cy: Number
		//		The Y coordinate of the center of the radial gradient, default value 0.
		cy: 0,

		// r: Number
		//		The radius to the end of the radial gradient, default value 100.
		r: 100,

		// colors: Array
		//		An array of colors at given offsets (from the center of the radial gradient).
		//		The center is defined at offest 0 with the outer edge of the gradient at offset 1.
		//		Default value, [{ offset: 0, color: 'black'},{offset: 1, color: 'white'}], is a gradient from black to white.
		colors: []
	};
	
	g.Pattern = {
		// summary:
		//		An object specifying the default properties for a Pattern using in fill operations.

		// type: String
		//		Specifies this object is a Pattern, value 'pattern'.
		type: "pattern",

		// x: Number
		//		The X coordinate of the position of the pattern, default value is 0.
		x: 0,

		// y: Number
		//		The Y coordinate of the position of the pattern, default value is 0.
		y: 0,

		// width: Number
		//		The width of the pattern image, default value is 0.
		width: 0,

		// height: Number
		//		The height of the pattern image, default value is 0.
		height: 0,

		// src: String
		//		A url specifying the image to use for the pattern.
		src: ""
	};

	g.Text = {
		//	summary:
		//		A keyword argument object defining both the text to be rendered in a VectorText shape,
		//		and specifying position, alignment, and fitting.
		//	text: String
		//		The text to be rendered.
		//	x: Number?
		//		The left coordinate for the text's bounding box.
		//	y: Number?
		//		The top coordinate for the text's bounding box.
		//	width: Number?
		//		The width of the text's bounding box.
		//	height: Number?
		//		The height of the text's bounding box.
		//	align: String?
		//		The alignment of the text, as defined in SVG. Can be "start", "end" or "middle".
		//	fitting: Number?
		//		How the text is to be fitted to the bounding box. Can be 0 (no fitting), 1 (fitting based on
		//		passed width of the bounding box and the size of the font), or 2 (fit text to the bounding box,
		//		and ignore any size parameters).
		//	leading: Number?
		//		The leading to be used between lines in the text.
		//	decoration: String?
		//		Any text decoration to be used.
	};

	g.Font = {
		// summary:
		//		An object specifying the properties for a Font used in text operations.
	
		// type: String
		//		Specifies this object is a Font, value 'font'.
		type: "font",
	
		// style: String
		//		The font style, one of 'normal', 'bold', default value 'normal'.
		style: "normal",
	
		// variant: String
		//		The font variant, one of 'normal', ... , default value 'normal'.
		variant: "normal",
	
		// weight: String
		//		The font weight, one of 'normal', ..., default value 'normal'.
		weight: "normal",
	
		// size: String
		//		The font size (including units), default value '10pt'.
		size: "10pt",
	
		// family: String
		//		The font family, one of 'serif', 'sanserif', ..., default value 'serif'.
		family: "serif"
	};

	=====*/

	lang.mixin(g, {
		// summary:
		//		defines constants, prototypes, and utility functions for the core Graphics API

		// default shapes, which are used to fill in missing parameters
		defaultPath: {
			// summary:
			//		Defines the default Path prototype object.

			// type: String
			//		Specifies this object is a Path, default value 'path'.
			type: "path", 

			// path: String
			//		The path commands. See W32C SVG 1.0 specification.
			//		Defaults to empty string value.
			path: ""
		},
		defaultPolyline: {
			// summary:
			//		Defines the default PolyLine prototype.

			// type: String
			//		Specifies this object is a PolyLine, default value 'polyline'.
			type: "polyline",

			// points: Array
			//		An array of point objects [{x:0,y:0},...] defining the default polyline's line segments. Value is an empty array [].
			points: []
		},
		defaultRect: {
			// summary:
			//		Defines the default Rect prototype.

			// type: String
			//		Specifies this default object is a type of Rect. Value is 'rect'
			type: "rect",

			// x: Number
			//		The X coordinate of the default rectangles position, value 0.
			x: 0,

			// y: Number
			//		The Y coordinate of the default rectangle's position, value 0.
			y: 0,

			// width: Number
			//		The width of the default rectangle, value 100.
			width: 100,

			// height: Number
			//		The height of the default rectangle, value 100.
			height: 100,

			// r: Number
			//		The corner radius for the default rectangle, value 0.
			r: 0
		},
		defaultEllipse: {
			// summary:
			//		Defines the default Ellipse prototype.

			// type: String
			//		Specifies that this object is a type of Ellipse, value is 'ellipse'
			type: "ellipse",

			// cx: Number
			//		The X coordinate of the center of the ellipse, default value 0.
			cx: 0,

			// cy: Number
			//		The Y coordinate of the center of the ellipse, default value 0.
			cy: 0,

			// rx: Number
			//		The radius of the ellipse in the X direction, default value 200.
			rx: 200,

			// ry: Number
			//		The radius of the ellipse in the Y direction, default value 200.
			ry: 100
		},
		defaultCircle: {
			// summary:
			//		An object defining the default Circle prototype.

			// type: String
			//		Specifies this object is a circle, value 'circle'
			type: "circle",

			// cx: Number
			//		The X coordinate of the center of the circle, default value 0.
			cx: 0,
			// cy: Number
			//		The Y coordinate of the center of the circle, default value 0.
			cy: 0,

			// r: Number
			//		The radius, default value 100.
			r: 100
		},
		defaultLine: {
			// summary:
			//		An object defining the default Line prototype.

			// type: String
			//		Specifies this is a Line, value 'line'
			type: "line",

			// x1: Number
			//		The X coordinate of the start of the line, default value 0.
			x1: 0,

			// y1: Number
			//		The Y coordinate of the start of the line, default value 0.
			y1: 0,

			// x2: Number
			//		The X coordinate of the end of the line, default value 100.
			x2: 100,

			// y2: Number
			//		The Y coordinate of the end of the line, default value 100.
			y2: 100
		},
		defaultImage: {
			// summary:
			//		Defines the default Image prototype.

			// type: String
			//		Specifies this object is an image, value 'image'.
			type: "image",

			// x: Number
			//		The X coordinate of the image's position, default value 0.
			x: 0,

			// y: Number
			//		The Y coordinate of the image's position, default value 0.
			y: 0,

			// width: Number
			//		The width of the image, default value 0.
			width: 0,

			// height: Number
			//		The height of the image, default value 0.
			height: 0,

			// src: String
			//		The src url of the image, defaults to empty string.
			src: ""
		},
		defaultText: {
			// summary:
			//		Defines the default Text prototype.

			// type: String
			//		Specifies this is a Text shape, value 'text'.
			type: "text",

			// x: Number
			//		The X coordinate of the text position, default value 0.
			x: 0,

			// y: Number
			//		The Y coordinate of the text position, default value 0.
			y: 0,

			// text: String
			//		The text to be displayed, default value empty string.
			text: "",

			// align:	String
			//		The horizontal text alignment, one of 'start', 'end', 'center'. Default value 'start'.
			align: "start",

			// decoration: String
			//		The text decoration , one of 'none', ... . Default value 'none'.
			decoration: "none",

			// rotated: Boolean
			//		Whether the text is rotated, boolean default value false.
			rotated: false,

			// kerning: Boolean
			//		Whether kerning is used on the text, boolean default value true.
			kerning: true
		},
		defaultTextPath: {
			// summary:
			//		Defines the default TextPath prototype.

			// type: String
			//		Specifies this is a TextPath, value 'textpath'.
			type: "textpath",

			// text: String
			//		The text to be displayed, default value empty string.
			text: "",

			// align: String
			//		The horizontal text alignment, one of 'start', 'end', 'center'. Default value 'start'.
			align: "start",

			// decoration: String
			//		The text decoration , one of 'none', ... . Default value 'none'.
			decoration: "none",

			// rotated: Boolean
			//		Whether the text is rotated, boolean default value false.
			rotated: false,

			// kerning: Boolean
			//		Whether kerning is used on the text, boolean default value true.
			kerning: true
		},

		// default stylistic attributes
		defaultStroke: {
			// summary:
			//		A stroke defines stylistic properties that are used when drawing a path.
			//		This object defines the default Stroke prototype.
			// type: String
			//		Specifies this object is a type of Stroke, value 'stroke'.
			type: "stroke",

			// color: String
			//		The color of the stroke, default value 'black'.
			color: "black",

			// style: String
			//		The style of the stroke, one of 'solid', ... . Default value 'solid'.
			style: "solid",

			// width: Number
			//		The width of a stroke, default value 1.
			width: 1,

			// cap: String
			//		The endcap style of the path. One of 'butt', 'round', ... . Default value 'butt'.
			cap: "butt",

			// join: Number
			//		The join style to use when combining path segments. Default value 4.
			join: 4
		},
		defaultLinearGradient: {
			// summary:
			//		An object defining the default stylistic properties used for Linear Gradient fills.
			//		Linear gradients are drawn along a virtual line, which results in appearance of a rotated pattern in a given direction/orientation.

			// type: String
			//		Specifies this object is a Linear Gradient, value 'linear'
			type: "linear",

			// x1: Number
			//		The X coordinate of the start of the virtual line along which the gradient is drawn, default value 0.
			x1: 0,

			// y1: Number
			//		The Y coordinate of the start of the virtual line along which the gradient is drawn, default value 0.
			y1: 0,

			// x2: Number
			//		The X coordinate of the end of the virtual line along which the gradient is drawn, default value 100.
			x2: 100,

			// y2: Number
			//		The Y coordinate of the end of the virtual line along which the gradient is drawn, default value 100.
			y2: 100,

			// colors: Array
			//		An array of colors at given offsets (from the start of the line).  The start of the line is
			//		defined at offest 0 with the end of the line at offset 1.
			//		Default value, [{ offset: 0, color: 'black'},{offset: 1, color: 'white'}], is a gradient from black to white.
			colors: [
				{ offset: 0, color: "black" }, { offset: 1, color: "white" }
			]
		},
		defaultRadialGradient: {
			// summary:
			//		An object specifying the default properties for RadialGradients using in fills patterns.

			// type: String
			//		Specifies this is a RadialGradient, value 'radial'
			type: "radial",

			// cx: Number
			//		The X coordinate of the center of the radial gradient, default value 0.
			cx: 0,

			// cy: Number
			//		The Y coordinate of the center of the radial gradient, default value 0.
			cy: 0,

			// r: Number
			//		The radius to the end of the radial gradient, default value 100.
			r: 100,

			// colors: Array
			//		An array of colors at given offsets (from the center of the radial gradient).
			//		The center is defined at offest 0 with the outer edge of the gradient at offset 1.
			//		Default value, [{ offset: 0, color: 'black'},{offset: 1, color: 'white'}], is a gradient from black to white.
			colors: [
				{ offset: 0, color: "black" }, { offset: 1, color: "white" }
			]
		},
		defaultPattern: {
			// summary:
			//		An object specifying the default properties for a Pattern using in fill operations.

			// type: String
			//		Specifies this object is a Pattern, value 'pattern'.
			type: "pattern",

			// x: Number
			//		The X coordinate of the position of the pattern, default value is 0.
			x: 0,

			// y: Number
			//		The Y coordinate of the position of the pattern, default value is 0.
			y: 0,

			// width: Number
			//		The width of the pattern image, default value is 0.
			width: 0,

			// height: Number
			//		The height of the pattern image, default value is 0.
			height: 0,

			// src: String
			//		A url specifying the image to use for the pattern.
			src: ""
		},
		defaultFont: {
			// summary:
			//		An object specifying the default properties for a Font used in text operations.

			// type: String
			//		Specifies this object is a Font, value 'font'.
			type: "font",

			// style: String
			//		The font style, one of 'normal', 'bold', default value 'normal'.
			style: "normal",

			// variant: String
			//		The font variant, one of 'normal', ... , default value 'normal'.
			variant: "normal",

			// weight: String
			//		The font weight, one of 'normal', ..., default value 'normal'.
			weight: "normal",

			// size: String
			//		The font size (including units), default value '10pt'.
			size: "10pt",

			// family: String
			//		The font family, one of 'serif', 'sanserif', ..., default value 'serif'.
			family: "serif"
		},

		getDefault: (function(){
			// summary:
			//		Returns a function used to access default memoized prototype objects (see them defined above).
			var typeCtorCache = {};
			// a memoized delegate()
			return function(/*String*/ type){
				var t = typeCtorCache[type];
				if(t){
					return new t();
				}
				t = typeCtorCache[type] = new Function();
				t.prototype = g[ "default" + type ];
				return new t();
			}
		})(),

		normalizeColor: function(/*dojo/Color|Array|string|Object*/ color){
			// summary:
			//		converts any legal color representation to normalized
			//		dojo/Color object
			// color:
			//		A color representation.
			return (color instanceof Color) ? color : new Color(color); // dojo/Color
		},
		normalizeParameters: function(existed, update){
			// summary:
			//		updates an existing object with properties from an 'update'
			//		object
			// existed: Object
			//		the target object to be updated
			// update: Object
			//		the 'update' object, whose properties will be used to update
			//		the existed object
			var x;
			if(update){
				var empty = {};
				for(x in existed){
					if(x in update && !(x in empty)){
						existed[x] = update[x];
					}
				}
			}
			return existed;	// Object
		},
		makeParameters: function(defaults, update){
			// summary:
			//		copies the original object, and all copied properties from the
			//		'update' object
			// defaults: Object
			//		the object to be cloned before updating
			// update: Object
			//		the object, which properties are to be cloned during updating
			// returns: Object
			//      new object with new and default properties
			var i = null;
			if(!update){
				// return dojo.clone(defaults);
				return lang.delegate(defaults);
			}
			var result = {};
			for(i in defaults){
				if(!(i in result)){
					result[i] = lang.clone((i in update) ? update[i] : defaults[i]);
				}
			}
			return result; // Object
		},
		formatNumber: function(x, addSpace){
			// summary:
			//		converts a number to a string using a fixed notation
			// x: Number
			//		number to be converted
			// addSpace: Boolean
			//		whether to add a space before a positive number
			// returns: String
			//      the formatted value
			var val = x.toString();
			if(val.indexOf("e") >= 0){
				val = x.toFixed(4);
			}else{
				var point = val.indexOf(".");
				if(point >= 0 && val.length - point > 5){
					val = x.toFixed(4);
				}
			}
			if(x < 0){
				return val; // String
			}
			return addSpace ? " " + val : val; // String
		},
		// font operations
		makeFontString: function(font){
			// summary:
			//		converts a font object to a CSS font string
			// font: Object
			//		font object (see dojox/gfx.defaultFont)
			return font.style + " " + font.variant + " " + font.weight + " " + font.size + " " + font.family; // Object
		},
		splitFontString: function(str){
			// summary:
			//		converts a CSS font string to a font object
			// description:
			//		Converts a CSS font string to a gfx font object. The CSS font
			//		string components should follow the W3C specified order
			//		(see http://www.w3.org/TR/CSS2/fonts.html#font-shorthand):
			//		style, variant, weight, size, optional line height (will be
			//		ignored), and family. Note that the Font.size attribute is limited to numeric CSS length.
			// str: String
			//		a CSS font string.
			// returns: Object
			//      object in dojox/gfx.defaultFont format
			var font = g.getDefault("Font");
			var t = str.split(/\s+/);
			do{
				if(t.length < 5){ break; }
				font.style   = t[0];
				font.variant = t[1];
				font.weight  = t[2];
				var i = t[3].indexOf("/");
				font.size = i < 0 ? t[3] : t[3].substring(0, i);
				var j = 4;
				if(i < 0){
					if(t[4] == "/"){
						j = 6;
					}else if(t[4].charAt(0) == "/"){
						j = 5;
					}
				}
				if(j < t.length){
					font.family = t.slice(j).join(" ");
				}
			}while(false);
			return font;	// Object
		},
		// length operations

		// cm_in_pt: Number
		//		points per centimeter (constant)
		cm_in_pt: 72 / 2.54,

		// mm_in_pt: Number
		//		points per millimeter (constant)
		mm_in_pt: 7.2 / 2.54,

		px_in_pt: function(){
			// summary:
			//		returns the current number of pixels per point.
			return g._base._getCachedFontMeasurements()["12pt"] / 12;	// Number
		},

		pt2px: function(len){
			// summary:
			//		converts points to pixels
			// len: Number
			//		a value in points
			return len * g.px_in_pt();	// Number
		},

		px2pt: function(len){
			// summary:
			//		converts pixels to points
			// len: Number
			//		a value in pixels
			return len / g.px_in_pt();	// Number
		},

		normalizedLength: function(len) {
			// summary:
			//		converts any length value to pixels
			// len: String
			//		a length, e.g., '12pc'
			// returns: Number
			//      pixels
			if(len.length === 0){ return 0; }
			if(len.length > 2){
				var px_in_pt = g.px_in_pt();
				var val = parseFloat(len);
				switch(len.slice(-2)){
					case "px": return val;
					case "pt": return val * px_in_pt;
					case "in": return val * 72 * px_in_pt;
					case "pc": return val * 12 * px_in_pt;
					case "mm": return val * g.mm_in_pt * px_in_pt;
					case "cm": return val * g.cm_in_pt * px_in_pt;
				}
			}
			return parseFloat(len);	// Number
		},

		// pathVmlRegExp: RegExp
		//		a constant regular expression used to split a SVG/VML path into primitive components
		// tags:
		//		private
		pathVmlRegExp: /([A-Za-z]+)|(\d+(\.\d+)?)|(\.\d+)|(-\d+(\.\d+)?)|(-\.\d+)/g,

		// pathVmlRegExp: RegExp
		//		a constant regular expression used to split a SVG/VML path into primitive components
		// tags:
		//		private
		pathSvgRegExp: /([A-DF-Za-df-z])|([-+]?\d*[.]?\d+(?:[eE][-+]?\d+)?)/g,

		equalSources: function(a, b){
			// summary:
			//		compares event sources, returns true if they are equal
			// a: Object
			//		first event source
			// b: Object
			//		event source to compare against a
			// returns: Boolean
			//      true, if objects are truthy and the same
			return a && b && a === b;
		},

		switchTo: function(/*String|Object*/ renderer){
			// summary:
			//		switch the graphics implementation to the specified renderer.
			// renderer:
			//		Either the string name of a renderer (eg. 'canvas', 'svg, ...) or the renderer
			//		object to switch to.
			var ns = typeof renderer == "string" ? g[renderer] : renderer;
			if(ns){
				// If more options are added, update the docblock at the end of shape.js!
				arr.forEach(["Group", "Rect", "Ellipse", "Circle", "Line",
						"Polyline", "Image", "Text", "Path", "TextPath",
						"Surface", "createSurface", "fixTarget"], function(name){
					g[name] = ns[name];
				});
				if(typeof renderer == "string"){
					g.renderer = renderer;
				}else{
					arr.some(["svg","vml","canvas","canvasWithEvents","silverlight"], function(r){
						return (g.renderer = g[r] && g[r].Surface === g.Surface ? r : null);
					});
				}
			}
		}
	});
	
	/*=====
		g.createSurface = function(parentNode, width, height){
			// summary:
			//		creates a surface
			// parentNode: Node
			//		a parent node
			// width: String|Number
			//		width of surface, e.g., "100px" or 100
			// height: String|Number
			//		height of surface, e.g., "100px" or 100
			// returns: dojox/gfx.Surface
			//     newly created surface
		};
		g.fixTarget = function(){
			// tags:
			//		private
		};
	=====*/
	
	return g; // defaults object api
});

},
'dojo/_base/kernel':function(){
define(["../has", "./config", "require", "module"], function(has, config, require, module){
	// module:
	//		dojo/_base/kernel

	// This module is the foundational module of the dojo boot sequence; it defines the dojo object.

	var
		// loop variables for this module
		i, p,

		// create dojo, dijit, and dojox
		// FIXME: in 2.0 remove dijit, dojox being created by dojo
		global = (function () { return this; })(),
		dijit = {},
		dojox = {},
		dojo = {
			// summary:
			//		This module is the foundational module of the dojo boot sequence; it defines the dojo object.

			// notice dojo takes ownership of the value of the config module
			config:config,
			global:global,
			dijit:dijit,
			dojox:dojox
		};


	// Configure the scope map. For a 100% AMD application, the scope map is not needed other than to provide
	// a _scopeName property for the dojo, dijit, and dojox root object so those packages can create
	// unique names in the global space.
	//
	// Built, legacy modules use the scope map to allow those modules to be expressed as if dojo, dijit, and dojox,
	// where global when in fact they are either global under different names or not global at all. In v1.6-, the
	// config variable "scopeMap" was used to map names as used within a module to global names. This has been
	// subsumed by the AMD map configuration variable which can relocate packages to different names. For backcompat,
	// only the "*" mapping is supported. See http://livedocs.dojotoolkit.org/developer/design/loader#legacy-cross-domain-mode for details.
	//
	// The following computations contort the packageMap for this dojo instance into a scopeMap.
	var scopeMap =
			// a map from a name used in a legacy module to the (global variable name, object addressed by that name)
			// always map dojo, dijit, and dojox
			{
				dojo:["dojo", dojo],
				dijit:["dijit", dijit],
				dojox:["dojox", dojox]
			},

		packageMap =
			// the package map for this dojo instance; note, a foreign loader or no pacakgeMap results in the above default config
			(require.map && require.map[module.id.match(/[^\/]+/)[0]]),

		item;


	// process all mapped top-level names for this instance of dojo
	for(p in packageMap){
		if(scopeMap[p]){
			// mapped dojo, dijit, or dojox
			scopeMap[p][0] = packageMap[p];
		}else{
			// some other top-level name
			scopeMap[p] = [packageMap[p], {}];
		}
	}

	// publish those names to _scopeName and, optionally, the global namespace
	for(p in scopeMap){
		item = scopeMap[p];
		item[1]._scopeName = item[0];
		if(!config.noGlobals){
			global[item[0]] = item[1];
		}
	}
	dojo.scopeMap = scopeMap;

	/*===== dojo.__docParserConfigureScopeMap(scopeMap); =====*/

	// FIXME: dojo.baseUrl and dojo.config.baseUrl should be deprecated
	dojo.baseUrl = dojo.config.baseUrl = require.baseUrl;
	dojo.isAsync = ! 1  || require.async;
	dojo.locale = config.locale;

	var rev = "$Rev: f4fef70 $".match(/[0-9a-f]{7,}/);
	dojo.version = {
		// summary:
		//		Version number of the Dojo Toolkit
		// description:
		//		Hash about the version, including
		//
		//		- major: Integer: Major version. If total version is "1.2.0beta1", will be 1
		//		- minor: Integer: Minor version. If total version is "1.2.0beta1", will be 2
		//		- patch: Integer: Patch version. If total version is "1.2.0beta1", will be 0
		//		- flag: String: Descriptor flag. If total version is "1.2.0beta1", will be "beta1"
		//		- revision: Number: The Git rev from which dojo was pulled

		major: 1, minor: 10, patch: 4, flag: "",
		revision: rev ? rev[0] : NaN,
		toString: function(){
			var v = dojo.version;
			return v.major + "." + v.minor + "." + v.patch + v.flag + " (" + v.revision + ")";	// String
		}
	};

	// If  1  is truthy, then as a dojo module is defined it should push it's definitions
	// into the dojo object, and conversely. In 2.0, it will likely be unusual to augment another object
	// as a result of defining a module. This has feature gives a way to force 2.0 behavior as the code
	// is migrated. Absent specific advice otherwise, set extend-dojo to truthy.
	 1 || has.add("extend-dojo", 1);


	(Function("d", "d.eval = function(){return d.global.eval ? d.global.eval(arguments[0]) : eval(arguments[0]);}"))(dojo);
	/*=====
	dojo.eval = function(scriptText){
		// summary:
		//		A legacy method created for use exclusively by internal Dojo methods. Do not use this method
		//		directly unless you understand its possibly-different implications on the platforms your are targeting.
		// description:
		//		Makes an attempt to evaluate scriptText in the global scope. The function works correctly for browsers
		//		that support indirect eval.
		//
		//		As usual, IE does not. On IE, the only way to implement global eval is to
		//		use execScript. Unfortunately, execScript does not return a value and breaks some current usages of dojo.eval.
		//		This implementation uses the technique of executing eval in the scope of a function that is a single scope
		//		frame below the global scope; thereby coming close to the global scope. Note carefully that
		//
		//		dojo.eval("var pi = 3.14;");
		//
		//		will define global pi in non-IE environments, but define pi only in a temporary local scope for IE. If you want
		//		to define a global variable using dojo.eval, write something like
		//
		//		dojo.eval("window.pi = 3.14;")
		// scriptText:
		//		The text to evaluation.
		// returns:
		//		The result of the evaluation. Often `undefined`
	};
	=====*/


	if( 0 ){
		dojo.exit = function(exitcode){
			quit(exitcode);
		};
	}else{
		dojo.exit = function(){
		};
	}

	 1 || has.add("dojo-guarantee-console",
		// ensure that console.log, console.warn, etc. are defined
		1
	);
	if( 1 ){
		typeof console != "undefined" || (console = {});
		//	Be careful to leave 'log' always at the end
		var cn = [
			"assert", "count", "debug", "dir", "dirxml", "error", "group",
			"groupEnd", "info", "profile", "profileEnd", "time", "timeEnd",
			"trace", "warn", "log"
		];
		var tn;
		i = 0;
		while((tn = cn[i++])){
			if(!console[tn]){
				(function(){
					var tcn = tn + "";
					console[tcn] = ('log' in console) ? function(){
						var a = Array.prototype.slice.call(arguments);
						a.unshift(tcn + ":");
						console["log"](a.join(" "));
					} : function(){};
					console[tcn]._fake = true;
				})();
			}
		}
	}

	has.add("dojo-debug-messages",
		// include dojo.deprecated/dojo.experimental implementations
		!!config.isDebug
	);
	dojo.deprecated = dojo.experimental =  function(){};
	if(has("dojo-debug-messages")){
		dojo.deprecated = function(/*String*/ behaviour, /*String?*/ extra, /*String?*/ removal){
			// summary:
			//		Log a debug message to indicate that a behavior has been
			//		deprecated.
			// behaviour: String
			//		The API or behavior being deprecated. Usually in the form
			//		of "myApp.someFunction()".
			// extra: String?
			//		Text to append to the message. Often provides advice on a
			//		new function or facility to achieve the same goal during
			//		the deprecation period.
			// removal: String?
			//		Text to indicate when in the future the behavior will be
			//		removed. Usually a version number.
			// example:
			//	| dojo.deprecated("myApp.getTemp()", "use myApp.getLocaleTemp() instead", "1.0");

			var message = "DEPRECATED: " + behaviour;
			if(extra){ message += " " + extra; }
			if(removal){ message += " -- will be removed in version: " + removal; }
			console.warn(message);
		};

		dojo.experimental = function(/* String */ moduleName, /* String? */ extra){
			// summary:
			//		Marks code as experimental.
			// description:
			//		This can be used to mark a function, file, or module as
			//		experimental.	 Experimental code is not ready to be used, and the
			//		APIs are subject to change without notice.	Experimental code may be
			//		completed deleted without going through the normal deprecation
			//		process.
			// moduleName: String
			//		The name of a module, or the name of a module file or a specific
			//		function
			// extra: String?
			//		some additional message for the user
			// example:
			//	| dojo.experimental("dojo.data.Result");
			// example:
			//	| dojo.experimental("dojo.weather.toKelvin()", "PENDING approval from NOAA");

			var message = "EXPERIMENTAL: " + moduleName + " -- APIs subject to change without notice.";
			if(extra){ message += " " + extra; }
			console.warn(message);
		};
	}

	 1 || has.add("dojo-modulePaths",
		// consume dojo.modulePaths processing
		1
	);
	if( 1 ){
		// notice that modulePaths won't be applied to any require's before the dojo/_base/kernel factory is run;
		// this is the v1.6- behavior.
		if(config.modulePaths){
			dojo.deprecated("dojo.modulePaths", "use paths configuration");
			var paths = {};
			for(p in config.modulePaths){
				paths[p.replace(/\./g, "/")] = config.modulePaths[p];
			}
			require({paths:paths});
		}
	}

	 1 || has.add("dojo-moduleUrl",
		// include dojo.moduleUrl
		1
	);
	if( 1 ){
		dojo.moduleUrl = function(/*String*/module, /*String?*/url){
			// summary:
			//		Returns a URL relative to a module.
			// example:
			//	|	var pngPath = dojo.moduleUrl("acme","images/small.png");
			//	|	console.dir(pngPath); // list the object properties
			//	|	// create an image and set it's source to pngPath's value:
			//	|	var img = document.createElement("img");
			//	|	img.src = pngPath;
			//	|	// add our image to the document
			//	|	dojo.body().appendChild(img);
			// example:
			//		you may de-reference as far as you like down the package
			//		hierarchy.  This is sometimes handy to avoid lengthy relative
			//		urls or for building portable sub-packages. In this example,
			//		the `acme.widget` and `acme.util` directories may be located
			//		under different roots (see `dojo.registerModulePath`) but the
			//		the modules which reference them can be unaware of their
			//		relative locations on the filesystem:
			//	|	// somewhere in a configuration block
			//	|	dojo.registerModulePath("acme.widget", "../../acme/widget");
			//	|	dojo.registerModulePath("acme.util", "../../util");
			//	|
			//	|	// ...
			//	|
			//	|	// code in a module using acme resources
			//	|	var tmpltPath = dojo.moduleUrl("acme.widget","templates/template.html");
			//	|	var dataPath = dojo.moduleUrl("acme.util","resources/data.json");

			dojo.deprecated("dojo.moduleUrl()", "use require.toUrl", "2.0");

			// require.toUrl requires a filetype; therefore, just append the suffix "/*.*" to guarantee a filetype, then
			// remove the suffix from the result. This way clients can request a url w/out a filetype. This should be
			// rare, but it maintains backcompat for the v1.x line (note: dojo.moduleUrl will be removed in v2.0).
			// Notice * is an illegal filename so it won't conflict with any real path map that may exist the paths config.
			var result = null;
			if(module){
				result = require.toUrl(module.replace(/\./g, "/") + (url ? ("/" + url) : "") + "/*.*").replace(/\/\*\.\*/, "") + (url ? "" : "/");
			}
			return result;
		};
	}

	dojo._hasResource = {}; // for backward compatibility with layers built with 1.6 tooling

	return dojo;
});

},
'dojo/has':function(){
define(["require", "module"], function(require, module){
	// module:
	//		dojo/has
	// summary:
	//		Defines the has.js API and several feature tests used by dojo.
	// description:
	//		This module defines the has API as described by the project has.js with the following additional features:
	//
	//		- the has test cache is exposed at has.cache.
	//		- the method has.add includes a forth parameter that controls whether or not existing tests are replaced
	//		- the loader's has cache may be optionally copied into this module's has cahce.
	//
	//		This module adopted from https://github.com/phiggins42/has.js; thanks has.js team!

	// try to pull the has implementation from the loader; both the dojo loader and bdLoad provide one
	// if using a foreign loader, then the has cache may be initialized via the config object for this module
	// WARNING: if a foreign loader defines require.has to be something other than the has.js API, then this implementation fail
	var has = require.has || function(){};
	if(! 1 ){
		var
			isBrowser =
				// the most fundamental decision: are we in the browser?
				typeof window != "undefined" &&
				typeof location != "undefined" &&
				typeof document != "undefined" &&
				window.location == location && window.document == document,

			// has API variables
			global = (function () { return this; })(),
			doc = isBrowser && document,
			element = doc && doc.createElement("DiV"),
			cache = (module.config && module.config()) || {};

		has = function(name){
			// summary:
			//		Return the current value of the named feature.
			//
			// name: String|Integer
			//		The name (if a string) or identifier (if an integer) of the feature to test.
			//
			// description:
			//		Returns the value of the feature named by name. The feature must have been
			//		previously added to the cache by has.add.

			return typeof cache[name] == "function" ? (cache[name] = cache[name](global, doc, element)) : cache[name]; // Boolean
		};

		has.cache = cache;

		has.add = function(name, test, now, force){
			// summary:
			//	 	Register a new feature test for some named feature.
			// name: String|Integer
			//	 	The name (if a string) or identifier (if an integer) of the feature to test.
			// test: Function
			//		 A test function to register. If a function, queued for testing until actually
			//		 needed. The test function should return a boolean indicating
			//	 	the presence of a feature or bug.
			// now: Boolean?
			//		 Optional. Omit if `test` is not a function. Provides a way to immediately
			//		 run the test and cache the result.
			// force: Boolean?
			//	 	Optional. If the test already exists and force is truthy, then the existing
			//	 	test will be replaced; otherwise, add does not replace an existing test (that
			//	 	is, by default, the first test advice wins).
			// example:
			//		A redundant test, testFn with immediate execution:
			//	|	has.add("javascript", function(){ return true; }, true);
			//
			// example:
			//		Again with the redundantness. You can do this in your tests, but we should
			//		not be doing this in any internal has.js tests
			//	|	has.add("javascript", true);
			//
			// example:
			//		Three things are passed to the testFunction. `global`, `document`, and a generic element
			//		from which to work your test should the need arise.
			//	|	has.add("bug-byid", function(g, d, el){
			//	|		// g	== global, typically window, yadda yadda
			//	|		// d	== document object
			//	|		// el == the generic element. a `has` element.
			//	|		return false; // fake test, byid-when-form-has-name-matching-an-id is slightly longer
			//	|	});

			(typeof cache[name]=="undefined" || force) && (cache[name]= test);
			return now && has(name);
		};

		// since we're operating under a loader that doesn't provide a has API, we must explicitly initialize
		// has as it would have otherwise been initialized by the dojo loader; use has.add to the builder
		// can optimize these away iff desired
		 1 || has.add("host-browser", isBrowser);
		 0 && has.add("host-node", (typeof process == "object" && process.versions && process.versions.node && process.versions.v8));
		 0 && has.add("host-rhino", (typeof load == "function" && (typeof Packages == "function" || typeof Packages == "object")));
		 1 || has.add("dom", isBrowser);
		 1 || has.add("dojo-dom-ready-api", 1);
		 1 || has.add("dojo-sniff", 1);
	}

	if( 1 ){
		// Common application level tests
		has.add("dom-addeventlistener", !!document.addEventListener);

		// Do the device and browser have touch capability?
		has.add("touch", "ontouchstart" in document
			|| ("onpointerdown" in document && navigator.maxTouchPoints > 0)
			|| window.navigator.msMaxTouchPoints);

		// Touch events support
		has.add("touch-events", "ontouchstart" in document);

		// Pointer Events support
		has.add("pointer-events", "onpointerdown" in document);
		has.add("MSPointer", "msMaxTouchPoints" in navigator); //IE10 (+IE11 preview)

		// I don't know if any of these tests are really correct, just a rough guess
		has.add("device-width", screen.availWidth || innerWidth);

		// Tests for DOMNode.attributes[] behavior:
		//	 - dom-attributes-explicit - attributes[] only lists explicitly user specified attributes
		//	 - dom-attributes-specified-flag (IE8) - need to check attr.specified flag to skip attributes user didn't specify
		//	 - Otherwise, in IE6-7. attributes[] will list hundreds of values, so need to do outerHTML to get attrs instead.
		var form = document.createElement("form");
		has.add("dom-attributes-explicit", form.attributes.length == 0); // W3C
		has.add("dom-attributes-specified-flag", form.attributes.length > 0 && form.attributes.length < 40);	// IE8
	}

	has.clearElement = function(element){
		// summary:
		//	 Deletes the contents of the element passed to test functions.
		element.innerHTML= "";
		return element;
	};

	has.normalize = function(id, toAbsMid){
		// summary:
		//	 Resolves id into a module id based on possibly-nested tenary expression that branches on has feature test value(s).
		//
		// toAbsMid: Function
		//	 Resolves a relative module id into an absolute module id
		var
			tokens = id.match(/[\?:]|[^:\?]*/g), i = 0,
			get = function(skip){
				var term = tokens[i++];
				if(term == ":"){
					// empty string module name, resolves to 0
					return 0;
				}else{
					// postfixed with a ? means it is a feature to branch on, the term is the name of the feature
					if(tokens[i++] == "?"){
						if(!skip && has(term)){
							// matched the feature, get the first value from the options
							return get();
						}else{
							// did not match, get the second value, passing over the first
							get(true);
							return get(skip);
						}
					}
					// a module
					return term || 0;
				}
			};
		id = get();
		return id && toAbsMid(id);
	};

	has.load = function(id, parentRequire, loaded){
		// summary:
		//		Conditional loading of AMD modules based on a has feature test value.
		// id: String
		//		Gives the resolved module id to load.
		// parentRequire: Function
		//		The loader require function with respect to the module that contained the plugin resource in it's
		//		dependency list.
		// loaded: Function
		//	 Callback to loader that consumes result of plugin demand.

		if(id){
			parentRequire([id], loaded);
		}else{
			loaded();
		}
	};

	return has;
});

},
'dojo/_base/config':function(){
define(["../has", "require"], function(has, require){
	// module:
	//		dojo/_base/config

/*=====
return {
	// summary:
	//		This module defines the user configuration during bootstrap.
	// description:
	//		By defining user configuration as a module value, an entire configuration can be specified in a build,
	//		thereby eliminating the need for sniffing and or explicitly setting in the global variable dojoConfig.
	//		Also, when multiple instances of dojo exist in a single application, each will necessarily be located
	//		at an unique absolute module identifier as given by the package configuration. Implementing configuration
	//		as a module allows for specifying unique, per-instance configurations.
	// example:
	//		Create a second instance of dojo with a different, instance-unique configuration (assume the loader and
	//		dojo.js are already loaded).
	//		|	// specify a configuration that creates a new instance of dojo at the absolute module identifier "myDojo"
	//		|	require({
	//		|		packages:[{
	//		|			name:"myDojo",
	//		|			location:".", //assume baseUrl points to dojo.js
	//		|		}]
	//		|	});
	//		|
	//		|	// specify a configuration for the myDojo instance
	//		|	define("myDojo/config", {
	//		|		// normal configuration variables go here, e.g.,
	//		|		locale:"fr-ca"
	//		|	});
	//		|
	//		|	// load and use the new instance of dojo
	//		|	require(["myDojo"], function(dojo){
	//		|		// dojo is the new instance of dojo
	//		|		// use as required
	//		|	});

	// isDebug: Boolean
	//		Defaults to `false`. If set to `true`, ensures that Dojo provides
	//		extended debugging feedback via Firebug. If Firebug is not available
	//		on your platform, setting `isDebug` to `true` will force Dojo to
	//		pull in (and display) the version of Firebug Lite which is
	//		integrated into the Dojo distribution, thereby always providing a
	//		debugging/logging console when `isDebug` is enabled. Note that
	//		Firebug's `console.*` methods are ALWAYS defined by Dojo. If
	//		`isDebug` is false and you are on a platform without Firebug, these
	//		methods will be defined as no-ops.
	isDebug: false,

	// locale: String
	//		The locale to assume for loading localized resources in this page,
	//		specified according to [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt).
	//		Must be specified entirely in lowercase, e.g. `en-us` and `zh-cn`.
	//		See the documentation for `dojo.i18n` and `dojo.requireLocalization`
	//		for details on loading localized resources. If no locale is specified,
	//		Dojo assumes the locale of the user agent, according to `navigator.userLanguage`
	//		or `navigator.language` properties.
	locale: undefined,

	// extraLocale: Array
	//		No default value. Specifies additional locales whose
	//		resources should also be loaded alongside the default locale when
	//		calls to `dojo.requireLocalization()` are processed.
	extraLocale: undefined,

	// baseUrl: String
	//		The directory in which `dojo.js` is located. Under normal
	//		conditions, Dojo auto-detects the correct location from which it
	//		was loaded. You may need to manually configure `baseUrl` in cases
	//		where you have renamed `dojo.js` or in which `<base>` tags confuse
	//		some browsers (e.g. IE 6). The variable `dojo.baseUrl` is assigned
	//		either the value of `djConfig.baseUrl` if one is provided or the
	//		auto-detected root if not. Other modules are located relative to
	//		this path. The path should end in a slash.
	baseUrl: undefined,

	// modulePaths: [deprecated] Object
	//		A map of module names to paths relative to `dojo.baseUrl`. The
	//		key/value pairs correspond directly to the arguments which
	//		`dojo.registerModulePath` accepts. Specifying
	//		`djConfig.modulePaths = { "foo": "../../bar" }` is the equivalent
	//		of calling `dojo.registerModulePath("foo", "../../bar");`. Multiple
	//		modules may be configured via `djConfig.modulePaths`.
	modulePaths: {},

	// addOnLoad: Function|Array
	//		Adds a callback via dojo/ready. Useful when Dojo is added after
	//		the page loads and djConfig.afterOnLoad is true. Supports the same
	//		arguments as dojo/ready. When using a function reference, use
	//		`djConfig.addOnLoad = function(){};`. For object with function name use
	//		`djConfig.addOnLoad = [myObject, "functionName"];` and for object with
	//		function reference use
	//		`djConfig.addOnLoad = [myObject, function(){}];`
	addOnLoad: null,

	// parseOnLoad: Boolean
	//		Run the parser after the page is loaded
	parseOnLoad: false,

	// require: String[]
	//		An array of module names to be loaded immediately after dojo.js has been included
	//		in a page.
	require: [],

	// defaultDuration: Number
	//		Default duration, in milliseconds, for wipe and fade animations within dijits.
	//		Assigned to dijit.defaultDuration.
	defaultDuration: 200,

	// dojoBlankHtmlUrl: String
	//		Used by some modules to configure an empty iframe. Used by dojo/io/iframe and
	//		dojo/back, and dijit/popup support in IE where an iframe is needed to make sure native
	//		controls do not bleed through the popups. Normally this configuration variable
	//		does not need to be set, except when using cross-domain/CDN Dojo builds.
	//		Save dojo/resources/blank.html to your domain and set `djConfig.dojoBlankHtmlUrl`
	//		to the path on your domain your copy of blank.html.
	dojoBlankHtmlUrl: undefined,

	// ioPublish: Boolean?
	//		Set this to true to enable publishing of topics for the different phases of
	//		IO operations. Publishing is done via dojo/topic.publish(). See dojo/main.__IoPublish for a list
	//		of topics that are published.
	ioPublish: false,

	// useCustomLogger: Anything?
	//		If set to a value that evaluates to true such as a string or array and
	//		isDebug is true and Firebug is not available or running, then it bypasses
	//		the creation of Firebug Lite allowing you to define your own console object.
	useCustomLogger: undefined,

	// transparentColor: Array
	//		Array containing the r, g, b components used as transparent color in dojo.Color;
	//		if undefined, [255,255,255] (white) will be used.
	transparentColor: undefined,
	
	// deps: Function|Array
	//		Defines dependencies to be used before the loader has been loaded.
	//		When provided, they cause the loader to execute require(deps, callback) 
	//		once it has finished loading. Should be used with callback.
	deps: undefined,
	
	// callback: Function|Array
	//		Defines a callback to be used when dependencies are defined before 
	//		the loader has been loaded. When provided, they cause the loader to 
	//		execute require(deps, callback) once it has finished loading. 
	//		Should be used with deps.
	callback: undefined,
	
	// deferredInstrumentation: Boolean
	//		Whether deferred instrumentation should be loaded or included
	//		in builds.
	deferredInstrumentation: true,

	// useDeferredInstrumentation: Boolean|String
	//		Whether the deferred instrumentation should be used.
	//
	//		* `"report-rejections"`: report each rejection as it occurs.
	//		* `true` or `1` or `"report-unhandled-rejections"`: wait 1 second
	//			in an attempt to detect unhandled rejections.
	useDeferredInstrumentation: "report-unhandled-rejections"
};
=====*/

	var result = {};
	if( 1 ){
		// must be the dojo loader; take a shallow copy of require.rawConfig
		var src = require.rawConfig, p;
		for(p in src){
			result[p] = src[p];
		}
	}else{
		var adviseHas = function(featureSet, prefix, booting){
			for(p in featureSet){
				p!="has" && has.add(prefix + p, featureSet[p], 0, booting);
			}
		};
		var global = (function () { return this; })();
		result =  1  ?
			// must be a built version of the dojo loader; all config stuffed in require.rawConfig
			require.rawConfig :
			// a foreign loader
			global.dojoConfig || global.djConfig || {};
		adviseHas(result, "config", 1);
		adviseHas(result.has, "", 1);
	}

	if(!result.locale && typeof navigator != "undefined"){
		// Default locale for browsers.
		var language = (navigator.language || navigator.userLanguage);
		if(language){
			result.locale = language.toLowerCase();
		}
	}

	return result;
});


},
'dojo/_base/lang':function(){
define(["./kernel", "../has", "../sniff"], function(dojo, has){
	// module:
	//		dojo/_base/lang

	has.add("bug-for-in-skips-shadowed", function(){
		// if true, the for-in iterator skips object properties that exist in Object's prototype (IE 6 - ?)
		for(var i in {toString: 1}){
			return 0;
		}
		return 1;
	});

	// Helper methods
	var _extraNames =
			has("bug-for-in-skips-shadowed") ?
				"hasOwnProperty.valueOf.isPrototypeOf.propertyIsEnumerable.toLocaleString.toString.constructor".split(".") : [],

		_extraLen = _extraNames.length,

		getProp = function(/*Array*/parts, /*Boolean*/create, /*Object*/context){
			if(!context){
				if(parts[0] && dojo.scopeMap[parts[0]]) {
					// Voodoo code from the old days where "dojo" or "dijit" maps to some special object
					// rather than just window.dojo
					context = dojo.scopeMap[parts.shift()][1];
				}else{
					context = dojo.global;
				}
			}

			try{
				for(var i = 0; i < parts.length; i++){
					var p = parts[i];
					if(!(p in context)){
						if(create){
							context[p] = {};
						}else{
							return;		// return undefined
						}
					}
					context = context[p];
				}
				return context; // mixed
			}catch(e){
				// "p in context" throws an exception when context is a number, boolean, etc. rather than an object,
				// so in that corner case just return undefined (by having no return statement)
			}
		},

		opts = Object.prototype.toString,

		efficient = function(obj, offset, startWith){
			return (startWith||[]).concat(Array.prototype.slice.call(obj, offset||0));
		},

		_pattern = /\{([^\}]+)\}/g;

	// Module export
	var lang = {
		// summary:
		//		This module defines Javascript language extensions.

		// _extraNames: String[]
		//		Lists property names that must be explicitly processed during for-in iteration
		//		in environments that have has("bug-for-in-skips-shadowed") true.
		_extraNames:_extraNames,

		_mixin: function(dest, source, copyFunc){
			// summary:
			//		Copies/adds all properties of source to dest; returns dest.
			// dest: Object
			//		The object to which to copy/add all properties contained in source.
			// source: Object
			//		The object from which to draw all properties to copy into dest.
			// copyFunc: Function?
			//		The process used to copy/add a property in source; defaults to the Javascript assignment operator.
			// returns:
			//		dest, as modified
			// description:
			//		All properties, including functions (sometimes termed "methods"), excluding any non-standard extensions
			//		found in Object.prototype, are copied/added to dest. Copying/adding each particular property is
			//		delegated to copyFunc (if any); copyFunc defaults to the Javascript assignment operator if not provided.
			//		Notice that by default, _mixin executes a so-called "shallow copy" and aggregate types are copied/added by reference.
			var name, s, i, empty = {};
			for(name in source){
				// the (!(name in empty) || empty[name] !== s) condition avoids copying properties in "source"
				// inherited from Object.prototype.	 For example, if dest has a custom toString() method,
				// don't overwrite it with the toString() method that source inherited from Object.prototype
				s = source[name];
				if(!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))){
					dest[name] = copyFunc ? copyFunc(s) : s;
				}
			}

			if(has("bug-for-in-skips-shadowed")){
				if(source){
					for(i = 0; i < _extraLen; ++i){
						name = _extraNames[i];
						s = source[name];
						if(!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))){
							dest[name] = copyFunc ? copyFunc(s) : s;
						}
					}
				}
			}

			return dest; // Object
		},

		mixin: function(dest, sources){
			// summary:
			//		Copies/adds all properties of one or more sources to dest; returns dest.
			// dest: Object
			//		The object to which to copy/add all properties contained in source. If dest is falsy, then
			//		a new object is manufactured before copying/adding properties begins.
			// sources: Object...
			//		One of more objects from which to draw all properties to copy into dest. sources are processed
			//		left-to-right and if more than one of these objects contain the same property name, the right-most
			//		value "wins".
			// returns: Object
			//		dest, as modified
			// description:
			//		All properties, including functions (sometimes termed "methods"), excluding any non-standard extensions
			//		found in Object.prototype, are copied/added from sources to dest. sources are processed left to right.
			//		The Javascript assignment operator is used to copy/add each property; therefore, by default, mixin
			//		executes a so-called "shallow copy" and aggregate types are copied/added by reference.
			// example:
			//		make a shallow copy of an object
			//	|	var copy = lang.mixin({}, source);
			// example:
			//		many class constructors often take an object which specifies
			//		values to be configured on the object. In this case, it is
			//		often simplest to call `lang.mixin` on the `this` object:
			//	|	declare("acme.Base", null, {
			//	|		constructor: function(properties){
			//	|			// property configuration:
			//	|			lang.mixin(this, properties);
			//	|
			//	|			console.log(this.quip);
			//	|			//	...
			//	|		},
			//	|		quip: "I wasn't born yesterday, you know - I've seen movies.",
			//	|		// ...
			//	|	});
			//	|
			//	|	// create an instance of the class and configure it
			//	|	var b = new acme.Base({quip: "That's what it does!" });
			// example:
			//		copy in properties from multiple objects
			//	|	var flattened = lang.mixin(
			//	|		{
			//	|			name: "Frylock",
			//	|			braces: true
			//	|		},
			//	|		{
			//	|			name: "Carl Brutanananadilewski"
			//	|		}
			//	|	);
			//	|
			//	|	// will print "Carl Brutanananadilewski"
			//	|	console.log(flattened.name);
			//	|	// will print "true"
			//	|	console.log(flattened.braces);

			if(!dest){ dest = {}; }
			for(var i = 1, l = arguments.length; i < l; i++){
				lang._mixin(dest, arguments[i]);
			}
			return dest; // Object
		},

		setObject: function(name, value, context){
			// summary:
			//		Set a property from a dot-separated string, such as "A.B.C"
			// description:
			//		Useful for longer api chains where you have to test each object in
			//		the chain, or when you have an object reference in string format.
			//		Objects are created as needed along `path`. Returns the passed
			//		value if setting is successful or `undefined` if not.
			// name: String
			//		Path to a property, in the form "A.B.C".
			// value: anything
			//		value or object to place at location given by name
			// context: Object?
			//		Optional. Object to use as root of path. Defaults to
			//		`dojo.global`.
			// example:
			//		set the value of `foo.bar.baz`, regardless of whether
			//		intermediate objects already exist:
			//	| lang.setObject("foo.bar.baz", value);
			// example:
			//		without `lang.setObject`, we often see code like this:
			//	| // ensure that intermediate objects are available
			//	| if(!obj["parent"]){ obj.parent = {}; }
			//	| if(!obj.parent["child"]){ obj.parent.child = {}; }
			//	| // now we can safely set the property
			//	| obj.parent.child.prop = "some value";
			//		whereas with `lang.setObject`, we can shorten that to:
			//	| lang.setObject("parent.child.prop", "some value", obj);

			var parts = name.split("."), p = parts.pop(), obj = getProp(parts, true, context);
			return obj && p ? (obj[p] = value) : undefined; // Object
		},

		getObject: function(name, create, context){
			// summary:
			//		Get a property from a dot-separated string, such as "A.B.C"
			// description:
			//		Useful for longer api chains where you have to test each object in
			//		the chain, or when you have an object reference in string format.
			// name: String
			//		Path to an property, in the form "A.B.C".
			// create: Boolean?
			//		Optional. Defaults to `false`. If `true`, Objects will be
			//		created at any point along the 'path' that is undefined.
			// context: Object?
			//		Optional. Object to use as root of path. Defaults to
			//		'dojo.global'. Null may be passed.
			return getProp(name ? name.split(".") : [], create, context); // Object
		},

		exists: function(name, obj){
			// summary:
			//		determine if an object supports a given method
			// description:
			//		useful for longer api chains where you have to test each object in
			//		the chain. Useful for object and method detection.
			// name: String
			//		Path to an object, in the form "A.B.C".
			// obj: Object?
			//		Object to use as root of path. Defaults to
			//		'dojo.global'. Null may be passed.
			// example:
			//	| // define an object
			//	| var foo = {
			//	|		bar: { }
			//	| };
			//	|
			//	| // search the global scope
			//	| lang.exists("foo.bar"); // true
			//	| lang.exists("foo.bar.baz"); // false
			//	|
			//	| // search from a particular scope
			//	| lang.exists("bar", foo); // true
			//	| lang.exists("bar.baz", foo); // false
			return lang.getObject(name, false, obj) !== undefined; // Boolean
		},

		// Crockford (ish) functions

		isString: function(it){
			// summary:
			//		Return true if it is a String
			// it: anything
			//		Item to test.
			return (typeof it == "string" || it instanceof String); // Boolean
		},

		isArray: function(it){
			// summary:
			//		Return true if it is an Array.
			//		Does not work on Arrays created in other windows.
			// it: anything
			//		Item to test.
			return it && (it instanceof Array || typeof it == "array"); // Boolean
		},

		isFunction: function(it){
			// summary:
			//		Return true if it is a Function
			// it: anything
			//		Item to test.
			return opts.call(it) === "[object Function]";
		},

		isObject: function(it){
			// summary:
			//		Returns true if it is a JavaScript object (or an Array, a Function
			//		or null)
			// it: anything
			//		Item to test.
			return it !== undefined &&
				(it === null || typeof it == "object" || lang.isArray(it) || lang.isFunction(it)); // Boolean
		},

		isArrayLike: function(it){
			// summary:
			//		similar to isArray() but more permissive
			// it: anything
			//		Item to test.
			// returns:
			//		If it walks like a duck and quacks like a duck, return `true`
			// description:
			//		Doesn't strongly test for "arrayness".  Instead, settles for "isn't
			//		a string or number and has a length property". Arguments objects
			//		and DOM collections will return true when passed to
			//		isArrayLike(), but will return false when passed to
			//		isArray().
			return it && it !== undefined && // Boolean
				// keep out built-in constructors (Number, String, ...) which have length
				// properties
				!lang.isString(it) && !lang.isFunction(it) &&
				!(it.tagName && it.tagName.toLowerCase() == 'form') &&
				(lang.isArray(it) || isFinite(it.length));
		},

		isAlien: function(it){
			// summary:
			//		Returns true if it is a built-in function or some other kind of
			//		oddball that *should* report as a function but doesn't
			return it && !lang.isFunction(it) && /\{\s*\[native code\]\s*\}/.test(String(it)); // Boolean
		},

		extend: function(ctor, props){
			// summary:
			//		Adds all properties and methods of props to constructor's
			//		prototype, making them available to all instances created with
			//		constructor.
			// ctor: Object
			//		Target constructor to extend.
			// props: Object
			//		One or more objects to mix into ctor.prototype
			for(var i=1, l=arguments.length; i<l; i++){
				lang._mixin(ctor.prototype, arguments[i]);
			}
			return ctor; // Object
		},

		_hitchArgs: function(scope, method){
			var pre = lang._toArray(arguments, 2);
			var named = lang.isString(method);
			return function(){
				// arrayify arguments
				var args = lang._toArray(arguments);
				// locate our method
				var f = named ? (scope||dojo.global)[method] : method;
				// invoke with collected args
				return f && f.apply(scope || this, pre.concat(args)); // mixed
			}; // Function
		},

		hitch: function(scope, method){
			// summary:
			//		Returns a function that will only ever execute in the given scope.
			//		This allows for easy use of object member functions
			//		in callbacks and other places in which the "this" keyword may
			//		otherwise not reference the expected scope.
			//		Any number of default positional arguments may be passed as parameters
			//		beyond "method".
			//		Each of these values will be used to "placehold" (similar to curry)
			//		for the hitched function.
			// scope: Object
			//		The scope to use when method executes. If method is a string,
			//		scope is also the object containing method.
			// method: Function|String...
			//		A function to be hitched to scope, or the name of the method in
			//		scope to be hitched.
			// example:
			//	|	lang.hitch(foo, "bar")();
			//		runs foo.bar() in the scope of foo
			// example:
			//	|	lang.hitch(foo, myFunction);
			//		returns a function that runs myFunction in the scope of foo
			// example:
			//		Expansion on the default positional arguments passed along from
			//		hitch. Passed args are mixed first, additional args after.
			//	|	var foo = { bar: function(a, b, c){ console.log(a, b, c); } };
			//	|	var fn = lang.hitch(foo, "bar", 1, 2);
			//	|	fn(3); // logs "1, 2, 3"
			// example:
			//	|	var foo = { bar: 2 };
			//	|	lang.hitch(foo, function(){ this.bar = 10; })();
			//		execute an anonymous function in scope of foo
			if(arguments.length > 2){
				return lang._hitchArgs.apply(dojo, arguments); // Function
			}
			if(!method){
				method = scope;
				scope = null;
			}
			if(lang.isString(method)){
				scope = scope || dojo.global;
				if(!scope[method]){ throw(['lang.hitch: scope["', method, '"] is null (scope="', scope, '")'].join('')); }
				return function(){ return scope[method].apply(scope, arguments || []); }; // Function
			}
			return !scope ? method : function(){ return method.apply(scope, arguments || []); }; // Function
		},

		delegate: (function(){
			// boodman/crockford delegation w/ cornford optimization
			function TMP(){}
			return function(obj, props){
				TMP.prototype = obj;
				var tmp = new TMP();
				TMP.prototype = null;
				if(props){
					lang._mixin(tmp, props);
				}
				return tmp; // Object
			};
		})(),
		/*=====
		delegate: function(obj, props){
			// summary:
			//		Returns a new object which "looks" to obj for properties which it
			//		does not have a value for. Optionally takes a bag of properties to
			//		seed the returned object with initially.
			// description:
			//		This is a small implementation of the Boodman/Crockford delegation
			//		pattern in JavaScript. An intermediate object constructor mediates
			//		the prototype chain for the returned object, using it to delegate
			//		down to obj for property lookup when object-local lookup fails.
			//		This can be thought of similarly to ES4's "wrap", save that it does
			//		not act on types but rather on pure objects.
			// obj: Object
			//		The object to delegate to for properties not found directly on the
			//		return object or in props.
			// props: Object...
			//		an object containing properties to assign to the returned object
			// returns:
			//		an Object of anonymous type
			// example:
			//	|	var foo = { bar: "baz" };
			//	|	var thinger = lang.delegate(foo, { thud: "xyzzy"});
			//	|	thinger.bar == "baz"; // delegated to foo
			//	|	foo.thud == undefined; // by definition
			//	|	thinger.thud == "xyzzy"; // mixed in from props
			//	|	foo.bar = "thonk";
			//	|	thinger.bar == "thonk"; // still delegated to foo's bar
		},
		=====*/

		_toArray: has("ie") ?
			(function(){
				function slow(obj, offset, startWith){
					var arr = startWith||[];
					for(var x = offset || 0; x < obj.length; x++){
						arr.push(obj[x]);
					}
					return arr;
				}
				return function(obj){
					return ((obj.item) ? slow : efficient).apply(this, arguments);
				};
			})() : efficient,
		/*=====
		 _toArray: function(obj, offset, startWith){
			 // summary:
			 //		Converts an array-like object (i.e. arguments, DOMCollection) to an
			 //		array. Returns a new Array with the elements of obj.
			 // obj: Object
			 //		the object to "arrayify". We expect the object to have, at a
			 //		minimum, a length property which corresponds to integer-indexed
			 //		properties.
			 // offset: Number?
			 //		the location in obj to start iterating from. Defaults to 0.
			 //		Optional.
			 // startWith: Array?
			 //		An array to pack with the properties of obj. If provided,
			 //		properties in obj are appended at the end of startWith and
			 //		startWith is the returned array.
		 },
		 =====*/

		partial: function(/*Function|String*/ method /*, ...*/){
			// summary:
			//		similar to hitch() except that the scope object is left to be
			//		whatever the execution context eventually becomes.
			// description:
			//		Calling lang.partial is the functional equivalent of calling:
			//		|	lang.hitch(null, funcName, ...);
			// method:
			//		The function to "wrap"
			var arr = [ null ];
			return lang.hitch.apply(dojo, arr.concat(lang._toArray(arguments))); // Function
		},

		clone: function(/*anything*/ src){
			// summary:
			//		Clones objects (including DOM nodes) and all children.
			//		Warning: do not clone cyclic structures.
			// src:
			//		The object to clone
			if(!src || typeof src != "object" || lang.isFunction(src)){
				// null, undefined, any non-object, or function
				return src;	// anything
			}
			if(src.nodeType && "cloneNode" in src){
				// DOM Node
				return src.cloneNode(true); // Node
			}
			if(src instanceof Date){
				// Date
				return new Date(src.getTime());	// Date
			}
			if(src instanceof RegExp){
				// RegExp
				return new RegExp(src);   // RegExp
			}
			var r, i, l;
			if(lang.isArray(src)){
				// array
				r = [];
				for(i = 0, l = src.length; i < l; ++i){
					if(i in src){
						r.push(lang.clone(src[i]));
					}
				}
				// we don't clone functions for performance reasons
				//		}else if(d.isFunction(src)){
				//			// function
				//			r = function(){ return src.apply(this, arguments); };
			}else{
				// generic objects
				r = src.constructor ? new src.constructor() : {};
			}
			return lang._mixin(r, src, lang.clone);
		},


		trim: String.prototype.trim ?
			function(str){ return str.trim(); } :
			function(str){ return str.replace(/^\s\s*/, '').replace(/\s\s*$/, ''); },
		/*=====
		 trim: function(str){
			 // summary:
			 //		Trims whitespace from both sides of the string
			 // str: String
			 //		String to be trimmed
			 // returns: String
			 //		Returns the trimmed string
			 // description:
			 //		This version of trim() was selected for inclusion into the base due
			 //		to its compact size and relatively good performance
			 //		(see [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript)
			 //		Uses String.prototype.trim instead, if available.
			 //		The fastest but longest version of this function is located at
			 //		lang.string.trim()
		 },
		 =====*/

		replace: function(tmpl, map, pattern){
			// summary:
			//		Performs parameterized substitutions on a string. Throws an
			//		exception if any parameter is unmatched.
			// tmpl: String
			//		String to be used as a template.
			// map: Object|Function
			//		If an object, it is used as a dictionary to look up substitutions.
			//		If a function, it is called for every substitution with following parameters:
			//		a whole match, a name, an offset, and the whole template
			//		string (see https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/String/replace
			//		for more details).
			// pattern: RegEx?
			//		Optional regular expression objects that overrides the default pattern.
			//		Must be global and match one item. The default is: /\{([^\}]+)\}/g,
			//		which matches patterns like that: "{xxx}", where "xxx" is any sequence
			//		of characters, which doesn't include "}".
			// returns: String
			//		Returns the substituted string.
			// example:
			//	|	// uses a dictionary for substitutions:
			//	|	lang.replace("Hello, {name.first} {name.last} AKA {nick}!",
			//	|		{
			//	|			nick: "Bob",
			//	|			name: {
			//	|				first:	"Robert",
			//	|				middle: "X",
			//	|				last:		"Cringely"
			//	|			}
			//	|		});
			//	|	// returns: Hello, Robert Cringely AKA Bob!
			// example:
			//	|	// uses an array for substitutions:
			//	|	lang.replace("Hello, {0} {2}!",
			//	|		["Robert", "X", "Cringely"]);
			//	|	// returns: Hello, Robert Cringely!
			// example:
			//	|	// uses a function for substitutions:
			//	|	function sum(a){
			//	|		var t = 0;
			//	|		arrayforEach(a, function(x){ t += x; });
			//	|		return t;
			//	|	}
			//	|	lang.replace(
			//	|		"{count} payments averaging {avg} USD per payment.",
			//	|		lang.hitch(
			//	|			{ payments: [11, 16, 12] },
			//	|			function(_, key){
			//	|				switch(key){
			//	|					case "count": return this.payments.length;
			//	|					case "min":		return Math.min.apply(Math, this.payments);
			//	|					case "max":		return Math.max.apply(Math, this.payments);
			//	|					case "sum":		return sum(this.payments);
			//	|					case "avg":		return sum(this.payments) / this.payments.length;
			//	|				}
			//	|			}
			//	|		)
			//	|	);
			//	|	// prints: 3 payments averaging 13 USD per payment.
			// example:
			//	|	// uses an alternative PHP-like pattern for substitutions:
			//	|	lang.replace("Hello, ${0} ${2}!",
			//	|		["Robert", "X", "Cringely"], /\$\{([^\}]+)\}/g);
			//	|	// returns: Hello, Robert Cringely!

			return tmpl.replace(pattern || _pattern, lang.isFunction(map) ?
				map : function(_, k){ return lang.getObject(k, false, map); });
		}
	};

	 1  && lang.mixin(dojo, lang);

	return lang;
});


},
'dojo/sniff':function(){
define(["./has"], function(has){
	// module:
	//		dojo/sniff

	/*=====
	return function(){
		// summary:
		//		This module sets has() flags based on the current browser.
		//		It returns the has() function.
	};
	=====*/

	if( 1 ){
		var n = navigator,
			dua = n.userAgent,
			dav = n.appVersion,
			tv = parseFloat(dav);

		has.add("air", dua.indexOf("AdobeAIR") >= 0);
		has.add("msapp", parseFloat(dua.split("MSAppHost/")[1]) || undefined);
		has.add("khtml", dav.indexOf("Konqueror") >= 0 ? tv : undefined);
		has.add("webkit", parseFloat(dua.split("WebKit/")[1]) || undefined);
		has.add("chrome", parseFloat(dua.split("Chrome/")[1]) || undefined);
		has.add("safari", dav.indexOf("Safari")>=0 && !has("chrome") ? parseFloat(dav.split("Version/")[1]) : undefined);
		has.add("mac", dav.indexOf("Macintosh") >= 0);
		has.add("quirks", document.compatMode == "BackCompat");
		if(dua.match(/(iPhone|iPod|iPad)/)){
			var p = RegExp.$1.replace(/P/, "p");
			var v = dua.match(/OS ([\d_]+)/) ? RegExp.$1 : "1";
			var os = parseFloat(v.replace(/_/, ".").replace(/_/g, ""));
			has.add(p, os);		// "iphone", "ipad" or "ipod"
			has.add("ios", os);
		}
		has.add("android", parseFloat(dua.split("Android ")[1]) || undefined);
		has.add("bb", (dua.indexOf("BlackBerry") >= 0 || dua.indexOf("BB10") >= 0) && parseFloat(dua.split("Version/")[1]) || undefined);
		has.add("trident", parseFloat(dav.split("Trident/")[1]) || undefined);

		has.add("svg", typeof SVGAngle !== "undefined");

		if(!has("webkit")){
			// Opera
			if(dua.indexOf("Opera") >= 0){
				// see http://dev.opera.com/articles/view/opera-ua-string-changes and http://www.useragentstring.com/pages/Opera/
				// 9.8 has both styles; <9.8, 9.9 only old style
				has.add("opera", tv >= 9.8 ? parseFloat(dua.split("Version/")[1]) || tv : tv);
			}

			// Mozilla and firefox
			if(dua.indexOf("Gecko") >= 0 && !has("khtml") && !has("webkit") && !has("trident")){
				has.add("mozilla", tv);
			}
			if(has("mozilla")){
				//We really need to get away from this. Consider a sane isGecko approach for the future.
				has.add("ff", parseFloat(dua.split("Firefox/")[1] || dua.split("Minefield/")[1]) || undefined);
			}

			// IE
			if(document.all && !has("opera")){
				var isIE = parseFloat(dav.split("MSIE ")[1]) || undefined;

				//In cases where the page has an HTTP header or META tag with
				//X-UA-Compatible, then it is in emulation mode.
				//Make sure isIE reflects the desired version.
				//document.documentMode of 5 means quirks mode.
				//Only switch the value if documentMode's major version
				//is different from isIE's major version.
				var mode = document.documentMode;
				if(mode && mode != 5 && Math.floor(isIE) != mode){
					isIE = mode;
				}

				has.add("ie", isIE);
			}

			// Wii
			has.add("wii", typeof opera != "undefined" && opera.wiiremote);
		}
	}

	return has;
});

},
'dojo/_base/Color':function(){
define(["./kernel", "./lang", "./array", "./config"], function(dojo, lang, ArrayUtil, config){

	var Color = dojo.Color = function(/*Array|String|Object*/ color){
		// summary:
		//		Takes a named string, hex string, array of rgb or rgba values,
		//		an object with r, g, b, and a properties, or another `Color` object
		//		and creates a new Color instance to work from.
		//
		// example:
		//		Work with a Color instance:
		//	|	require(["dojo/_base/color"], function(Color){
		//	|		var c = new Color();
		//	|		c.setColor([0,0,0]); // black
		//	|		var hex = c.toHex(); // #000000
		//	|	});
		//
		// example:
		//		Work with a node's color:
		//	| 
		//	|	require(["dojo/_base/color", "dojo/dom-style"], function(Color, domStyle){
		//	|		var color = domStyle("someNode", "backgroundColor");
		//	|		var n = new Color(color);
		//	|		// adjust the color some
		//	|		n.r *= .5;
		//	|		console.log(n.toString()); // rgb(128, 255, 255);
		//	|	});
		if(color){ this.setColor(color); }
	};

	// FIXME:
	// there's got to be a more space-efficient way to encode or discover
	// these!! Use hex?
	Color.named = {
		// summary:
		//		Dictionary list of all CSS named colors, by name. Values are 3-item arrays with corresponding RG and B values.
		"black":  [0,0,0],
		"silver": [192,192,192],
		"gray":	  [128,128,128],
		"white":  [255,255,255],
		"maroon": [128,0,0],
		"red":	  [255,0,0],
		"purple": [128,0,128],
		"fuchsia":[255,0,255],
		"green":  [0,128,0],
		"lime":	  [0,255,0],
		"olive":  [128,128,0],
		"yellow": [255,255,0],
		"navy":	  [0,0,128],
		"blue":	  [0,0,255],
		"teal":	  [0,128,128],
		"aqua":	  [0,255,255],
		"transparent": config.transparentColor || [0,0,0,0]
	};

	lang.extend(Color, {
		r: 255, g: 255, b: 255, a: 1,
		_set: function(r, g, b, a){
			var t = this; t.r = r; t.g = g; t.b = b; t.a = a;
		},
		setColor: function(/*Array|String|Object*/ color){
			// summary:
			//		Takes a named string, hex string, array of rgb or rgba values,
			//		an object with r, g, b, and a properties, or another `Color` object
			//		and sets this color instance to that value.
			//
			// example:
			//	|	require(["dojo/_base/color"], function(Color){
			//	|		var c = new Color(); // no color
			//	|		c.setColor("#ededed"); // greyish
			//	|	});
			if(lang.isString(color)){
				Color.fromString(color, this);
			}else if(lang.isArray(color)){
				Color.fromArray(color, this);
			}else{
				this._set(color.r, color.g, color.b, color.a);
				if(!(color instanceof Color)){ this.sanitize(); }
			}
			return this;	// Color
		},
		sanitize: function(){
			// summary:
			//		Ensures the object has correct attributes
			// description:
			//		the default implementation does nothing, include dojo.colors to
			//		augment it with real checks
			return this;	// Color
		},
		toRgb: function(){
			// summary:
			//		Returns 3 component array of rgb values
			// example:
			//	|	require(["dojo/_base/color"], function(Color){
			//	|		var c = new Color("#000000");
			//	|		console.log(c.toRgb()); // [0,0,0]
			//	|	});
			var t = this;
			return [t.r, t.g, t.b]; // Array
		},
		toRgba: function(){
			// summary:
			//		Returns a 4 component array of rgba values from the color
			//		represented by this object.
			var t = this;
			return [t.r, t.g, t.b, t.a];	// Array
		},
		toHex: function(){
			// summary:
			//		Returns a CSS color string in hexadecimal representation
			// example:
			//	|	require(["dojo/_base/color"], function(Color){
			//	|		console.log(new Color([0,0,0]).toHex()); // #000000
			//	|	});
			var arr = ArrayUtil.map(["r", "g", "b"], function(x){
				var s = this[x].toString(16);
				return s.length < 2 ? "0" + s : s;
			}, this);
			return "#" + arr.join("");	// String
		},
		toCss: function(/*Boolean?*/ includeAlpha){
			// summary:
			//		Returns a css color string in rgb(a) representation
			// example:
			//	|	require(["dojo/_base/color"], function(Color){
			//	|		var c = new Color("#FFF").toCss();
			//	|		console.log(c); // rgb('255','255','255')
			//	|	});
			var t = this, rgb = t.r + ", " + t.g + ", " + t.b;
			return (includeAlpha ? "rgba(" + rgb + ", " + t.a : "rgb(" + rgb) + ")";	// String
		},
		toString: function(){
			// summary:
			//		Returns a visual representation of the color
			return this.toCss(true); // String
		}
	});

	Color.blendColors = dojo.blendColors = function(
		/*Color*/ start,
		/*Color*/ end,
		/*Number*/ weight,
		/*Color?*/ obj
	){
		// summary:
		//		Blend colors end and start with weight from 0 to 1, 0.5 being a 50/50 blend,
		//		can reuse a previously allocated Color object for the result
		var t = obj || new Color();
		ArrayUtil.forEach(["r", "g", "b", "a"], function(x){
			t[x] = start[x] + (end[x] - start[x]) * weight;
			if(x != "a"){ t[x] = Math.round(t[x]); }
		});
		return t.sanitize();	// Color
	};

	Color.fromRgb = dojo.colorFromRgb = function(/*String*/ color, /*Color?*/ obj){
		// summary:
		//		Returns a `Color` instance from a string of the form
		//		"rgb(...)" or "rgba(...)". Optionally accepts a `Color`
		//		object to update with the parsed value and return instead of
		//		creating a new object.
		// returns:
		//		A Color object. If obj is passed, it will be the return value.
		var m = color.toLowerCase().match(/^rgba?\(([\s\.,0-9]+)\)/);
		return m && Color.fromArray(m[1].split(/\s*,\s*/), obj);	// Color
	};

	Color.fromHex = dojo.colorFromHex = function(/*String*/ color, /*Color?*/ obj){
		// summary:
		//		Converts a hex string with a '#' prefix to a color object.
		//		Supports 12-bit #rgb shorthand. Optionally accepts a
		//		`Color` object to update with the parsed value.
		//
		// returns:
		//		A Color object. If obj is passed, it will be the return value.
		//
		// example:
		//	|	require(["dojo/_base/color"], function(Color){
		//	|		var thing = new Color().fromHex("#ededed"); // grey, longhand
		//	|		var thing2 = new Color().fromHex("#000"); // black, shorthand
		//	|	});
		var t = obj || new Color(),
			bits = (color.length == 4) ? 4 : 8,
			mask = (1 << bits) - 1;
		color = Number("0x" + color.substr(1));
		if(isNaN(color)){
			return null; // Color
		}
		ArrayUtil.forEach(["b", "g", "r"], function(x){
			var c = color & mask;
			color >>= bits;
			t[x] = bits == 4 ? 17 * c : c;
		});
		t.a = 1;
		return t;	// Color
	};

	Color.fromArray = dojo.colorFromArray = function(/*Array*/ a, /*Color?*/ obj){
		// summary:
		//		Builds a `Color` from a 3 or 4 element array, mapping each
		//		element in sequence to the rgb(a) values of the color.
		// example:
		//		|	require(["dojo/_base/color"], function(Color){
		//		|		var myColor = new Color().fromArray([237,237,237,0.5]); // grey, 50% alpha
		//		|	});
		// returns:
		//		A Color object. If obj is passed, it will be the return value.
		var t = obj || new Color();
		t._set(Number(a[0]), Number(a[1]), Number(a[2]), Number(a[3]));
		if(isNaN(t.a)){ t.a = 1; }
		return t.sanitize();	// Color
	};

	Color.fromString = dojo.colorFromString = function(/*String*/ str, /*Color?*/ obj){
		// summary:
		//		Parses `str` for a color value. Accepts hex, rgb, and rgba
		//		style color values.
		// description:
		//		Acceptable input values for str may include arrays of any form
		//		accepted by dojo.colorFromArray, hex strings such as "#aaaaaa", or
		//		rgb or rgba strings such as "rgb(133, 200, 16)" or "rgba(10, 10,
		//		10, 50)"
		// returns:
		//		A Color object. If obj is passed, it will be the return value.
		var a = Color.named[str];
		return a && Color.fromArray(a, obj) || Color.fromRgb(str, obj) || Color.fromHex(str, obj);	// Color
	};

	return Color;
});

},
'dojo/_base/array':function(){
define(["./kernel", "../has", "./lang"], function(dojo, has, lang){
	// module:
	//		dojo/_base/array

	// our old simple function builder stuff
	var cache = {}, u;

	function buildFn(fn){
		return cache[fn] = new Function("item", "index", "array", fn); // Function
	}
	// magic snippet: if(typeof fn == "string") fn = cache[fn] || buildFn(fn);

	// every & some

	function everyOrSome(some){
		var every = !some;
		return function(a, fn, o){
			var i = 0, l = a && a.length || 0, result;
			if(l && typeof a == "string") a = a.split("");
			if(typeof fn == "string") fn = cache[fn] || buildFn(fn);
			if(o){
				for(; i < l; ++i){
					result = !fn.call(o, a[i], i, a);
					if(some ^ result){
						return !result;
					}
				}
			}else{
				for(; i < l; ++i){
					result = !fn(a[i], i, a);
					if(some ^ result){
						return !result;
					}
				}
			}
			return every; // Boolean
		};
	}

	// indexOf, lastIndexOf

	function index(up){
		var delta = 1, lOver = 0, uOver = 0;
		if(!up){
			delta = lOver = uOver = -1;
		}
		return function(a, x, from, last){
			if(last && delta > 0){
				// TODO: why do we use a non-standard signature? why do we need "last"?
				return array.lastIndexOf(a, x, from);
			}
			var l = a && a.length || 0, end = up ? l + uOver : lOver, i;
			if(from === u){
				i = up ? lOver : l + uOver;
			}else{
				if(from < 0){
					i = l + from;
					if(i < 0){
						i = lOver;
					}
				}else{
					i = from >= l ? l + uOver : from;
				}
			}
			if(l && typeof a == "string") a = a.split("");
			for(; i != end; i += delta){
				if(a[i] == x){
					return i; // Number
				}
			}
			return -1; // Number
		};
	}

	var array = {
		// summary:
		//		The Javascript v1.6 array extensions.

		every: everyOrSome(false),
		/*=====
		 every: function(arr, callback, thisObject){
			 // summary:
			 //		Determines whether or not every item in arr satisfies the
			 //		condition implemented by callback.
			 // arr: Array|String
			 //		the array to iterate on. If a string, operates on individual characters.
			 // callback: Function|String
			 //		a function is invoked with three arguments: item, index,
			 //		and array and returns true if the condition is met.
			 // thisObject: Object?
			 //		may be used to scope the call to callback
			 // returns: Boolean
			 // description:
			 //		This function corresponds to the JavaScript 1.6 Array.every() method, with one difference: when
			 //		run over sparse arrays, this implementation passes the "holes" in the sparse array to
			 //		the callback function with a value of undefined. JavaScript 1.6's every skips the holes in the sparse array.
			 //		For more details, see:
			 //		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/every
			 // example:
			 //	|	// returns false
			 //	|	array.every([1, 2, 3, 4], function(item){ return item>1; });
			 // example:
			 //	|	// returns true
			 //	|	array.every([1, 2, 3, 4], function(item){ return item>0; });
		 },
		 =====*/

		some: everyOrSome(true),
		/*=====
		some: function(arr, callback, thisObject){
			// summary:
			//		Determines whether or not any item in arr satisfies the
			//		condition implemented by callback.
			// arr: Array|String
			//		the array to iterate over. If a string, operates on individual characters.
			// callback: Function|String
			//		a function is invoked with three arguments: item, index,
			//		and array and returns true if the condition is met.
			// thisObject: Object?
			//		may be used to scope the call to callback
			// returns: Boolean
			// description:
			//		This function corresponds to the JavaScript 1.6 Array.some() method, with one difference: when
			//		run over sparse arrays, this implementation passes the "holes" in the sparse array to
			//		the callback function with a value of undefined. JavaScript 1.6's some skips the holes in the sparse array.
			//		For more details, see:
			//		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/some
			// example:
			//	| // is true
			//	| array.some([1, 2, 3, 4], function(item){ return item>1; });
			// example:
			//	| // is false
			//	| array.some([1, 2, 3, 4], function(item){ return item<1; });
		},
		=====*/

		indexOf: index(true),
		/*=====
		indexOf: function(arr, value, fromIndex, findLast){
			// summary:
			//		locates the first index of the provided value in the
			//		passed array. If the value is not found, -1 is returned.
			// description:
			//		This method corresponds to the JavaScript 1.6 Array.indexOf method, with two differences:
			//
			//		1. when run over sparse arrays, the Dojo function invokes the callback for every index
			//		   whereas JavaScript 1.6's indexOf skips the holes in the sparse array.
			//		2. uses equality (==) rather than strict equality (===)
			//
			//		For details on this method, see:
			//		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf
			// arr: Array
			// value: Object
			// fromIndex: Integer?
			// findLast: Boolean?
			//		Makes indexOf() work like lastIndexOf().  Used internally; not meant for external usage.
			// returns: Number
		},
		=====*/

		lastIndexOf: index(false),
		/*=====
		lastIndexOf: function(arr, value, fromIndex){
			// summary:
			//		locates the last index of the provided value in the passed
			//		array. If the value is not found, -1 is returned.
			// description:
		 	//		This method corresponds to the JavaScript 1.6 Array.lastIndexOf method, with two differences:
		 	//
		 	//		1. when run over sparse arrays, the Dojo function invokes the callback for every index
		 	//		   whereas JavaScript 1.6's lasIndexOf skips the holes in the sparse array.
		 	//		2. uses equality (==) rather than strict equality (===)
		 	//
		 	//		For details on this method, see:
		 	//		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/lastIndexOf
			// arr: Array,
			// value: Object,
			// fromIndex: Integer?
			// returns: Number
		},
		=====*/

		forEach: function(arr, callback, thisObject){
			// summary:
			//		for every item in arr, callback is invoked. Return values are ignored.
			//		If you want to break out of the loop, consider using array.every() or array.some().
			//		forEach does not allow breaking out of the loop over the items in arr.
			// arr:
			//		the array to iterate over. If a string, operates on individual characters.
			// callback:
			//		a function is invoked with three arguments: item, index, and array
			// thisObject:
			//		may be used to scope the call to callback
			// description:
			//		This function corresponds to the JavaScript 1.6 Array.forEach() method, with one difference: when
			//		run over sparse arrays, this implementation passes the "holes" in the sparse array to
			//		the callback function with a value of undefined. JavaScript 1.6's forEach skips the holes in the sparse array.
			//		For more details, see:
			//		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach
			// example:
			//	| // log out all members of the array:
			//	| array.forEach(
			//	|		[ "thinger", "blah", "howdy", 10 ],
			//	|		function(item){
			//	|			console.log(item);
			//	|		}
			//	| );
			// example:
			//	| // log out the members and their indexes
			//	| array.forEach(
			//	|		[ "thinger", "blah", "howdy", 10 ],
			//	|		function(item, idx, arr){
			//	|			console.log(item, "at index:", idx);
			//	|		}
			//	| );
			// example:
			//	| // use a scoped object member as the callback
			//	|
			//	| var obj = {
			//	|		prefix: "logged via obj.callback:",
			//	|		callback: function(item){
			//	|			console.log(this.prefix, item);
			//	|		}
			//	| };
			//	|
			//	| // specifying the scope function executes the callback in that scope
			//	| array.forEach(
			//	|		[ "thinger", "blah", "howdy", 10 ],
			//	|		obj.callback,
			//	|		obj
			//	| );
			//	|
			//	| // alternately, we can accomplish the same thing with lang.hitch()
			//	| array.forEach(
			//	|		[ "thinger", "blah", "howdy", 10 ],
			//	|		lang.hitch(obj, "callback")
			//	| );
			// arr: Array|String
			// callback: Function|String
			// thisObject: Object?

			var i = 0, l = arr && arr.length || 0;
			if(l && typeof arr == "string") arr = arr.split("");
			if(typeof callback == "string") callback = cache[callback] || buildFn(callback);
			if(thisObject){
				for(; i < l; ++i){
					callback.call(thisObject, arr[i], i, arr);
				}
			}else{
				for(; i < l; ++i){
					callback(arr[i], i, arr);
				}
			}
		},

		map: function(arr, callback, thisObject, Ctr){
			// summary:
			//		applies callback to each element of arr and returns
			//		an Array with the results
			// arr: Array|String
			//		the array to iterate on. If a string, operates on
			//		individual characters.
			// callback: Function|String
			//		a function is invoked with three arguments, (item, index,
			//		array),	 and returns a value
			// thisObject: Object?
			//		may be used to scope the call to callback
			// returns: Array
			// description:
			//		This function corresponds to the JavaScript 1.6 Array.map() method, with one difference: when
			//		run over sparse arrays, this implementation passes the "holes" in the sparse array to
			//		the callback function with a value of undefined. JavaScript 1.6's map skips the holes in the sparse array.
			//		For more details, see:
			//		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map
			// example:
			//	| // returns [2, 3, 4, 5]
			//	| array.map([1, 2, 3, 4], function(item){ return item+1 });

			// TODO: why do we have a non-standard signature here? do we need "Ctr"?
			var i = 0, l = arr && arr.length || 0, out = new (Ctr || Array)(l);
			if(l && typeof arr == "string") arr = arr.split("");
			if(typeof callback == "string") callback = cache[callback] || buildFn(callback);
			if(thisObject){
				for(; i < l; ++i){
					out[i] = callback.call(thisObject, arr[i], i, arr);
				}
			}else{
				for(; i < l; ++i){
					out[i] = callback(arr[i], i, arr);
				}
			}
			return out; // Array
		},

		filter: function(arr, callback, thisObject){
			// summary:
			//		Returns a new Array with those items from arr that match the
			//		condition implemented by callback.
			// arr: Array
			//		the array to iterate over.
			// callback: Function|String
			//		a function that is invoked with three arguments (item,
			//		index, array). The return of this function is expected to
			//		be a boolean which determines whether the passed-in item
			//		will be included in the returned array.
			// thisObject: Object?
			//		may be used to scope the call to callback
			// returns: Array
			// description:
			//		This function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when
			//		run over sparse arrays, this implementation passes the "holes" in the sparse array to
			//		the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array.
			//		For more details, see:
			//		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
			// example:
			//	| // returns [2, 3, 4]
			//	| array.filter([1, 2, 3, 4], function(item){ return item>1; });

			// TODO: do we need "Ctr" here like in map()?
			var i = 0, l = arr && arr.length || 0, out = [], value;
			if(l && typeof arr == "string") arr = arr.split("");
			if(typeof callback == "string") callback = cache[callback] || buildFn(callback);
			if(thisObject){
				for(; i < l; ++i){
					value = arr[i];
					if(callback.call(thisObject, value, i, arr)){
						out.push(value);
					}
				}
			}else{
				for(; i < l; ++i){
					value = arr[i];
					if(callback(value, i, arr)){
						out.push(value);
					}
				}
			}
			return out; // Array
		},

		clearCache: function(){
			cache = {};
		}
	};


	 1  && lang.mixin(dojo, array);

	return array;
});

},
'dojo/_base/sniff':function(){
define(["./kernel", "./lang", "../sniff"], function(dojo, lang, has){
	// module:
	//		dojo/_base/sniff

	/*=====
	return {
		// summary:
		//		Deprecated.   New code should use dojo/sniff.
		//		This module populates the dojo browser version sniffing properties like dojo.isIE.
	};
	=====*/

	if(! 1 ){
		return has;
	}

	// no idea what this is for, or if it's used
	dojo._name = "browser";

	lang.mixin(dojo, {
		// isBrowser: Boolean
		//		True if the client is a web-browser
		isBrowser: true,

		// isFF: Number|undefined
		//		Version as a Number if client is FireFox. undefined otherwise. Corresponds to
		//		major detected FireFox version (1.5, 2, 3, etc.)
		isFF: has("ff"),

		// isIE: Number|undefined
		//		Version as a Number if client is MSIE(PC). undefined otherwise. Corresponds to
		//		major detected IE version (6, 7, 8, etc.)
		isIE: has("ie"),

		// isKhtml: Number|undefined
		//		Version as a Number if client is a KHTML browser. undefined otherwise. Corresponds to major
		//		detected version.
		isKhtml: has("khtml"),

		// isWebKit: Number|undefined
		//		Version as a Number if client is a WebKit-derived browser (Konqueror,
		//		Safari, Chrome, etc.). undefined otherwise.
		isWebKit: has("webkit"),

		// isMozilla: Number|undefined
		//		Version as a Number if client is a Mozilla-based browser (Firefox,
		//		SeaMonkey). undefined otherwise. Corresponds to major detected version.
		isMozilla: has("mozilla"),
		// isMoz: Number|undefined
		//		Version as a Number if client is a Mozilla-based browser (Firefox,
		//		SeaMonkey). undefined otherwise. Corresponds to major detected version.
		isMoz: has("mozilla"),

		// isOpera: Number|undefined
		//		Version as a Number if client is Opera. undefined otherwise. Corresponds to
		//		major detected version.
		isOpera: has("opera"),

		// isSafari: Number|undefined
		//		Version as a Number if client is Safari or iPhone. undefined otherwise.
		isSafari: has("safari"),

		// isChrome: Number|undefined
		//		Version as a Number if client is Chrome browser. undefined otherwise.
		isChrome: has("chrome"),

		// isMac: Boolean
		//		True if the client runs on Mac
		isMac: has("mac"),

		// isIos: Number|undefined
		//		Version as a Number if client is iPhone, iPod, or iPad. undefined otherwise.
		isIos: has("ios"),

		// isAndroid: Number|undefined
		//		Version as a Number if client is android browser. undefined otherwise.
		isAndroid: has("android"),

		// isWii: Boolean
		//		True if client is Wii
		isWii: has("wii"),

		// isQuirks: Boolean
		//		Page is in quirks mode.
		isQuirks: has("quirks"),

		// isAir: Boolean
		//		True if client is Adobe Air
		isAir: has("air")
	});

	return has;
});

},
'dojo/_base/window':function(){
define(["./kernel", "./lang", "../sniff"], function(dojo, lang, has){
// module:
//		dojo/_base/window

var ret = {
	// summary:
	//		API to save/set/restore the global/document scope.

	global: dojo.global,
	/*=====
	 global: {
		 // summary:
		 //		Alias for the current window. 'global' can be modified
		 //		for temporary context shifting. See also withGlobal().
		 // description:
		 //		Use this rather than referring to 'window' to ensure your code runs
		 //		correctly in managed contexts.
	 },
	 =====*/

	doc: dojo.global["document"] || null,
	/*=====
	doc: {
		// summary:
		//		Alias for the current document. 'doc' can be modified
		//		for temporary context shifting. See also withDoc().
		// description:
		//		Use this rather than referring to 'window.document' to ensure your code runs
		//		correctly in managed contexts.
		// example:
		//	|	n.appendChild(dojo.doc.createElement('div'));
	},
	=====*/

	body: function(/*Document?*/ doc){
		// summary:
		//		Return the body element of the specified document or of dojo/_base/window::doc.
		// example:
		//	|	win.body().appendChild(dojo.doc.createElement('div'));

		// Note: document.body is not defined for a strict xhtml document
		// Would like to memoize this, but dojo.doc can change vi dojo.withDoc().
		doc = doc || dojo.doc;
		return doc.body || doc.getElementsByTagName("body")[0]; // Node
	},

	setContext: function(/*Object*/ globalObject, /*DocumentElement*/ globalDocument){
		// summary:
		//		changes the behavior of many core Dojo functions that deal with
		//		namespace and DOM lookup, changing them to work in a new global
		//		context (e.g., an iframe). The varibles dojo.global and dojo.doc
		//		are modified as a result of calling this function and the result of
		//		`dojo.body()` likewise differs.
		dojo.global = ret.global = globalObject;
		dojo.doc = ret.doc = globalDocument;
	},

	withGlobal: function(	/*Object*/ globalObject,
							/*Function*/ callback,
							/*Object?*/ thisObject,
							/*Array?*/ cbArguments){
		// summary:
		//		Invoke callback with globalObject as dojo.global and
		//		globalObject.document as dojo.doc.
		// description:
		//		Invoke callback with globalObject as dojo.global and
		//		globalObject.document as dojo.doc. If provided, globalObject
		//		will be executed in the context of object thisObject
		//		When callback() returns or throws an error, the dojo.global
		//		and dojo.doc will be restored to its previous state.

		var oldGlob = dojo.global;
		try{
			dojo.global = ret.global = globalObject;
			return ret.withDoc.call(null, globalObject.document, callback, thisObject, cbArguments);
		}finally{
			dojo.global = ret.global = oldGlob;
		}
	},

	withDoc: function(	/*DocumentElement*/ documentObject,
						/*Function*/ callback,
						/*Object?*/ thisObject,
						/*Array?*/ cbArguments){
		// summary:
		//		Invoke callback with documentObject as dojo/_base/window::doc.
		// description:
		//		Invoke callback with documentObject as dojo/_base/window::doc. If provided,
		//		callback will be executed in the context of object thisObject
		//		When callback() returns or throws an error, the dojo/_base/window::doc will
		//		be restored to its previous state.

		var oldDoc = ret.doc,
			oldQ = has("quirks"),
			oldIE = has("ie"), isIE, mode, pwin;

		try{
			dojo.doc = ret.doc = documentObject;
			// update dojo.isQuirks and the value of the has feature "quirks".
			// remove setting dojo.isQuirks and dojo.isIE for 2.0
			dojo.isQuirks = has.add("quirks", dojo.doc.compatMode == "BackCompat", true, true); // no need to check for QuirksMode which was Opera 7 only

			if(has("ie")){
				if((pwin = documentObject.parentWindow) && pwin.navigator){
					// re-run IE detection logic and update dojo.isIE / has("ie")
					// (the only time parentWindow/navigator wouldn't exist is if we were not
					// passed an actual legitimate document object)
					isIE = parseFloat(pwin.navigator.appVersion.split("MSIE ")[1]) || undefined;
					mode = documentObject.documentMode;
					if(mode && mode != 5 && Math.floor(isIE) != mode){
						isIE = mode;
					}
					dojo.isIE = has.add("ie", isIE, true, true);
				}
			}

			if(thisObject && typeof callback == "string"){
				callback = thisObject[callback];
			}

			return callback.apply(thisObject, cbArguments || []);
		}finally{
			dojo.doc = ret.doc = oldDoc;
			dojo.isQuirks = has.add("quirks", oldQ, true, true);
			dojo.isIE = has.add("ie", oldIE, true, true);
		}
	}
};

 1  && lang.mixin(dojo, ret);

return ret;

});

},
'dojo/dom':function(){
define(["./sniff", "./_base/window"],
		function(has, win){
	// module:
	//		dojo/dom

	// FIXME: need to add unit tests for all the semi-public methods

	if(has("ie") <= 7){
		try{
			document.execCommand("BackgroundImageCache", false, true);
		}catch(e){
			// sane browsers don't have cache "issues"
		}
	}

	// =============================
	// DOM Functions
	// =============================

	// the result object
	var dom = {
		// summary:
		//		This module defines the core dojo DOM API.
	};

	if(has("ie")){
		dom.byId = function(id, doc){
			if(typeof id != "string"){
				return id;
			}
			var _d = doc || win.doc, te = id && _d.getElementById(id);
			// attributes.id.value is better than just id in case the
			// user has a name=id inside a form
			if(te && (te.attributes.id.value == id || te.id == id)){
				return te;
			}else{
				var eles = _d.all[id];
				if(!eles || eles.nodeName){
					eles = [eles];
				}
				// if more than 1, choose first with the correct id
				var i = 0;
				while((te = eles[i++])){
					if((te.attributes && te.attributes.id && te.attributes.id.value == id) || te.id == id){
						return te;
					}
				}
			}
		};
	}else{
		dom.byId = function(id, doc){
			// inline'd type check.
			// be sure to return null per documentation, to match IE branch.
			return ((typeof id == "string") ? (doc || win.doc).getElementById(id) : id) || null; // DOMNode
		};
	}
	/*=====
	 dom.byId = function(id, doc){
		// summary:
		//		Returns DOM node with matching `id` attribute or falsy value (ex: null or undefined)
		//		if not found.  If `id` is a DomNode, this function is a no-op.
		//
		// id: String|DOMNode
		//		A string to match an HTML id attribute or a reference to a DOM Node
		//
		// doc: Document?
		//		Document to work in. Defaults to the current value of
		//		dojo/_base/window.doc.  Can be used to retrieve
		//		node references from other documents.
		//
		// example:
		//		Look up a node by ID:
		//	|	require(["dojo/dom"], function(dom){
		//	|		var n = dom.byId("foo");
		//	|	});
		//
		// example:
		//		Check if a node exists, and use it.
		//	|	require(["dojo/dom"], function(dom){
		//	|		var n = dom.byId("bar");
		//	|		if(n){ doStuff() ... }
		//	|	});
		//
		// example:
		//		Allow string or DomNode references to be passed to a custom function:
		//	|	require(["dojo/dom"], function(dom){
		//	|		var foo = function(nodeOrId){
		//	|			nodeOrId = dom.byId(nodeOrId);
		//	|			// ... more stuff
		//	|		}
		//	|	});
	 };
	 =====*/

	dom.isDescendant = function(/*DOMNode|String*/ node, /*DOMNode|String*/ ancestor){
		// summary:
		//		Returns true if node is a descendant of ancestor
		// node: DOMNode|String
		//		string id or node reference to test
		// ancestor: DOMNode|String
		//		string id or node reference of potential parent to test against
		//
		// example:
		//		Test is node id="bar" is a descendant of node id="foo"
		//	|	require(["dojo/dom"], function(dom){
		//	|		if(dom.isDescendant("bar", "foo")){ ... }
		//	|	});

		try{
			node = dom.byId(node);
			ancestor = dom.byId(ancestor);
			while(node){
				if(node == ancestor){
					return true; // Boolean
				}
				node = node.parentNode;
			}
		}catch(e){ /* squelch, return false */ }
		return false; // Boolean
	};


	// TODO: do we need setSelectable in the base?

	// Add feature test for user-select CSS property
	// (currently known to work in all but IE < 10 and Opera)
	// TODO: The user-select CSS property as of May 2014 is no longer part of
	// any CSS specification. In IE, -ms-user-select does not do the same thing
	// as the unselectable attribute on elements; namely, dijit Editor buttons
	// do not properly prevent the content of the editable content frame from
	// unblurring. As a result, the -ms- prefixed version is omitted here.
	has.add("css-user-select", function(global, doc, element){
		// Avoid exception when dom.js is loaded in non-browser environments
		if(!element){ return false; }
		
		var style = element.style;
		var prefixes = ["Khtml", "O", "Moz", "Webkit"],
			i = prefixes.length,
			name = "userSelect",
			prefix;

		// Iterate prefixes from most to least likely
		do{
			if(typeof style[name] !== "undefined"){
				// Supported; return property name
				return name;
			}
		}while(i-- && (name = prefixes[i] + "UserSelect"));

		// Not supported if we didn't return before now
		return false;
	});

	/*=====
	dom.setSelectable = function(node, selectable){
		// summary:
		//		Enable or disable selection on a node
		// node: DOMNode|String
		//		id or reference to node
		// selectable: Boolean
		//		state to put the node in. false indicates unselectable, true
		//		allows selection.
		// example:
		//		Make the node id="bar" unselectable
		//	|	require(["dojo/dom"], function(dom){
		//	|		dom.setSelectable("bar");
		//	|	});
		// example:
		//		Make the node id="bar" selectable
		//	|	require(["dojo/dom"], function(dom){
		//	|		dom.setSelectable("bar", true);
		//	|	});
	};
	=====*/

	var cssUserSelect = has("css-user-select");
	dom.setSelectable = cssUserSelect ? function(node, selectable){
		// css-user-select returns a (possibly vendor-prefixed) CSS property name
		dom.byId(node).style[cssUserSelect] = selectable ? "" : "none";
	} : function(node, selectable){
		node = dom.byId(node);

		// (IE < 10 / Opera) Fall back to setting/removing the
		// unselectable attribute on the element and all its children
		var nodes = node.getElementsByTagName("*"),
			i = nodes.length;

		if(selectable){
			node.removeAttribute("unselectable");
			while(i--){
				nodes[i].removeAttribute("unselectable");
			}
		}else{
			node.setAttribute("unselectable", "on");
			while(i--){
				nodes[i].setAttribute("unselectable", "on");
			}
		}
	};

	return dom;
});

},
'dojo/dom-construct':function(){
define(["exports", "./_base/kernel", "./sniff", "./_base/window", "./dom", "./dom-attr"],
		function(exports, dojo, has, win, dom, attr){
	// module:
	//		dojo/dom-construct
	// summary:
	//		This module defines the core dojo DOM construction API.

	// TODOC: summary not showing up in output, see https://github.com/csnover/js-doc-parse/issues/42

	// support stuff for toDom()
	var tagWrap = {
			option: ["select"],
			tbody: ["table"],
			thead: ["table"],
			tfoot: ["table"],
			tr: ["table", "tbody"],
			td: ["table", "tbody", "tr"],
			th: ["table", "thead", "tr"],
			legend: ["fieldset"],
			caption: ["table"],
			colgroup: ["table"],
			col: ["table", "colgroup"],
			li: ["ul"]
		},
		reTag = /<\s*([\w\:]+)/,
		masterNode = {}, masterNum = 0,
		masterName = "__" + dojo._scopeName + "ToDomId";

	// generate start/end tag strings to use
	// for the injection for each special tag wrap case.
	for(var param in tagWrap){
		if(tagWrap.hasOwnProperty(param)){
			var tw = tagWrap[param];
			tw.pre = param == "option" ? '<select multiple="multiple">' : "<" + tw.join("><") + ">";
			tw.post = "</" + tw.reverse().join("></") + ">";
			// the last line is destructive: it reverses the array,
			// but we don't care at this point
		}
	}

	var html5domfix;
	if(has("ie") <= 8){
		html5domfix = function(doc){
			doc.__dojo_html5_tested = "yes";
			var div = create('div', {innerHTML: "<nav>a</nav>", style: {visibility: "hidden"}}, doc.body);
			if(div.childNodes.length !== 1){
				('abbr article aside audio canvas details figcaption figure footer header ' +
				'hgroup mark meter nav output progress section summary time video').replace(
					/\b\w+\b/g, function(n){
						doc.createElement(n);
					}
				);
			}
			destroy(div);
		}
	}

	function _insertBefore(/*DomNode*/ node, /*DomNode*/ ref){
		var parent = ref.parentNode;
		if(parent){
			parent.insertBefore(node, ref);
		}
	}

	function _insertAfter(/*DomNode*/ node, /*DomNode*/ ref){
		// summary:
		//		Try to insert node after ref
		var parent = ref.parentNode;
		if(parent){
			if(parent.lastChild == ref){
				parent.appendChild(node);
			}else{
				parent.insertBefore(node, ref.nextSibling);
			}
		}
	}

	exports.toDom = function toDom(frag, doc){
		// summary:
		//		instantiates an HTML fragment returning the corresponding DOM.
		// frag: String
		//		the HTML fragment
		// doc: DocumentNode?
		//		optional document to use when creating DOM nodes, defaults to
		//		dojo/_base/window.doc if not specified.
		// returns:
		//		Document fragment, unless it's a single node in which case it returns the node itself
		// example:
		//		Create a table row:
		//	|	require(["dojo/dom-construct"], function(domConstruct){
		//	|		var tr = domConstruct.toDom("<tr><td>First!</td></tr>");
		//	|	});

		doc = doc || win.doc;
		var masterId = doc[masterName];
		if(!masterId){
			doc[masterName] = masterId = ++masterNum + "";
			masterNode[masterId] = doc.createElement("div");
		}

		if(has("ie") <= 8){
			if(!doc.__dojo_html5_tested && doc.body){
				html5domfix(doc);
			}
		}

		// make sure the frag is a string.
		frag += "";

		// find the starting tag, and get node wrapper
		var match = frag.match(reTag),
			tag = match ? match[1].toLowerCase() : "",
			master = masterNode[masterId],
			wrap, i, fc, df;
		if(match && tagWrap[tag]){
			wrap = tagWrap[tag];
			master.innerHTML = wrap.pre + frag + wrap.post;
			for(i = wrap.length; i; --i){
				master = master.firstChild;
			}
		}else{
			master.innerHTML = frag;
		}

		// one node shortcut => return the node itself
		if(master.childNodes.length == 1){
			return master.removeChild(master.firstChild); // DOMNode
		}

		// return multiple nodes as a document fragment
		df = doc.createDocumentFragment();
		while((fc = master.firstChild)){ // intentional assignment
			df.appendChild(fc);
		}
		return df; // DocumentFragment
	};

	exports.place = function place(node, refNode, position){
		// summary:
		//		Attempt to insert node into the DOM, choosing from various positioning options.
		//		Returns the first argument resolved to a DOM node.
		// node: DOMNode|DocumentFragment|String
		//		id or node reference, or HTML fragment starting with "<" to place relative to refNode
		// refNode: DOMNode|String
		//		id or node reference to use as basis for placement
		// position: String|Number?
		//		string noting the position of node relative to refNode or a
		//		number indicating the location in the childNodes collection of refNode.
		//		Accepted string values are:
		//
		//		- before
		//		- after
		//		- replace
		//		- only
		//		- first
		//		- last
		//
		//		"first" and "last" indicate positions as children of refNode, "replace" replaces refNode,
		//		"only" replaces all children.  position defaults to "last" if not specified
		// returns: DOMNode
		//		Returned values is the first argument resolved to a DOM node.
		//
		//		.place() is also a method of `dojo/NodeList`, allowing `dojo/query` node lookups.
		// example:
		//		Place a node by string id as the last child of another node by string id:
		//	|	require(["dojo/dom-construct"], function(domConstruct){
		//	|		domConstruct.place("someNode", "anotherNode");
		//	|	});
		// example:
		//		Place a node by string id before another node by string id
		//	|	require(["dojo/dom-construct"], function(domConstruct){
		//	|		domConstruct.place("someNode", "anotherNode", "before");
		//	|	});
		// example:
		//		Create a Node, and place it in the body element (last child):
		//	|	require(["dojo/dom-construct", "dojo/_base/window"
		//	|	], function(domConstruct, win){
		//	|		domConstruct.place("<div></div>", win.body());
		//	|	});
		// example:
		//		Put a new LI as the first child of a list by id:
		//	|	require(["dojo/dom-construct"], function(domConstruct){
		//	|		domConstruct.place("<li></li>", "someUl", "first");
		//	|	});

		refNode = dom.byId(refNode);
		if(typeof node == "string"){ // inline'd type check
			node = /^\s*</.test(node) ? exports.toDom(node, refNode.ownerDocument) : dom.byId(node);
		}
		if(typeof position == "number"){ // inline'd type check
			var cn = refNode.childNodes;
			if(!cn.length || cn.length <= position){
				refNode.appendChild(node);
			}else{
				_insertBefore(node, cn[position < 0 ? 0 : position]);
			}
		}else{
			switch(position){
				case "before":
					_insertBefore(node, refNode);
					break;
				case "after":
					_insertAfter(node, refNode);
					break;
				case "replace":
					refNode.parentNode.replaceChild(node, refNode);
					break;
				case "only":
					exports.empty(refNode);
					refNode.appendChild(node);
					break;
				case "first":
					if(refNode.firstChild){
						_insertBefore(node, refNode.firstChild);
						break;
					}
					// else fallthrough...
				default: // aka: last
					refNode.appendChild(node);
			}
		}
		return node; // DomNode
	};

	var create = exports.create = function create(/*DOMNode|String*/ tag, /*Object*/ attrs, /*DOMNode|String?*/ refNode, /*String?*/ pos){
		// summary:
		//		Create an element, allowing for optional attribute decoration
		//		and placement.
		// description:
		//		A DOM Element creation function. A shorthand method for creating a node or
		//		a fragment, and allowing for a convenient optional attribute setting step,
		//		as well as an optional DOM placement reference.
		//
		//		Attributes are set by passing the optional object through `dojo/dom-attr.set`.
		//		See `dojo/dom-attr.set` for noted caveats and nuances, and API if applicable.
		//
		//		Placement is done via `dojo/dom-construct.place`, assuming the new node to be
		//		the action node, passing along the optional reference node and position.
		// tag: DOMNode|String
		//		A string of the element to create (eg: "div", "a", "p", "li", "script", "br"),
		//		or an existing DOM node to process.
		// attrs: Object
		//		An object-hash of attributes to set on the newly created node.
		//		Can be null, if you don't want to set any attributes/styles.
		//		See: `dojo/dom-attr.set` for a description of available attributes.
		// refNode: DOMNode|String?
		//		Optional reference node. Used by `dojo/dom-construct.place` to place the newly created
		//		node somewhere in the dom relative to refNode. Can be a DomNode reference
		//		or String ID of a node.
		// pos: String?
		//		Optional positional reference. Defaults to "last" by way of `dojo/domConstruct.place`,
		//		though can be set to "first","after","before","last", "replace" or "only"
		//		to further control the placement of the new node relative to the refNode.
		//		'refNode' is required if a 'pos' is specified.
		// example:
		//		Create a DIV:
		//	|	require(["dojo/dom-construct"], function(domConstruct){
		//	|		var n = domConstruct.create("div");
		//	|	});
		//
		// example:
		//		Create a DIV with content:
		//	|	require(["dojo/dom-construct"], function(domConstruct){
		//	|		var n = domConstruct.create("div", { innerHTML:"<p>hi</p>" });
		//	|	});
		//
		// example:
		//		Place a new DIV in the BODY, with no attributes set
		//	|	require(["dojo/dom-construct", "dojo/_base/window"], function(domConstruct, win){
		//	|		var n = domConstruct.create("div", null, win.body());
		//	|	});
		//
		// example:
		//		Create an UL, and populate it with LI's. Place the list as the first-child of a
		//		node with id="someId":
		//	|	require(["dojo/dom-construct", "dojo/_base/array"],
		//	|	function(domConstruct, arrayUtil){
		//	|		var ul = domConstruct.create("ul", null, "someId", "first");
		//	|		var items = ["one", "two", "three", "four"];
		//	|		arrayUtil.forEach(items, function(data){
		//	|			domConstruct.create("li", { innerHTML: data }, ul);
		//	|		});
		//	|	});
		//
		// example:
		//		Create an anchor, with an href. Place in BODY:
		//	|	require(["dojo/dom-construct", "dojo/_base/window"], function(domConstruct, win){
		//	|		domConstruct.create("a", { href:"foo.html", title:"Goto FOO!" }, win.body());
		//	|	});

		var doc = win.doc;
		if(refNode){
			refNode = dom.byId(refNode);
			doc = refNode.ownerDocument;
		}
		if(typeof tag == "string"){ // inline'd type check
			tag = doc.createElement(tag);
		}
		if(attrs){ attr.set(tag, attrs); }
		if(refNode){ exports.place(tag, refNode, pos); }
		return tag; // DomNode
	};

	function _empty(/*DomNode*/ node){
		// TODO: remove this if() block in 2.0 when we no longer have to worry about IE memory leaks,
		// and then uncomment the emptyGrandchildren() test case from html.html.
		// Note that besides fixing #16957, using removeChild() is actually faster than setting node.innerHTML,
		// see http://jsperf.com/clear-dom-node.
		if("innerHTML" in node){
			try{
				// fast path
				node.innerHTML = "";
				return;
			}catch(e){
				// innerHTML is readOnly (e.g. TABLE (sub)elements in quirks mode)
				// Fall through (saves bytes)
			}
		}

		// SVG/strict elements don't support innerHTML
		for(var c; c = node.lastChild;){ // intentional assignment
			node.removeChild(c);
		}
	}

	exports.empty = function empty(/*DOMNode|String*/ node){
		// summary:
		//		safely removes all children of the node.
		// node: DOMNode|String
		//		a reference to a DOM node or an id.
		// example:
		//		Destroy node's children byId:
		//	|	require(["dojo/dom-construct"], function(domConstruct){
		//	|		domConstruct.empty("someId");
		//	|	});

		_empty(dom.byId(node));
	};


	function _destroy(/*DomNode*/ node, /*DomNode*/ parent){
		// in IE quirks, node.canHaveChildren can be false but firstChild can be non-null (OBJECT/APPLET)
		if(node.firstChild){
			_empty(node);
		}
		if(parent){
			// removeNode(false) doesn't leak in IE 6+, but removeChild() and removeNode(true) are known to leak under IE 8- while 9+ is TBD.
			// In IE quirks mode, PARAM nodes as children of OBJECT/APPLET nodes have a removeNode method that does nothing and
			// the parent node has canHaveChildren=false even though removeChild correctly removes the PARAM children.
			// In IE, SVG/strict nodes don't have a removeNode method nor a canHaveChildren boolean.
			has("ie") && parent.canHaveChildren && "removeNode" in node ? node.removeNode(false) : parent.removeChild(node);
		}
	}
	var destroy = exports.destroy = function destroy(/*DOMNode|String*/ node){
		// summary:
		//		Removes a node from its parent, clobbering it and all of its
		//		children.
		//
		// description:
		//		Removes a node from its parent, clobbering it and all of its
		//		children. Function only works with DomNodes, and returns nothing.
		//
		// node: DOMNode|String
		//		A String ID or DomNode reference of the element to be destroyed
		//
		// example:
		//		Destroy a node byId:
		//	|	require(["dojo/dom-construct"], function(domConstruct){
		//	|		domConstruct.destroy("someId");
		//	|	});

		node = dom.byId(node);
		if(!node){ return; }
		_destroy(node, node.parentNode);
	};
});

},
'dojo/dom-attr':function(){
define(["exports", "./sniff", "./_base/lang", "./dom", "./dom-style", "./dom-prop"],
		function(exports, has, lang, dom, style, prop){
	// module:
	//		dojo/dom-attr
	// summary:
	//		This module defines the core dojo DOM attributes API.

	// TODOC: summary not showing up in output see https://github.com/csnover/js-doc-parse/issues/42

	// =============================
	// Element attribute Functions
	// =============================

	// This module will be obsolete soon. Use dojo/prop instead.

	// dojo/dom-attr.get() should conform to http://www.w3.org/TR/DOM-Level-2-Core/

	// attribute-related functions (to be obsolete soon)
	var forcePropNames = {
			innerHTML:	1,
			textContent:1,
			className:	1,
			htmlFor:	has("ie"),
			value:		1
		},
		attrNames = {
			// original attribute names
			classname: "class",
			htmlfor: "for",
			// for IE
			tabindex: "tabIndex",
			readonly: "readOnly"
		};

	function _hasAttr(node, name){
		var attr = node.getAttributeNode && node.getAttributeNode(name);
		return !!attr && attr.specified; // Boolean
	}
	
	// There is a difference in the presence of certain properties and their default values
	// between browsers. For example, on IE "disabled" is present on all elements,
	// but it is value is "false"; "tabIndex" of <div> returns 0 by default on IE, yet other browsers
	// can return -1.

	exports.has = function hasAttr(/*DOMNode|String*/ node, /*String*/ name){
		// summary:
		//		Returns true if the requested attribute is specified on the
		//		given element, and false otherwise.
		// node: DOMNode|String
		//		id or reference to the element to check
		// name: String
		//		the name of the attribute
		// returns: Boolean
		//		true if the requested attribute is specified on the
		//		given element, and false otherwise

		var lc = name.toLowerCase();
		return forcePropNames[prop.names[lc] || name] || _hasAttr(dom.byId(node), attrNames[lc] || name);	// Boolean
	};

	exports.get = function getAttr(/*DOMNode|String*/ node, /*String*/ name){
		// summary:
		//		Gets an attribute on an HTML element.
		// description:
		//		Handles normalized getting of attributes on DOM Nodes.
		// node: DOMNode|String
		//		id or reference to the element to get the attribute on
		// name: String
		//		the name of the attribute to get.
		// returns:
		//		the value of the requested attribute or null if that attribute does not have a specified or
		//		default value;
		//
		// example:
		//	|	// get the current value of the "foo" attribute on a node
		//	|	require(["dojo/dom-attr", "dojo/dom"], function(domAttr, dom){
		//	|		domAttr.get(dom.byId("nodeId"), "foo");
		//	|		// or we can just pass the id:
		//	|		domAttr.get("nodeId", "foo");
		//	|	});	
		//	|	

		node = dom.byId(node);
		var lc = name.toLowerCase(),
			propName = prop.names[lc] || name,
			forceProp = forcePropNames[propName],
			value = node[propName];		// should we access this attribute via a property or via getAttribute()?

		if(forceProp && typeof value != "undefined"){
			// node's property
			return value;	// Anything
		}
		
		if(propName == "textContent"){
			return prop.get(node, propName);
		}
		
		if(propName != "href" && (typeof value == "boolean" || lang.isFunction(value))){
			// node's property
			return value;	// Anything
		}
		// node's attribute
		// we need _hasAttr() here to guard against IE returning a default value
		var attrName = attrNames[lc] || name;
		return _hasAttr(node, attrName) ? node.getAttribute(attrName) : null; // Anything
	};

	exports.set = function setAttr(/*DOMNode|String*/ node, /*String|Object*/ name, /*String?*/ value){
		// summary:
		//		Sets an attribute on an HTML element.
		// description:
		//		Handles normalized setting of attributes on DOM Nodes.
		//
		//		When passing functions as values, note that they will not be
		//		directly assigned to slots on the node, but rather the default
		//		behavior will be removed and the new behavior will be added
		//		using `dojo.connect()`, meaning that event handler properties
		//		will be normalized and that some caveats with regards to
		//		non-standard behaviors for onsubmit apply. Namely that you
		//		should cancel form submission using `dojo.stopEvent()` on the
		//		passed event object instead of returning a boolean value from
		//		the handler itself.
		// node: DOMNode|String
		//		id or reference to the element to set the attribute on
		// name: String|Object
		//		the name of the attribute to set, or a hash of key-value pairs to set.
		// value: String?
		//		the value to set for the attribute, if the name is a string.
		// returns:
		//		the DOM node
		//
		// example:
		//	|	// use attr() to set the tab index
		//	|	require(["dojo/dom-attr"], function(domAttr){
		//	|		domAttr.set("nodeId", "tabIndex", 3);
		//	|	});
		//
		// example:
		//	Set multiple values at once, including event handlers:
		//	|	require(["dojo/dom-attr"],
		//	|	function(domAttr){
		//	|		domAttr.set("formId", {
		//	|			"foo": "bar",
		//	|			"tabIndex": -1,
		//	|			"method": "POST"
		//	|		}
		//	|	});

		node = dom.byId(node);
		if(arguments.length == 2){ // inline'd type check
			// the object form of setter: the 2nd argument is a dictionary
			for(var x in name){
				exports.set(node, x, name[x]);
			}
			return node; // DomNode
		}
		var lc = name.toLowerCase(),
			propName = prop.names[lc] || name,
			forceProp = forcePropNames[propName];
		if(propName == "style" && typeof value != "string"){ // inline'd type check
			// special case: setting a style
			style.set(node, value);
			return node; // DomNode
		}
		if(forceProp || typeof value == "boolean" || lang.isFunction(value)){
			return prop.set(node, name, value);
		}
		// node's attribute
		node.setAttribute(attrNames[lc] || name, value);
		return node; // DomNode
	};

	exports.remove = function removeAttr(/*DOMNode|String*/ node, /*String*/ name){
		// summary:
		//		Removes an attribute from an HTML element.
		// node: DOMNode|String
		//		id or reference to the element to remove the attribute from
		// name: String
		//		the name of the attribute to remove

		dom.byId(node).removeAttribute(attrNames[name.toLowerCase()] || name);
	};

	exports.getNodeProp = function getNodeProp(/*DomNode|String*/ node, /*String*/ name){
		// summary:
		//		Returns an effective value of a property or an attribute.
		// node: DOMNode|String
		//		id or reference to the element to remove the attribute from
		// name: String
		//		the name of the attribute
		// returns:
		//		the value of the attribute

		node = dom.byId(node);
		var lc = name.toLowerCase(), propName = prop.names[lc] || name;
		if((propName in node) && propName != "href"){
			// node's property
			return node[propName];	// Anything
		}
		// node's attribute
		var attrName = attrNames[lc] || name;
		return _hasAttr(node, attrName) ? node.getAttribute(attrName) : null; // Anything
	};
});

},
'dojo/dom-style':function(){
define(["./sniff", "./dom"], function(has, dom){
	// module:
	//		dojo/dom-style

	// =============================
	// Style Functions
	// =============================

	// getComputedStyle drives most of the style code.
	// Wherever possible, reuse the returned object.
	//
	// API functions below that need to access computed styles accept an
	// optional computedStyle parameter.
	// If this parameter is omitted, the functions will call getComputedStyle themselves.
	// This way, calling code can access computedStyle once, and then pass the reference to
	// multiple API functions.

	// Although we normally eschew argument validation at this
	// level, here we test argument 'node' for (duck)type,
	// by testing nodeType, ecause 'document' is the 'parentNode' of 'body'
	// it is frequently sent to this function even
	// though it is not Element.
	var getComputedStyle, style = {
		// summary:
		//		This module defines the core dojo DOM style API.
	};
	if(has("webkit")){
		getComputedStyle = function(/*DomNode*/ node){
			var s;
			if(node.nodeType == 1){
				var dv = node.ownerDocument.defaultView;
				s = dv.getComputedStyle(node, null);
				if(!s && node.style){
					node.style.display = "";
					s = dv.getComputedStyle(node, null);
				}
			}
			return s || {};
		};
	}else if(has("ie") && (has("ie") < 9 || has("quirks"))){
		getComputedStyle = function(node){
			// IE (as of 7) doesn't expose Element like sane browsers
			// currentStyle can be null on IE8!
			return node.nodeType == 1 /* ELEMENT_NODE*/ && node.currentStyle ? node.currentStyle : {};
		};
	}else{
		getComputedStyle = function(node){
			return node.nodeType == 1 /* ELEMENT_NODE*/ ?
				node.ownerDocument.defaultView.getComputedStyle(node, null) : {};
		};
	}
	style.getComputedStyle = getComputedStyle;
	/*=====
	style.getComputedStyle = function(node){
		// summary:
		//		Returns a "computed style" object.
		//
		// description:
		//		Gets a "computed style" object which can be used to gather
		//		information about the current state of the rendered node.
		//
		//		Note that this may behave differently on different browsers.
		//		Values may have different formats and value encodings across
		//		browsers.
		//
		//		Note also that this method is expensive.  Wherever possible,
		//		reuse the returned object.
		//
		//		Use the dojo/dom-style.get() method for more consistent (pixelized)
		//		return values.
		//
		// node: DOMNode
		//		A reference to a DOM node. Does NOT support taking an
		//		ID string for speed reasons.
		// example:
		//	|	require(["dojo/dom-style", "dojo/dom"], function(domStyle, dom){
		//	|		domStyle.getComputedStyle(dom.byId('foo')).borderWidth;
		//	|	});
		//
		// example:
		//		Reusing the returned object, avoiding multiple lookups:
		//	|	require(["dojo/dom-style", "dojo/dom"], function(domStyle, dom){
		//	|		var cs = domStyle.getComputedStyle(dom.byId("someNode"));
		//	|		var w = cs.width, h = cs.height;
		//	|	});
		return; // CSS2Properties
	};
	=====*/

	var toPixel;
	if(!has("ie")){
		toPixel = function(element, value){
			// style values can be floats, client code may want
			// to round for integer pixels.
			return parseFloat(value) || 0;
		};
	}else{
		toPixel = function(element, avalue){
			if(!avalue){ return 0; }
			// on IE7, medium is usually 4 pixels
			if(avalue == "medium"){ return 4; }
			// style values can be floats, client code may
			// want to round this value for integer pixels.
			if(avalue.slice && avalue.slice(-2) == 'px'){ return parseFloat(avalue); }
			var s = element.style, rs = element.runtimeStyle, cs = element.currentStyle,
				sLeft = s.left, rsLeft = rs.left;
			rs.left = cs.left;
			try{
				// 'avalue' may be incompatible with style.left, which can cause IE to throw
				// this has been observed for border widths using "thin", "medium", "thick" constants
				// those particular constants could be trapped by a lookup
				// but perhaps there are more
				s.left = avalue;
				avalue = s.pixelLeft;
			}catch(e){
				avalue = 0;
			}
			s.left = sLeft;
			rs.left = rsLeft;
			return avalue;
		};
	}
	style.toPixelValue = toPixel;
	/*=====
	style.toPixelValue = function(node, value){
		// summary:
		//		converts style value to pixels on IE or return a numeric value.
		// node: DOMNode
		// value: String
		// returns: Number
	};
	=====*/

	// FIXME: there opacity quirks on FF that we haven't ported over. Hrm.

	var astr = "DXImageTransform.Microsoft.Alpha";
	var af = function(n, f){
		try{
			return n.filters.item(astr);
		}catch(e){
			return f ? {} : null;
		}
	};

	var _getOpacity =
		has("ie") < 9 || (has("ie") < 10 && has("quirks")) ? function(node){
			try{
				return af(node).Opacity / 100; // Number
			}catch(e){
				return 1; // Number
			}
		} :
		function(node){
			return getComputedStyle(node).opacity;
		};

	var _setOpacity =
		has("ie") < 9 || (has("ie") < 10 && has("quirks")) ? function(/*DomNode*/ node, /*Number*/ opacity){
			if(opacity === ""){ opacity = 1; }
			var ov = opacity * 100, fullyOpaque = opacity === 1;

			// on IE7 Alpha(Filter opacity=100) makes text look fuzzy so disable it altogether (bug #2661),
			// but still update the opacity value so we can get a correct reading if it is read later:
			// af(node, 1).Enabled = !fullyOpaque;

			if(fullyOpaque){
				node.style.zoom = "";
				if(af(node)){
					node.style.filter = node.style.filter.replace(
						new RegExp("\\s*progid:" + astr + "\\([^\\)]+?\\)", "i"), "");
				}
			}else{
				node.style.zoom = 1;
				if(af(node)){
					af(node, 1).Opacity = ov;
				}else{
					node.style.filter += " progid:" + astr + "(Opacity=" + ov + ")";
				}
				af(node, 1).Enabled = true;
			}

			if(node.tagName.toLowerCase() == "tr"){
				for(var td = node.firstChild; td; td = td.nextSibling){
					if(td.tagName.toLowerCase() == "td"){
						_setOpacity(td, opacity);
					}
				}
			}
			return opacity;
		} :
		function(node, opacity){
			return node.style.opacity = opacity;
		};

	var _pixelNamesCache = {
		left: true, top: true
	};
	var _pixelRegExp = /margin|padding|width|height|max|min|offset/; // |border
	function _toStyleValue(node, type, value){
		//TODO: should we really be doing string case conversion here? Should we cache it? Need to profile!
		type = type.toLowerCase();
		if(has("ie") || has("trident")){
			if(value == "auto"){
				if(type == "height"){ return node.offsetHeight; }
				if(type == "width"){ return node.offsetWidth; }
			}
			if(type == "fontweight"){
				switch(value){
					case 700: return "bold";
					case 400:
					default: return "normal";
				}
			}
		}
		if(!(type in _pixelNamesCache)){
			_pixelNamesCache[type] = _pixelRegExp.test(type);
		}
		return _pixelNamesCache[type] ? toPixel(node, value) : value;
	}

	var _floatAliases = {cssFloat: 1, styleFloat: 1, "float": 1};

	// public API

	style.get = function getStyle(/*DOMNode|String*/ node, /*String?*/ name){
		// summary:
		//		Accesses styles on a node.
		// description:
		//		Getting the style value uses the computed style for the node, so the value
		//		will be a calculated value, not just the immediate node.style value.
		//		Also when getting values, use specific style names,
		//		like "borderBottomWidth" instead of "border" since compound values like
		//		"border" are not necessarily reflected as expected.
		//		If you want to get node dimensions, use `dojo/dom-geometry.getMarginBox()`,
		//		`dojo/dom-geometry.getContentBox()` or `dojo/dom-geometry.getPosition()`.
		// node: DOMNode|String
		//		id or reference to node to get style for
		// name: String?
		//		the style property to get
		// example:
		//		Passing only an ID or node returns the computed style object of
		//		the node:
		//	|	require(["dojo/dom-style", "dojo/dom"], function(domStyle, dom){
		//	|		domStyle.get("thinger");
		//	|	});
		// example:
		//		Passing a node and a style property returns the current
		//		normalized, computed value for that property:
		//	|	require(["dojo/dom-style", "dojo/dom"], function(domStyle, dom){
		//	|		domStyle.get("thinger", "opacity"); // 1 by default
		//	|	});

		var n = dom.byId(node), l = arguments.length, op = (name == "opacity");
		if(l == 2 && op){
			return _getOpacity(n);
		}
		name = _floatAliases[name] ? "cssFloat" in n.style ? "cssFloat" : "styleFloat" : name;
		var s = style.getComputedStyle(n);
		return (l == 1) ? s : _toStyleValue(n, name, s[name] || n.style[name]); /* CSS2Properties||String||Number */
	};

	style.set = function setStyle(/*DOMNode|String*/ node, /*String|Object*/ name, /*String?*/ value){
		// summary:
		//		Sets styles on a node.
		// node: DOMNode|String
		//		id or reference to node to set style for
		// name: String|Object
		//		the style property to set in DOM-accessor format
		//		("borderWidth", not "border-width") or an object with key/value
		//		pairs suitable for setting each property.
		// value: String?
		//		If passed, sets value on the node for style, handling
		//		cross-browser concerns.  When setting a pixel value,
		//		be sure to include "px" in the value. For instance, top: "200px".
		//		Otherwise, in some cases, some browsers will not apply the style.
		//
		// example:
		//		Passing a node, a style property, and a value changes the
		//		current display of the node and returns the new computed value
		//	|	require(["dojo/dom-style"], function(domStyle){
		//	|		domStyle.set("thinger", "opacity", 0.5); // == 0.5
		//	|	});
		//
		// example:
		//		Passing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:
		//	|	require(["dojo/dom-style"], function(domStyle){
		//	|		domStyle.set("thinger", {
		//	|			"opacity": 0.5,
		//	|			"border": "3px solid black",
		//	|			"height": "300px"
		//	|		});
		//	|	});
		//
		// example:
		//		When the CSS style property is hyphenated, the JavaScript property is camelCased.
		//		font-size becomes fontSize, and so on.
		//	|	require(["dojo/dom-style", "dojo/dom"], function(domStyle, dom){
		//	|		domStyle.set("thinger",{
		//	|			fontSize:"14pt",
		//	|			letterSpacing:"1.2em"
		//	|		});
		//	|	});
		//
		// example:
		//		dojo/NodeList implements .style() using the same syntax, omitting the "node" parameter, calling
		//		dojo/dom-style.get() on every element of the list. See: `dojo/query` and `dojo/NodeList`
		//	|	require(["dojo/dom-style", "dojo/query", "dojo/NodeList-dom"],
		//	|	function(domStyle, query){
		//	|		query(".someClassName").style("visibility","hidden");
		//	|		// or
		//	|		query("#baz > div").style({
		//	|			opacity:0.75,
		//	|			fontSize:"13pt"
		//	|		});
		//	|	});

		var n = dom.byId(node), l = arguments.length, op = (name == "opacity");
		name = _floatAliases[name] ? "cssFloat" in n.style ? "cssFloat" : "styleFloat" : name;
		if(l == 3){
			return op ? _setOpacity(n, value) : n.style[name] = value; // Number
		}
		for(var x in name){
			style.set(node, x, name[x]);
		}
		return style.getComputedStyle(n);
	};

	return style;
});

},
'dojo/dom-prop':function(){
define(["exports", "./_base/kernel", "./sniff", "./_base/lang", "./dom", "./dom-style", "./dom-construct", "./_base/connect"],
		function(exports, dojo, has, lang, dom, style, ctr, conn){
	// module:
	//		dojo/dom-prop
	// summary:
	//		This module defines the core dojo DOM properties API.

	// TODOC: summary not showing up in output, see https://github.com/csnover/js-doc-parse/issues/42

	// =============================
	// Element properties Functions
	// =============================

	// helper to connect events
	var _evtHdlrMap = {}, _ctr = 0, _attrId = dojo._scopeName + "attrid";
	has.add('dom-textContent', function (global, doc, element) { return 'textContent' in element; });

	exports.names = {
		// properties renamed to avoid clashes with reserved words
		"class": "className",
		"for": "htmlFor",
		// properties written as camelCase
		tabindex: "tabIndex",
		readonly: "readOnly",
		colspan: "colSpan",
		frameborder: "frameBorder",
		rowspan: "rowSpan",
		textcontent: "textContent",
		valuetype: "valueType"
	};
	
	function getText(/*DOMNode*/node){
		// summary:
		//		recursion method for get('textContent') to use. Gets text value for a node.
		// description:
		//		Juse uses nodedValue so things like <br/> tags do not end up in
		//		the text as any sort of line return.
		var text = "", ch = node.childNodes;
		for(var i = 0, n; n = ch[i]; i++){
			//Skip comments.
			if(n.nodeType != 8){
				if(n.nodeType == 1){
					text += getText(n);
				}else{
					text += n.nodeValue;
				}
			}
		}
		return text;
	}

	exports.get = function getProp(/*DOMNode|String*/ node, /*String*/ name){
		// summary:
		//		Gets a property on an HTML element.
		// description:
		//		Handles normalized getting of properties on DOM nodes.
		//
		// node: DOMNode|String
		//		id or reference to the element to get the property on
		// name: String
		//		the name of the property to get.
		// returns:
		//		the value of the requested property or its default value
		//
		// example:
		//	|	// get the current value of the "foo" property on a node
		//	|	require(["dojo/dom-prop", "dojo/dom"], function(domProp, dom){
		//	|		domProp.get(dom.byId("nodeId"), "foo");
		//	|		// or we can just pass the id:
		//	|		domProp.get("nodeId", "foo");
		//	|	});

		node = dom.byId(node);
		var lc = name.toLowerCase(), propName = exports.names[lc] || name;
		
		if(propName == "textContent" && !has("dom-textContent")){
			return getText(node);
		}
		
		return node[propName];	// Anything
	};

	exports.set = function setProp(/*DOMNode|String*/ node, /*String|Object*/ name, /*String?*/ value){
		// summary:
		//		Sets a property on an HTML element.
		// description:
		//		Handles normalized setting of properties on DOM nodes.
		//
		//		When passing functions as values, note that they will not be
		//		directly assigned to slots on the node, but rather the default
		//		behavior will be removed and the new behavior will be added
		//		using `dojo.connect()`, meaning that event handler properties
		//		will be normalized and that some caveats with regards to
		//		non-standard behaviors for onsubmit apply. Namely that you
		//		should cancel form submission using `dojo.stopEvent()` on the
		//		passed event object instead of returning a boolean value from
		//		the handler itself.
		// node: DOMNode|String
		//		id or reference to the element to set the property on
		// name: String|Object
		//		the name of the property to set, or a hash object to set
		//		multiple properties at once.
		// value: String?
		//		The value to set for the property
		// returns:
		//		the DOM node
		//
		// example:
		//	|	// use prop() to set the tab index
		//	|	require(["dojo/dom-prop"], function(domProp){
		//	|		domProp.set("nodeId", "tabIndex", 3);
		//	|	});
		//
		// example:
		//	Set multiple values at once, including event handlers:
		//	|	require(["dojo/dom-prop"], function(domProp){
		//	|		domProp.set("formId", {
		//	|			"foo": "bar",
		//	|			"tabIndex": -1,
		//	|			"method": "POST",
		//	|		});
		//	|	});

		node = dom.byId(node);
		var l = arguments.length;
		if(l == 2 && typeof name != "string"){ // inline'd type check
			// the object form of setter: the 2nd argument is a dictionary
			for(var x in name){
				exports.set(node, x, name[x]);
			}
			return node; // DomNode
		}
		var lc = name.toLowerCase(), propName = exports.names[lc] || name;
		if(propName == "style" && typeof value != "string"){ // inline'd type check
			// special case: setting a style
			style.set(node, value);
			return node; // DomNode
		}
		if(propName == "innerHTML"){
			// special case: assigning HTML
			// the hash lists elements with read-only innerHTML on IE
			if(has("ie") && node.tagName.toLowerCase() in {col: 1, colgroup: 1,
						table: 1, tbody: 1, tfoot: 1, thead: 1, tr: 1, title: 1}){
				ctr.empty(node);
				node.appendChild(ctr.toDom(value, node.ownerDocument));
			}else{
				node[propName] = value;
			}
			return node; // DomNode
		}
		if(propName == "textContent" && !has("dom-textContent")) {
			ctr.empty(node);
			node.appendChild(node.ownerDocument.createTextNode(value));
			return node;
		}
		if(lang.isFunction(value)){
			// special case: assigning an event handler
			// clobber if we can
			var attrId = node[_attrId];
			if(!attrId){
				attrId = _ctr++;
				node[_attrId] = attrId;
			}
			if(!_evtHdlrMap[attrId]){
				_evtHdlrMap[attrId] = {};
			}
			var h = _evtHdlrMap[attrId][propName];
			if(h){
				//h.remove();
				conn.disconnect(h);
			}else{
				try{
					delete node[propName];
				}catch(e){}
			}
			// ensure that event objects are normalized, etc.
			if(value){
				//_evtHdlrMap[attrId][propName] = on(node, propName, value);
				_evtHdlrMap[attrId][propName] = conn.connect(node, propName, value);
			}else{
				node[propName] = null;
			}
			return node; // DomNode
		}
		node[propName] = value;
		return node;	// DomNode
	};
});

},
'dojo/_base/connect':function(){
define(["./kernel", "../on", "../topic", "../aspect", "./event", "../mouse", "./sniff", "./lang", "../keys"], function(dojo, on, hub, aspect, eventModule, mouse, has, lang){
// module:
//		dojo/_base/connect

has.add("events-keypress-typed", function(){ // keypresses should only occur a printable character is hit
	var testKeyEvent = {charCode: 0};
	try{
		testKeyEvent = document.createEvent("KeyboardEvent");
		(testKeyEvent.initKeyboardEvent || testKeyEvent.initKeyEvent).call(testKeyEvent, "keypress", true, true, null, false, false, false, false, 9, 3);
	}catch(e){}
	return testKeyEvent.charCode == 0 && !has("opera");
});

function connect_(obj, event, context, method, dontFix){
	method = lang.hitch(context, method);
	if(!obj || !(obj.addEventListener || obj.attachEvent)){
		// it is a not a DOM node and we are using the dojo.connect style of treating a
		// method like an event, must go right to aspect
		return aspect.after(obj || dojo.global, event, method, true);
	}
	if(typeof event == "string" && event.substring(0, 2) == "on"){
		event = event.substring(2);
	}
	if(!obj){
		obj = dojo.global;
	}
	if(!dontFix){
		switch(event){
			// dojo.connect has special handling for these event types
			case "keypress":
				event = keypress;
				break;
			case "mouseenter":
				event = mouse.enter;
				break;
			case "mouseleave":
				event = mouse.leave;
				break;
		}
	}
	return on(obj, event, method, dontFix);
}

var _punctMap = {
	106:42,
	111:47,
	186:59,
	187:43,
	188:44,
	189:45,
	190:46,
	191:47,
	192:96,
	219:91,
	220:92,
	221:93,
	222:39,
	229:113
};
var evtCopyKey = has("mac") ? "metaKey" : "ctrlKey";


var _synthesizeEvent = function(evt, props){
	var faux = lang.mixin({}, evt, props);
	setKeyChar(faux);
	// FIXME: would prefer to use lang.hitch: lang.hitch(evt, evt.preventDefault);
	// but it throws an error when preventDefault is invoked on Safari
	// does Event.preventDefault not support "apply" on Safari?
	faux.preventDefault = function(){ evt.preventDefault(); };
	faux.stopPropagation = function(){ evt.stopPropagation(); };
	return faux;
};
function setKeyChar(evt){
	evt.keyChar = evt.charCode ? String.fromCharCode(evt.charCode) : '';
	evt.charOrCode = evt.keyChar || evt.keyCode;
}
var keypress;
if(has("events-keypress-typed")){
	// this emulates Firefox's keypress behavior where every keydown can correspond to a keypress
	var _trySetKeyCode = function(e, code){
		try{
			// squelch errors when keyCode is read-only
			// (e.g. if keyCode is ctrl or shift)
			return (e.keyCode = code);
		}catch(e){
			return 0;
		}
	};
	keypress = function(object, listener){
		var keydownSignal = on(object, "keydown", function(evt){
			// munge key/charCode
			var k=evt.keyCode;
			// These are Windows Virtual Key Codes
			// http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/WinUI/WindowsUserInterface/UserInput/VirtualKeyCodes.asp
			var unprintable = (k!=13) && k!=32 && (k!=27||!has("ie")) && (k<48||k>90) && (k<96||k>111) && (k<186||k>192) && (k<219||k>222) && k!=229;
			// synthesize keypress for most unprintables and CTRL-keys
			if(unprintable||evt.ctrlKey){
				var c = unprintable ? 0 : k;
				if(evt.ctrlKey){
					if(k==3 || k==13){
						return listener.call(evt.currentTarget, evt); // IE will post CTRL-BREAK, CTRL-ENTER as keypress natively
					}else if(c>95 && c<106){
						c -= 48; // map CTRL-[numpad 0-9] to ASCII
					}else if((!evt.shiftKey)&&(c>=65&&c<=90)){
						c += 32; // map CTRL-[A-Z] to lowercase
					}else{
						c = _punctMap[c] || c; // map other problematic CTRL combinations to ASCII
					}
				}
				// simulate a keypress event
				var faux = _synthesizeEvent(evt, {type: 'keypress', faux: true, charCode: c});
				listener.call(evt.currentTarget, faux);
				if(has("ie")){
					_trySetKeyCode(evt, faux.keyCode);
				}
			}
		});
		var keypressSignal = on(object, "keypress", function(evt){
			var c = evt.charCode;
			c = c>=32 ? c : 0;
			evt = _synthesizeEvent(evt, {charCode: c, faux: true});
			return listener.call(this, evt);
		});
		return {
			remove: function(){
				keydownSignal.remove();
				keypressSignal.remove();
			}
		};
	};
}else{
	if(has("opera")){
		keypress = function(object, listener){
			return on(object, "keypress", function(evt){
				var c = evt.which;
				if(c==3){
					c=99; // Mozilla maps CTRL-BREAK to CTRL-c
				}
				// can't trap some keys at all, like INSERT and DELETE
				// there is no differentiating info between DELETE and ".", or INSERT and "-"
				c = c<32 && !evt.shiftKey ? 0 : c;
				if(evt.ctrlKey && !evt.shiftKey && c>=65 && c<=90){
					// lowercase CTRL-[A-Z] keys
					c += 32;
				}
				return listener.call(this, _synthesizeEvent(evt, { charCode: c }));
			});
		};
	}else{
		keypress = function(object, listener){
			return on(object, "keypress", function(evt){
				setKeyChar(evt);
				return listener.call(this, evt);
			});
		};
	}
}

var connect = {
	// summary:
	//		This module defines the dojo.connect API.
	//		This modules also provides keyboard event handling helpers.
	//		This module exports an extension event for emulating Firefox's keypress handling.
	//		However, this extension event exists primarily for backwards compatibility and
	//		is not recommended. WebKit and IE uses an alternate keypress handling (only
	//		firing for printable characters, to distinguish from keydown events), and most
	//		consider the WebKit/IE behavior more desirable.

	_keypress:keypress,

	connect:function(obj, event, context, method, dontFix){
		// summary:
		//		`dojo.connect` is a deprecated event handling and delegation method in
		//		Dojo. It allows one function to "listen in" on the execution of
		//		any other, triggering the second whenever the first is called. Many
		//		listeners may be attached to a function, and source functions may
		//		be either regular function calls or DOM events.
		//
		// description:
		//		Connects listeners to actions, so that after event fires, a
		//		listener is called with the same arguments passed to the original
		//		function.
		//
		//		Since `dojo.connect` allows the source of events to be either a
		//		"regular" JavaScript function or a DOM event, it provides a uniform
		//		interface for listening to all the types of events that an
		//		application is likely to deal with though a single, unified
		//		interface. DOM programmers may want to think of it as
		//		"addEventListener for everything and anything".
		//
		//		When setting up a connection, the `event` parameter must be a
		//		string that is the name of the method/event to be listened for. If
		//		`obj` is null, `kernel.global` is assumed, meaning that connections
		//		to global methods are supported but also that you may inadvertently
		//		connect to a global by passing an incorrect object name or invalid
		//		reference.
		//
		//		`dojo.connect` generally is forgiving. If you pass the name of a
		//		function or method that does not yet exist on `obj`, connect will
		//		not fail, but will instead set up a stub method. Similarly, null
		//		arguments may simply be omitted such that fewer than 4 arguments
		//		may be required to set up a connection See the examples for details.
		//
		//		The return value is a handle that is needed to
		//		remove this connection with `dojo.disconnect`.
		//
		// obj: Object?
		//		The source object for the event function.
		//		Defaults to `kernel.global` if null.
		//		If obj is a DOM node, the connection is delegated
		//		to the DOM event manager (unless dontFix is true).
		//
		// event: String
		//		String name of the event function in obj.
		//		I.e. identifies a property `obj[event]`.
		//
		// context: Object|null
		//		The object that method will receive as "this".
		//
		//		If context is null and method is a function, then method
		//		inherits the context of event.
		//
		//		If method is a string then context must be the source
		//		object object for method (context[method]). If context is null,
		//		kernel.global is used.
		//
		// method: String|Function
		//		A function reference, or name of a function in context.
		//		The function identified by method fires after event does.
		//		method receives the same arguments as the event.
		//		See context argument comments for information on method's scope.
		//
		// dontFix: Boolean?
		//		If obj is a DOM node, set dontFix to true to prevent delegation
		//		of this connection to the DOM event manager.
		//
		// example:
		//		When obj.onchange(), do ui.update():
		//	|	dojo.connect(obj, "onchange", ui, "update");
		//	|	dojo.connect(obj, "onchange", ui, ui.update); // same
		//
		// example:
		//		Using return value for disconnect:
		//	|	var link = dojo.connect(obj, "onchange", ui, "update");
		//	|	...
		//	|	dojo.disconnect(link);
		//
		// example:
		//		When onglobalevent executes, watcher.handler is invoked:
		//	|	dojo.connect(null, "onglobalevent", watcher, "handler");
		//
		// example:
		//		When ob.onCustomEvent executes, customEventHandler is invoked:
		//	|	dojo.connect(ob, "onCustomEvent", null, "customEventHandler");
		//	|	dojo.connect(ob, "onCustomEvent", "customEventHandler"); // same
		//
		// example:
		//		When ob.onCustomEvent executes, customEventHandler is invoked
		//		with the same scope (this):
		//	|	dojo.connect(ob, "onCustomEvent", null, customEventHandler);
		//	|	dojo.connect(ob, "onCustomEvent", customEventHandler); // same
		//
		// example:
		//		When globalEvent executes, globalHandler is invoked
		//		with the same scope (this):
		//	|	dojo.connect(null, "globalEvent", null, globalHandler);
		//	|	dojo.connect("globalEvent", globalHandler); // same

		// normalize arguments
		var a=arguments, args=[], i=0;
		// if a[0] is a String, obj was omitted
		args.push(typeof a[0] == "string" ? null : a[i++], a[i++]);
		// if the arg-after-next is a String or Function, context was NOT omitted
		var a1 = a[i+1];
		args.push(typeof a1 == "string" || typeof a1 == "function" ? a[i++] : null, a[i++]);
		// absorb any additional arguments
		for(var l=a.length; i<l; i++){	args.push(a[i]); }
		return connect_.apply(this, args);
	},

	disconnect:function(handle){
		// summary:
		//		Remove a link created by dojo.connect.
		// description:
		//		Removes the connection between event and the method referenced by handle.
		// handle: Handle
		//		the return value of the dojo.connect call that created the connection.

		if(handle){
			handle.remove();
		}
	},

	subscribe:function(topic, context, method){
		// summary:
		//		Attach a listener to a named topic. The listener function is invoked whenever the
		//		named topic is published (see: dojo.publish).
		//		Returns a handle which is needed to unsubscribe this listener.
		// topic: String
		//		The topic to which to subscribe.
		// context: Object?
		//		Scope in which method will be invoked, or null for default scope.
		// method: String|Function
		//		The name of a function in context, or a function reference. This is the function that
		//		is invoked when topic is published.
		// example:
		//	|	dojo.subscribe("alerts", null, function(caption, message){ alert(caption + "\n" + message); });
		//	|	dojo.publish("alerts", [ "read this", "hello world" ]);
		return hub.subscribe(topic, lang.hitch(context, method));
	},

	publish:function(topic, args){
		// summary:
		//		Invoke all listener method subscribed to topic.
		// topic: String
		//		The name of the topic to publish.
		// args: Array?
		//		An array of arguments. The arguments will be applied
		//		to each topic subscriber (as first class parameters, via apply).
		// example:
		//	|	dojo.subscribe("alerts", null, function(caption, message){ alert(caption + "\n" + message); };
		//	|	dojo.publish("alerts", [ "read this", "hello world" ]);
		return hub.publish.apply(hub, [topic].concat(args));
	},

	connectPublisher:function(topic, obj, event){
		// summary:
		//		Ensure that every time obj.event() is called, a message is published
		//		on the topic. Returns a handle which can be passed to
		//		dojo.disconnect() to disable subsequent automatic publication on
		//		the topic.
		// topic: String
		//		The name of the topic to publish.
		// obj: Object?
		//		The source object for the event function. Defaults to kernel.global
		//		if null.
		// event: String
		//		The name of the event function in obj.
		//		I.e. identifies a property obj[event].
		// example:
		//	|	dojo.connectPublisher("/ajax/start", dojo, "xhrGet");
		var pf = function(){ connect.publish(topic, arguments); };
		return event ? connect.connect(obj, event, pf) : connect.connect(obj, pf); //Handle
	},

	isCopyKey: function(e){
		// summary:
		//		Checks an event for the copy key (meta on Mac, and ctrl anywhere else)
		// e: Event
		//		Event object to examine
		return e[evtCopyKey];	// Boolean
	}
};

connect.unsubscribe = connect.disconnect;
/*=====
 connect.unsubscribe = function(handle){
	 // summary:
	 //		Remove a topic listener.
	 // handle: Handle
	 //		The handle returned from a call to subscribe.
	 // example:
	 //	|	var alerter = dojo.subscribe("alerts", null, function(caption, message){ alert(caption + "\n" + message); };
	 //	|	...
	 //	|	dojo.unsubscribe(alerter);
 };
 =====*/

 1  && lang.mixin(dojo, connect);
return connect;

});



},
'dojo/on':function(){
define(["./has!dom-addeventlistener?:./aspect", "./_base/kernel", "./sniff"], function(aspect, dojo, has){

	"use strict";
	if( 1 ){ // check to make sure we are in a browser, this module should work anywhere
		var major = window.ScriptEngineMajorVersion;
		has.add("jscript", major && (major() + ScriptEngineMinorVersion() / 10));
		has.add("event-orientationchange", has("touch") && !has("android")); // TODO: how do we detect this?
		has.add("event-stopimmediatepropagation", window.Event && !!window.Event.prototype && !!window.Event.prototype.stopImmediatePropagation);
		has.add("event-focusin", function(global, doc, element){
			return 'onfocusin' in element;
		});
		
		if(has("touch")){
			has.add("touch-can-modify-event-delegate", function(){
				// This feature test checks whether deleting a property of an event delegate works
				// for a touch-enabled device. If it works, event delegation can be used as fallback
				// for browsers such as Safari in older iOS where deleting properties of the original
				// event does not work.
				var EventDelegate = function(){};
				EventDelegate.prototype =
					document.createEvent("MouseEvents"); // original event
				// Attempt to modify a property of an event delegate and check if
				// it succeeds. Depending on browsers and on whether dojo/on's
				// strict mode is stripped in a Dojo build, there are 3 known behaviors:
				// it may either succeed, or raise an error, or fail to set the property
				// without raising an error.
				try{
					var eventDelegate = new EventDelegate;
					eventDelegate.target = null;
					return eventDelegate.target === null;
				}catch(e){
					return false; // cannot use event delegation
				}
			});
		}
	}
	var on = function(target, type, listener, dontFix){
		// summary:
		//		A function that provides core event listening functionality. With this function
		//		you can provide a target, event type, and listener to be notified of
		//		future matching events that are fired.
		// target: Element|Object
		//		This is the target object or DOM element that to receive events from
		// type: String|Function
		//		This is the name of the event to listen for or an extension event type.
		// listener: Function
		//		This is the function that should be called when the event fires.
		// returns: Object
		//		An object with a remove() method that can be used to stop listening for this
		//		event.
		// description:
		//		To listen for "click" events on a button node, we can do:
		//		|	define(["dojo/on"], function(on){
		//		|		on(button, "click", clickHandler);
		//		|		...
		//		Evented JavaScript objects can also have their own events.
		//		|	var obj = new Evented;
		//		|	on(obj, "foo", fooHandler);
		//		And then we could publish a "foo" event:
		//		|	on.emit(obj, "foo", {key: "value"});
		//		We can use extension events as well. For example, you could listen for a tap gesture:
		//		|	define(["dojo/on", "dojo/gesture/tap", function(on, tap){
		//		|		on(button, tap, tapHandler);
		//		|		...
		//		which would trigger fooHandler. Note that for a simple object this is equivalent to calling:
		//		|	obj.onfoo({key:"value"});
		//		If you use on.emit on a DOM node, it will use native event dispatching when possible.

		if(typeof target.on == "function" && typeof type != "function" && !target.nodeType){
			// delegate to the target's on() method, so it can handle it's own listening if it wants (unless it 
			// is DOM node and we may be dealing with jQuery or Prototype's incompatible addition to the
			// Element prototype 
			return target.on(type, listener);
		}
		// delegate to main listener code
		return on.parse(target, type, listener, addListener, dontFix, this);
	};
	on.pausable =  function(target, type, listener, dontFix){
		// summary:
		//		This function acts the same as on(), but with pausable functionality. The
		//		returned signal object has pause() and resume() functions. Calling the
		//		pause() method will cause the listener to not be called for future events. Calling the
		//		resume() method will cause the listener to again be called for future events.
		var paused;
		var signal = on(target, type, function(){
			if(!paused){
				return listener.apply(this, arguments);
			}
		}, dontFix);
		signal.pause = function(){
			paused = true;
		};
		signal.resume = function(){
			paused = false;
		};
		return signal;
	};
	on.once = function(target, type, listener, dontFix){
		// summary:
		//		This function acts the same as on(), but will only call the listener once. The 
		//		listener will be called for the first
		//		event that takes place and then listener will automatically be removed.
		var signal = on(target, type, function(){
			// remove this listener
			signal.remove();
			// proceed to call the listener
			return listener.apply(this, arguments);
		});
		return signal;
	};
	on.parse = function(target, type, listener, addListener, dontFix, matchesTarget){
		if(type.call){
			// event handler function
			// on(node, touch.press, touchListener);
			return type.call(matchesTarget, target, listener);
		}

		if(type instanceof Array){
			// allow an array of event names (or event handler functions)
			events = type;
		}else if(type.indexOf(",") > -1){
			// we allow comma delimited event names, so you can register for multiple events at once
			var events = type.split(/\s*,\s*/);
		} 
		if(events){
			var handles = [];
			var i = 0;
			var eventName;
			while(eventName = events[i++]){
				handles.push(on.parse(target, eventName, listener, addListener, dontFix, matchesTarget));
			}
			handles.remove = function(){
				for(var i = 0; i < handles.length; i++){
					handles[i].remove();
				}
			};
			return handles;
		}
		return addListener(target, type, listener, dontFix, matchesTarget);
	};
	var touchEvents = /^touch/;
	function addListener(target, type, listener, dontFix, matchesTarget){
		// event delegation:
		var selector = type.match(/(.*):(.*)/);
		// if we have a selector:event, the last one is interpreted as an event, and we use event delegation
		if(selector){
			type = selector[2];
			selector = selector[1];
			// create the extension event for selectors and directly call it
			return on.selector(selector, type).call(matchesTarget, target, listener);
		}
		// test to see if it a touch event right now, so we don't have to do it every time it fires
		if(has("touch")){
			if(touchEvents.test(type)){
				// touch event, fix it
				listener = fixTouchListener(listener);
			}
			if(!has("event-orientationchange") && (type == "orientationchange")){
				//"orientationchange" not supported <= Android 2.1, 
				//but works through "resize" on window
				type = "resize"; 
				target = window;
				listener = fixTouchListener(listener);
			} 
		}
		if(addStopImmediate){
			// add stopImmediatePropagation if it doesn't exist
			listener = addStopImmediate(listener);
		}
		// normal path, the target is |this|
		if(target.addEventListener){
			// the target has addEventListener, which should be used if available (might or might not be a node, non-nodes can implement this method as well)
			// check for capture conversions
			var capture = type in captures,
				adjustedType = capture ? captures[type] : type;
			target.addEventListener(adjustedType, listener, capture);
			// create and return the signal
			return {
				remove: function(){
					target.removeEventListener(adjustedType, listener, capture);
				}
			};
		}
		type = "on" + type;
		if(fixAttach && target.attachEvent){
			return fixAttach(target, type, listener);
		}
		throw new Error("Target must be an event emitter");
	}
	on.matches = function(node, selector, context, children, matchesTarget) {
		// summary:
		//		Check if a node match the current selector within the constraint of a context
		// node: DOMNode
		//		The node that originate the event
		// selector: String
		//		The selector to check against
		// context: DOMNode
		//		The context to search in.
		// children: Boolean
		//		Indicates if children elements of the selector should be allowed. This defaults to
		//		true
		// matchesTarget: Object|dojo/query?
		//		An object with a property "matches" as a function. Default is dojo/query.
		//		Matching DOMNodes will be done against this function
		//		The function must return a Boolean.
		//		It will have 3 arguments: "node", "selector" and "context"
		//		True is expected if "node" is matching the current "selector" in the passed "context"
		// returns: DOMNode?
		//		The matching node, if any. Else you get false

		// see if we have a valid matchesTarget or default to dojo/query
		matchesTarget = matchesTarget && matchesTarget.matches ? matchesTarget : dojo.query;
		children = children !== false;
		// there is a selector, so make sure it matches
		if(node.nodeType != 1){
			// text node will fail in native match selector
			node = node.parentNode;
		}
		while(!matchesTarget.matches(node, selector, context)){
			if(node == context || children === false || !(node = node.parentNode) || node.nodeType != 1){ // intentional assignment
				return false;
			}
		}
		return node;
	}
	on.selector = function(selector, eventType, children){
		// summary:
		//		Creates a new extension event with event delegation. This is based on
		//		the provided event type (can be extension event) that
		//		only calls the listener when the CSS selector matches the target of the event.
		//
		//		The application must require() an appropriate level of dojo/query to handle the selector.
		// selector:
		//		The CSS selector to use for filter events and determine the |this| of the event listener.
		// eventType:
		//		The event to listen for
		// children:
		//		Indicates if children elements of the selector should be allowed. This defaults to 
		//		true
		// example:
		// |	require(["dojo/on", "dojo/mouse", "dojo/query!css2"], function(on, mouse){
		// |		on(node, on.selector(".my-class", mouse.enter), handlerForMyHover);
		return function(target, listener){
			// if the selector is function, use it to select the node, otherwise use the matches method
			var matchesTarget = typeof selector == "function" ? {matches: selector} : this,
				bubble = eventType.bubble;
			function select(eventTarget){
				return on.matches(eventTarget, selector, target, children, matchesTarget);
			}
			if(bubble){
				// the event type doesn't naturally bubble, but has a bubbling form, use that, and give it the selector so it can perform the select itself
				return on(target, bubble(select), listener);
			}
			// standard event delegation
			return on(target, eventType, function(event){
				// call select to see if we match
				var eventTarget = select(event.target);
				// if it matches we call the listener
				if (eventTarget) {
					return listener.call(eventTarget, event);
				}
			});
		};
	};

	function syntheticPreventDefault(){
		this.cancelable = false;
		this.defaultPrevented = true;
	}
	function syntheticStopPropagation(){
		this.bubbles = false;
	}
	var slice = [].slice,
		syntheticDispatch = on.emit = function(target, type, event){
		// summary:
		//		Fires an event on the target object.
		// target:
		//		The target object to fire the event on. This can be a DOM element or a plain 
		//		JS object. If the target is a DOM element, native event emitting mechanisms
		//		are used when possible.
		// type:
		//		The event type name. You can emulate standard native events like "click" and 
		//		"mouseover" or create custom events like "open" or "finish".
		// event:
		//		An object that provides the properties for the event. See https://developer.mozilla.org/en/DOM/event.initEvent 
		//		for some of the properties. These properties are copied to the event object.
		//		Of particular importance are the cancelable and bubbles properties. The
		//		cancelable property indicates whether or not the event has a default action
		//		that can be cancelled. The event is cancelled by calling preventDefault() on
		//		the event object. The bubbles property indicates whether or not the
		//		event will bubble up the DOM tree. If bubbles is true, the event will be called
		//		on the target and then each parent successively until the top of the tree
		//		is reached or stopPropagation() is called. Both bubbles and cancelable 
		//		default to false.
		// returns:
		//		If the event is cancelable and the event is not cancelled,
		//		emit will return true. If the event is cancelable and the event is cancelled,
		//		emit will return false.
		// details:
		//		Note that this is designed to emit events for listeners registered through
		//		dojo/on. It should actually work with any event listener except those
		//		added through IE's attachEvent (IE8 and below's non-W3C event emitting
		//		doesn't support custom event types). It should work with all events registered
		//		through dojo/on. Also note that the emit method does do any default
		//		action, it only returns a value to indicate if the default action should take
		//		place. For example, emitting a keypress event would not cause a character
		//		to appear in a textbox.
		// example:
		//		To fire our own click event
		//	|	require(["dojo/on", "dojo/dom"
		//	|	], function(on, dom){
		//	|		on.emit(dom.byId("button"), "click", {
		//	|			cancelable: true,
		//	|			bubbles: true,
		//	|			screenX: 33,
		//	|			screenY: 44
		//	|		});
		//		We can also fire our own custom events:
		//	|		on.emit(dom.byId("slider"), "slide", {
		//	|			cancelable: true,
		//	|			bubbles: true,
		//	|			direction: "left-to-right"
		//	|		});
		//	|	});
		var args = slice.call(arguments, 2);
		var method = "on" + type;
		if("parentNode" in target){
			// node (or node-like), create event controller methods
			var newEvent = args[0] = {};
			for(var i in event){
				newEvent[i] = event[i];
			}
			newEvent.preventDefault = syntheticPreventDefault;
			newEvent.stopPropagation = syntheticStopPropagation;
			newEvent.target = target;
			newEvent.type = type;
			event = newEvent;
		}
		do{
			// call any node which has a handler (note that ideally we would try/catch to simulate normal event propagation but that causes too much pain for debugging)
			target[method] && target[method].apply(target, args);
			// and then continue up the parent node chain if it is still bubbling (if started as bubbles and stopPropagation hasn't been called)
		}while(event && event.bubbles && (target = target.parentNode));
		return event && event.cancelable && event; // if it is still true (was cancelable and was cancelled), return the event to indicate default action should happen
	};
	var captures = has("event-focusin") ? {} : {focusin: "focus", focusout: "blur"};
	if(!has("event-stopimmediatepropagation")){
		var stopImmediatePropagation =function(){
			this.immediatelyStopped = true;
			this.modified = true; // mark it as modified so the event will be cached in IE
		};
		var addStopImmediate = function(listener){
			return function(event){
				if(!event.immediatelyStopped){// check to make sure it hasn't been stopped immediately
					event.stopImmediatePropagation = stopImmediatePropagation;
					return listener.apply(this, arguments);
				}
			};
		}
	} 
	if(has("dom-addeventlistener")){
		// emitter that works with native event handling
		on.emit = function(target, type, event){
			if(target.dispatchEvent && document.createEvent){
				// use the native event emitting mechanism if it is available on the target object
				// create a generic event				
				// we could create branch into the different types of event constructors, but 
				// that would be a lot of extra code, with little benefit that I can see, seems 
				// best to use the generic constructor and copy properties over, making it 
				// easy to have events look like the ones created with specific initializers
				var ownerDocument = target.ownerDocument || document;
				var nativeEvent = ownerDocument.createEvent("HTMLEvents");
				nativeEvent.initEvent(type, !!event.bubbles, !!event.cancelable);
				// and copy all our properties over
				for(var i in event){
					if(!(i in nativeEvent)){
						nativeEvent[i] = event[i];
					}
				}
				return target.dispatchEvent(nativeEvent) && nativeEvent;
			}
			return syntheticDispatch.apply(on, arguments); // emit for a non-node
		};
	}else{
		// no addEventListener, basically old IE event normalization
		on._fixEvent = function(evt, sender){
			// summary:
			//		normalizes properties on the event object including event
			//		bubbling methods, keystroke normalization, and x/y positions
			// evt:
			//		native event object
			// sender:
			//		node to treat as "currentTarget"
			if(!evt){
				var w = sender && (sender.ownerDocument || sender.document || sender).parentWindow || window;
				evt = w.event;
			}
			if(!evt){return evt;}
			try{
				if(lastEvent && evt.type == lastEvent.type  && evt.srcElement == lastEvent.target){
					// should be same event, reuse event object (so it can be augmented);
					// accessing evt.srcElement rather than evt.target since evt.target not set on IE until fixup below
					evt = lastEvent;
				}
			}catch(e){
				// will occur on IE on lastEvent.type reference if lastEvent points to a previous event that already
				// finished bubbling, but the setTimeout() to clear lastEvent hasn't fired yet
			}
			if(!evt.target){ // check to see if it has been fixed yet
				evt.target = evt.srcElement;
				evt.currentTarget = (sender || evt.srcElement);
				if(evt.type == "mouseover"){
					evt.relatedTarget = evt.fromElement;
				}
				if(evt.type == "mouseout"){
					evt.relatedTarget = evt.toElement;
				}
				if(!evt.stopPropagation){
					evt.stopPropagation = stopPropagation;
					evt.preventDefault = preventDefault;
				}
				switch(evt.type){
					case "keypress":
						var c = ("charCode" in evt ? evt.charCode : evt.keyCode);
						if (c==10){
							// CTRL-ENTER is CTRL-ASCII(10) on IE, but CTRL-ENTER on Mozilla
							c=0;
							evt.keyCode = 13;
						}else if(c==13||c==27){
							c=0; // Mozilla considers ENTER and ESC non-printable
						}else if(c==3){
							c=99; // Mozilla maps CTRL-BREAK to CTRL-c
						}
						// Mozilla sets keyCode to 0 when there is a charCode
						// but that stops the event on IE.
						evt.charCode = c;
						_setKeyChar(evt);
						break;
				}
			}
			return evt;
		};
		var lastEvent, IESignal = function(handle){
			this.handle = handle;
		};
		IESignal.prototype.remove = function(){
			delete _dojoIEListeners_[this.handle];
		};
		var fixListener = function(listener){
			// this is a minimal function for closing on the previous listener with as few as variables as possible
			return function(evt){
				evt = on._fixEvent(evt, this);
				var result = listener.call(this, evt);
				if(evt.modified){
					// cache the last event and reuse it if we can
					if(!lastEvent){
						setTimeout(function(){
							lastEvent = null;
						});
					}
					lastEvent = evt;
				}
				return result;
			};
		};
		var fixAttach = function(target, type, listener){
			listener = fixListener(listener);
			if(((target.ownerDocument ? target.ownerDocument.parentWindow : target.parentWindow || target.window || window) != top || 
						has("jscript") < 5.8) && 
					!has("config-_allow_leaks")){
				// IE will leak memory on certain handlers in frames (IE8 and earlier) and in unattached DOM nodes for JScript 5.7 and below.
				// Here we use global redirection to solve the memory leaks
				if(typeof _dojoIEListeners_ == "undefined"){
					_dojoIEListeners_ = [];
				}
				var emitter = target[type];
				if(!emitter || !emitter.listeners){
					var oldListener = emitter;
					emitter = Function('event', 'var callee = arguments.callee; for(var i = 0; i<callee.listeners.length; i++){var listener = _dojoIEListeners_[callee.listeners[i]]; if(listener){listener.call(this,event);}}');
					emitter.listeners = [];
					target[type] = emitter;
					emitter.global = this;
					if(oldListener){
						emitter.listeners.push(_dojoIEListeners_.push(oldListener) - 1);
					}
				}
				var handle;
				emitter.listeners.push(handle = (emitter.global._dojoIEListeners_.push(listener) - 1));
				return new IESignal(handle);
			}
			return aspect.after(target, type, listener, true);
		};

		var _setKeyChar = function(evt){
			evt.keyChar = evt.charCode ? String.fromCharCode(evt.charCode) : '';
			evt.charOrCode = evt.keyChar || evt.keyCode;	// TODO: remove for 2.0
		};
		// Called in Event scope
		var stopPropagation = function(){
			this.cancelBubble = true;
		};
		var preventDefault = on._preventDefault = function(){
			// Setting keyCode to 0 is the only way to prevent certain keypresses (namely
			// ctrl-combinations that correspond to menu accelerator keys).
			// Otoh, it prevents upstream listeners from getting this information
			// Try to split the difference here by clobbering keyCode only for ctrl
			// combinations. If you still need to access the key upstream, bubbledKeyCode is
			// provided as a workaround.
			this.bubbledKeyCode = this.keyCode;
			if(this.ctrlKey){
				try{
					// squelch errors when keyCode is read-only
					// (e.g. if keyCode is ctrl or shift)
					this.keyCode = 0;
				}catch(e){
				}
			}
			this.defaultPrevented = true;
			this.returnValue = false;
			this.modified = true; // mark it as modified  (for defaultPrevented flag) so the event will be cached in IE
		};
	}
	if(has("touch")){ 
		var EventDelegate = function(){};
		var windowOrientation = window.orientation; 
		var fixTouchListener = function(listener){ 
			return function(originalEvent){ 
				//Event normalization(for ontouchxxx and resize): 
				//1.incorrect e.pageX|pageY in iOS 
				//2.there are no "e.rotation", "e.scale" and "onorientationchange" in Android
				//3.More TBD e.g. force | screenX | screenX | clientX | clientY | radiusX | radiusY

				// see if it has already been corrected
				var event = originalEvent.corrected;
				if(!event){
					var type = originalEvent.type;
					try{
						delete originalEvent.type; // on some JS engines (android), deleting properties makes them mutable
					}catch(e){} 
					if(originalEvent.type){
						// Deleting the property of the original event did not work (this is the case of
						// browsers such as older Safari iOS), hence fallback:
						if(has("touch-can-modify-event-delegate")){
							// If deleting properties of delegated event works, use event delegation:
							EventDelegate.prototype = originalEvent;
							event = new EventDelegate;
						}else{
							// Otherwise last fallback: other browsers, such as mobile Firefox, do not like
							// delegated properties, so we have to copy
							event = {};
							for(var name in originalEvent){
								event[name] = originalEvent[name];
							}
						}
						// have to delegate methods to make them work
						event.preventDefault = function(){
							originalEvent.preventDefault();
						};
						event.stopPropagation = function(){
							originalEvent.stopPropagation();
						};
					}else{
						// deletion worked, use property as is
						event = originalEvent;
						event.type = type;
					}
					originalEvent.corrected = event;
					if(type == 'resize'){
						if(windowOrientation == window.orientation){ 
							return null;//double tap causes an unexpected 'resize' in Android
						} 
						windowOrientation = window.orientation;
						event.type = "orientationchange"; 
						return listener.call(this, event);
					}
					// We use the original event and augment, rather than doing an expensive mixin operation
					if(!("rotation" in event)){ // test to see if it has rotation
						event.rotation = 0; 
						event.scale = 1;
					}
					//use event.changedTouches[0].pageX|pageY|screenX|screenY|clientX|clientY|target
					var firstChangeTouch = event.changedTouches[0];
					for(var i in firstChangeTouch){ // use for-in, we don't need to have dependency on dojo/_base/lang here
						delete event[i]; // delete it first to make it mutable
						event[i] = firstChangeTouch[i];
					}
				}
				return listener.call(this, event); 
			}; 
		}; 
	}
	return on;
});

},
'dojo/topic':function(){
define(["./Evented"], function(Evented){

	// module:
	//		dojo/topic

	var hub = new Evented;
	return {
		// summary:
		//		Pubsub hub.
		// example:
		//		| 	topic.subscribe("some/topic", function(event){
		//		|	... do something with event
		//		|	});
		//		|	topic.publish("some/topic", {name:"some event", ...});

		publish: function(topic, event){
			// summary:
			//		Publishes a message to a topic on the pub/sub hub. All arguments after
			//		the first will be passed to the subscribers, so any number of arguments
			//		can be provided (not just event).
			// topic: String
			//		The name of the topic to publish to
			// event: Object
			//		An event to distribute to the topic listeners
			return hub.emit.apply(hub, arguments);
		},

		subscribe: function(topic, listener){
			// summary:
			//		Subscribes to a topic on the pub/sub hub
			// topic: String
			//		The topic to subscribe to
			// listener: Function
			//		A function to call when a message is published to the given topic
			return hub.on.apply(hub, arguments);
		}
	};
});

},
'dojo/Evented':function(){
define(["./aspect", "./on"], function(aspect, on){
	// module:
	//		dojo/Evented

 	"use strict";
 	var after = aspect.after;
	function Evented(){
		// summary:
		//		A class that can be used as a mixin or base class,
		//		to add on() and emit() methods to a class
		//		for listening for events and emitting events:
		// example:
		//		|	define(["dojo/Evented", "dojo/_base/declare", "dojo/Stateful"
		//		|	], function(Evented, declare, Stateful){
		//		|		var EventedStateful = declare([Evented, Stateful], {...});
		//		|		var instance = new EventedStateful();
		//		|		instance.on("open", function(event){
		//		|		... do something with event
		//		|	 });
		//		|
		//		|	instance.emit("open", {name:"some event", ...});
	}
	Evented.prototype = {
		on: function(type, listener){
			return on.parse(this, type, listener, function(target, type){
				return after(target, 'on' + type, listener, true);
			});
		},
		emit: function(type, event){
			var args = [this];
			args.push.apply(args, arguments);
			return on.emit.apply(on, args);
		}
	};
	return Evented;
});

},
'dojo/aspect':function(){
define([], function(){

	// module:
	//		dojo/aspect

	"use strict";
	var undefined, nextId = 0;
	function advise(dispatcher, type, advice, receiveArguments){
		var previous = dispatcher[type];
		var around = type == "around";
		var signal;
		if(around){
			var advised = advice(function(){
				return previous.advice(this, arguments);
			});
			signal = {
				remove: function(){
					if(advised){
						advised = dispatcher = advice = null;
					}
				},
				advice: function(target, args){
					return advised ?
						advised.apply(target, args) :  // called the advised function
						previous.advice(target, args); // cancelled, skip to next one
				}
			};
		}else{
			// create the remove handler
			signal = {
				remove: function(){
					if(signal.advice){
						var previous = signal.previous;
						var next = signal.next;
						if(!next && !previous){
							delete dispatcher[type];
						}else{
							if(previous){
								previous.next = next;
							}else{
								dispatcher[type] = next;
							}
							if(next){
								next.previous = previous;
							}
						}

						// remove the advice to signal that this signal has been removed
						dispatcher = advice = signal.advice = null;
					}
				},
				id: nextId++,
				advice: advice,
				receiveArguments: receiveArguments
			};
		}
		if(previous && !around){
			if(type == "after"){
				// add the listener to the end of the list
				// note that we had to change this loop a little bit to workaround a bizarre IE10 JIT bug
				while(previous.next && (previous = previous.next)){}
				previous.next = signal;
				signal.previous = previous;
			}else if(type == "before"){
				// add to beginning
				dispatcher[type] = signal;
				signal.next = previous;
				previous.previous = signal;
			}
		}else{
			// around or first one just replaces
			dispatcher[type] = signal;
		}
		return signal;
	}
	function aspect(type){
		return function(target, methodName, advice, receiveArguments){
			var existing = target[methodName], dispatcher;
			if(!existing || existing.target != target){
				// no dispatcher in place
				target[methodName] = dispatcher = function(){
					var executionId = nextId;
					// before advice
					var args = arguments;
					var before = dispatcher.before;
					while(before){
						args = before.advice.apply(this, args) || args;
						before = before.next;
					}
					// around advice
					if(dispatcher.around){
						var results = dispatcher.around.advice(this, args);
					}
					// after advice
					var after = dispatcher.after;
					while(after && after.id < executionId){
						if(after.receiveArguments){
							var newResults = after.advice.apply(this, args);
							// change the return value only if a new value was returned
							results = newResults === undefined ? results : newResults;
						}else{
							results = after.advice.call(this, results, args);
						}
						after = after.next;
					}
					return results;
				};
				if(existing){
					dispatcher.around = {advice: function(target, args){
						return existing.apply(target, args);
					}};
				}
				dispatcher.target = target;
			}
			var results = advise((dispatcher || existing), type, advice, receiveArguments);
			advice = null;
			return results;
		};
	}

	// TODOC: after/before/around return object

	var after = aspect("after");
	/*=====
	after = function(target, methodName, advice, receiveArguments){
		// summary:
		//		The "after" export of the aspect module is a function that can be used to attach
		//		"after" advice to a method. This function will be executed after the original method
		//		is executed. By default the function will be called with a single argument, the return
		//		value of the original method, or the the return value of the last executed advice (if a previous one exists).
		//		The fourth (optional) argument can be set to true to so the function receives the original
		//		arguments (from when the original method was called) rather than the return value.
		//		If there are multiple "after" advisors, they are executed in the order they were registered.
		// target: Object
		//		This is the target object
		// methodName: String
		//		This is the name of the method to attach to.
		// advice: Function
		//		This is function to be called after the original method
		// receiveArguments: Boolean?
		//		If this is set to true, the advice function receives the original arguments (from when the original mehtod
		//		was called) rather than the return value of the original/previous method.
		// returns:
		//		A signal object that can be used to cancel the advice. If remove() is called on this signal object, it will
		//		stop the advice function from being executed.
	};
	=====*/

	var before = aspect("before");
	/*=====
	before = function(target, methodName, advice){
		// summary:
		//		The "before" export of the aspect module is a function that can be used to attach
		//		"before" advice to a method. This function will be executed before the original method
		//		is executed. This function will be called with the arguments used to call the method.
		//		This function may optionally return an array as the new arguments to use to call
		//		the original method (or the previous, next-to-execute before advice, if one exists).
		//		If the before method doesn't return anything (returns undefined) the original arguments
		//		will be preserved.
		//		If there are multiple "before" advisors, they are executed in the reverse order they were registered.
		// target: Object
		//		This is the target object
		// methodName: String
		//		This is the name of the method to attach to.
		// advice: Function
		//		This is function to be called before the original method
	};
	=====*/

	var around = aspect("around");
	/*=====
	 around = function(target, methodName, advice){
		// summary:
		//		The "around" export of the aspect module is a function that can be used to attach
		//		"around" advice to a method. The advisor function is immediately executed when
		//		the around() is called, is passed a single argument that is a function that can be
		//		called to continue execution of the original method (or the next around advisor).
		//		The advisor function should return a function, and this function will be called whenever
		//		the method is called. It will be called with the arguments used to call the method.
		//		Whatever this function returns will be returned as the result of the method call (unless after advise changes it).
		// example:
		//		If there are multiple "around" advisors, the most recent one is executed first,
		//		which can then delegate to the next one and so on. For example:
		//		|	around(obj, "foo", function(originalFoo){
		//		|		return function(){
		//		|			var start = new Date().getTime();
		//		|			var results = originalFoo.apply(this, arguments); // call the original
		//		|			var end = new Date().getTime();
		//		|			console.log("foo execution took " + (end - start) + " ms");
		//		|			return results;
		//		|		};
		//		|	});
		// target: Object
		//		This is the target object
		// methodName: String
		//		This is the name of the method to attach to.
		// advice: Function
		//		This is function to be called around the original method
	};
	=====*/

	return {
		// summary:
		//		provides aspect oriented programming functionality, allowing for
		//		one to add before, around, or after advice on existing methods.
		// example:
		//	|	define(["dojo/aspect"], function(aspect){
		//	|		var signal = aspect.after(targetObject, "methodName", function(someArgument){
		//	|			this will be called when targetObject.methodName() is called, after the original function is called
		//	|		});
		//
		// example:
		//	The returned signal object can be used to cancel the advice.
		//	|	signal.remove(); // this will stop the advice from being executed anymore
		//	|	aspect.before(targetObject, "methodName", function(someArgument){
		//	|		// this will be called when targetObject.methodName() is called, before the original function is called
		//	|	 });

		before: before,
		around: around,
		after: after
	};
});

},
'dojo/_base/event':function(){
define(["./kernel", "../on", "../has", "../dom-geometry"], function(dojo, on, has, dom){
	// module:
	//		dojo/_base/event

	if(on._fixEvent){
		var fixEvent = on._fixEvent;
		on._fixEvent = function(evt, se){
			// add some additional normalization for back-compat, this isn't in on.js because it is somewhat more expensive
			evt = fixEvent(evt, se);
			if(evt){
				dom.normalizeEvent(evt);
			}
			return evt;
		};		
	}
	
	var ret = {
		// summary:
		//		This module defines dojo DOM event API.   Usually you should use dojo/on, and evt.stopPropagation() +
		//		evt.preventDefault(), rather than this module.

		fix: function(/*Event*/ evt, /*DOMNode*/ sender){
			// summary:
			//		normalizes properties on the event object including event
			//		bubbling methods, keystroke normalization, and x/y positions
			// evt: Event
			//		native event object
			// sender: DOMNode
			//		node to treat as "currentTarget"
			if(on._fixEvent){
				return on._fixEvent(evt, sender);
			}
			return evt;	// Event
		},
	
		stop: function(/*Event*/ evt){
			// summary:
			//		prevents propagation and clobbers the default action of the
			//		passed event
			// evt: Event
			//		The event object. If omitted, window.event is used on IE.
			if(has("dom-addeventlistener") || (evt && evt.preventDefault)){
				evt.preventDefault();
				evt.stopPropagation();
			}else{
				evt = evt || window.event;
				evt.cancelBubble = true;
				on._preventDefault.call(evt);
			}
		}
	};

	if( 1 ){
		dojo.fixEvent = ret.fix;
		dojo.stopEvent = ret.stop;
	}

	return ret;
});

},
'dojo/dom-geometry':function(){
define(["./sniff", "./_base/window","./dom", "./dom-style"],
		function(has, win, dom, style){
	// module:
	//		dojo/dom-geometry

	// the result object
	var geom = {
		// summary:
		//		This module defines the core dojo DOM geometry API.
	};

	// Box functions will assume this model.
	// On IE/Opera, BORDER_BOX will be set if the primary document is in quirks mode.
	// Can be set to change behavior of box setters.

	// can be either:
	//	"border-box"
	//	"content-box" (default)
	geom.boxModel = "content-box";

	// We punt per-node box mode testing completely.
	// If anybody cares, we can provide an additional (optional) unit
	// that overrides existing code to include per-node box sensitivity.

	// Opera documentation claims that Opera 9 uses border-box in BackCompat mode.
	// but experiments (Opera 9.10.8679 on Windows Vista) indicate that it actually continues to use content-box.
	// IIRC, earlier versions of Opera did in fact use border-box.
	// Opera guys, this is really confusing. Opera being broken in quirks mode is not our fault.

	if(has("ie") /*|| has("opera")*/){
		// client code may have to adjust if compatMode varies across iframes
		geom.boxModel = document.compatMode == "BackCompat" ? "border-box" : "content-box";
	}

	geom.getPadExtents = function getPadExtents(/*DomNode*/ node, /*Object*/ computedStyle){
		// summary:
		//		Returns object with special values specifically useful for node
		//		fitting.
		// description:
		//		Returns an object with `w`, `h`, `l`, `t` properties:
		//	|		l/t/r/b = left/top/right/bottom padding (respectively)
		//	|		w = the total of the left and right padding
		//	|		h = the total of the top and bottom padding
		//		If 'node' has position, l/t forms the origin for child nodes.
		//		The w/h are used for calculating boxes.
		//		Normally application code will not need to invoke this
		//		directly, and will use the ...box... functions instead.
		// node: DOMNode
		// computedStyle: Object?
		//		This parameter accepts computed styles object.
		//		If this parameter is omitted, the functions will call
		//		dojo/dom-style.getComputedStyle to get one. It is a better way, calling
		//		dojo/dom-style.getComputedStyle once, and then pass the reference to this
		//		computedStyle parameter. Wherever possible, reuse the returned
		//		object of dojo/dom-style.getComputedStyle().

		node = dom.byId(node);
		var s = computedStyle || style.getComputedStyle(node), px = style.toPixelValue,
			l = px(node, s.paddingLeft), t = px(node, s.paddingTop), r = px(node, s.paddingRight), b = px(node, s.paddingBottom);
		return {l: l, t: t, r: r, b: b, w: l + r, h: t + b};
	};

	var none = "none";

	geom.getBorderExtents = function getBorderExtents(/*DomNode*/ node, /*Object*/ computedStyle){
		// summary:
		//		returns an object with properties useful for noting the border
		//		dimensions.
		// description:
		//		- l/t/r/b = the sum of left/top/right/bottom border (respectively)
		//		- w = the sum of the left and right border
		//		- h = the sum of the top and bottom border
		//
		//		The w/h are used for calculating boxes.
		//		Normally application code will not need to invoke this
		//		directly, and will use the ...box... functions instead.
		// node: DOMNode
		// computedStyle: Object?
		//		This parameter accepts computed styles object.
		//		If this parameter is omitted, the functions will call
		//		dojo/dom-style.getComputedStyle to get one. It is a better way, calling
		//		dojo/dom-style.getComputedStyle once, and then pass the reference to this
		//		computedStyle parameter. Wherever possible, reuse the returned
		//		object of dojo/dom-style.getComputedStyle().

		node = dom.byId(node);
		var px = style.toPixelValue, s = computedStyle || style.getComputedStyle(node),
			l = s.borderLeftStyle != none ? px(node, s.borderLeftWidth) : 0,
			t = s.borderTopStyle != none ? px(node, s.borderTopWidth) : 0,
			r = s.borderRightStyle != none ? px(node, s.borderRightWidth) : 0,
			b = s.borderBottomStyle != none ? px(node, s.borderBottomWidth) : 0;
		return {l: l, t: t, r: r, b: b, w: l + r, h: t + b};
	};

	geom.getPadBorderExtents = function getPadBorderExtents(/*DomNode*/ node, /*Object*/ computedStyle){
		// summary:
		//		Returns object with properties useful for box fitting with
		//		regards to padding.
		// description:
		//		- l/t/r/b = the sum of left/top/right/bottom padding and left/top/right/bottom border (respectively)
		//		- w = the sum of the left and right padding and border
		//		- h = the sum of the top and bottom padding and border
		//
		//		The w/h are used for calculating boxes.
		//		Normally application code will not need to invoke this
		//		directly, and will use the ...box... functions instead.
		// node: DOMNode
		// computedStyle: Object?
		//		This parameter accepts computed styles object.
		//		If this parameter is omitted, the functions will call
		//		dojo/dom-style.getComputedStyle to get one. It is a better way, calling
		//		dojo/dom-style.getComputedStyle once, and then pass the reference to this
		//		computedStyle parameter. Wherever possible, reuse the returned
		//		object of dojo/dom-style.getComputedStyle().

		node = dom.byId(node);
		var s = computedStyle || style.getComputedStyle(node),
			p = geom.getPadExtents(node, s),
			b = geom.getBorderExtents(node, s);
		return {
			l: p.l + b.l,
			t: p.t + b.t,
			r: p.r + b.r,
			b: p.b + b.b,
			w: p.w + b.w,
			h: p.h + b.h
		};
	};

	geom.getMarginExtents = function getMarginExtents(node, computedStyle){
		// summary:
		//		returns object with properties useful for box fitting with
		//		regards to box margins (i.e., the outer-box).
		//
		//		- l/t = marginLeft, marginTop, respectively
		//		- w = total width, margin inclusive
		//		- h = total height, margin inclusive
		//
		//		The w/h are used for calculating boxes.
		//		Normally application code will not need to invoke this
		//		directly, and will use the ...box... functions instead.
		// node: DOMNode
		// computedStyle: Object?
		//		This parameter accepts computed styles object.
		//		If this parameter is omitted, the functions will call
		//		dojo/dom-style.getComputedStyle to get one. It is a better way, calling
		//		dojo/dom-style.getComputedStyle once, and then pass the reference to this
		//		computedStyle parameter. Wherever possible, reuse the returned
		//		object of dojo/dom-style.getComputedStyle().

		node = dom.byId(node);
		var s = computedStyle || style.getComputedStyle(node), px = style.toPixelValue,
			l = px(node, s.marginLeft), t = px(node, s.marginTop), r = px(node, s.marginRight), b = px(node, s.marginBottom);
		return {l: l, t: t, r: r, b: b, w: l + r, h: t + b};
	};

	// Box getters work in any box context because offsetWidth/clientWidth
	// are invariant wrt box context
	//
	// They do *not* work for display: inline objects that have padding styles
	// because the user agent ignores padding (it's bogus styling in any case)
	//
	// Be careful with IMGs because they are inline or block depending on
	// browser and browser mode.

	// Although it would be easier to read, there are not separate versions of
	// _getMarginBox for each browser because:
	// 1. the branching is not expensive
	// 2. factoring the shared code wastes cycles (function call overhead)
	// 3. duplicating the shared code wastes bytes

	geom.getMarginBox = function getMarginBox(/*DomNode*/ node, /*Object*/ computedStyle){
		// summary:
		//		returns an object that encodes the width, height, left and top
		//		positions of the node's margin box.
		// node: DOMNode
		// computedStyle: Object?
		//		This parameter accepts computed styles object.
		//		If this parameter is omitted, the functions will call
		//		dojo/dom-style.getComputedStyle to get one. It is a better way, calling
		//		dojo/dom-style.getComputedStyle once, and then pass the reference to this
		//		computedStyle parameter. Wherever possible, reuse the returned
		//		object of dojo/dom-style.getComputedStyle().

		node = dom.byId(node);
		var s = computedStyle || style.getComputedStyle(node), me = geom.getMarginExtents(node, s),
			l = node.offsetLeft - me.l, t = node.offsetTop - me.t, p = node.parentNode, px = style.toPixelValue, pcs;
		if(has("mozilla")){
			// Mozilla:
			// If offsetParent has a computed overflow != visible, the offsetLeft is decreased
			// by the parent's border.
			// We don't want to compute the parent's style, so instead we examine node's
			// computed left/top which is more stable.
			var sl = parseFloat(s.left), st = parseFloat(s.top);
			if(!isNaN(sl) && !isNaN(st)){
				l = sl;
				t = st;
			}else{
				// If child's computed left/top are not parseable as a number (e.g. "auto"), we
				// have no choice but to examine the parent's computed style.
				if(p && p.style){
					pcs = style.getComputedStyle(p);
					if(pcs.overflow != "visible"){
						l += pcs.borderLeftStyle != none ? px(node, pcs.borderLeftWidth) : 0;
						t += pcs.borderTopStyle != none ? px(node, pcs.borderTopWidth) : 0;
					}
				}
			}
		}else if(has("opera") || (has("ie") == 8 && !has("quirks"))){
			// On Opera and IE 8, offsetLeft/Top includes the parent's border
			if(p){
				pcs = style.getComputedStyle(p);
				l -= pcs.borderLeftStyle != none ? px(node, pcs.borderLeftWidth) : 0;
				t -= pcs.borderTopStyle != none ? px(node, pcs.borderTopWidth) : 0;
			}
		}
		return {l: l, t: t, w: node.offsetWidth + me.w, h: node.offsetHeight + me.h};
	};

	geom.getContentBox = function getContentBox(node, computedStyle){
		// summary:
		//		Returns an object that encodes the width, height, left and top
		//		positions of the node's content box, irrespective of the
		//		current box model.
		// node: DOMNode
		// computedStyle: Object?
		//		This parameter accepts computed styles object.
		//		If this parameter is omitted, the functions will call
		//		dojo/dom-style.getComputedStyle to get one. It is a better way, calling
		//		dojo/dom-style.getComputedStyle once, and then pass the reference to this
		//		computedStyle parameter. Wherever possible, reuse the returned
		//		object of dojo/dom-style.getComputedStyle().

		// clientWidth/Height are important since the automatically account for scrollbars
		// fallback to offsetWidth/Height for special cases (see #3378)
		node = dom.byId(node);
		var s = computedStyle || style.getComputedStyle(node), w = node.clientWidth, h,
			pe = geom.getPadExtents(node, s), be = geom.getBorderExtents(node, s);
		if(!w){
			w = node.offsetWidth;
			h = node.offsetHeight;
		}else{
			h = node.clientHeight;
			be.w = be.h = 0;
		}
		// On Opera, offsetLeft includes the parent's border
		if(has("opera")){
			pe.l += be.l;
			pe.t += be.t;
		}
		return {l: pe.l, t: pe.t, w: w - pe.w - be.w, h: h - pe.h - be.h};
	};

	// Box setters depend on box context because interpretation of width/height styles
	// vary wrt box context.
	//
	// The value of boxModel is used to determine box context.
	// boxModel can be set directly to change behavior.
	//
	// Beware of display: inline objects that have padding styles
	// because the user agent ignores padding (it's a bogus setup anyway)
	//
	// Be careful with IMGs because they are inline or block depending on
	// browser and browser mode.
	//
	// Elements other than DIV may have special quirks, like built-in
	// margins or padding, or values not detectable via computedStyle.
	// In particular, margins on TABLE do not seems to appear
	// at all in computedStyle on Mozilla.

	function setBox(/*DomNode*/ node, /*Number?*/ l, /*Number?*/ t, /*Number?*/ w, /*Number?*/ h, /*String?*/ u){
		// summary:
		//		sets width/height/left/top in the current (native) box-model
		//		dimensions. Uses the unit passed in u.
		// node:
		//		DOM Node reference. Id string not supported for performance
		//		reasons.
		// l:
		//		left offset from parent.
		// t:
		//		top offset from parent.
		// w:
		//		width in current box model.
		// h:
		//		width in current box model.
		// u:
		//		unit measure to use for other measures. Defaults to "px".
		u = u || "px";
		var s = node.style;
		if(!isNaN(l)){
			s.left = l + u;
		}
		if(!isNaN(t)){
			s.top = t + u;
		}
		if(w >= 0){
			s.width = w + u;
		}
		if(h >= 0){
			s.height = h + u;
		}
	}

	function isButtonTag(/*DomNode*/ node){
		// summary:
		//		True if the node is BUTTON or INPUT.type="button".
		return node.tagName.toLowerCase() == "button" ||
			node.tagName.toLowerCase() == "input" && (node.getAttribute("type") || "").toLowerCase() == "button"; // boolean
	}

	function usesBorderBox(/*DomNode*/ node){
		// summary:
		//		True if the node uses border-box layout.

		// We could test the computed style of node to see if a particular box
		// has been specified, but there are details and we choose not to bother.

		// TABLE and BUTTON (and INPUT type=button) are always border-box by default.
		// If you have assigned a different box to either one via CSS then
		// box functions will break.

		return geom.boxModel == "border-box" || node.tagName.toLowerCase() == "table" || isButtonTag(node); // boolean
	}

	geom.setContentSize = function setContentSize(/*DomNode*/ node, /*Object*/ box, /*Object*/ computedStyle){
		// summary:
		//		Sets the size of the node's contents, irrespective of margins,
		//		padding, or borders.
		// node: DOMNode
		// box: Object
		//		hash with optional "w", and "h" properties for "width", and "height"
		//		respectively. All specified properties should have numeric values in whole pixels.
		// computedStyle: Object?
		//		This parameter accepts computed styles object.
		//		If this parameter is omitted, the functions will call
		//		dojo/dom-style.getComputedStyle to get one. It is a better way, calling
		//		dojo/dom-style.getComputedStyle once, and then pass the reference to this
		//		computedStyle parameter. Wherever possible, reuse the returned
		//		object of dojo/dom-style.getComputedStyle().

		node = dom.byId(node);
		var w = box.w, h = box.h;
		if(usesBorderBox(node)){
			var pb = geom.getPadBorderExtents(node, computedStyle);
			if(w >= 0){
				w += pb.w;
			}
			if(h >= 0){
				h += pb.h;
			}
		}
		setBox(node, NaN, NaN, w, h);
	};

	var nilExtents = {l: 0, t: 0, w: 0, h: 0};

	geom.setMarginBox = function setMarginBox(/*DomNode*/ node, /*Object*/ box, /*Object*/ computedStyle){
		// summary:
		//		sets the size of the node's margin box and placement
		//		(left/top), irrespective of box model. Think of it as a
		//		passthrough to setBox that handles box-model vagaries for
		//		you.
		// node: DOMNode
		// box: Object
		//		hash with optional "l", "t", "w", and "h" properties for "left", "right", "width", and "height"
		//		respectively. All specified properties should have numeric values in whole pixels.
		// computedStyle: Object?
		//		This parameter accepts computed styles object.
		//		If this parameter is omitted, the functions will call
		//		dojo/dom-style.getComputedStyle to get one. It is a better way, calling
		//		dojo/dom-style.getComputedStyle once, and then pass the reference to this
		//		computedStyle parameter. Wherever possible, reuse the returned
		//		object of dojo/dom-style.getComputedStyle().

		node = dom.byId(node);
		var s = computedStyle || style.getComputedStyle(node), w = box.w, h = box.h,
		// Some elements have special padding, margin, and box-model settings.
		// To use box functions you may need to set padding, margin explicitly.
		// Controlling box-model is harder, in a pinch you might set dojo/dom-geometry.boxModel.
			pb = usesBorderBox(node) ? nilExtents : geom.getPadBorderExtents(node, s),
			mb = geom.getMarginExtents(node, s);
		if(has("webkit")){
			// on Safari (3.1.2), button nodes with no explicit size have a default margin
			// setting an explicit size eliminates the margin.
			// We have to swizzle the width to get correct margin reading.
			if(isButtonTag(node)){
				var ns = node.style;
				if(w >= 0 && !ns.width){
					ns.width = "4px";
				}
				if(h >= 0 && !ns.height){
					ns.height = "4px";
				}
			}
		}
		if(w >= 0){
			w = Math.max(w - pb.w - mb.w, 0);
		}
		if(h >= 0){
			h = Math.max(h - pb.h - mb.h, 0);
		}
		setBox(node, box.l, box.t, w, h);
	};

	// =============================
	// Positioning
	// =============================

	geom.isBodyLtr = function isBodyLtr(/*Document?*/ doc){
		// summary:
		//		Returns true if the current language is left-to-right, and false otherwise.
		// doc: Document?
		//		Optional document to query.   If unspecified, use win.doc.
		// returns: Boolean

		doc = doc || win.doc;
		return (win.body(doc).dir || doc.documentElement.dir || "ltr").toLowerCase() == "ltr"; // Boolean
	};

	geom.docScroll = function docScroll(/*Document?*/ doc){
		// summary:
		//		Returns an object with {node, x, y} with corresponding offsets.
		// doc: Document?
		//		Optional document to query.   If unspecified, use win.doc.
		// returns: Object

		doc = doc || win.doc;
		var node = win.doc.parentWindow || win.doc.defaultView;   // use UI window, not dojo.global window.   TODO: use dojo/window::get() except for circular dependency problem
		return "pageXOffset" in node ? {x: node.pageXOffset, y: node.pageYOffset } :
			(node = has("quirks") ? win.body(doc) : doc.documentElement) &&
				{x: geom.fixIeBiDiScrollLeft(node.scrollLeft || 0, doc), y: node.scrollTop || 0 };
	};

	if(has("ie")){
		geom.getIeDocumentElementOffset = function getIeDocumentElementOffset(/*Document?*/ doc){
			// summary:
			//		returns the offset in x and y from the document body to the
			//		visual edge of the page for IE
			// doc: Document?
			//		Optional document to query.   If unspecified, use win.doc.
			// description:
			//		The following values in IE contain an offset:
			//	|		event.clientX
			//	|		event.clientY
			//	|		node.getBoundingClientRect().left
			//	|		node.getBoundingClientRect().top
			//		But other position related values do not contain this offset,
			//		such as node.offsetLeft, node.offsetTop, node.style.left and
			//		node.style.top. The offset is always (2, 2) in LTR direction.
			//		When the body is in RTL direction, the offset counts the width
			//		of left scroll bar's width.  This function computes the actual
			//		offset.

			//NOTE: assumes we're being called in an IE browser

			doc = doc || win.doc;
			var de = doc.documentElement; // only deal with HTML element here, position() handles body/quirks

			if(has("ie") < 8){
				var r = de.getBoundingClientRect(), // works well for IE6+
					l = r.left, t = r.top;
				if(has("ie") < 7){
					l += de.clientLeft;	// scrollbar size in strict/RTL, or,
					t += de.clientTop;	// HTML border size in strict
				}
				return {
					x: l < 0 ? 0 : l, // FRAME element border size can lead to inaccurate negative values
					y: t < 0 ? 0 : t
				};
			}else{
				return {
					x: 0,
					y: 0
				};
			}
		};
	}

	geom.fixIeBiDiScrollLeft = function fixIeBiDiScrollLeft(/*Integer*/ scrollLeft, /*Document?*/ doc){
		// summary:
		//		In RTL direction, scrollLeft should be a negative value, but IE
		//		returns a positive one. All codes using documentElement.scrollLeft
		//		must call this function to fix this error, otherwise the position
		//		will offset to right when there is a horizontal scrollbar.
		// scrollLeft: Number
		// doc: Document?
		//		Optional document to query.   If unspecified, use win.doc.
		// returns: Number

		// In RTL direction, scrollLeft should be a negative value, but IE
		// returns a positive one. All codes using documentElement.scrollLeft
		// must call this function to fix this error, otherwise the position
		// will offset to right when there is a horizontal scrollbar.

		doc = doc || win.doc;
		var ie = has("ie");
		if(ie && !geom.isBodyLtr(doc)){
			var qk = has("quirks"),
				de = qk ? win.body(doc) : doc.documentElement,
				pwin = win.global;	// TODO: use winUtils.get(doc) after resolving circular dependency b/w dom-geometry.js and dojo/window.js
			if(ie == 6 && !qk && pwin.frameElement && de.scrollHeight > de.clientHeight){
				scrollLeft += de.clientLeft; // workaround ie6+strict+rtl+iframe+vertical-scrollbar bug where clientWidth is too small by clientLeft pixels
			}
			return (ie < 8 || qk) ? (scrollLeft + de.clientWidth - de.scrollWidth) : -scrollLeft; // Integer
		}
		return scrollLeft; // Integer
	};

	geom.position = function(/*DomNode*/ node, /*Boolean?*/ includeScroll){
		// summary:
		//		Gets the position and size of the passed element relative to
		//		the viewport (if includeScroll==false), or relative to the
		//		document root (if includeScroll==true).
		//
		// description:
		//		Returns an object of the form:
		//		`{ x: 100, y: 300, w: 20, h: 15 }`.
		//		If includeScroll==true, the x and y values will include any
		//		document offsets that may affect the position relative to the
		//		viewport.
		//		Uses the border-box model (inclusive of border and padding but
		//		not margin).  Does not act as a setter.
		// node: DOMNode|String
		// includeScroll: Boolean?
		// returns: Object

		node = dom.byId(node);
		var	db = win.body(node.ownerDocument),
			ret = node.getBoundingClientRect();
		ret = {x: ret.left, y: ret.top, w: ret.right - ret.left, h: ret.bottom - ret.top};

		if(has("ie") < 9){
			// On IE<9 there's a 2px offset that we need to adjust for, see dojo.getIeDocumentElementOffset()
			var offset = geom.getIeDocumentElementOffset(node.ownerDocument);

			// fixes the position in IE, quirks mode
			ret.x -= offset.x + (has("quirks") ? db.clientLeft + db.offsetLeft : 0);
			ret.y -= offset.y + (has("quirks") ? db.clientTop + db.offsetTop : 0);
		}

		// account for document scrolling
		// if offsetParent is used, ret value already includes scroll position
		// so we may have to actually remove that value if !includeScroll
		if(includeScroll){
			var scroll = geom.docScroll(node.ownerDocument);
			ret.x += scroll.x;
			ret.y += scroll.y;
		}

		return ret; // Object
	};

	// random "private" functions wildly used throughout the toolkit

	geom.getMarginSize = function getMarginSize(/*DomNode*/ node, /*Object*/ computedStyle){
		// summary:
		//		returns an object that encodes the width and height of
		//		the node's margin box
		// node: DOMNode|String
		// computedStyle: Object?
		//		This parameter accepts computed styles object.
		//		If this parameter is omitted, the functions will call
		//		dojo/dom-style.getComputedStyle to get one. It is a better way, calling
		//		dojo/dom-style.getComputedStyle once, and then pass the reference to this
		//		computedStyle parameter. Wherever possible, reuse the returned
		//		object of dojo/dom-style.getComputedStyle().

		node = dom.byId(node);
		var me = geom.getMarginExtents(node, computedStyle || style.getComputedStyle(node));
		var size = node.getBoundingClientRect();
		return {
			w: (size.right - size.left) + me.w,
			h: (size.bottom - size.top) + me.h
		};
	};

	geom.normalizeEvent = function(event){
		// summary:
		//		Normalizes the geometry of a DOM event, normalizing the pageX, pageY,
		//		offsetX, offsetY, layerX, and layerX properties
		// event: Object
		if(!("layerX" in event)){
			event.layerX = event.offsetX;
			event.layerY = event.offsetY;
		}
		if(!has("dom-addeventlistener")){
			// old IE version
			// FIXME: scroll position query is duped from dojo/_base/html to
			// avoid dependency on that entire module. Now that HTML is in
			// Base, we should convert back to something similar there.
			var se = event.target;
			var doc = (se && se.ownerDocument) || document;
			// DO NOT replace the following to use dojo/_base/window.body(), in IE, document.documentElement should be used
			// here rather than document.body
			var docBody = has("quirks") ? doc.body : doc.documentElement;
			var offset = geom.getIeDocumentElementOffset(doc);
			event.pageX = event.clientX + geom.fixIeBiDiScrollLeft(docBody.scrollLeft || 0, doc) - offset.x;
			event.pageY = event.clientY + (docBody.scrollTop || 0) - offset.y;
		}
	};

	// TODO: evaluate separate getters/setters for position and sizes?

	return geom;
});

},
'dojo/mouse':function(){
define(["./_base/kernel", "./on", "./has", "./dom", "./_base/window"], function(dojo, on, has, dom, win){

	// module:
	//		dojo/mouse

    has.add("dom-quirks", win.doc && win.doc.compatMode == "BackCompat");
	has.add("events-mouseenter", win.doc && "onmouseenter" in win.doc.createElement("div"));
	has.add("events-mousewheel", win.doc && 'onmousewheel' in win.doc);

	var mouseButtons;
	if((has("dom-quirks") && has("ie")) || !has("dom-addeventlistener")){
		mouseButtons = {
			LEFT:   1,
			MIDDLE: 4,
			RIGHT:  2,
			// helper functions
			isButton: function(e, button){ return e.button & button; },
			isLeft:   function(e){ return e.button & 1; },
			isMiddle: function(e){ return e.button & 4; },
			isRight:  function(e){ return e.button & 2; }
		};
	}else{
		mouseButtons = {
			LEFT:   0,
			MIDDLE: 1,
			RIGHT:  2,
			// helper functions
			isButton: function(e, button){ return e.button == button; },
			isLeft:   function(e){ return e.button == 0; },
			isMiddle: function(e){ return e.button == 1; },
			isRight:  function(e){ return e.button == 2; }
		};
	}
	dojo.mouseButtons = mouseButtons;

/*=====
	dojo.mouseButtons = {
		// LEFT: Number
		//		Numeric value of the left mouse button for the platform.
		LEFT:   0,
		// MIDDLE: Number
		//		Numeric value of the middle mouse button for the platform.
		MIDDLE: 1,
		// RIGHT: Number
		//		Numeric value of the right mouse button for the platform.
		RIGHT:  2,

		isButton: function(e, button){
			// summary:
			//		Checks an event object for a pressed button
			// e: Event
			//		Event object to examine
			// button: Number
			//		The button value (example: dojo.mouseButton.LEFT)
			return e.button == button; // Boolean
		},
		isLeft: function(e){
			// summary:
			//		Checks an event object for the pressed left button
			// e: Event
			//		Event object to examine
			return e.button == 0; // Boolean
		},
		isMiddle: function(e){
			// summary:
			//		Checks an event object for the pressed middle button
			// e: Event
			//		Event object to examine
			return e.button == 1; // Boolean
		},
		isRight: function(e){
			// summary:
			//		Checks an event object for the pressed right button
			// e: Event
			//		Event object to examine
			return e.button == 2; // Boolean
		}
	};
=====*/

	function eventHandler(type, selectHandler){
		// emulation of mouseenter/leave with mouseover/out using descendant checking
		var handler = function(node, listener){
			return on(node, type, function(evt){
				if(selectHandler){
					return selectHandler(evt, listener);
				}
				if(!dom.isDescendant(evt.relatedTarget, node)){
					return listener.call(this, evt);
				}
			});
		};
		handler.bubble = function(select){
			return eventHandler(type, function(evt, listener){
				// using a selector, use the select function to determine if the mouse moved inside the selector and was previously outside the selector
				var target = select(evt.target);
				var relatedTarget = evt.relatedTarget;
				if(target && (target != (relatedTarget && relatedTarget.nodeType == 1 && select(relatedTarget)))){
					return listener.call(target, evt);
				} 
			});
		};
		return handler;
	}
	var wheel;
	if(has("events-mousewheel")){
		wheel = 'mousewheel';
	}else{ //firefox
		wheel = function(node, listener){
			return on(node, 'DOMMouseScroll', function(evt){
				evt.wheelDelta = -evt.detail;
				listener.call(this, evt);
			});
		};
	}
	return {
		// summary:
		//		This module provide mouse event handling utility functions and exports
		//		mouseenter and mouseleave event emulation.
		// example:
		//		To use these events, you register a mouseenter like this:
		//		|	define(["dojo/on", "dojo/mouse"], function(on, mouse){
		//		|		on(targetNode, mouse.enter, function(event){
		//		|			dojo.addClass(targetNode, "highlighted");
		//		|		});
		//		|		on(targetNode, mouse.leave, function(event){
		//		|			dojo.removeClass(targetNode, "highlighted");
		//		|		});

		_eventHandler: eventHandler,		// for dojo/touch

		// enter: Synthetic Event
		//		This is an extension event for the mouseenter that IE provides, emulating the
		//		behavior on other browsers.
		enter: eventHandler("mouseover"),

		// leave: Synthetic Event
		//		This is an extension event for the mouseleave that IE provides, emulating the
		//		behavior on other browsers.
		leave: eventHandler("mouseout"),

		// wheel: Normalized Mouse Wheel Event
		//		This is an extension event for the mousewheel that non-Mozilla browsers provide,
		//		emulating the behavior on Mozilla based browsers.
		wheel: wheel,

		isLeft: mouseButtons.isLeft,
		/*=====
		isLeft: function(){
			// summary:
			//		Test an event object (from a mousedown event) to see if the left button was pressed.
		},
		=====*/

		isMiddle: mouseButtons.isMiddle,
		/*=====
		 isMiddle: function(){
			 // summary:
			 //		Test an event object (from a mousedown event) to see if the middle button was pressed.
		 },
		 =====*/

		isRight: mouseButtons.isRight
		/*=====
		 , isRight: function(){
			 // summary:
			 //		Test an event object (from a mousedown event) to see if the right button was pressed.
		 }
		 =====*/
	};
});

},
'dojo/keys':function(){
define(["./_base/kernel", "./sniff"], function(dojo, has){

	// module:
	//		dojo/keys

	return dojo.keys = {
		// summary:
		//		Definitions for common key values.  Client code should test keyCode against these named constants,
		//		as the actual codes can vary by browser.

		BACKSPACE: 8,
		TAB: 9,
		CLEAR: 12,
		ENTER: 13,
		SHIFT: 16,
		CTRL: 17,
		ALT: 18,
		META: has("webkit") ? 91 : 224,		// the apple key on macs
		PAUSE: 19,
		CAPS_LOCK: 20,
		ESCAPE: 27,
		SPACE: 32,
		PAGE_UP: 33,
		PAGE_DOWN: 34,
		END: 35,
		HOME: 36,
		LEFT_ARROW: 37,
		UP_ARROW: 38,
		RIGHT_ARROW: 39,
		DOWN_ARROW: 40,
		INSERT: 45,
		DELETE: 46,
		HELP: 47,
		LEFT_WINDOW: 91,
		RIGHT_WINDOW: 92,
		SELECT: 93,
		NUMPAD_0: 96,
		NUMPAD_1: 97,
		NUMPAD_2: 98,
		NUMPAD_3: 99,
		NUMPAD_4: 100,
		NUMPAD_5: 101,
		NUMPAD_6: 102,
		NUMPAD_7: 103,
		NUMPAD_8: 104,
		NUMPAD_9: 105,
		NUMPAD_MULTIPLY: 106,
		NUMPAD_PLUS: 107,
		NUMPAD_ENTER: 108,
		NUMPAD_MINUS: 109,
		NUMPAD_PERIOD: 110,
		NUMPAD_DIVIDE: 111,
		F1: 112,
		F2: 113,
		F3: 114,
		F4: 115,
		F5: 116,
		F6: 117,
		F7: 118,
		F8: 119,
		F9: 120,
		F10: 121,
		F11: 122,
		F12: 123,
		F13: 124,
		F14: 125,
		F15: 126,
		NUM_LOCK: 144,
		SCROLL_LOCK: 145,
		UP_DPAD: 175,
		DOWN_DPAD: 176,
		LEFT_DPAD: 177,
		RIGHT_DPAD: 178,
		// virtual key mapping
		copyKey: has("mac") && !has("air") ? (has("safari") ? 91 : 224 ) : 17
	};
});

},
'dojo/_base/declare':function(){
define(["./kernel", "../has", "./lang"], function(dojo, has, lang){
	// module:
	//		dojo/_base/declare

	var mix = lang.mixin, op = Object.prototype, opts = op.toString,
		xtor = new Function, counter = 0, cname = "constructor";

	function err(msg, cls){ throw new Error("declare" + (cls ? " " + cls : "") + ": " + msg); }

	// C3 Method Resolution Order (see http://www.python.org/download/releases/2.3/mro/)
	function c3mro(bases, className){
		var result = [], roots = [{cls: 0, refs: []}], nameMap = {}, clsCount = 1,
			l = bases.length, i = 0, j, lin, base, top, proto, rec, name, refs;

		// build a list of bases naming them if needed
		for(; i < l; ++i){
			base = bases[i];
			if(!base){
				err("mixin #" + i + " is unknown. Did you use dojo.require to pull it in?", className);
			}else if(opts.call(base) != "[object Function]"){
				err("mixin #" + i + " is not a callable constructor.", className);
			}
			lin = base._meta ? base._meta.bases : [base];
			top = 0;
			// add bases to the name map
			for(j = lin.length - 1; j >= 0; --j){
				proto = lin[j].prototype;
				if(!proto.hasOwnProperty("declaredClass")){
					proto.declaredClass = "uniqName_" + (counter++);
				}
				name = proto.declaredClass;
				if(!nameMap.hasOwnProperty(name)){
					nameMap[name] = {count: 0, refs: [], cls: lin[j]};
					++clsCount;
				}
				rec = nameMap[name];
				if(top && top !== rec){
					rec.refs.push(top);
					++top.count;
				}
				top = rec;
			}
			++top.count;
			roots[0].refs.push(top);
		}

		// remove classes without external references recursively
		while(roots.length){
			top = roots.pop();
			result.push(top.cls);
			--clsCount;
			// optimization: follow a single-linked chain
			while(refs = top.refs, refs.length == 1){
				top = refs[0];
				if(!top || --top.count){
					// branch or end of chain => do not end to roots
					top = 0;
					break;
				}
				result.push(top.cls);
				--clsCount;
			}
			if(top){
				// branch
				for(i = 0, l = refs.length; i < l; ++i){
					top = refs[i];
					if(!--top.count){
						roots.push(top);
					}
				}
			}
		}
		if(clsCount){
			err("can't build consistent linearization", className);
		}

		// calculate the superclass offset
		base = bases[0];
		result[0] = base ?
			base._meta && base === result[result.length - base._meta.bases.length] ?
				base._meta.bases.length : 1 : 0;

		return result;
	}

	function inherited(args, a, f){
		var name, chains, bases, caller, meta, base, proto, opf, pos,
			cache = this._inherited = this._inherited || {};

		// crack arguments
		if(typeof args == "string"){
			name = args;
			args = a;
			a = f;
		}
		f = 0;

		caller = args.callee;
		name = name || caller.nom;
		if(!name){
			err("can't deduce a name to call inherited()", this.declaredClass);
		}

		meta = this.constructor._meta;
		bases = meta.bases;

		pos = cache.p;
		if(name != cname){
			// method
			if(cache.c !== caller){
				// cache bust
				pos = 0;
				base = bases[0];
				meta = base._meta;
				if(meta.hidden[name] !== caller){
					// error detection
					chains = meta.chains;
					if(chains && typeof chains[name] == "string"){
						err("calling chained method with inherited: " + name, this.declaredClass);
					}
					// find caller
					do{
						meta = base._meta;
						proto = base.prototype;
						if(meta && (proto[name] === caller && proto.hasOwnProperty(name) || meta.hidden[name] === caller)){
							break;
						}
					}while(base = bases[++pos]); // intentional assignment
					pos = base ? pos : -1;
				}
			}
			// find next
			base = bases[++pos];
			if(base){
				proto = base.prototype;
				if(base._meta && proto.hasOwnProperty(name)){
					f = proto[name];
				}else{
					opf = op[name];
					do{
						proto = base.prototype;
						f = proto[name];
						if(f && (base._meta ? proto.hasOwnProperty(name) : f !== opf)){
							break;
						}
					}while(base = bases[++pos]); // intentional assignment
				}
			}
			f = base && f || op[name];
		}else{
			// constructor
			if(cache.c !== caller){
				// cache bust
				pos = 0;
				meta = bases[0]._meta;
				if(meta && meta.ctor !== caller){
					// error detection
					chains = meta.chains;
					if(!chains || chains.constructor !== "manual"){
						err("calling chained constructor with inherited", this.declaredClass);
					}
					// find caller
					while(base = bases[++pos]){ // intentional assignment
						meta = base._meta;
						if(meta && meta.ctor === caller){
							break;
						}
					}
					pos = base ? pos : -1;
				}
			}
			// find next
			while(base = bases[++pos]){	// intentional assignment
				meta = base._meta;
				f = meta ? meta.ctor : base;
				if(f){
					break;
				}
			}
			f = base && f;
		}

		// cache the found super method
		cache.c = f;
		cache.p = pos;

		// now we have the result
		if(f){
			return a === true ? f : f.apply(this, a || args);
		}
		// intentionally no return if a super method was not found
	}

	function getInherited(name, args){
		if(typeof name == "string"){
			return this.__inherited(name, args, true);
		}
		return this.__inherited(name, true);
	}

	function inherited__debug(args, a1, a2){
		var f = this.getInherited(args, a1);
		if(f){ return f.apply(this, a2 || a1 || args); }
		// intentionally no return if a super method was not found
	}

	var inheritedImpl = dojo.config.isDebug ? inherited__debug : inherited;

	// emulation of "instanceof"
	function isInstanceOf(cls){
		var bases = this.constructor._meta.bases;
		for(var i = 0, l = bases.length; i < l; ++i){
			if(bases[i] === cls){
				return true;
			}
		}
		return this instanceof cls;
	}

	function mixOwn(target, source){
		// add props adding metadata for incoming functions skipping a constructor
		for(var name in source){
			if(name != cname && source.hasOwnProperty(name)){
				target[name] = source[name];
			}
		}
		if(has("bug-for-in-skips-shadowed")){
			for(var extraNames= lang._extraNames, i= extraNames.length; i;){
				name = extraNames[--i];
				if(name != cname && source.hasOwnProperty(name)){
					  target[name] = source[name];
				}
			}
		}
	}

	// implementation of safe mixin function
	function safeMixin(target, source){
		// summary:
		//		Mix in properties skipping a constructor and decorating functions
		//		like it is done by declare().
		// target: Object
		//		Target object to accept new properties.
		// source: Object
		//		Source object for new properties.
		// description:
		//		This function is used to mix in properties like lang.mixin does,
		//		but it skips a constructor property and decorates functions like
		//		declare() does.
		//
		//		It is meant to be used with classes and objects produced with
		//		declare. Functions mixed in with dojo.safeMixin can use
		//		this.inherited() like normal methods.
		//
		//		This function is used to implement extend() method of a constructor
		//		produced with declare().
		//
		// example:
		//	|	var A = declare(null, {
		//	|		m1: function(){
		//	|			console.log("A.m1");
		//	|		},
		//	|		m2: function(){
		//	|			console.log("A.m2");
		//	|		}
		//	|	});
		//	|	var B = declare(A, {
		//	|		m1: function(){
		//	|			this.inherited(arguments);
		//	|			console.log("B.m1");
		//	|		}
		//	|	});
		//	|	B.extend({
		//	|		m2: function(){
		//	|			this.inherited(arguments);
		//	|			console.log("B.m2");
		//	|		}
		//	|	});
		//	|	var x = new B();
		//	|	dojo.safeMixin(x, {
		//	|		m1: function(){
		//	|			this.inherited(arguments);
		//	|			console.log("X.m1");
		//	|		},
		//	|		m2: function(){
		//	|			this.inherited(arguments);
		//	|			console.log("X.m2");
		//	|		}
		//	|	});
		//	|	x.m2();
		//	|	// prints:
		//	|	// A.m1
		//	|	// B.m1
		//	|	// X.m1

		var name, t;
		// add props adding metadata for incoming functions skipping a constructor
		for(name in source){
			t = source[name];
			if((t !== op[name] || !(name in op)) && name != cname){
				if(opts.call(t) == "[object Function]"){
					// non-trivial function method => attach its name
					t.nom = name;
				}
				target[name] = t;
			}
		}
		if(has("bug-for-in-skips-shadowed")){
			for(var extraNames= lang._extraNames, i= extraNames.length; i;){
				name = extraNames[--i];
				t = source[name];
				if((t !== op[name] || !(name in op)) && name != cname){
					if(opts.call(t) == "[object Function]"){
						// non-trivial function method => attach its name
						  t.nom = name;
					}
					target[name] = t;
				}
			}
		}
		return target;
	}

	function extend(source){
		declare.safeMixin(this.prototype, source);
		return this;
	}

    function createSubclass(mixins, props){
        // crack parameters
        if(!(mixins instanceof Array || typeof mixins == 'function')){
            props = mixins;
            mixins = undefined;
        }

        props = props || {};
        mixins = mixins || [];

        return declare([this].concat(mixins), props);
    }

	// chained constructor compatible with the legacy declare()
	function chainedConstructor(bases, ctorSpecial){
		return function(){
			var a = arguments, args = a, a0 = a[0], f, i, m,
				l = bases.length, preArgs;

			if(!(this instanceof a.callee)){
				// not called via new, so force it
				return applyNew(a);
			}

			//this._inherited = {};
			// perform the shaman's rituals of the original declare()
			// 1) call two types of the preamble
			if(ctorSpecial && (a0 && a0.preamble || this.preamble)){
				// full blown ritual
				preArgs = new Array(bases.length);
				// prepare parameters
				preArgs[0] = a;
				for(i = 0;;){
					// process the preamble of the 1st argument
					a0 = a[0];
					if(a0){
						f = a0.preamble;
						if(f){
							a = f.apply(this, a) || a;
						}
					}
					// process the preamble of this class
					f = bases[i].prototype;
					f = f.hasOwnProperty("preamble") && f.preamble;
					if(f){
						a = f.apply(this, a) || a;
					}
					// one peculiarity of the preamble:
					// it is called if it is not needed,
					// e.g., there is no constructor to call
					// let's watch for the last constructor
					// (see ticket #9795)
					if(++i == l){
						break;
					}
					preArgs[i] = a;
				}
			}
			// 2) call all non-trivial constructors using prepared arguments
			for(i = l - 1; i >= 0; --i){
				f = bases[i];
				m = f._meta;
				f = m ? m.ctor : f;
				if(f){
					f.apply(this, preArgs ? preArgs[i] : a);
				}
			}
			// 3) continue the original ritual: call the postscript
			f = this.postscript;
			if(f){
				f.apply(this, args);
			}
		};
	}


	// chained constructor compatible with the legacy declare()
	function singleConstructor(ctor, ctorSpecial){
		return function(){
			var a = arguments, t = a, a0 = a[0], f;

			if(!(this instanceof a.callee)){
				// not called via new, so force it
				return applyNew(a);
			}

			//this._inherited = {};
			// perform the shaman's rituals of the original declare()
			// 1) call two types of the preamble
			if(ctorSpecial){
				// full blown ritual
				if(a0){
					// process the preamble of the 1st argument
					f = a0.preamble;
					if(f){
						t = f.apply(this, t) || t;
					}
				}
				f = this.preamble;
				if(f){
					// process the preamble of this class
					f.apply(this, t);
					// one peculiarity of the preamble:
					// it is called even if it is not needed,
					// e.g., there is no constructor to call
					// let's watch for the last constructor
					// (see ticket #9795)
				}
			}
			// 2) call a constructor
			if(ctor){
				ctor.apply(this, a);
			}
			// 3) continue the original ritual: call the postscript
			f = this.postscript;
			if(f){
				f.apply(this, a);
			}
		};
	}

	// plain vanilla constructor (can use inherited() to call its base constructor)
	function simpleConstructor(bases){
		return function(){
			var a = arguments, i = 0, f, m;

			if(!(this instanceof a.callee)){
				// not called via new, so force it
				return applyNew(a);
			}

			//this._inherited = {};
			// perform the shaman's rituals of the original declare()
			// 1) do not call the preamble
			// 2) call the top constructor (it can use this.inherited())
			for(; f = bases[i]; ++i){ // intentional assignment
				m = f._meta;
				f = m ? m.ctor : f;
				if(f){
					f.apply(this, a);
					break;
				}
			}
			// 3) call the postscript
			f = this.postscript;
			if(f){
				f.apply(this, a);
			}
		};
	}

	function chain(name, bases, reversed){
		return function(){
			var b, m, f, i = 0, step = 1;
			if(reversed){
				i = bases.length - 1;
				step = -1;
			}
			for(; b = bases[i]; i += step){ // intentional assignment
				m = b._meta;
				f = (m ? m.hidden : b.prototype)[name];
				if(f){
					f.apply(this, arguments);
				}
			}
		};
	}

	// forceNew(ctor)
	// return a new object that inherits from ctor.prototype but
	// without actually running ctor on the object.
	function forceNew(ctor){
		// create object with correct prototype using a do-nothing
		// constructor
		xtor.prototype = ctor.prototype;
		var t = new xtor;
		xtor.prototype = null;	// clean up
		return t;
	}

	// applyNew(args)
	// just like 'new ctor()' except that the constructor and its arguments come
	// from args, which must be an array or an arguments object
	function applyNew(args){
		// create an object with ctor's prototype but without
		// calling ctor on it.
		var ctor = args.callee, t = forceNew(ctor);
		// execute the real constructor on the new object
		ctor.apply(t, args);
		return t;
	}

	function declare(className, superclass, props){
		// summary:
		//		Create a feature-rich constructor from compact notation.
		// className: String?
		//		The optional name of the constructor (loosely, a "class")
		//		stored in the "declaredClass" property in the created prototype.
		//		It will be used as a global name for a created constructor.
		// superclass: Function|Function[]
		//		May be null, a Function, or an Array of Functions. This argument
		//		specifies a list of bases (the left-most one is the most deepest
		//		base).
		// props: Object
		//		An object whose properties are copied to the created prototype.
		//		Add an instance-initialization function by making it a property
		//		named "constructor".
		// returns: dojo/_base/declare.__DeclareCreatedObject
		//		New constructor function.
		// description:
		//		Create a constructor using a compact notation for inheritance and
		//		prototype extension.
		//
		//		Mixin ancestors provide a type of multiple inheritance.
		//		Prototypes of mixin ancestors are copied to the new class:
		//		changes to mixin prototypes will not affect classes to which
		//		they have been mixed in.
		//
		//		Ancestors can be compound classes created by this version of
		//		declare(). In complex cases all base classes are going to be
		//		linearized according to C3 MRO algorithm
		//		(see http://www.python.org/download/releases/2.3/mro/ for more
		//		details).
		//
		//		"className" is cached in "declaredClass" property of the new class,
		//		if it was supplied. The immediate super class will be cached in
		//		"superclass" property of the new class.
		//
		//		Methods in "props" will be copied and modified: "nom" property
		//		(the declared name of the method) will be added to all copied
		//		functions to help identify them for the internal machinery. Be
		//		very careful, while reusing methods: if you use the same
		//		function under different names, it can produce errors in some
		//		cases.
		//
		//		It is possible to use constructors created "manually" (without
		//		declare()) as bases. They will be called as usual during the
		//		creation of an instance, their methods will be chained, and even
		//		called by "this.inherited()".
		//
		//		Special property "-chains-" governs how to chain methods. It is
		//		a dictionary, which uses method names as keys, and hint strings
		//		as values. If a hint string is "after", this method will be
		//		called after methods of its base classes. If a hint string is
		//		"before", this method will be called before methods of its base
		//		classes.
		//
		//		If "constructor" is not mentioned in "-chains-" property, it will
		//		be chained using the legacy mode: using "after" chaining,
		//		calling preamble() method before each constructor, if available,
		//		and calling postscript() after all constructors were executed.
		//		If the hint is "after", it is chained as a regular method, but
		//		postscript() will be called after the chain of constructors.
		//		"constructor" cannot be chained "before", but it allows
		//		a special hint string: "manual", which means that constructors
		//		are not going to be chained in any way, and programmer will call
		//		them manually using this.inherited(). In the latter case
		//		postscript() will be called after the construction.
		//
		//		All chaining hints are "inherited" from base classes and
		//		potentially can be overridden. Be very careful when overriding
		//		hints! Make sure that all chained methods can work in a proposed
		//		manner of chaining.
		//
		//		Once a method was chained, it is impossible to unchain it. The
		//		only exception is "constructor". You don't need to define a
		//		method in order to supply a chaining hint.
		//
		//		If a method is chained, it cannot use this.inherited() because
		//		all other methods in the hierarchy will be called automatically.
		//
		//		Usually constructors and initializers of any kind are chained
		//		using "after" and destructors of any kind are chained as
		//		"before". Note that chaining assumes that chained methods do not
		//		return any value: any returned value will be discarded.
		//
		// example:
		//	|	declare("my.classes.bar", my.classes.foo, {
		//	|		// properties to be added to the class prototype
		//	|		someValue: 2,
		//	|		// initialization function
		//	|		constructor: function(){
		//	|			this.myComplicatedObject = new ReallyComplicatedObject();
		//	|		},
		//	|		// other functions
		//	|		someMethod: function(){
		//	|			doStuff();
		//	|		}
		//	|	});
		//
		// example:
		//	|	var MyBase = declare(null, {
		//	|		// constructor, properties, and methods go here
		//	|		// ...
		//	|	});
		//	|	var MyClass1 = declare(MyBase, {
		//	|		// constructor, properties, and methods go here
		//	|		// ...
		//	|	});
		//	|	var MyClass2 = declare(MyBase, {
		//	|		// constructor, properties, and methods go here
		//	|		// ...
		//	|	});
		//	|	var MyDiamond = declare([MyClass1, MyClass2], {
		//	|		// constructor, properties, and methods go here
		//	|		// ...
		//	|	});
		//
		// example:
		//	|	var F = function(){ console.log("raw constructor"); };
		//	|	F.prototype.method = function(){
		//	|		console.log("raw method");
		//	|	};
		//	|	var A = declare(F, {
		//	|		constructor: function(){
		//	|			console.log("A.constructor");
		//	|		},
		//	|		method: function(){
		//	|			console.log("before calling F.method...");
		//	|			this.inherited(arguments);
		//	|			console.log("...back in A");
		//	|		}
		//	|	});
		//	|	new A().method();
		//	|	// will print:
		//	|	// raw constructor
		//	|	// A.constructor
		//	|	// before calling F.method...
		//	|	// raw method
		//	|	// ...back in A
		//
		// example:
		//	|	var A = declare(null, {
		//	|		"-chains-": {
		//	|			destroy: "before"
		//	|		}
		//	|	});
		//	|	var B = declare(A, {
		//	|		constructor: function(){
		//	|			console.log("B.constructor");
		//	|		},
		//	|		destroy: function(){
		//	|			console.log("B.destroy");
		//	|		}
		//	|	});
		//	|	var C = declare(B, {
		//	|		constructor: function(){
		//	|			console.log("C.constructor");
		//	|		},
		//	|		destroy: function(){
		//	|			console.log("C.destroy");
		//	|		}
		//	|	});
		//	|	new C().destroy();
		//	|	// prints:
		//	|	// B.constructor
		//	|	// C.constructor
		//	|	// C.destroy
		//	|	// B.destroy
		//
		// example:
		//	|	var A = declare(null, {
		//	|		"-chains-": {
		//	|			constructor: "manual"
		//	|		}
		//	|	});
		//	|	var B = declare(A, {
		//	|		constructor: function(){
		//	|			// ...
		//	|			// call the base constructor with new parameters
		//	|			this.inherited(arguments, [1, 2, 3]);
		//	|			// ...
		//	|		}
		//	|	});
		//
		// example:
		//	|	var A = declare(null, {
		//	|		"-chains-": {
		//	|			m1: "before"
		//	|		},
		//	|		m1: function(){
		//	|			console.log("A.m1");
		//	|		},
		//	|		m2: function(){
		//	|			console.log("A.m2");
		//	|		}
		//	|	});
		//	|	var B = declare(A, {
		//	|		"-chains-": {
		//	|			m2: "after"
		//	|		},
		//	|		m1: function(){
		//	|			console.log("B.m1");
		//	|		},
		//	|		m2: function(){
		//	|			console.log("B.m2");
		//	|		}
		//	|	});
		//	|	var x = new B();
		//	|	x.m1();
		//	|	// prints:
		//	|	// B.m1
		//	|	// A.m1
		//	|	x.m2();
		//	|	// prints:
		//	|	// A.m2
		//	|	// B.m2

		// crack parameters
		if(typeof className != "string"){
			props = superclass;
			superclass = className;
			className = "";
		}
		props = props || {};

		var proto, i, t, ctor, name, bases, chains, mixins = 1, parents = superclass;

		// build a prototype
		if(opts.call(superclass) == "[object Array]"){
			// C3 MRO
			bases = c3mro(superclass, className);
			t = bases[0];
			mixins = bases.length - t;
			superclass = bases[mixins];
		}else{
			bases = [0];
			if(superclass){
				if(opts.call(superclass) == "[object Function]"){
					t = superclass._meta;
					bases = bases.concat(t ? t.bases : superclass);
				}else{
					err("base class is not a callable constructor.", className);
				}
			}else if(superclass !== null){
				err("unknown base class. Did you use dojo.require to pull it in?", className);
			}
		}
		if(superclass){
			for(i = mixins - 1;; --i){
				proto = forceNew(superclass);
				if(!i){
					// stop if nothing to add (the last base)
					break;
				}
				// mix in properties
				t = bases[i];
				(t._meta ? mixOwn : mix)(proto, t.prototype);
				// chain in new constructor
				ctor = new Function;
				ctor.superclass = superclass;
				ctor.prototype = proto;
				superclass = proto.constructor = ctor;
			}
		}else{
			proto = {};
		}
		// add all properties
		declare.safeMixin(proto, props);
		// add constructor
		t = props.constructor;
		if(t !== op.constructor){
			t.nom = cname;
			proto.constructor = t;
		}

		// collect chains and flags
		for(i = mixins - 1; i; --i){ // intentional assignment
			t = bases[i]._meta;
			if(t && t.chains){
				chains = mix(chains || {}, t.chains);
			}
		}
		if(proto["-chains-"]){
			chains = mix(chains || {}, proto["-chains-"]);
		}

		// build ctor
		t = !chains || !chains.hasOwnProperty(cname);
		bases[0] = ctor = (chains && chains.constructor === "manual") ? simpleConstructor(bases) :
			(bases.length == 1 ? singleConstructor(props.constructor, t) : chainedConstructor(bases, t));

		// add meta information to the constructor
		ctor._meta  = {bases: bases, hidden: props, chains: chains,
			parents: parents, ctor: props.constructor};
		ctor.superclass = superclass && superclass.prototype;
		ctor.extend = extend;
		ctor.createSubclass = createSubclass;
		ctor.prototype = proto;
		proto.constructor = ctor;

		// add "standard" methods to the prototype
		proto.getInherited = getInherited;
		proto.isInstanceOf = isInstanceOf;
		proto.inherited    = inheritedImpl;
		proto.__inherited  = inherited;

		// add name if specified
		if(className){
			proto.declaredClass = className;
			lang.setObject(className, ctor);
		}

		// build chains and add them to the prototype
		if(chains){
			for(name in chains){
				if(proto[name] && typeof chains[name] == "string" && name != cname){
					t = proto[name] = chain(name, bases, chains[name] === "after");
					t.nom = name;
				}
			}
		}
		// chained methods do not return values
		// no need to chain "invisible" functions

		return ctor;	// Function
	}

	/*=====
	declare.__DeclareCreatedObject = {
		// summary:
		//		dojo/_base/declare() returns a constructor `C`.   `new C()` returns an Object with the following
		//		methods, in addition to the methods and properties specified via the arguments passed to declare().

		inherited: function(name, args, newArgs){
			// summary:
			//		Calls a super method.
			// name: String?
			//		The optional method name. Should be the same as the caller's
			//		name. Usually "name" is specified in complex dynamic cases, when
			//		the calling method was dynamically added, undecorated by
			//		declare(), and it cannot be determined.
			// args: Arguments
			//		The caller supply this argument, which should be the original
			//		"arguments".
			// newArgs: Object?
			//		If "true", the found function will be returned without
			//		executing it.
			//		If Array, it will be used to call a super method. Otherwise
			//		"args" will be used.
			// returns:
			//		Whatever is returned by a super method, or a super method itself,
			//		if "true" was specified as newArgs.
			// description:
			//		This method is used inside method of classes produced with
			//		declare() to call a super method (next in the chain). It is
			//		used for manually controlled chaining. Consider using the regular
			//		chaining, because it is faster. Use "this.inherited()" only in
			//		complex cases.
			//
			//		This method cannot me called from automatically chained
			//		constructors including the case of a special (legacy)
			//		constructor chaining. It cannot be called from chained methods.
			//
			//		If "this.inherited()" cannot find the next-in-chain method, it
			//		does nothing and returns "undefined". The last method in chain
			//		can be a default method implemented in Object, which will be
			//		called last.
			//
			//		If "name" is specified, it is assumed that the method that
			//		received "args" is the parent method for this call. It is looked
			//		up in the chain list and if it is found the next-in-chain method
			//		is called. If it is not found, the first-in-chain method is
			//		called.
			//
			//		If "name" is not specified, it will be derived from the calling
			//		method (using a methoid property "nom").
			//
			// example:
			//	|	var B = declare(A, {
			//	|		method1: function(a, b, c){
			//	|			this.inherited(arguments);
			//	|		},
			//	|		method2: function(a, b){
			//	|			return this.inherited(arguments, [a + b]);
			//	|		}
			//	|	});
			//	|	// next method is not in the chain list because it is added
			//	|	// manually after the class was created.
			//	|	B.prototype.method3 = function(){
			//	|		console.log("This is a dynamically-added method.");
			//	|		this.inherited("method3", arguments);
			//	|	};
			// example:
			//	|	var B = declare(A, {
			//	|		method: function(a, b){
			//	|			var super = this.inherited(arguments, true);
			//	|			// ...
			//	|			if(!super){
			//	|				console.log("there is no super method");
			//	|				return 0;
			//	|			}
			//	|			return super.apply(this, arguments);
			//	|		}
			//	|	});
			return	{};	// Object
		},

		getInherited: function(name, args){
			// summary:
			//		Returns a super method.
			// name: String?
			//		The optional method name. Should be the same as the caller's
			//		name. Usually "name" is specified in complex dynamic cases, when
			//		the calling method was dynamically added, undecorated by
			//		declare(), and it cannot be determined.
			// args: Arguments
			//		The caller supply this argument, which should be the original
			//		"arguments".
			// returns:
			//		Returns a super method (Function) or "undefined".
			// description:
			//		This method is a convenience method for "this.inherited()".
			//		It uses the same algorithm but instead of executing a super
			//		method, it returns it, or "undefined" if not found.
			//
			// example:
			//	|	var B = declare(A, {
			//	|		method: function(a, b){
			//	|			var super = this.getInherited(arguments);
			//	|			// ...
			//	|			if(!super){
			//	|				console.log("there is no super method");
			//	|				return 0;
			//	|			}
			//	|			return super.apply(this, arguments);
			//	|		}
			//	|	});
			return	{};	// Object
		},

		isInstanceOf: function(cls){
			// summary:
			//		Checks the inheritance chain to see if it is inherited from this
			//		class.
			// cls: Function
			//		Class constructor.
			// returns:
			//		"true", if this object is inherited from this class, "false"
			//		otherwise.
			// description:
			//		This method is used with instances of classes produced with
			//		declare() to determine of they support a certain interface or
			//		not. It models "instanceof" operator.
			//
			// example:
			//	|	var A = declare(null, {
			//	|		// constructor, properties, and methods go here
			//	|		// ...
			//	|	});
			//	|	var B = declare(null, {
			//	|		// constructor, properties, and methods go here
			//	|		// ...
			//	|	});
			//	|	var C = declare([A, B], {
			//	|		// constructor, properties, and methods go here
			//	|		// ...
			//	|	});
			//	|	var D = declare(A, {
			//	|		// constructor, properties, and methods go here
			//	|		// ...
			//	|	});
			//	|
			//	|	var a = new A(), b = new B(), c = new C(), d = new D();
			//	|
			//	|	console.log(a.isInstanceOf(A)); // true
			//	|	console.log(b.isInstanceOf(A)); // false
			//	|	console.log(c.isInstanceOf(A)); // true
			//	|	console.log(d.isInstanceOf(A)); // true
			//	|
			//	|	console.log(a.isInstanceOf(B)); // false
			//	|	console.log(b.isInstanceOf(B)); // true
			//	|	console.log(c.isInstanceOf(B)); // true
			//	|	console.log(d.isInstanceOf(B)); // false
			//	|
			//	|	console.log(a.isInstanceOf(C)); // false
			//	|	console.log(b.isInstanceOf(C)); // false
			//	|	console.log(c.isInstanceOf(C)); // true
			//	|	console.log(d.isInstanceOf(C)); // false
			//	|
			//	|	console.log(a.isInstanceOf(D)); // false
			//	|	console.log(b.isInstanceOf(D)); // false
			//	|	console.log(c.isInstanceOf(D)); // false
			//	|	console.log(d.isInstanceOf(D)); // true
			return	{};	// Object
		},

		extend: function(source){
			// summary:
			//		Adds all properties and methods of source to constructor's
			//		prototype, making them available to all instances created with
			//		constructor. This method is specific to constructors created with
			//		declare().
			// source: Object
			//		Source object which properties are going to be copied to the
			//		constructor's prototype.
			// description:
			//		Adds source properties to the constructor's prototype. It can
			//		override existing properties.
			//
			//		This method is similar to dojo.extend function, but it is specific
			//		to constructors produced by declare(). It is implemented
			//		using dojo.safeMixin, and it skips a constructor property,
			//		and properly decorates copied functions.
			//
			// example:
			//	|	var A = declare(null, {
			//	|		m1: function(){},
			//	|		s1: "Popokatepetl"
			//	|	});
			//	|	A.extend({
			//	|		m1: function(){},
			//	|		m2: function(){},
			//	|		f1: true,
			//	|		d1: 42
			//	|	});
		},

		createSubclass: function(mixins, props){
			// summary:
			//		Create a subclass of the declared class from a list of base classes.
			// mixins: Function[]
			//		Specifies a list of bases (the left-most one is the most deepest
			//		base).
			// props: Object?
			//		An optional object whose properties are copied to the created prototype.
			// returns: dojo/_base/declare.__DeclareCreatedObject
			//		New constructor function.
			// description:
			//		Create a constructor using a compact notation for inheritance and
			//		prototype extension.
			//
			//		Mixin ancestors provide a type of multiple inheritance.
			//		Prototypes of mixin ancestors are copied to the new class:
			//		changes to mixin prototypes will not affect classes to which
			//		they have been mixed in.
			//
			// example:
			//	|	var A = declare(null, {
			//	|		m1: function(){},
			//	|		s1: "bar"
			//	|	});
			//	|	var B = declare(null, {
			//	|		m2: function(){},
			//	|		s2: "foo"
			//	|	});
			//	|	var C = declare(null, {
			//	|	});
			//	|	var D1 = A.createSubclass([B, C], {
			//	|		m1: function(){},
			//	|		d1: 42
			//	|	});
			//	|	var d1 = new D1();
			//	|
			//	|	// this is equivalent to:
			//	|	var D2 = declare([A, B, C], {
			//	|		m1: function(){},
			//	|		d1: 42
			//	|	});
			//	|	var d2 = new D2();
		}
	};
	=====*/

	// For back-compat, remove for 2.0
	dojo.safeMixin = declare.safeMixin = safeMixin;
	dojo.declare = declare;

	return declare;
});

},
'dojox/gfx/matrix':function(){
define(["./_base","dojo/_base/lang"], 
  function(g, lang){
	var m = g.matrix = {};

	// candidates for dojox.math:
	var _degToRadCache = {};
	m._degToRad = function(degree){
		return _degToRadCache[degree] || (_degToRadCache[degree] = (Math.PI * degree / 180));
	};
	m._radToDeg = function(radian){ return radian / Math.PI * 180; };

	m.Matrix2D = function(arg){
		// summary:
		//		a 2D matrix object
		// description:
		//		Normalizes a 2D matrix-like object. If arrays is passed,
		//		all objects of the array are normalized and multiplied sequentially.
		// arg: Object
		//		a 2D matrix-like object, a number, or an array of such objects
		if(arg){
			if(typeof arg == "number"){
				this.xx = this.yy = arg;
			}else if(arg instanceof Array){
				if(arg.length > 0){
					var matrix = m.normalize(arg[0]);
					// combine matrices
					for(var i = 1; i < arg.length; ++i){
						var l = matrix, r = m.normalize(arg[i]);
						matrix = new m.Matrix2D();
						matrix.xx = l.xx * r.xx + l.xy * r.yx;
						matrix.xy = l.xx * r.xy + l.xy * r.yy;
						matrix.yx = l.yx * r.xx + l.yy * r.yx;
						matrix.yy = l.yx * r.xy + l.yy * r.yy;
						matrix.dx = l.xx * r.dx + l.xy * r.dy + l.dx;
						matrix.dy = l.yx * r.dx + l.yy * r.dy + l.dy;
					}
					lang.mixin(this, matrix);
				}
			}else{
				lang.mixin(this, arg);
			}
		}
	};

	// the default (identity) matrix, which is used to fill in missing values
	lang.extend(m.Matrix2D, {xx: 1, xy: 0, yx: 0, yy: 1, dx: 0, dy: 0});

	lang.mixin(m, {
		// summary:
		//		class constants, and methods of dojox/gfx/matrix

		// matrix constants

		// identity: dojox/gfx/matrix.Matrix2D
		//		an identity matrix constant: identity * (x, y) == (x, y)
		identity: new m.Matrix2D(),

		// flipX: dojox/gfx/matrix.Matrix2D
		//		a matrix, which reflects points at x = 0 line: flipX * (x, y) == (-x, y)
		flipX:    new m.Matrix2D({xx: -1}),

		// flipY: dojox/gfx/matrix.Matrix2D
		//		a matrix, which reflects points at y = 0 line: flipY * (x, y) == (x, -y)
		flipY:    new m.Matrix2D({yy: -1}),

		// flipXY: dojox/gfx/matrix.Matrix2D
		//		a matrix, which reflects points at the origin of coordinates: flipXY * (x, y) == (-x, -y)
		flipXY:   new m.Matrix2D({xx: -1, yy: -1}),

		// matrix creators

		translate: function(a, b){
			// summary:
			//		forms a translation matrix
			// description:
			//		The resulting matrix is used to translate (move) points by specified offsets.
			// a: Number|dojox/gfx.Point
			//		an x coordinate value, or a point-like object, which specifies offsets for both dimensions
			// b: Number?
			//		a y coordinate value
			// returns: dojox/gfx/matrix.Matrix2D
			if(arguments.length > 1){
				return new m.Matrix2D({dx: a, dy: b}); // dojox/gfx/matrix.Matrix2D
			}
			// branch
			return new m.Matrix2D({dx: a.x, dy: a.y}); // dojox/gfx/matrix.Matrix2D
		},
		scale: function(a, b){
			// summary:
			//		forms a scaling matrix
			// description:
			//		The resulting matrix is used to scale (magnify) points by specified offsets.
			// a: Number|dojox/gfx.Point
			//		a scaling factor used for the x coordinate, or
			//		a uniform scaling factor used for the both coordinates, or
			//		a point-like object, which specifies scale factors for both dimensions
			// b: Number?
			//		a scaling factor used for the y coordinate
			// returns: dojox/gfx/matrix.Matrix2D
			if(arguments.length > 1){
				return new m.Matrix2D({xx: a, yy: b}); // dojox/gfx/matrix.Matrix2D
			}
			if(typeof a == "number"){
				return new m.Matrix2D({xx: a, yy: a}); // dojox/gfx/matrix.Matrix2D
			}
			return new m.Matrix2D({xx: a.x, yy: a.y}); // dojox/gfx/matrix.Matrix2D
		},
		rotate: function(angle){
			// summary:
			//		forms a rotating matrix
			// description:
			//		The resulting matrix is used to rotate points
			//		around the origin of coordinates (0, 0) by specified angle.
			// angle: Number
			//		an angle of rotation in radians (>0 for CW)
			// returns: dojox/gfx/matrix.Matrix2D
			var c = Math.cos(angle);
			var s = Math.sin(angle);
			return new m.Matrix2D({xx: c, xy: -s, yx: s, yy: c}); // dojox/gfx/matrix.Matrix2D
		},
		rotateg: function(degree){
			// summary:
			//		forms a rotating matrix
			// description:
			//		The resulting matrix is used to rotate points
			//		around the origin of coordinates (0, 0) by specified degree.
			//		See dojox/gfx/matrix.rotate() for comparison.
			// degree: Number
			//		an angle of rotation in degrees (>0 for CW)
			// returns: dojox/gfx/matrix.Matrix2D
			return m.rotate(m._degToRad(degree)); // dojox/gfx/matrix.Matrix2D
		},
		skewX: function(angle) {
			// summary:
			//		forms an x skewing matrix
			// description:
			//		The resulting matrix is used to skew points in the x dimension
			//		around the origin of coordinates (0, 0) by specified angle.
			// angle: Number
			//		a skewing angle in radians
			// returns: dojox/gfx/matrix.Matrix2D
			return new m.Matrix2D({xy: Math.tan(angle)}); // dojox/gfx/matrix.Matrix2D
		},
		skewXg: function(degree){
			// summary:
			//		forms an x skewing matrix
			// description:
			//		The resulting matrix is used to skew points in the x dimension
			//		around the origin of coordinates (0, 0) by specified degree.
			//		See dojox/gfx/matrix.skewX() for comparison.
			// degree: Number
			//		a skewing angle in degrees
			// returns: dojox/gfx/matrix.Matrix2D
			return m.skewX(m._degToRad(degree)); // dojox/gfx/matrix.Matrix2D
		},
		skewY: function(angle){
			// summary:
			//		forms a y skewing matrix
			// description:
			//		The resulting matrix is used to skew points in the y dimension
			//		around the origin of coordinates (0, 0) by specified angle.
			// angle: Number
			//		a skewing angle in radians
			// returns: dojox/gfx/matrix.Matrix2D
			return new m.Matrix2D({yx: Math.tan(angle)}); // dojox/gfx/matrix.Matrix2D
		},
		skewYg: function(degree){
			// summary:
			//		forms a y skewing matrix
			// description:
			//		The resulting matrix is used to skew points in the y dimension
			//		around the origin of coordinates (0, 0) by specified degree.
			//		See dojox/gfx/matrix.skewY() for comparison.
			// degree: Number
			//		a skewing angle in degrees
			// returns: dojox/gfx/matrix.Matrix2D
			return m.skewY(m._degToRad(degree)); // dojox/gfx/matrix.Matrix2D
		},
		reflect: function(a, b){
			// summary:
			//		forms a reflection matrix
			// description:
			//		The resulting matrix is used to reflect points around a vector,
			//		which goes through the origin.
			// a: dojox/gfx.Point|Number
			//		a point-like object, which specifies a vector of reflection, or an X value
			// b: Number?
			//		a Y value
			// returns: dojox/gfx/matrix.Matrix2D
			if(arguments.length == 1){
				b = a.y;
				a = a.x;
			}
			// make a unit vector
			var a2 = a * a, b2 = b * b, n2 = a2 + b2, xy = 2 * a * b / n2;
			return new m.Matrix2D({xx: 2 * a2 / n2 - 1, xy: xy, yx: xy, yy: 2 * b2 / n2 - 1}); // dojox/gfx/matrix.Matrix2D
		},
		project: function(a, b){
			// summary:
			//		forms an orthogonal projection matrix
			// description:
			//		The resulting matrix is used to project points orthogonally on a vector,
			//		which goes through the origin.
			// a: dojox/gfx.Point|Number
			//		a point-like object, which specifies a vector of projection, or
			//		an x coordinate value
			// b: Number?
			//		a y coordinate value
			// returns: dojox/gfx/matrix.Matrix2D
			if(arguments.length == 1){
				b = a.y;
				a = a.x;
			}
			// make a unit vector
			var a2 = a * a, b2 = b * b, n2 = a2 + b2, xy = a * b / n2;
			return new m.Matrix2D({xx: a2 / n2, xy: xy, yx: xy, yy: b2 / n2}); // dojox/gfx/matrix.Matrix2D
		},

		// ensure matrix 2D conformance
		normalize: function(matrix){
			// summary:
			//		converts an object to a matrix, if necessary
			// description:
			//		Converts any 2D matrix-like object or an array of
			//		such objects to a valid dojox/gfx/matrix.Matrix2D object.
			// matrix: Object
			//		an object, which is converted to a matrix, if necessary
			// returns: dojox/gfx/matrix.Matrix2D
			return (matrix instanceof m.Matrix2D) ? matrix : new m.Matrix2D(matrix); // dojox/gfx/matrix.Matrix2D
		},

		// common operations

		isIdentity: function(matrix){
			// summary:
			//		returns whether the specified matrix is the identity.
			// matrix: dojox/gfx/matrix.Matrix2D
			//		a 2D matrix object to be tested
			// returns: Boolean
			return matrix.xx == 1 && matrix.xy == 0 && matrix.yx == 0 && matrix.yy == 1 && matrix.dx == 0 && matrix.dy == 0; // Boolean
		},
		clone: function(matrix){
			// summary:
			//		creates a copy of a 2D matrix
			// matrix: dojox/gfx/matrix.Matrix2D
			//		a 2D matrix-like object to be cloned
			// returns: dojox/gfx/matrix.Matrix2D
			var obj = new m.Matrix2D();
			for(var i in matrix){
				if(typeof(matrix[i]) == "number" && typeof(obj[i]) == "number" && obj[i] != matrix[i]) obj[i] = matrix[i];
			}
			return obj; // dojox/gfx/matrix.Matrix2D
		},
		invert: function(matrix){
			// summary:
			//		inverts a 2D matrix
			// matrix: dojox/gfx/matrix.Matrix2D
			//		a 2D matrix-like object to be inverted
			// returns: dojox/gfx/matrix.Matrix2D
			var M = m.normalize(matrix),
				D = M.xx * M.yy - M.xy * M.yx;
				M = new m.Matrix2D({
					xx: M.yy/D, xy: -M.xy/D,
					yx: -M.yx/D, yy: M.xx/D,
					dx: (M.xy * M.dy - M.yy * M.dx) / D,
					dy: (M.yx * M.dx - M.xx * M.dy) / D
				});
			return M; // dojox/gfx/matrix.Matrix2D
		},
		_multiplyPoint: function(matrix, x, y){
			// summary:
			//		applies a matrix to a point
			// matrix: dojox/gfx/matrix.Matrix2D
			//		a 2D matrix object to be applied
			// x: Number
			//		an x coordinate of a point
			// y: Number
			//		a y coordinate of a point
			// returns: dojox/gfx.Point
			return {x: matrix.xx * x + matrix.xy * y + matrix.dx, y: matrix.yx * x + matrix.yy * y + matrix.dy}; // dojox/gfx.Point
		},
		multiplyPoint: function(matrix, /* Number||Point */ a, /* Number? */ b){
			// summary:
			//		applies a matrix to a point
			// matrix: dojox/gfx/matrix.Matrix2D
			//		a 2D matrix object to be applied
			// a: Number|dojox/gfx.Point
			//		an x coordinate of a point, or a point
			// b: Number?
			//		a y coordinate of a point
			// returns: dojox/gfx.Point
			var M = m.normalize(matrix);
			if(typeof a == "number" && typeof b == "number"){
				return m._multiplyPoint(M, a, b); // dojox/gfx.Point
			}
			return m._multiplyPoint(M, a.x, a.y); // dojox/gfx.Point
		},
		multiplyRectangle: function(matrix, /*Rectangle*/ rect){
			// summary:
			//		Applies a matrix to a rectangle.
			// description:
			//		The method applies the transformation on all corners of the
			//		rectangle and returns the smallest rectangle enclosing the 4 transformed
			//		points.
			// matrix: dojox/gfx/matrix.Matrix2D
			//		a 2D matrix object to be applied.
			// rect: Rectangle
			//		the rectangle to transform.
			// returns: dojox/gfx.Rectangle
			var M = m.normalize(matrix);
			rect = rect || {x:0, y:0, width:0, height:0}; 
			if(m.isIdentity(M))
				return {x: rect.x, y: rect.y, width: rect.width, height: rect.height}; // dojo/gfx.Rectangle
			var p0 = m.multiplyPoint(M, rect.x, rect.y),
				p1 = m.multiplyPoint(M, rect.x, rect.y + rect.height),
				p2 = m.multiplyPoint(M, rect.x + rect.width, rect.y),
				p3 = m.multiplyPoint(M, rect.x + rect.width, rect.y + rect.height),
				minx = Math.min(p0.x, p1.x, p2.x, p3.x),
				miny = Math.min(p0.y, p1.y, p2.y, p3.y),
				maxx = Math.max(p0.x, p1.x, p2.x, p3.x),
				maxy = Math.max(p0.y, p1.y, p2.y, p3.y);
			return{ // dojo/gfx.Rectangle
				x: minx,
				y: miny,
				width: maxx - minx,
				height: maxy - miny
			};
		},
		multiply: function(matrix){
			// summary:
			//		combines matrices by multiplying them sequentially in the given order
			// matrix: dojox/gfx/matrix.Matrix2D
			//		a 2D matrix-like object,
			//		all subsequent arguments are matrix-like objects too
			var M = m.normalize(matrix);
			// combine matrices
			for(var i = 1; i < arguments.length; ++i){
				var l = M, r = m.normalize(arguments[i]);
				M = new m.Matrix2D();
				M.xx = l.xx * r.xx + l.xy * r.yx;
				M.xy = l.xx * r.xy + l.xy * r.yy;
				M.yx = l.yx * r.xx + l.yy * r.yx;
				M.yy = l.yx * r.xy + l.yy * r.yy;
				M.dx = l.xx * r.dx + l.xy * r.dy + l.dx;
				M.dy = l.yx * r.dx + l.yy * r.dy + l.dy;
			}
			return M; // dojox/gfx/matrix.Matrix2D
		},

		// high level operations

		_sandwich: function(matrix, x, y){
			// summary:
			//		applies a matrix at a central point
			// matrix: dojox/gfx/matrix.Matrix2D
			//		a 2D matrix-like object, which is applied at a central point
			// x: Number
			//		an x component of the central point
			// y: Number
			//		a y component of the central point
			return m.multiply(m.translate(x, y), matrix, m.translate(-x, -y)); // dojox/gfx/matrix.Matrix2D
		},
		scaleAt: function(a, b, c, d){
			// summary:
			//		scales a picture using a specified point as a center of scaling
			// description:
			//		Compare with dojox/gfx/matrix.scale().
			// a: Number
			//		a scaling factor used for the x coordinate, or a uniform scaling factor used for both coordinates
			// b: Number?
			//		a scaling factor used for the y coordinate
			// c: Number|Point
			//		an x component of a central point, or a central point
			// d: Number
			//		a y component of a central point
			// returns: dojox/gfx/matrix.Matrix2D
			switch(arguments.length){
				case 4:
					// a and b are scale factor components, c and d are components of a point
					return m._sandwich(m.scale(a, b), c, d); // dojox/gfx/matrix.Matrix2D
				case 3:
					if(typeof c == "number"){
						return m._sandwich(m.scale(a), b, c); // dojox/gfx/matrix.Matrix2D
					}
					return m._sandwich(m.scale(a, b), c.x, c.y); // dojox/gfx/matrix.Matrix2D
			}
			return m._sandwich(m.scale(a), b.x, b.y); // dojox/gfx/matrix.Matrix2D
		},
		rotateAt: function(angle, a, b){
			// summary:
			//		rotates a picture using a specified point as a center of rotation
			// description:
			//		Compare with dojox/gfx/matrix.rotate().
			// angle: Number
			//		an angle of rotation in radians (>0 for CW)
			// a: Number|dojox/gfx.Point
			//		an x component of a central point, or a central point
			// b: Number?
			//		a y component of a central point
			// returns: dojox/gfx/matrix.Matrix2D
			if(arguments.length > 2){
				return m._sandwich(m.rotate(angle), a, b); // dojox/gfx/matrix.Matrix2D
			}
			return m._sandwich(m.rotate(angle), a.x, a.y); // dojox/gfx/matrix.Matrix2D
		},
		rotategAt: function(degree, a, b){
			// summary:
			//		rotates a picture using a specified point as a center of rotation
			// description:
			//		Compare with dojox/gfx/matrix.rotateg().
			// degree: Number
			//		an angle of rotation in degrees (>0 for CW)
			// a: Number|dojox/gfx.Point
			//		an x component of a central point, or a central point
			// b: Number?
			//		a y component of a central point
			// returns: dojox/gfx/matrix.Matrix2D
			if(arguments.length > 2){
				return m._sandwich(m.rotateg(degree), a, b); // dojox/gfx/matrix.Matrix2D
			}
			return m._sandwich(m.rotateg(degree), a.x, a.y); // dojox/gfx/matrix.Matrix2D
		},
		skewXAt: function(angle, a, b){
			// summary:
			//		skews a picture along the x axis using a specified point as a center of skewing
			// description:
			//		Compare with dojox/gfx/matrix.skewX().
			// angle: Number
			//		a skewing angle in radians
			// a: Number|dojox/gfx.Point
			//		an x component of a central point, or a central point
			// b: Number?
			//		a y component of a central point
			// returns: dojox/gfx/matrix.Matrix2D
			if(arguments.length > 2){
				return m._sandwich(m.skewX(angle), a, b); // dojox/gfx/matrix.Matrix2D
			}
			return m._sandwich(m.skewX(angle), a.x, a.y); // dojox/gfx/matrix.Matrix2D
		},
		skewXgAt: function(degree, a, b){
			// summary:
			//		skews a picture along the x axis using a specified point as a center of skewing
			// description:
			//		Compare with dojox/gfx/matrix.skewXg().
			// degree: Number
			//		a skewing angle in degrees
			// a: Number|dojox/gfx.Point
			//		an x component of a central point, or a central point
			// b: Number?
			//		a y component of a central point
			// returns: dojox/gfx/matrix.Matrix2D
			if(arguments.length > 2){
				return m._sandwich(m.skewXg(degree), a, b); // dojox/gfx/matrix.Matrix2D
			}
			return m._sandwich(m.skewXg(degree), a.x, a.y); // dojox/gfx/matrix.Matrix2D
		},
		skewYAt: function(angle, a, b){
			// summary:
			//		skews a picture along the y axis using a specified point as a center of skewing
			// description:
			//		Compare with dojox/gfx/matrix.skewY().
			// angle: Number
			//		a skewing angle in radians
			// a: Number|dojox/gfx.Point
			//		an x component of a central point, or a central point
			// b: Number?
			//		a y component of a central point
			// returns: dojox/gfx/matrix.Matrix2D
			if(arguments.length > 2){
				return m._sandwich(m.skewY(angle), a, b); // dojox/gfx/matrix.Matrix2D
			}
			return m._sandwich(m.skewY(angle), a.x, a.y); // dojox/gfx/matrix.Matrix2D
		},
		skewYgAt: function(/* Number */ degree, /* Number||Point */ a, /* Number? */ b){
			// summary:
			//		skews a picture along the y axis using a specified point as a center of skewing
			// description:
			//		Compare with dojox/gfx/matrix.skewYg().
			// degree: Number
			//		a skewing angle in degrees
			// a: Number|dojox/gfx.Point
			//		an x component of a central point, or a central point
			// b: Number?
			//		a y component of a central point
			// returns: dojox/gfx/matrix.Matrix2D
			if(arguments.length > 2){
				return m._sandwich(m.skewYg(degree), a, b); // dojox/gfx/matrix.Matrix2D
			}
			return m._sandwich(m.skewYg(degree), a.x, a.y); // dojox/gfx/matrix.Matrix2D
		}

		//TODO: rect-to-rect mapping, scale-to-fit (isotropic and anisotropic versions)

	});
	// propagate Matrix2D up
	g.Matrix2D = m.Matrix2D;

	return m;
});



},
'dojox/gfx/shape':function(){
define(["./_base", "dojo/_base/lang", "dojo/_base/declare", "dojo/_base/kernel", "dojo/_base/sniff",
	"dojo/on", "dojo/_base/array", "dojo/dom-construct", "dojo/_base/Color", "./matrix" ],
	function(g, lang, declare, kernel, has, on, arr, domConstruct, Color, matrixLib){

	var shape = g.shape = {
		// summary:
		//		This module contains the core graphics Shape API.
		//		Different graphics renderer implementation modules (svg, canvas, vml, silverlight, etc.) extend this
		//		basic api to provide renderer-specific implementations for each shape.
	};

	shape.Shape = declare("dojox.gfx.shape.Shape", null, {
		// summary:
		//		a Shape object, which knows how to apply
		//		graphical attributes and transformations
	
		constructor: function(){
			// rawNode: Node
			//		underlying graphics-renderer-specific implementation object (if applicable)
			this.rawNode = null;

			// shape: Object
			//		an abstract shape object
			//		(see dojox/gfx.defaultPath,
			//		dojox/gfx.defaultPolyline,
			//		dojox/gfx.defaultRect,
			//		dojox/gfx.defaultEllipse,
			//		dojox/gfx.defaultCircle,
			//		dojox/gfx.defaultLine,
			//		or dojox/gfx.defaultImage)
			this.shape = null;
	
			// matrix: dojox/gfx/matrix.Matrix2D
			//		a transformation matrix
			this.matrix = null;
	
			// fillStyle: dojox/gfx.Fill
			//		a fill object
			//		(see dojox/gfx.defaultLinearGradient,
			//		dojox/gfx.defaultRadialGradient,
			//		dojox/gfx.defaultPattern,
			//		or dojo/Color)
			this.fillStyle = null;
	
			// strokeStyle: dojox/gfx.Stroke
			//		a stroke object
			//		(see dojox/gfx.defaultStroke)
			this.strokeStyle = null;
	
			// bbox: dojox/gfx.Rectangle
			//		a bounding box of this shape
			//		(see dojox/gfx.defaultRect)
			this.bbox = null;
	
			// virtual group structure
	
			// parent: Object
			//		a parent or null
			//		(see dojox/gfx/shape.Surface,
			//		or dojox/gfx.Group)
			this.parent = null;
	
			// parentMatrix: dojox/gfx/matrix.Matrix2D
			//		a transformation matrix inherited from the parent
			this.parentMatrix = null;

			if(has("gfxRegistry")){
				var uid = shape.register(this);
				this.getUID = function(){
					return uid;
				}
			}
		},
		
		destroy: function(){
			// summary:
			//		Releases all internal resources owned by this shape. Once this method has been called,
			//		the instance is considered destroyed and should not be used anymore.
			if(has("gfxRegistry")){
				shape.dispose(this);
			}
			if(this.rawNode && "__gfxObject__" in this.rawNode){
				this.rawNode.__gfxObject__ = null;
			}
			this.rawNode = null;
		},
	
		// trivial getters
	
		getNode: function(){
			// summary:
			//		Different graphics rendering subsystems implement shapes in different ways.  This
			//		method provides access to the underlying graphics subsystem object.  Clients calling this
			//		method and using the return value must be careful not to try sharing or using the underlying node
			//		in a general way across renderer implementation.
			//		Returns the underlying graphics Node, or null if no underlying graphics node is used by this shape.
			return this.rawNode; // Node
		},
		getShape: function(){
			// summary:
			//		returns the current Shape object or null
			//		(see dojox/gfx.defaultPath,
			//		dojox/gfx.defaultPolyline,
			//		dojox/gfx.defaultRect,
			//		dojox/gfx.defaultEllipse,
			//		dojox/gfx.defaultCircle,
			//		dojox/gfx.defaultLine,
			//		or dojox/gfx.defaultImage)
			return this.shape; // Object
		},
		getTransform: function(){
			// summary:
			//		Returns the current transformation matrix applied to this Shape or null
			return this.matrix;	// dojox/gfx/matrix.Matrix2D
		},
		getFill: function(){
			// summary:
			//		Returns the current fill object or null
			//		(see dojox/gfx.defaultLinearGradient,
			//		dojox/gfx.defaultRadialGradient,
			//		dojox/gfx.defaultPattern,
			//		or dojo/Color)
			return this.fillStyle;	// Object
		},
		getStroke: function(){
			// summary:
			//		Returns the current stroke object or null
			//		(see dojox/gfx.defaultStroke)
			return this.strokeStyle;	// Object
		},
		getParent: function(){
			// summary:
			//		Returns the parent Shape, Group or null if this Shape is unparented.
			//		(see dojox/gfx/shape.Surface,
			//		or dojox/gfx.Group)
			return this.parent;	// Object
		},
		getBoundingBox: function(){
			// summary:
			//		Returns the bounding box Rectangle for this shape or null if a BoundingBox cannot be
			//		calculated for the shape on the current renderer or for shapes with no geometric area (points).
			//		A bounding box is a rectangular geometric region
			//		defining the X and Y extent of the shape.
			//		(see dojox/gfx.defaultRect)
			//		Note that this method returns a direct reference to the attribute of this instance. Therefore you should
			//		not modify its value directly but clone it instead.
			return this.bbox;	// dojox/gfx.Rectangle
		},
		getTransformedBoundingBox: function(){
			// summary:
			//		returns an array of four points or null
			//		four points represent four corners of the untransformed bounding box
			var b = this.getBoundingBox();
			if(!b){
				return null;	// null
			}
			var m = this._getRealMatrix(),
				gm = matrixLib;
			return [	// Array
					gm.multiplyPoint(m, b.x, b.y),
					gm.multiplyPoint(m, b.x + b.width, b.y),
					gm.multiplyPoint(m, b.x + b.width, b.y + b.height),
					gm.multiplyPoint(m, b.x, b.y + b.height)
				];
		},
		getEventSource: function(){
			// summary:
			//		returns a Node, which is used as
			//		a source of events for this shape
			
			// COULD BE RE-IMPLEMENTED BY THE RENDERER!
			return this.rawNode;	// Node
		},
	
		// empty settings
		
		setClip: function(clip){
			// summary:
			//		sets the clipping area of this shape.
			// description:
			//		The clipping area defines the shape area that will be effectively visible. Everything that
			//		would be drawn outside of the clipping area will not be rendered.
			//		The possible clipping area types are rectangle, ellipse, polyline and path, but all are not
			//		supported by all the renderers. vml only supports rectangle clipping, while the gfx silverlight renderer does not
			//		support path clipping.
			//		The clip parameter defines the clipping area geometry, and should be an object with the following properties:
			//
			//		- {x:Number, y:Number, width:Number, height:Number} for rectangular clip
			//		- {cx:Number, cy:Number, rx:Number, ry:Number} for ellipse clip
			//		- {points:Array} for polyline clip
			//		- {d:String} for a path clip.
			//
			//		The clip geometry coordinates are expressed in the coordinate system used to draw the shape. In other
			//		words, the clipping area is defined in the shape parent coordinate system and the shape transform is automatically applied.
			// example:
			//		The following example shows how to clip a gfx image with all the possible clip geometry: a rectangle,
			//		an ellipse, a circle (using the ellipse geometry), a polyline and a path:
			//
			//	|	surface.createImage({src:img, width:200,height:200}).setClip({x:10,y:10,width:50,height:50});
			//	|	surface.createImage({src:img, x:100,y:50,width:200,height:200}).setClip({cx:200,cy:100,rx:20,ry:30});
			//	|	surface.createImage({src:img, x:0,y:350,width:200,height:200}).setClip({cx:100,cy:425,rx:60,ry:60});
			//	|	surface.createImage({src:img, x:300,y:0,width:200,height:200}).setClip({points:[350,0,450,50,380,130,300,110]});
			//	|	surface.createImage({src:img, x:300,y:350,width:200,height:200}).setClip({d:"M 350,350 C314,414 317,557 373,450.0000 z"});

			// clip: Object
			//		an object that defines the clipping geometry, or null to remove clip.
			
			// COULD BE RE-IMPLEMENTED BY THE RENDERER!
			this.clip = clip;
		},
		
		getClip: function(){
			return this.clip;
		},
	
		setShape: function(shape){
			// summary:
			//		sets a shape object
			//		(the default implementation simply ignores it)
			// shape: Object
			//		a shape object
			//		(see dojox/gfx.defaultPath,
			//		dojox/gfx.defaultPolyline,
			//		dojox/gfx.defaultRect,
			//		dojox/gfx.defaultEllipse,
			//		dojox/gfx.defaultCircle,
			//		dojox/gfx.defaultLine,
			//		or dojox/gfx.defaultImage)
			
			// COULD BE RE-IMPLEMENTED BY THE RENDERER!
			this.shape = g.makeParameters(this.shape, shape);
			this.bbox = null;
			return this;	// self
		},
		setFill: function(fill){
			// summary:
			//		sets a fill object
			//		(the default implementation simply ignores it)
			// fill: Object
			//		a fill object
			//		(see dojox/gfx.defaultLinearGradient,
			//		dojox/gfx.defaultRadialGradient,
			//		dojox/gfx.defaultPattern,
			//		or dojo/_base/Color)
			
			// COULD BE RE-IMPLEMENTED BY THE RENDERER!
			if(!fill){
				// don't fill
				this.fillStyle = null;
				return this;	// self
			}
			var f = null;
			if(typeof(fill) == "object" && "type" in fill){
				// gradient or pattern
				switch(fill.type){
					case "linear":
						f = g.makeParameters(g.defaultLinearGradient, fill);
						break;
					case "radial":
						f = g.makeParameters(g.defaultRadialGradient, fill);
						break;
					case "pattern":
						f = g.makeParameters(g.defaultPattern, fill);
						break;
				}
			}else{
				// color object
				f = g.normalizeColor(fill);
			}
			this.fillStyle = f;
			return this;	// self
		},
		setStroke: function(stroke){
			// summary:
			//		sets a stroke object
			//		(the default implementation simply ignores it)
			// stroke: Object
			//		a stroke object
			//		(see dojox/gfx.defaultStroke)
			
			// COULD BE RE-IMPLEMENTED BY THE RENDERER!
			if(!stroke){
				// don't stroke
				this.strokeStyle = null;
				return this;	// self
			}
			// normalize the stroke
			if(typeof stroke == "string" || lang.isArray(stroke) || stroke instanceof Color){
				stroke = {color: stroke};
			}
			var s = this.strokeStyle = g.makeParameters(g.defaultStroke, stroke);
			s.color = g.normalizeColor(s.color);
			return this;	// self
		},
		setTransform: function(matrix){
			// summary:
			//		sets a transformation matrix
			// matrix: dojox/gfx/matrix.Matrix2D
			//		a matrix or a matrix-like object
			//		(see an argument of dojox/gfx/matrix.Matrix2D
			//		constructor for a list of acceptable arguments)
			
			// COULD BE RE-IMPLEMENTED BY THE RENDERER!
			this.matrix = matrixLib.clone(matrix ? matrixLib.normalize(matrix) : matrixLib.identity);
			return this._applyTransform();	// self
		},
	
		_applyTransform: function(){
			// summary:
			//		physically sets a matrix
			
			// COULD BE RE-IMPLEMENTED BY THE RENDERER!
			return this;	// self
		},
	
		// z-index
	
		moveToFront: function(){
			// summary:
			//		moves a shape to front of its parent's list of shapes
			var p = this.getParent();
			if(p){
				p._moveChildToFront(this);
				this._moveToFront();	// execute renderer-specific action
			}
			return this;	// self
		},
		moveToBack: function(){
			// summary:
			//		moves a shape to back of its parent's list of shapes
			var p = this.getParent();
			if(p){
				p._moveChildToBack(this);
				this._moveToBack();	// execute renderer-specific action
			}
			return this;
		},
		_moveToFront: function(){
			// summary:
			//		renderer-specific hook, see dojox/gfx/shape.Shape.moveToFront()
			
			// COULD BE RE-IMPLEMENTED BY THE RENDERER!
		},
		_moveToBack: function(){
			// summary:
			//		renderer-specific hook, see dojox/gfx/shape.Shape.moveToFront()
			
			// COULD BE RE-IMPLEMENTED BY THE RENDERER!
		},
	
		// apply left & right transformation
	
		applyRightTransform: function(matrix){
			// summary:
			//		multiplies the existing matrix with an argument on right side
			//		(this.matrix * matrix)
			// matrix: dojox/gfx/matrix.Matrix2D
			//		a matrix or a matrix-like object
			//		(see an argument of dojox/gfx/matrix.Matrix2D
			//		constructor for a list of acceptable arguments)
			return matrix ? this.setTransform([this.matrix, matrix]) : this;	// self
		},
		applyLeftTransform: function(matrix){
			// summary:
			//		multiplies the existing matrix with an argument on left side
			//		(matrix * this.matrix)
			// matrix: dojox/gfx/matrix.Matrix2D
			//		a matrix or a matrix-like object
			//		(see an argument of dojox/gfx/matrix.Matrix2D
			//		constructor for a list of acceptable arguments)
			return matrix ? this.setTransform([matrix, this.matrix]) : this;	// self
		},
		applyTransform: function(matrix){
			// summary:
			//		a shortcut for dojox/gfx/shape.Shape.applyRightTransform
			// matrix: dojox/gfx/matrix.Matrix2D
			//		a matrix or a matrix-like object
			//		(see an argument of dojox/gfx/matrix.Matrix2D
			//		constructor for a list of acceptable arguments)
			return matrix ? this.setTransform([this.matrix, matrix]) : this;	// self
		},
	
		// virtual group methods
	
		removeShape: function(silently){
			// summary:
			//		removes the shape from its parent's list of shapes
			// silently: Boolean
			//		if true, do not redraw a picture yet
			if(this.parent){
				this.parent.remove(this, silently);
			}
			return this;	// self
		},
		_setParent: function(parent, matrix){
			// summary:
			//		sets a parent
			// parent: Object
			//		a parent or null
			//		(see dojox/gfx/shape.Surface,
			//		or dojox/gfx.Group)
			// matrix: dojox/gfx/matrix.Matrix2D
			//		a 2D matrix or a matrix-like object
			this.parent = parent;
			return this._updateParentMatrix(matrix);	// self
		},
		_updateParentMatrix: function(matrix){
			// summary:
			//		updates the parent matrix with new matrix
			// matrix: dojox/gfx/Matrix2D
			//		a 2D matrix or a matrix-like object
			this.parentMatrix = matrix ? matrixLib.clone(matrix) : null;
			return this._applyTransform();	// self
		},
		_getRealMatrix: function(){
			// summary:
			//		returns the cumulative ('real') transformation matrix
			//		by combining the shape's matrix with its parent's matrix
			var m = this.matrix;
			var p = this.parent;
			while(p){
				if(p.matrix){
					m = matrixLib.multiply(p.matrix, m);
				}
				p = p.parent;
			}
			return m;	// dojox/gfx/matrix.Matrix2D
		}
	});
	
	shape._eventsProcessing = {
		on: function(type, listener){
			//	summary:
			//		Connects an event to this shape.

			return on(this.getEventSource(), type, shape.fixCallback(this, g.fixTarget, listener));
		},

		connect: function(name, object, method){
			// summary:
			//		connects a handler to an event on this shape
			
			// COULD BE RE-IMPLEMENTED BY THE RENDERER!
			// redirect to fixCallback to normalize events and add the gfxTarget to the event. The latter
			// is done by dojox/gfx.fixTarget which is defined by each renderer
			if(name.substring(0, 2) == "on"){
				name = name.substring(2);
			}
			return this.on(name, method ? lang.hitch(object, method) : object);
		},

		disconnect: function(token){
			// summary:
			//		connects a handler by token from an event on this shape
			
			// COULD BE RE-IMPLEMENTED BY THE RENDERER!
	
			return token.remove();
		}
	};
	
	shape.fixCallback = function(gfxElement, fixFunction, scope, method){
		// summary:
		//		Wraps the callback to allow for tests and event normalization
		//		before it gets invoked. This is where 'fixTarget' is invoked.
		// tags:
		//      private
		// gfxElement: Object
		//		The GFX object that triggers the action (ex.:
		//		dojox/gfx.Surface and dojox/gfx/shape.Shape). A new event property
		//		'gfxTarget' is added to the event to reference this object.
		//		for easy manipulation of GFX objects by the event handlers.
		// fixFunction: Function
		//		The function that implements the logic to set the 'gfxTarget'
		//		property to the event. It should be 'dojox/gfx.fixTarget' for
		//		most of the cases
		// scope: Object
		//		Optional. The scope to be used when invoking 'method'. If
		//		omitted, a global scope is used.
		// method: Function|String
		//		The original callback to be invoked.
		if(!method){
			method = scope;
			scope = null;
		}
		if(lang.isString(method)){
			scope = scope || kernel.global;
			if(!scope[method]){ throw(['dojox.gfx.shape.fixCallback: scope["', method, '"] is null (scope="', scope, '")'].join('')); }
			return function(e){  
				return fixFunction(e,gfxElement) ? scope[method].apply(scope, arguments || []) : undefined; }; // Function
		}
		return !scope 
			? function(e){ 
				return fixFunction(e,gfxElement) ? method.apply(scope, arguments) : undefined; } 
			: function(e){ 
				return fixFunction(e,gfxElement) ? method.apply(scope, arguments || []) : undefined; }; // Function
	};
	lang.extend(shape.Shape, shape._eventsProcessing);
	
	shape.Container = {
		// summary:
		//		a container of shapes, which can be used
		//		as a foundation for renderer-specific groups, or as a way
		//		to logically group shapes (e.g, to propagate matricies)
	
		_init: function() {
			// children: Array
			//		a list of children
			this.children = [];
			this._batch = 0;
		},
	
		// group management
	
		openBatch: function() {
			// summary:
			//		starts a new batch, subsequent new child shapes will be held in
			//		the batch instead of appending to the container directly.
			// description:
			//		Because the canvas renderer has no DOM hierarchy, the canvas implementation differs
			//		such that it suspends the repaint requests for this container until the current batch is closed by a call to closeBatch().
			return this;
		},
		closeBatch: function() {
			// summary:
			//		submits the current batch, append all pending child shapes to DOM
			// description:
			//		On canvas, this method flushes the pending redraws queue.
			return this;
		},
		add: function(shape){
			// summary:
			//		adds a shape to the list
			// shape: dojox/gfx/shape.Shape
			//		the shape to add to the list
			var oldParent = shape.getParent();
			if(oldParent){
				oldParent.remove(shape, true);
			}
			this.children.push(shape);
			return shape._setParent(this, this._getRealMatrix());	// self
		},
		remove: function(shape, silently){
			// summary:
			//		removes a shape from the list
			// shape: dojox/gfx/shape.Shape
			//		the shape to remove
			// silently: Boolean
			//		if true, do not redraw a picture yet
			for(var i = 0; i < this.children.length; ++i){
				if(this.children[i] == shape){
					if(silently){
						// skip for now
					}else{
						shape.parent = null;
						shape.parentMatrix = null;
					}
					this.children.splice(i, 1);
					break;
				}
			}
			return this;	// self
		},
		clear: function(/*Boolean?*/ destroy){
			// summary:
			//		removes all shapes from a group/surface.
			// destroy: Boolean
			//		Indicates whether the children should be destroyed. Optional.
			var shape;
			for(var i = 0; i < this.children.length;++i){
				shape = this.children[i];
				shape.parent = null;
				shape.parentMatrix = null;
				if(destroy){
					shape.destroy();
				}
			}
			this.children = [];
			return this;	// self
		},
		getBoundingBox: function(){
			// summary:
			//		Returns the bounding box Rectangle for this shape.
			if(this.children){
				// if this is a composite shape, then sum up all the children
				var result = null;
				arr.forEach(this.children, function(shape){
					var bb = shape.getBoundingBox();
					if(bb){
						var ct = shape.getTransform();
						if(ct){
							bb = matrixLib.multiplyRectangle(ct, bb);
						}
						if(result){
							// merge two bbox 
							result.x = Math.min(result.x, bb.x);
							result.y = Math.min(result.y, bb.y);
							result.endX = Math.max(result.endX, bb.x + bb.width);
							result.endY = Math.max(result.endY, bb.y + bb.height);
						}else{
							// first bbox 
							result = {
								x: bb.x,
								y: bb.y,
								endX: bb.x + bb.width,
								endY: bb.y + bb.height
							};
						}
					}
				});
				if(result){
					result.width = result.endX - result.x;
					result.height = result.endY - result.y;
				}
				return result; // dojox/gfx.Rectangle
			}
			// unknown/empty bounding box, subclass shall override this impl 
			return null;
		},
		// moving child nodes
		_moveChildToFront: function(shape){
			// summary:
			//		moves a shape to front of the list of shapes
			// shape: dojox/gfx/shape.Shape
			//		one of the child shapes to move to the front
			for(var i = 0; i < this.children.length; ++i){
				if(this.children[i] == shape){
					this.children.splice(i, 1);
					this.children.push(shape);
					break;
				}
			}
			return this;	// self
		},
		_moveChildToBack: function(shape){
			// summary:
			//		moves a shape to back of the list of shapes
			// shape: dojox/gfx/shape.Shape
			//		one of the child shapes to move to the front
			for(var i = 0; i < this.children.length; ++i){
				if(this.children[i] == shape){
					this.children.splice(i, 1);
					this.children.unshift(shape);
					break;
				}
			}
			return this;	// self
		}
	};

	shape.Surface = declare("dojox.gfx.shape.Surface", null, {
		// summary:
		//		a surface object to be used for drawings
		constructor: function(){
			// underlying node
			this.rawNode = null;
			// the parent node
			this._parent = null;
			// the list of DOM nodes to be deleted in the case of destruction
			this._nodes = [];
			// the list of events to be detached in the case of destruction
			this._events = [];
		},
		destroy: function(){
			// summary:
			//		destroy all relevant external resources and release all
			//		external references to make this object garbage-collectible
			arr.forEach(this._nodes, domConstruct.destroy);
			this._nodes = [];
			arr.forEach(this._events, function(h){ if(h){ h.remove(); } });
			this._events = [];
			this.rawNode = null;	// recycle it in _nodes, if it needs to be recycled
			if(has("ie")){
				while(this._parent.lastChild){
					domConstruct.destroy(this._parent.lastChild);
				}
			}else{
				this._parent.innerHTML = "";
			}
			this._parent = null;
		},
		getEventSource: function(){
			// summary:
			//		returns a node, which can be used to attach event listeners
			return this.rawNode; // Node
		},
		_getRealMatrix: function(){
			// summary:
			//		always returns the identity matrix
			return null;	// dojox/gfx/Matrix2D
		},
		/*=====
		 setDimensions: function(width, height){
			 // summary:
			 //		sets the width and height of the rawNode
			 // width: String
			 //		width of surface, e.g., "100px"
			 // height: String
			 //		height of surface, e.g., "100px"
			 return this;	// self
		 },
		 getDimensions: function(){
			 // summary:
			 //     gets current width and height in pixels
			 // returns: Object
			 //     object with properties "width" and "height"
		 },
		 =====*/
		isLoaded: true,
		onLoad: function(/*dojox/gfx/shape.Surface*/ surface){
			// summary:
			//		local event, fired once when the surface is created
			//		asynchronously, used only when isLoaded is false, required
			//		only for Silverlight.
		},
		whenLoaded: function(/*Object|Null*/ context, /*Function|String*/ method){
			var f = lang.hitch(context, method);
			if(this.isLoaded){
				f(this);
			}else{
				on.once(this, "load", function(surface){
					f(surface);
				});
			}
		}
	});
	lang.extend(shape.Surface, shape._eventsProcessing);

	/*=====
	g.Point = declare("dojox/gfx.Point", null, {
		// summary:
		//		2D point for drawings - {x, y}
		// description:
		//		Do not use this object directly!
		//		Use the naked object instead: {x: 1, y: 2}.
	});

	g.Rectangle = declare("dojox.gfx.Rectangle", null, {
		// summary:
		//		rectangle - {x, y, width, height}
		// description:
		//		Do not use this object directly!
		//		Use the naked object instead: {x: 1, y: 2, width: 100, height: 200}.
	});
	 =====*/


	shape.Rect = declare("dojox.gfx.shape.Rect", shape.Shape, {
		// summary:
		//		a generic rectangle
		constructor: function(rawNode){
			// rawNode: Node
			//		The underlying graphics system object (typically a DOM Node)
			this.shape = g.getDefault("Rect");
			this.rawNode = rawNode;
		},
		getBoundingBox: function(){
			// summary:
			//		returns the bounding box (its shape in this case)
			return this.shape;	// dojox/gfx.Rectangle
		}
	});
	
	shape.Ellipse = declare("dojox.gfx.shape.Ellipse", shape.Shape, {
		// summary:
		//		a generic ellipse
		constructor: function(rawNode){
			// rawNode: Node
			//		a DOM Node
			this.shape = g.getDefault("Ellipse");
			this.rawNode = rawNode;
		},
		getBoundingBox: function(){
			// summary:
			//		returns the bounding box
			if(!this.bbox){
				var shape = this.shape;
				this.bbox = {x: shape.cx - shape.rx, y: shape.cy - shape.ry,
					width: 2 * shape.rx, height: 2 * shape.ry};
			}
			return this.bbox;	// dojox/gfx.Rectangle
		}
	});
	
	shape.Circle = declare("dojox.gfx.shape.Circle", shape.Shape, {
		// summary:
		//		a generic circle
		constructor: function(rawNode){
			// rawNode: Node
			//		a DOM Node
			this.shape = g.getDefault("Circle");
			this.rawNode = rawNode;
		},
		getBoundingBox: function(){
			// summary:
			//		returns the bounding box
			if(!this.bbox){
				var shape = this.shape;
				this.bbox = {x: shape.cx - shape.r, y: shape.cy - shape.r,
					width: 2 * shape.r, height: 2 * shape.r};
			}
			return this.bbox;	// dojox/gfx.Rectangle
		}
	});
	
	shape.Line = declare("dojox.gfx.shape.Line", shape.Shape, {
		// summary:
		//		a generic line (do not instantiate it directly)
		constructor: function(rawNode){
			// rawNode: Node
			//		a DOM Node
			this.shape = g.getDefault("Line");
			this.rawNode = rawNode;
		},
		getBoundingBox: function(){
			// summary:
			//		returns the bounding box
			if(!this.bbox){
				var shape = this.shape;
				this.bbox = {
					x:		Math.min(shape.x1, shape.x2),
					y:		Math.min(shape.y1, shape.y2),
					width:	Math.abs(shape.x2 - shape.x1),
					height:	Math.abs(shape.y2 - shape.y1)
				};
			}
			return this.bbox;	// dojox/gfx.Rectangle
		}
	});
	
	shape.Polyline = declare("dojox.gfx.shape.Polyline", shape.Shape, {
		// summary:
		//		a generic polyline/polygon (do not instantiate it directly)
		constructor: function(rawNode){
			// rawNode: Node
			//		a DOM Node
			this.shape = g.getDefault("Polyline");
			this.rawNode = rawNode;
		},
		setShape: function(points, closed){
			// summary:
			//		sets a polyline/polygon shape object
			// points: Object|Array
			//		a polyline/polygon shape object, or an array of points
			// closed: Boolean
			//		close the polyline to make a polygon
			if(points && points instanceof Array){
				this.inherited(arguments, [{points: points}]);
				if(closed && this.shape.points.length){
					this.shape.points.push(this.shape.points[0]);
				}
			}else{
				this.inherited(arguments, [points]);
			}
			return this;	// self
		},
		_normalizePoints: function(){
			// summary:
			//		normalize points to array of {x:number, y:number}
			var p = this.shape.points, l = p && p.length;
			if(l && typeof p[0] == "number"){
				var points = [];
				for(var i = 0; i < l; i += 2){
					points.push({x: p[i], y: p[i + 1]});
				}
				this.shape.points = points;
			}
		},
		getBoundingBox: function(){
			// summary:
			//		returns the bounding box
			if(!this.bbox && this.shape.points.length){
				var p = this.shape.points;
				var l = p.length;
				var t = p[0];
				var bbox = {l: t.x, t: t.y, r: t.x, b: t.y};
				for(var i = 1; i < l; ++i){
					t = p[i];
					if(bbox.l > t.x) bbox.l = t.x;
					if(bbox.r < t.x) bbox.r = t.x;
					if(bbox.t > t.y) bbox.t = t.y;
					if(bbox.b < t.y) bbox.b = t.y;
				}
				this.bbox = {
					x:		bbox.l,
					y:		bbox.t,
					width:	bbox.r - bbox.l,
					height:	bbox.b - bbox.t
				};
			}
			return this.bbox;	// dojox/gfx.Rectangle
		}
	});
	
	shape.Image = declare("dojox.gfx.shape.Image", shape.Shape, {
		// summary:
		//		a generic image (do not instantiate it directly)
		constructor: function(rawNode){
			// rawNode: Node
			//		a DOM Node
			this.shape = g.getDefault("Image");
			this.rawNode = rawNode;
		},
		getBoundingBox: function(){
			// summary:
			//		returns the bounding box (its shape in this case)
			return this.shape;	// dojox/gfx.Rectangle
		},
		setStroke: function(){
			// summary:
			//		ignore setting a stroke style
			return this;	// self
		},
		setFill: function(){
			// summary:
			//		ignore setting a fill style
			return this;	// self
		}
	});
	
	shape.Text = declare(shape.Shape, {
		// summary:
		//		a generic text (do not instantiate it directly)
		constructor: function(rawNode){
			// rawNode: Node
			//		a DOM Node
			this.fontStyle = null;
			this.shape = g.getDefault("Text");
			this.rawNode = rawNode;
		},
		getFont: function(){
			// summary:
			//		returns the current font object or null
			return this.fontStyle;	// Object
		},
		setFont: function(newFont){
			// summary:
			//		sets a font for text
			// newFont: Object
			//		a font object (see dojox/gfx.defaultFont) or a font string
			this.fontStyle = typeof newFont == "string" ? g.splitFontString(newFont) :
				g.makeParameters(g.defaultFont, newFont);
			this._setFont();
			return this;	// self
		},
		getBoundingBox: function(){
			var bbox = null, s = this.getShape();
			if(s.text){
				bbox = g._base._computeTextBoundingBox(this);
			}
			return bbox;
		}
	});
	
	shape.Creator = {
		// summary:
		//		shape creators
		createShape: function(shape){
			// summary:
			//		creates a shape object based on its type; it is meant to be used
			//		by group-like objects
			// shape: Object
			//		a shape descriptor object
			// returns: dojox/gfx/shape.Shape | Null
			//      a fully instantiated surface-specific Shape object
			switch(shape.type){
				case g.defaultPath.type:		return this.createPath(shape);
				case g.defaultRect.type:		return this.createRect(shape);
				case g.defaultCircle.type:	    return this.createCircle(shape);
				case g.defaultEllipse.type:	    return this.createEllipse(shape);
				case g.defaultLine.type:		return this.createLine(shape);
				case g.defaultPolyline.type:	return this.createPolyline(shape);
				case g.defaultImage.type:		return this.createImage(shape);
				case g.defaultText.type:		return this.createText(shape);
				case g.defaultTextPath.type:	return this.createTextPath(shape);
			}
			return null;
		},
		createGroup: function(){
			// summary:
			//		creates a group shape
			return this.createObject(g.Group);	// dojox/gfx/Group
		},
		createRect: function(rect){
			// summary:
			//		creates a rectangle shape
			// rect: Object
			//		a path object (see dojox/gfx.defaultRect)
			return this.createObject(g.Rect, rect);	// dojox/gfx/shape.Rect
		},
		createEllipse: function(ellipse){
			// summary:
			//		creates an ellipse shape
			// ellipse: Object
			//		an ellipse object (see dojox/gfx.defaultEllipse)
			return this.createObject(g.Ellipse, ellipse);	// dojox/gfx/shape.Ellipse
		},
		createCircle: function(circle){
			// summary:
			//		creates a circle shape
			// circle: Object
			//		a circle object (see dojox/gfx.defaultCircle)
			return this.createObject(g.Circle, circle);	// dojox/gfx/shape.Circle
		},
		createLine: function(line){
			// summary:
			//		creates a line shape
			// line: Object
			//		a line object (see dojox/gfx.defaultLine)
			return this.createObject(g.Line, line);	// dojox/gfx/shape.Line
		},
		createPolyline: function(points){
			// summary:
			//		creates a polyline/polygon shape
			// points: Object
			//		a points object (see dojox/gfx.defaultPolyline)
			//		or an Array of points
			return this.createObject(g.Polyline, points);	// dojox/gfx/shape.Polyline
		},
		createImage: function(image){
			// summary:
			//		creates a image shape
			// image: Object
			//		an image object (see dojox/gfx.defaultImage)
			return this.createObject(g.Image, image);	// dojox/gfx/shape.Image
		},
		createText: function(text){
			// summary:
			//		creates a text shape
			// text: Object
			//		a text object (see dojox/gfx.defaultText)
			return this.createObject(g.Text, text);	// dojox/gfx/shape.Text
		},
		createPath: function(path){
			// summary:
			//		creates a path shape
			// path: Object
			//		a path object (see dojox/gfx.defaultPath)
			return this.createObject(g.Path, path);	// dojox/gfx/shape.Path
		},
		createTextPath: function(text){
			// summary:
			//		creates a text shape
			// text: Object
			//		a textpath object (see dojox/gfx.defaultTextPath)
			return this.createObject(g.TextPath, {}).setText(text);	// dojox/gfx/shape.TextPath
		},
		createObject: function(shapeType, rawShape){
			// summary:
			//		creates an instance of the passed shapeType class
			// shapeType: Function
			//		a class constructor to create an instance of
			// rawShape: Object 
			//		properties to be passed in to the classes 'setShape' method
	
			// SHOULD BE RE-IMPLEMENTED BY THE RENDERER!
			return null;	// dojox/gfx/shape.Shape
		}
	};
	
	/*=====
	 lang.extend(shape.Surface, shape.Container);
	 lang.extend(shape.Surface, shape.Creator);

	 g.Group = declare(shape.Shape, {
		// summary:
		//		a group shape, which can be used
		//		to logically group shapes (e.g, to propagate matricies)
	});
	lang.extend(g.Group, shape.Container);
	lang.extend(g.Group, shape.Creator);

	g.Rect     = shape.Rect;
	g.Circle   = shape.Circle;
	g.Ellipse  = shape.Ellipse;
	g.Line     = shape.Line;
	g.Polyline = shape.Polyline;
	g.Text     = shape.Text;
	g.Surface  = shape.Surface;
	=====*/

	return shape;
});

},
'dojox/gfx/svg':function(){
define(["dojo/_base/lang", "dojo/_base/sniff", "dojo/_base/window", "dojo/dom", "dojo/_base/declare", "dojo/_base/array",
  "dojo/dom-geometry", "dojo/dom-attr", "dojo/_base/Color", "./_base", "./shape", "./path"],
function(lang, has, win, dom, declare, arr, domGeom, domAttr, Color, g, gs, pathLib){

	var svg = g.svg = {
		// summary:
		//		This the graphics rendering bridge for browsers compliant with W3C SVG1.0.
		//		This is the preferred renderer to use for interactive and accessible graphics.
	};
	svg.useSvgWeb = (typeof window.svgweb != "undefined");

	// Need to detect iOS in order to workaround bug when
	// touching nodes with text
	var uagent = navigator.userAgent,
		safMobile = has("ios"),
		android = has("android"),
		textRenderingFix = has("chrome") || (android && android>=4) ? "auto" : "optimizeLegibility";// #16099, #16461

	function _createElementNS(ns, nodeType){
		// summary:
		//		Internal helper to deal with creating elements that
		//		are namespaced.  Mainly to get SVG markup output
		//		working on IE.
		if(win.doc.createElementNS){
			return win.doc.createElementNS(ns,nodeType);
		}else{
			return win.doc.createElement(nodeType);
		}
	}
	
	function _setAttributeNS(node, ns, attr, value){
		if(node.setAttributeNS){
			return node.setAttributeNS(ns, attr, value);
		}else{
			return node.setAttribute(attr, value);
		}
	}

	function _createTextNode(text){
		if(svg.useSvgWeb){
			return win.doc.createTextNode(text, true);
		}else{
			return win.doc.createTextNode(text);
		}
	}

	function _createFragment(){
		if(svg.useSvgWeb){
			return win.doc.createDocumentFragment(true);
		}else{
			return win.doc.createDocumentFragment();
		}
	}

	svg.xmlns = {
		xlink: "http://www.w3.org/1999/xlink",
		svg:   "http://www.w3.org/2000/svg"
	};

	svg.getRef = function(name){
		// summary:
		//		looks up a node by its external name
		// name: String
		//		an SVG external reference
		// returns:
		//      returns a DOM Node specified by the name argument or null
		if(!name || name == "none") return null;
		if(name.match(/^url\(#.+\)$/)){
			return dom.byId(name.slice(5, -1));	// Node
		}
		// alternative representation of a reference
		if(name.match(/^#dojoUnique\d+$/)){
			// we assume here that a reference was generated by dojox/gfx
			return dom.byId(name.slice(1));	// Node
		}
		return null;	// Node
	};

	svg.dasharray = {
		solid:				"none",
		shortdash:			[4, 1],
		shortdot:			[1, 1],
		shortdashdot:		[4, 1, 1, 1],
		shortdashdotdot:	[4, 1, 1, 1, 1, 1],
		dot:				[1, 3],
		dash:				[4, 3],
		longdash:			[8, 3],
		dashdot:			[4, 3, 1, 3],
		longdashdot:		[8, 3, 1, 3],
		longdashdotdot:		[8, 3, 1, 3, 1, 3]
	};

	var clipCount = 0;

	svg.Shape = declare("dojox.gfx.svg.Shape", gs.Shape, {
		// summary:
		//		SVG-specific implementation of dojox/gfx/shape.Shape methods

		destroy: function(){
			if(this.fillStyle && "type" in this.fillStyle){
				var fill = this.rawNode.getAttribute("fill"),
					ref  = svg.getRef(fill);
				if(ref){
					ref.parentNode.removeChild(ref);
				}
			}
			if(this.clip){
				var clipPathProp = this.rawNode.getAttribute("clip-path");
				if(clipPathProp){
					var clipNode = dom.byId(clipPathProp.match(/gfx_clip[\d]+/)[0]);
					if(clipNode){ clipNode.parentNode.removeChild(clipNode); }
				}
			}
			gs.Shape.prototype.destroy.apply(this, arguments);
		},

		setFill: function(fill){
			// summary:
			//		sets a fill object (SVG)
			// fill: Object
			//		a fill object
			//		(see dojox/gfx.defaultLinearGradient,
			//		dojox/gfx.defaultRadialGradient,
			//		dojox/gfx.defaultPattern,
			//		or dojo/_base/Color)

			if(!fill){
				// don't fill
				this.fillStyle = null;
				this.rawNode.setAttribute("fill", "none");
				this.rawNode.setAttribute("fill-opacity", 0);
				return this;
			}
			var f;
			// FIXME: slightly magical. We're using the outer scope's "f", but setting it later
			var setter = function(x){
					// we assume that we're executing in the scope of the node to mutate
					this.setAttribute(x, f[x].toFixed(8));
				};
			if(typeof(fill) == "object" && "type" in fill){
				// gradient
				switch(fill.type){
					case "linear":
						f = g.makeParameters(g.defaultLinearGradient, fill);
						var gradient = this._setFillObject(f, "linearGradient");
						arr.forEach(["x1", "y1", "x2", "y2"], setter, gradient);
						break;
					case "radial":
						f = g.makeParameters(g.defaultRadialGradient, fill);
						var grad = this._setFillObject(f, "radialGradient");
						arr.forEach(["cx", "cy", "r"], setter, grad);
						break;
					case "pattern":
						f = g.makeParameters(g.defaultPattern, fill);
						var pattern = this._setFillObject(f, "pattern");
						arr.forEach(["x", "y", "width", "height"], setter, pattern);
						break;
				}
				this.fillStyle = f;
				return this;
			}
			// color object
			f = g.normalizeColor(fill);
			this.fillStyle = f;
			this.rawNode.setAttribute("fill", f.toCss());
			this.rawNode.setAttribute("fill-opacity", f.a);
			this.rawNode.setAttribute("fill-rule", "evenodd");
			return this;	// self
		},

		setStroke: function(stroke){
			// summary:
			//		sets a stroke object (SVG)
			// stroke: Object
			//		a stroke object (see dojox/gfx.defaultStroke)

			var rn = this.rawNode;
			if(!stroke){
				// don't stroke
				this.strokeStyle = null;
				rn.setAttribute("stroke", "none");
				rn.setAttribute("stroke-opacity", 0);
				return this;
			}
			// normalize the stroke
			if(typeof stroke == "string" || lang.isArray(stroke) || stroke instanceof Color){
				stroke = { color: stroke };
			}
			var s = this.strokeStyle = g.makeParameters(g.defaultStroke, stroke);
			s.color = g.normalizeColor(s.color);
			// generate attributes
			if(s){
				rn.setAttribute("stroke", s.color.toCss());
				rn.setAttribute("stroke-opacity", s.color.a);
				rn.setAttribute("stroke-width",   s.width);
				rn.setAttribute("stroke-linecap", s.cap);
				if(typeof s.join == "number"){
					rn.setAttribute("stroke-linejoin",   "miter");
					rn.setAttribute("stroke-miterlimit", s.join);
				}else{
					rn.setAttribute("stroke-linejoin",   s.join);
				}
				var da = s.style.toLowerCase();
				if(da in svg.dasharray){
					da = svg.dasharray[da];
				}
				if(da instanceof Array){
					da = lang._toArray(da);
					var i;
					for(i = 0; i < da.length; ++i){
						da[i] *= s.width;
					}
					if(s.cap != "butt"){
						for(i = 0; i < da.length; i += 2){
							da[i] -= s.width;
							if(da[i] < 1){ da[i] = 1; }
						}
						for(i = 1; i < da.length; i += 2){
							da[i] += s.width;
						}
					}
					da = da.join(",");
				}
				rn.setAttribute("stroke-dasharray", da);
				rn.setAttribute("dojoGfxStrokeStyle", s.style);
			}
			return this;	// self
		},

		_getParentSurface: function(){
			var surface = this.parent;
			for(; surface && !(surface instanceof g.Surface); surface = surface.parent);
			return surface;
		},

		_setFillObject: function(f, nodeType){
			var svgns = svg.xmlns.svg;
			this.fillStyle = f;
			var surface = this._getParentSurface(),
				defs = surface.defNode,
				fill = this.rawNode.getAttribute("fill"),
				ref  = svg.getRef(fill);
			if(ref){
				fill = ref;
				if(fill.tagName.toLowerCase() != nodeType.toLowerCase()){
					var id = fill.id;
					fill.parentNode.removeChild(fill);
					fill = _createElementNS(svgns, nodeType);
					fill.setAttribute("id", id);
					defs.appendChild(fill);
				}else{
					while(fill.childNodes.length){
						fill.removeChild(fill.lastChild);
					}
				}
			}else{
				fill = _createElementNS(svgns, nodeType);
				fill.setAttribute("id", g._base._getUniqueId());
				defs.appendChild(fill);
			}
			if(nodeType == "pattern"){
				fill.setAttribute("patternUnits", "userSpaceOnUse");
				var img = _createElementNS(svgns, "image");
				img.setAttribute("x", 0);
				img.setAttribute("y", 0);
				img.setAttribute("width",  f.width .toFixed(8));
				img.setAttribute("height", f.height.toFixed(8));
				_setAttributeNS(img, svg.xmlns.xlink, "xlink:href", f.src);
				fill.appendChild(img);
			}else{
				fill.setAttribute("gradientUnits", "userSpaceOnUse");
				for(var i = 0; i < f.colors.length; ++i){
					var c = f.colors[i], t = _createElementNS(svgns, "stop"),
						cc = c.color = g.normalizeColor(c.color);
					t.setAttribute("offset",       c.offset.toFixed(8));
					t.setAttribute("stop-color",   cc.toCss());
					t.setAttribute("stop-opacity", cc.a);
					fill.appendChild(t);
				}
			}
			this.rawNode.setAttribute("fill", "url(#" + fill.getAttribute("id") +")");
			this.rawNode.removeAttribute("fill-opacity");
			this.rawNode.setAttribute("fill-rule", "evenodd");
			return fill;
		},

		_applyTransform: function() {
			var matrix = this.matrix;
			if(matrix){
				var tm = this.matrix;
				this.rawNode.setAttribute("transform", "matrix(" +
					tm.xx.toFixed(8) + "," + tm.yx.toFixed(8) + "," +
					tm.xy.toFixed(8) + "," + tm.yy.toFixed(8) + "," +
					tm.dx.toFixed(8) + "," + tm.dy.toFixed(8) + ")");
			}else{
				this.rawNode.removeAttribute("transform");
			}
			return this;
		},

		setRawNode: function(rawNode){
			// summary:
			//		assigns and clears the underlying node that will represent this
			//		shape. Once set, transforms, gradients, etc, can be applied.
			//		(no fill & stroke by default)
			var r = this.rawNode = rawNode;
			if(this.shape.type!="image"){
				r.setAttribute("fill", "none");
			}
			r.setAttribute("fill-opacity", 0);
			r.setAttribute("stroke", "none");
			r.setAttribute("stroke-opacity", 0);
			r.setAttribute("stroke-width", 1);
			r.setAttribute("stroke-linecap", "butt");
			r.setAttribute("stroke-linejoin", "miter");
			r.setAttribute("stroke-miterlimit", 4);
			// Bind GFX object with SVG node for ease of retrieval - that is to
			// save code/performance to keep this association elsewhere
			r.__gfxObject__ = this;
		},

		setShape: function(newShape){
			// summary:
			//		sets a shape object (SVG)
			// newShape: Object
			//		a shape object
			//		(see dojox/gfx.defaultPath,
			//		dojox/gfx.defaultPolyline,
			//		dojox/gfx.defaultRect,
			//		dojox/gfx.defaultEllipse,
			//		dojox/gfx.defaultCircle,
			//		dojox/gfx.defaultLine,
			//		or dojox/gfx.defaultImage)
			this.shape = g.makeParameters(this.shape, newShape);
			for(var i in this.shape){
				if(i != "type"){
					this.rawNode.setAttribute(i, this.shape[i]);
				}
			}
			this.bbox = null;
			return this;	// self
		},

		// move family

		_moveToFront: function(){
			// summary:
			//		moves a shape to front of its parent's list of shapes (SVG)
			this.rawNode.parentNode.appendChild(this.rawNode);
			return this;	// self
		},
		_moveToBack: function(){
			// summary:
			//		moves a shape to back of its parent's list of shapes (SVG)
			this.rawNode.parentNode.insertBefore(this.rawNode, this.rawNode.parentNode.firstChild);
			return this;	// self
		},
		setClip: function(clip){
			// summary:
			//		sets the clipping area of this shape.
			// description:
			//		This method overrides the dojox/gfx/shape.Shape.setClip() method.
			// clip: Object
			//		an object that defines the clipping geometry, or null to remove clip.
			this.inherited(arguments);
			var clipType = clip ? "width" in clip ? "rect" : 
							"cx" in clip ? "ellipse" : 
							"points" in clip ? "polyline" : "d" in clip ? "path" : null : null;
			if(clip && !clipType){
				return this;
			}
			if(clipType === "polyline"){
				clip = lang.clone(clip);
				clip.points = clip.points.join(",");
			}
			var clipNode, clipShape,
				clipPathProp = domAttr.get(this.rawNode, "clip-path");
			if(clipPathProp){
				clipNode = dom.byId(clipPathProp.match(/gfx_clip[\d]+/)[0]);
				if(clipNode){ // may be null if not in the DOM anymore
					clipNode.removeChild(clipNode.childNodes[0]);
				}
			}
			if(clip){
				if(clipNode){
					clipShape = _createElementNS(svg.xmlns.svg, clipType);
					clipNode.appendChild(clipShape);
				}else{
					var idIndex = ++clipCount;
					var clipId = "gfx_clip" + idIndex;
					var clipUrl = "url(#" + clipId + ")";
					this.rawNode.setAttribute("clip-path", clipUrl);
					clipNode = _createElementNS(svg.xmlns.svg, "clipPath");
					clipShape = _createElementNS(svg.xmlns.svg, clipType);
					clipNode.appendChild(clipShape);
					this.rawNode.parentNode.insertBefore(clipNode, this.rawNode);
					domAttr.set(clipNode, "id", clipId);
				}
				domAttr.set(clipShape, clip);
			}else{
				//remove clip-path
				this.rawNode.removeAttribute("clip-path");
				if(clipNode){
					clipNode.parentNode.removeChild(clipNode);
				}
			}
			return this;
		},
		_removeClipNode: function(){
			var clipNode, clipPathProp = domAttr.get(this.rawNode, "clip-path");
			if(clipPathProp){
				clipNode = dom.byId(clipPathProp.match(/gfx_clip[\d]+/)[0]);
				if(clipNode){
					clipNode.parentNode.removeChild(clipNode);
				}
			}
			return clipNode;
		}
	});


	svg.Group = declare("dojox.gfx.svg.Group", svg.Shape, {
		// summary:
		//		a group shape (SVG), which can be used
		//		to logically group shapes (e.g, to propagate matricies)
		constructor: function(){
			gs.Container._init.call(this);
		},
		setRawNode: function(rawNode){
			// summary:
			//		sets a raw SVG node to be used by this shape
			// rawNode: Node
			//		an SVG node
			this.rawNode = rawNode;
			// Bind GFX object with SVG node for ease of retrieval - that is to
			// save code/performance to keep this association elsewhere
			this.rawNode.__gfxObject__ = this;
		},
		destroy: function(){
			// summary:
			//		Releases all internal resources owned by this shape. Once this method has been called,
			//		the instance is considered disposed and should not be used anymore.
			this.clear(true);
			// avoid this.inherited
			svg.Shape.prototype.destroy.apply(this, arguments);
		}
	});
	svg.Group.nodeType = "g";

	svg.Rect = declare("dojox.gfx.svg.Rect", [svg.Shape, gs.Rect], {
		// summary:
		//		a rectangle shape (SVG)
		setShape: function(newShape){
			// summary:
			//		sets a rectangle shape object (SVG)
			// newShape: Object
			//		a rectangle shape object
			this.shape = g.makeParameters(this.shape, newShape);
			this.bbox = null;
			for(var i in this.shape){
				if(i != "type" && i != "r"){
					this.rawNode.setAttribute(i, this.shape[i]);
				}
			}
			if(this.shape.r != null){
				this.rawNode.setAttribute("ry", this.shape.r);
				this.rawNode.setAttribute("rx", this.shape.r);
			}
			return this;	// self
		}
	});
	svg.Rect.nodeType = "rect";

	svg.Ellipse = declare("dojox.gfx.svg.Ellipse", [svg.Shape, gs.Ellipse], {});
	svg.Ellipse.nodeType = "ellipse";

	svg.Circle = declare("dojox.gfx.svg.Circle", [svg.Shape, gs.Circle], {});
	svg.Circle.nodeType = "circle";

	svg.Line = declare("dojox.gfx.svg.Line", [svg.Shape, gs.Line], {});
	svg.Line.nodeType = "line";

	svg.Polyline = declare("dojox.gfx.svg.Polyline", [svg.Shape, gs.Polyline], {
		// summary:
		//		a polyline/polygon shape (SVG)
		setShape: function(points, closed){
			// summary:
			//		sets a polyline/polygon shape object (SVG)
			// points: Object|Array
			//		a polyline/polygon shape object, or an array of points
			if(points && points instanceof Array){
				this.shape = g.makeParameters(this.shape, { points: points });
				if(closed && this.shape.points.length){
					this.shape.points.push(this.shape.points[0]);
				}
			}else{
				this.shape = g.makeParameters(this.shape, points);
			}
			this.bbox = null;
			this._normalizePoints();
			var attr = [], p = this.shape.points;
			for(var i = 0; i < p.length; ++i){
				attr.push(p[i].x.toFixed(8), p[i].y.toFixed(8));
			}
			this.rawNode.setAttribute("points", attr.join(" "));
			return this;	// self
		}
	});
	svg.Polyline.nodeType = "polyline";

	svg.Image = declare("dojox.gfx.svg.Image", [svg.Shape, gs.Image], {
		// summary:
		//		an image (SVG)
		setShape: function(newShape){
			// summary:
			//		sets an image shape object (SVG)
			// newShape: Object
			//		an image shape object
			this.shape = g.makeParameters(this.shape, newShape);
			this.bbox = null;
			var rawNode = this.rawNode;
			for(var i in this.shape){
				if(i != "type" && i != "src"){
					rawNode.setAttribute(i, this.shape[i]);
				}
			}
			rawNode.setAttribute("preserveAspectRatio", "none");
			_setAttributeNS(rawNode, svg.xmlns.xlink, "xlink:href", this.shape.src);
			// Bind GFX object with SVG node for ease of retrieval - that is to
			// save code/performance to keep this association elsewhere
			rawNode.__gfxObject__ = this;
			return this;	// self
		}
	});
	svg.Image.nodeType = "image";

	svg.Text = declare("dojox.gfx.svg.Text", [svg.Shape, gs.Text], {
		// summary:
		//		an anchored text (SVG)
		setShape: function(newShape){
			// summary:
			//		sets a text shape object (SVG)
			// newShape: Object
			//		a text shape object
			this.shape = g.makeParameters(this.shape, newShape);
			this.bbox = null;
			var r = this.rawNode, s = this.shape;
			r.setAttribute("x", s.x);
			r.setAttribute("y", s.y);
			r.setAttribute("text-anchor", s.align);
			r.setAttribute("text-decoration", s.decoration);
			r.setAttribute("rotate", s.rotated ? 90 : 0);
			r.setAttribute("kerning", s.kerning ? "auto" : 0);
			r.setAttribute("text-rendering", textRenderingFix);

			// update the text content
			if(r.firstChild){
				r.firstChild.nodeValue = s.text;
			}else{
				r.appendChild(_createTextNode(s.text));
			}
			return this;	// self
		},
		getTextWidth: function(){
			// summary:
			//		get the text width in pixels
			var rawNode = this.rawNode,
				oldParent = rawNode.parentNode,
				_measurementNode = rawNode.cloneNode(true);
			_measurementNode.style.visibility = "hidden";

			// solution to the "orphan issue" in FF
			var _width = 0, _text = _measurementNode.firstChild.nodeValue;
			oldParent.appendChild(_measurementNode);

			// solution to the "orphan issue" in Opera
			// (nodeValue == "" hangs firefox)
			if(_text!=""){
				while(!_width){
//Yang: work around svgweb bug 417 -- http://code.google.com/p/svgweb/issues/detail?id=417
if (_measurementNode.getBBox)
					_width = parseInt(_measurementNode.getBBox().width);
else
	_width = 68;
				}
			}
			oldParent.removeChild(_measurementNode);
			return _width;
		},
		getBoundingBox: function(){
			var s = this.getShape(), bbox = null;
			if(s.text){
				// try/catch the FF native getBBox error.
				try {
					bbox = this.rawNode.getBBox();
				} catch (e) {
					// under FF when the node is orphan (all other browsers return a 0ed bbox.
					bbox = {x:0, y:0, width:0, height:0};
				}
			}
			return bbox;
		}
	});
	svg.Text.nodeType = "text";

	svg.Path = declare("dojox.gfx.svg.Path", [svg.Shape, pathLib.Path], {
		// summary:
		//		a path shape (SVG)
		_updateWithSegment: function(segment){
			// summary:
			//		updates the bounding box of path with new segment
			// segment: Object
			//		a segment
			this.inherited(arguments);
			if(typeof(this.shape.path) == "string"){
				this.rawNode.setAttribute("d", this.shape.path);
			}
		},
		setShape: function(newShape){
			// summary:
			//		forms a path using a shape (SVG)
			// newShape: Object
			//		an SVG path string or a path object (see dojox/gfx.defaultPath)
			this.inherited(arguments);
			if(this.shape.path){
				this.rawNode.setAttribute("d", this.shape.path);
			}else{
				this.rawNode.removeAttribute("d");
			}
			return this;	// self
		}
	});
	svg.Path.nodeType = "path";

	svg.TextPath = declare("dojox.gfx.svg.TextPath", [svg.Shape, pathLib.TextPath], {
		// summary:
		//		a textpath shape (SVG)
		_updateWithSegment: function(segment){
			// summary:
			//		updates the bounding box of path with new segment
			// segment: Object
			//		a segment
			this.inherited(arguments);
			this._setTextPath();
		},
		setShape: function(newShape){
			// summary:
			//		forms a path using a shape (SVG)
			// newShape: Object
			//		an SVG path string or a path object (see dojox/gfx.defaultPath)
			this.inherited(arguments);
			this._setTextPath();
			return this;	// self
		},
		_setTextPath: function(){
			if(typeof this.shape.path != "string"){ return; }
			var r = this.rawNode;
			if(!r.firstChild){
				var tp = _createElementNS(svg.xmlns.svg, "textPath"),
					tx = _createTextNode("");
				tp.appendChild(tx);
				r.appendChild(tp);
			}
			var ref  = r.firstChild.getAttributeNS(svg.xmlns.xlink, "href"),
				path = ref && svg.getRef(ref);
			if(!path){
				var surface = this._getParentSurface();
				if(surface){
					var defs = surface.defNode;
					path = _createElementNS(svg.xmlns.svg, "path");
					var id = g._base._getUniqueId();
					path.setAttribute("id", id);
					defs.appendChild(path);
					_setAttributeNS(r.firstChild, svg.xmlns.xlink, "xlink:href", "#" + id);
				}
			}
			if(path){
				path.setAttribute("d", this.shape.path);
			}
		},
		_setText: function(){
			var r = this.rawNode;
			if(!r.firstChild){
				var tp = _createElementNS(svg.xmlns.svg, "textPath"),
					tx = _createTextNode("");
				tp.appendChild(tx);
				r.appendChild(tp);
			}
			r = r.firstChild;
			var t = this.text;
			r.setAttribute("alignment-baseline", "middle");
			switch(t.align){
				case "middle":
					r.setAttribute("text-anchor", "middle");
					r.setAttribute("startOffset", "50%");
					break;
				case "end":
					r.setAttribute("text-anchor", "end");
					r.setAttribute("startOffset", "100%");
					break;
				default:
					r.setAttribute("text-anchor", "start");
					r.setAttribute("startOffset", "0%");
					break;
			}
			//r.parentNode.setAttribute("alignment-baseline", "central");
			//r.setAttribute("dominant-baseline", "central");
			r.setAttribute("baseline-shift", "0.5ex");
			r.setAttribute("text-decoration", t.decoration);
			r.setAttribute("rotate", t.rotated ? 90 : 0);
			r.setAttribute("kerning", t.kerning ? "auto" : 0);
			r.firstChild.data = t.text;
		}
	});
	svg.TextPath.nodeType = "text";

	// Fix for setDimension bug:
	// http://bugs.dojotoolkit.org/ticket/16100
	// (https://code.google.com/p/chromium/issues/detail?id=162628)
	var hasSvgSetAttributeBug = (function(){ var matches = /WebKit\/(\d*)/.exec(uagent); return matches ? matches[1] : 0})() > 534;

	svg.Surface = declare("dojox.gfx.svg.Surface", gs.Surface, {
		// summary:
		//		a surface object to be used for drawings (SVG)
		constructor: function(){
			gs.Container._init.call(this);
		},
		destroy: function(){
			// no need to call svg.Container.clear to remove the children raw
			// nodes since the surface raw node will be removed. So, only dispose at gfx level	
			gs.Container.clear.call(this, true); 
			this.defNode = null;	// release the external reference
			this.inherited(arguments);
		},
		setDimensions: function(width, height){
			// summary:
			//		sets the width and height of the rawNode
			// width: String
			//		width of surface, e.g., "100px"
			// height: String
			//		height of surface, e.g., "100px"
			if(!this.rawNode){ return this; }
			this.rawNode.setAttribute("width",  width);
			this.rawNode.setAttribute("height", height);
			if(hasSvgSetAttributeBug){
				this.rawNode.style.width =  width;
				this.rawNode.style.height =  height;
			}
			return this;	// self
		},
		getDimensions: function(){
			// summary:
			//		returns an object with properties "width" and "height"
			var t = this.rawNode ? {
				width:  g.normalizedLength(this.rawNode.getAttribute("width")),
				height: g.normalizedLength(this.rawNode.getAttribute("height"))} : null;
			return t;	// Object
		}
	});

	svg.createSurface = function(parentNode, width, height){
		// summary:
		//		creates a surface (SVG)
		// parentNode: Node
		//		a parent node
		// width: String|Number
		//		width of surface, e.g., "100px" or 100
		// height: String|Number
		//		height of surface, e.g., "100px" or 100
		// returns: dojox/gfx/shape.Surface
		//     newly created surface

		var s = new svg.Surface();
		s.rawNode = _createElementNS(svg.xmlns.svg, "svg");
		s.rawNode.setAttribute("overflow", "hidden");
		if(width){
			s.rawNode.setAttribute("width",  width);
		}
		if(height){
			s.rawNode.setAttribute("height", height);
		}

		var defNode = _createElementNS(svg.xmlns.svg, "defs");
		s.rawNode.appendChild(defNode);
		s.defNode = defNode;

		s._parent = dom.byId(parentNode);
		s._parent.appendChild(s.rawNode);

		g._base._fixMsTouchAction(s);

		return s;	// dojox/gfx.Surface
	};

	// Extenders

	var Font = {
		_setFont: function(){
			// summary:
			//		sets a font object (SVG)
			var f = this.fontStyle;
			// next line doesn't work in Firefox 2 or Opera 9
			//this.rawNode.setAttribute("font", dojox.gfx.makeFontString(this.fontStyle));
			this.rawNode.setAttribute("font-style", f.style);
			this.rawNode.setAttribute("font-variant", f.variant);
			this.rawNode.setAttribute("font-weight", f.weight);
			this.rawNode.setAttribute("font-size", f.size);
			this.rawNode.setAttribute("font-family", f.family);
		}
	};

	var C = gs.Container;
	var Container = svg.Container = {
		openBatch: function() {
			// summary:
			//		starts a new batch, subsequent new child shapes will be held in
			//		the batch instead of appending to the container directly
			if(!this._batch){
				this.fragment = _createFragment();
			}
			++this._batch;
			return this;
		},
		closeBatch: function() {
			// summary:
			//		submits the current batch, append all pending child shapes to DOM
			this._batch = this._batch > 0 ? --this._batch : 0;
			if (this.fragment && !this._batch) {
				this.rawNode.appendChild(this.fragment);
				delete this.fragment;
			}
			return this;
		},
		add: function(shape){
			// summary:
			//		adds a shape to a group/surface
			// shape: dojox/gfx/shape.Shape
			//		an VML shape object
			if(this != shape.getParent()){
				if (this.fragment) {
					this.fragment.appendChild(shape.rawNode);
				} else {
					this.rawNode.appendChild(shape.rawNode);
				}
				C.add.apply(this, arguments);
				// update clipnode with new parent
				shape.setClip(shape.clip);
			}
			return this;	// self
		},
		remove: function(shape, silently){
			// summary:
			//		remove a shape from a group/surface
			// shape: dojox/gfx/shape.Shape
			//		an VML shape object
			// silently: Boolean?
			//		if true, regenerate a picture
			if(this == shape.getParent()){
				if(this.rawNode == shape.rawNode.parentNode){
					this.rawNode.removeChild(shape.rawNode);
				}
				if(this.fragment && this.fragment == shape.rawNode.parentNode){
					this.fragment.removeChild(shape.rawNode);
				}
				// remove clip node from parent 
				shape._removeClipNode();
				C.remove.apply(this, arguments);
			}
			return this;	// self
		},
		clear: function(){
			// summary:
			//		removes all shapes from a group/surface
			var r = this.rawNode;
			while(r.lastChild){
				r.removeChild(r.lastChild);
			}
			var defNode = this.defNode;
			if(defNode){
				while(defNode.lastChild){
					defNode.removeChild(defNode.lastChild);
				}
				r.appendChild(defNode);
			}
			return C.clear.apply(this, arguments);
		},
		getBoundingBox: C.getBoundingBox,
		_moveChildToFront: C._moveChildToFront,
		_moveChildToBack:  C._moveChildToBack
	};

	var Creator = svg.Creator = {
		// summary:
		//		SVG shape creators
		createObject: function(shapeType, rawShape){
			// summary:
			//		creates an instance of the passed shapeType class
			// shapeType: Function
			//		a class constructor to create an instance of
			// rawShape: Object
			//		properties to be passed in to the classes "setShape" method
			if(!this.rawNode){ return null; }
			var shape = new shapeType(),
				node = _createElementNS(svg.xmlns.svg, shapeType.nodeType);

			shape.setRawNode(node);
			shape.setShape(rawShape);
			// rawNode.appendChild() will be done inside this.add(shape) below
			this.add(shape);
			return shape;	// dojox/gfx/shape.Shape
		}
	};

	lang.extend(svg.Text, Font);
	lang.extend(svg.TextPath, Font);

	lang.extend(svg.Group, Container);
	lang.extend(svg.Group, gs.Creator);
	lang.extend(svg.Group, Creator);

	lang.extend(svg.Surface, Container);
	lang.extend(svg.Surface, gs.Creator);
	lang.extend(svg.Surface, Creator);

	// Mouse/Touch event
	svg.fixTarget = function(event, gfxElement) {
		// summary:
		//		Adds the gfxElement to event.gfxTarget if none exists. This new
		//		property will carry the GFX element associated with this event.
		// event: Object
		//		The current input event (MouseEvent or TouchEvent)
		// gfxElement: Object
		//		The GFX target element
		if (!event.gfxTarget) {
			if (safMobile && event.target.wholeText) {
				// Workaround iOS bug when touching text nodes
				event.gfxTarget = event.target.parentElement.__gfxObject__;
			} else {
				event.gfxTarget = event.target.__gfxObject__;
			}
		}
		return true;
	};

	// some specific override for svgweb + flash
	if(svg.useSvgWeb){
		// override createSurface()
		svg.createSurface = function(parentNode, width, height){
			var s = new svg.Surface();

			// ensure width / height
			if(!width || !height){
				var pos = domGeom.position(parentNode);
				width  = width  || pos.w;
				height = height || pos.h;
			}

			// ensure id
			parentNode = dom.byId(parentNode);
			var id = parentNode.id ? parentNode.id+'_svgweb' : g._base._getUniqueId();

			// create dynamic svg root
			var mockSvg = _createElementNS(svg.xmlns.svg, 'svg');
			mockSvg.id = id;
			mockSvg.setAttribute('width', width);
			mockSvg.setAttribute('height', height);
			svgweb.appendChild(mockSvg, parentNode);

			// notice: any call to the raw node before flash init will fail.
			mockSvg.addEventListener('SVGLoad', function(){
				// become loaded
				s.rawNode = this;
				s.isLoaded = true;

				// init defs
				var defNode = _createElementNS(svg.xmlns.svg, "defs");
				s.rawNode.appendChild(defNode);
				s.defNode = defNode;

				// notify application
				if (s.onLoad)
					s.onLoad(s);
			}, false);

			// flash not loaded yet
			s.isLoaded = false;
			return s;
		};

		// override Surface.destroy()
		svg.Surface.extend({
			destroy: function(){
				var mockSvg = this.rawNode;
				svgweb.removeChild(mockSvg, mockSvg.parentNode);
			}
		});

		// override connect() & disconnect() for Shape & Surface event processing
		var _eventsProcessing = {
			connect: function(name, object, method){
				// connect events using the mock addEventListener() provided by svgweb
				if (name.substring(0, 2)==='on') { name = name.substring(2); }
				if (arguments.length == 2) {
					method = object;
				} else {
					method = lang.hitch(object, method);
				}
				this.getEventSource().addEventListener(name, method, false);
				return [this, name, method];
			},
			disconnect: function(token){
				// disconnect events using the mock removeEventListener() provided by svgweb
				this.getEventSource().removeEventListener(token[1], token[2], false);
				delete token[0];
			}
		};

		lang.extend(svg.Shape, _eventsProcessing);
		lang.extend(svg.Surface, _eventsProcessing);
	}

	return svg;
});

},
'esri/dijit/Attribution':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/connect", "dojo/_base/kernel", "dojo/has", "dojo/query", "dojo/dom", "dojo/dom-attr", "dojo/dom-construct", "dojo/dom-style", "dojo/dom-class", "dojo/dom-geometry", "../kernel", "../lang", "../SpatialReference", "../geometry/webMercatorUtils", "../geometry/Extent"], function(w, l, h, q, x, C, D, y, s, t, r, k, u, E, v, z, A, B) {
    return w(null, {
        declaredClass: "esri.dijit.Attribution",
        itemDelimiter: " | ",
        listClass: "esriAttributionList",
        itemClass: "esriAttributionItem",
        lastItemClass: "esriAttributionLastItem",
        delimiterClass: "esriAttributionDelim",
        constructor: function(d, b) {
            try {
                l.mixin(this, d);
                this._attributions = {};
                this._pendingDfds = {};
                this._activeLayers = [];
                this._sharedLayers = [];
                var a = this.domNode = y.byId(b),
                    c = this.map,
                    e = "\x3cspan class\x3d'" + this.listClass + "'\x3e\x3c/span\x3e";
                a && (s.set(a, "innerHTML", e), this.listNode = x.query(".esriAttributionList", a)[0], this.itemNodes = {});
                this._eventConnections = [q.connect(c, "onLayerAdd", this, this._onLayerAdd), q.connect(c, "onLayerRemove", this, this._onLayerRemove), q.connect(c,
                    "onLayerSuspend", this, this._onLayerSuspend), q.connect(c, "onLayerResume", this, this._onLayerResume), q.connect(c, "onExtentChange", this, this._onExtentChange)];
                if (c.loaded) {
                    var f = c.layerIds.concat(c.graphicsLayerIds),
                        g, n, p = f.length;
                    for (n = 0; n < p; n++) g = c.getLayer(f[n]), g.loaded && this._onLayerAdd(g)
                }
            } catch (h) {}
        },
        startup: function() {},
        destroy: function() {
            h.forEach(this._eventConnections, q.disconnect);
            t.destroy(this.listNode);
            this.map = this.domNode = this._eventConnections = this.listNode = this._attributions = this._pendingDfds =
                this.itemNodes = this._activeLayers = this._lastItem = this._sharedLayers = null
        },
        _onLayerAdd: function(d) {
            try {
                var b = this._attributions,
                    a = d.id;
                if (!v.isDefined(b[a]) && d.showAttribution)
                    if (d.hasAttributionData) {
                        var c = d.getAttributionData();
                        this._pendingDfds[a] = 1;
                        b[a] = c;
                        c.addBoth(l.partial(this._onAttributionLoad, this, d))
                    } else b[a] = d.copyright || d.copyrightText || "", b[a] ? (d.suspended || this._activeLayers.push(a), this._createNode(a)) : this._onLayerRemove(d)
            } catch (e) {}
        },
        _onAttributionLoad: function(d, b, a) {
            var c = d._attributions,
                e = d._pendingDfds,
                f = b.id;
            if (e && e[f]) {
                delete e[f];
                if (!a || a instanceof Error) a = "";
                c[f] = a ? d._createIndexByLevel(a, -1 !== b.declaredClass.toLowerCase().indexOf("vetiledlayer")) : b.copyright || b.copyrightText || "";
                c[f] ? (b.suspended || d._activeLayers.push(f), d._createNode(f)) : d._onLayerRemove(b)
            }
        },
        _onLayerRemove: function(d) {
            try {
                var b = d.id,
                    a = this.itemNodes,
                    c, e = -1;
                this._onLayerSuspend(d);
                delete this._attributions[b];
                delete this._pendingDfds[b];
                c = this._getGroupIndex(b); - 1 !== c && (e = h.indexOf(this._sharedLayers[c],
                    b), -1 !== e && (this._sharedLayers[c].splice(e, 1), 1 >= this._sharedLayers[c].length && this._sharedLayers.splice(c, 1)));
                a[b] && -1 === e && t.destroy(a[b]);
                delete a[b];
                this._updateLastItem()
            } catch (f) {}
        },
        _onLayerSuspend: function(d) {
            try {
                var b = d.id;
                if (this._attributions[b]) {
                    var a = h.indexOf(this._activeLayers, b),
                        c = this.itemNodes[b]; - 1 !== a && this._activeLayers.splice(a, 1);
                    c && this._toggleItem(c, !1, this._getGroupIndex(b))
                }
            } catch (e) {}
        },
        _onLayerResume: function(d) {
            try {
                var b = d.id,
                    a = this._attributions[b],
                    c = this.itemNodes[b];
                if (a && (-1 === h.indexOf(this._activeLayers, b) && this._activeLayers.push(b), c)) {
                    var e = l.isString(a) ? a : this._getContributorsList(a, this.map.extent, this.map.getLevel());
                    l.isString(a) || s.set(c, "innerHTML", e ? e + this._getDelimiter() : "");
                    e && this._toggleItem(c, !0, this._getGroupIndex(b))
                }
            } catch (f) {}
        },
        _onExtentChange: function(d, b, a, c) {
            try {
                var e = this._activeLayers,
                    f = this._attributions,
                    g = this.itemNodes,
                    n, p, h, k, q = e.length || 0;
                for (k = 0; k < q; k++)
                    if (p = e[k], h = f[p], (n = g[p]) && !l.isString(h)) {
                        var m = this._getContributorsList(h,
                            d, c ? c.level : -1);
                        s.set(n, "innerHTML", m ? m + this._getDelimiter() : "");
                        this._toggleItem(n, !!m, -1)
                    }
            } catch (r) {}
            this._adjustCursorStyle()
        },
        _createNode: function(d) {
            if (this.domNode) {
                var b = this._checkShareInfo(d),
                    a = b && b.sharedWith,
                    a = a && this.itemNodes[a],
                    c = this.map,
                    e = this._attributions[d],
                    e = l.isString(e) ? e : this._getContributorsList(e, c.extent, c.getLevel()),
                    c = !!e && !c.getLayer(d).suspended;
                a ? (this.itemNodes[d] = a, this._toggleItem(a, c, b.index)) : (d = this.itemNodes[d] = t.create("span", {
                    "class": this.itemClass,
                    innerHTML: e ?
                        e + this._getDelimiter() : "",
                    style: {
                        display: c ? "inline" : "none"
                    }
                }, this.listNode), c && this._setLastItem(d));
                this._adjustCursorStyle()
            }
        },
        _checkShareInfo: function(d) {
            var b = this._attributions,
                a, c, e = -1,
                f = b[d],
                g;
            if (f && l.isString(f)) {
                for (c in b)
                    if (a = b[c], c !== d && a && l.isString(a) && a.length === f.length && a.toLowerCase() === f.toLowerCase()) {
                        g = c;
                        break
                    }
                b = this._sharedLayers;
                a = b.length;
                if (g) {
                    for (c = 0; c < a; c++)
                        if (f = b[c], -1 !== h.indexOf(f, g)) {
                            e = c;
                            f.push(d);
                            break
                        } - 1 === e && (e = b.push([g, d]) - 1)
                }
            }
            return -1 < e ? {
                    index: e,
                    sharedWith: g
                } :
                null
        },
        _getGroupIndex: function(d) {
            var b = this._sharedLayers,
                a, c = b.length,
                e = -1;
            for (a = 0; a < c; a++)
                if (-1 !== h.indexOf(b[a], d)) {
                    e = a;
                    break
                }
            return e
        },
        _getDelimiter: function() {
            var d = this.itemDelimiter;
            return d ? "\x3cspan class\x3d'" + this.delimiterClass + "'\x3e" + d + "\x3c/span\x3e" : ""
        },
        _toggleItem: function(d, b, a) {
            if (-1 < a && !b) {
                a = this._sharedLayers[a];
                var c, e = a.length,
                    f = this._activeLayers;
                for (c = 0; c < e; c++)
                    if (-1 !== h.indexOf(f, a[c])) return
            }
            r.set(d, "display", b ? "inline" : "none");
            this._updateLastItem()
        },
        _updateLastItem: function() {
            var d =
                this.listNode.childNodes,
                b;
            b = d.length;
            var a;
            if (b)
                for (b -= 1; 0 <= b; b--)
                    if (a = d[b], "none" !== r.get(a, "display")) {
                        this._setLastItem(a);
                        break
                    }
            this._adjustCursorStyle()
        },
        _setLastItem: function(d) {
            var b = this.itemClass,
                a = this.lastItemClass;
            this._lastItem && k.replace(this._lastItem, b, a);
            d && (k.replace(d, a, b), this._lastItem = d)
        },
        _createIndexByLevel: function(d, b) {
            var a = d.contributors,
                c, e, f, g, n = a ? a.length : 0,
                p, h, k = new z(4326),
                l = {},
                m;
            for (g = 0; g < n; g++) {
                c = a[g];
                h = (e = c.coverageAreas) ? e.length : 0;
                for (p = 0; p < h; p++) {
                    f = e[p];
                    m = f.bbox;
                    m = {
                        extent: A.geographicToWebMercator(new B(m[1], m[0], m[3], m[2], k)),
                        attribution: c.attribution || "",
                        zoomMin: f.zoomMin - (b && f.zoomMin ? 1 : 0),
                        zoomMax: f.zoomMax - (b && f.zoomMax ? 1 : 0),
                        score: v.isDefined(f.score) ? f.score : 100,
                        objectId: g
                    };
                    for (f = m.zoomMin; f <= m.zoomMax; f++) l[f] = l[f] || [], l[f].push(m)
                }
            }
            return l
        },
        _getContributorsList: function(d, b, a) {
            var c = "";
            if (b && v.isDefined(a) && -1 < a) {
                d = d[a];
                a = b.getCenter().normalize();
                for (var e = d ? d.length : 0, f = [], g = {}, c = 0; c < e; c++) b = d[c], !g[b.objectId] && b.extent.contains(a) && (g[b.objectId] =
                    1, f.push(b));
                f.sort(function(a, b) {
                    return b.score - a.score || a.objectId - b.objectId
                });
                e = f.length;
                for (c = 0; c < e; c++) f[c] = f[c].attribution;
                c = f.join(", ")
            }
            return c
        },
        _adjustCursorStyle: function() {
            var d = u.position(this.listNode.parentNode, !0).h;
            k.contains(this.listNode.parentNode, "esriAttributionOpen") ? (k.remove(this.listNode.parentNode, "esriAttributionOpen"), d > u.position(this.listNode.parentNode, !0).h ? (r.set(this.listNode.parentNode, "cursor", "pointer"), k.add(this.listNode.parentNode, "esriAttributionOpen")) :
                r.set(this.listNode.parentNode, "cursor", "default")) : (k.add(this.listNode.parentNode, "esriAttributionOpen"), d < u.position(this.listNode.parentNode, !0).h ? r.set(this.listNode.parentNode, "cursor", "pointer") : r.set(this.listNode.parentNode, "cursor", "default"), k.remove(this.listNode.parentNode, "esriAttributionOpen"))
        }
    })
});
},
'dojo/query':function(){
define(["./_base/kernel", "./has", "./dom", "./on", "./_base/array", "./_base/lang", "./selector/_loader", "./selector/_loader!default"],
	function(dojo, has, dom, on, array, lang, loader, defaultEngine){

	"use strict";

	has.add("array-extensible", function(){
		// test to see if we can extend an array (not supported in old IE)
		return lang.delegate([], {length: 1}).length == 1 && !has("bug-for-in-skips-shadowed");
	});
	
	var ap = Array.prototype, aps = ap.slice, apc = ap.concat, forEach = array.forEach;

	var tnl = function(/*Array*/ a, /*dojo/NodeList?*/ parent, /*Function?*/ NodeListCtor){
		// summary:
		//		decorate an array to make it look like a `dojo/NodeList`.
		// a:
		//		Array of nodes to decorate.
		// parent:
		//		An optional parent NodeList that generated the current
		//		list of nodes. Used to call _stash() so the parent NodeList
		//		can be accessed via end() later.
		// NodeListCtor:
		//		An optional constructor function to use for any
		//		new NodeList calls. This allows a certain chain of
		//		NodeList calls to use a different object than dojo/NodeList.
		var nodeList = new (NodeListCtor || this._NodeListCtor || nl)(a);
		return parent ? nodeList._stash(parent) : nodeList;
	};

	var loopBody = function(f, a, o){
		a = [0].concat(aps.call(a, 0));
		o = o || dojo.global;
		return function(node){
			a[0] = node;
			return f.apply(o, a);
		};
	};

	// adapters

	var adaptAsForEach = function(f, o){
		// summary:
		//		adapts a single node function to be used in the forEach-type
		//		actions. The initial object is returned from the specialized
		//		function.
		// f: Function
		//		a function to adapt
		// o: Object?
		//		an optional context for f
		return function(){
			this.forEach(loopBody(f, arguments, o));
			return this;	// Object
		};
	};

	var adaptAsMap = function(f, o){
		// summary:
		//		adapts a single node function to be used in the map-type
		//		actions. The return is a new array of values, as via `dojo/_base/array.map`
		// f: Function
		//		a function to adapt
		// o: Object?
		//		an optional context for f
		return function(){
			return this.map(loopBody(f, arguments, o));
		};
	};

	var adaptAsFilter = function(f, o){
		// summary:
		//		adapts a single node function to be used in the filter-type actions
		// f: Function
		//		a function to adapt
		// o: Object?
		//		an optional context for f
		return function(){
			return this.filter(loopBody(f, arguments, o));
		};
	};

	var adaptWithCondition = function(f, g, o){
		// summary:
		//		adapts a single node function to be used in the map-type
		//		actions, behaves like forEach() or map() depending on arguments
		// f: Function
		//		a function to adapt
		// g: Function
		//		a condition function, if true runs as map(), otherwise runs as forEach()
		// o: Object?
		//		an optional context for f and g
		return function(){
			var a = arguments, body = loopBody(f, a, o);
			if(g.call(o || dojo.global, a)){
				return this.map(body);	// self
			}
			this.forEach(body);
			return this;	// self
		};
	};

	var NodeList = function(array){
		// summary:
		//		Array-like object which adds syntactic
		//		sugar for chaining, common iteration operations, animation, and
		//		node manipulation. NodeLists are most often returned as the
		//		result of dojo/query() calls.
		// description:
		//		NodeList instances provide many utilities that reflect
		//		core Dojo APIs for Array iteration and manipulation, DOM
		//		manipulation, and event handling. Instead of needing to dig up
		//		functions in the dojo package, NodeLists generally make the
		//		full power of Dojo available for DOM manipulation tasks in a
		//		simple, chainable way.
		// example:
		//		create a node list from a node
		//		|	require(["dojo/query", "dojo/dom"
		//		|	], function(query, dom){
		//		|		query.NodeList(dom.byId("foo"));
		//		|	});
		// example:
		//		get a NodeList from a CSS query and iterate on it
		//		|	require(["dojo/on", "dojo/dom"
		//		|	], function(on, dom){
		//		|		var l = query(".thinger");
		//		|		l.forEach(function(node, index, nodeList){
		//		|			console.log(index, node.innerHTML);
		//		|		});
		//		|	});
		// example:
		//		use native and Dojo-provided array methods to manipulate a
		//		NodeList without needing to use dojo.* functions explicitly:
		//		|	require(["dojo/query", "dojo/dom-construct", "dojo/dom"
		//		|	], function(query, domConstruct, dom){
		//		|		var l = query(".thinger");
		//		|		// since NodeLists are real arrays, they have a length
		//		|		// property that is both readable and writable and
		//		|		// push/pop/shift/unshift methods
		//		|		console.log(l.length);
		//		|		l.push(domConstruct.create("span"));
		//		|
		//		|		// dojo's normalized array methods work too:
		//		|		console.log( l.indexOf(dom.byId("foo")) );
		//		|		// ...including the special "function as string" shorthand
		//		|		console.log( l.every("item.nodeType == 1") );
		//		|
		//		|		// NodeLists can be [..] indexed, or you can use the at()
		//		|		// function to get specific items wrapped in a new NodeList:
		//		|		var node = l[3]; // the 4th element
		//		|		var newList = l.at(1, 3); // the 2nd and 4th elements
		//		|	});
		// example:
		//		chainability is a key advantage of NodeLists:
		//		|	require(["dojo/query", "dojo/NodeList-dom"
		//		|	], function(query){
		//		|		query(".thinger")
		//		|			.onclick(function(e){ /* ... */ })
		//		|			.at(1, 3, 8) // get a subset
		//		|				.style("padding", "5px")
		//		|				.forEach(console.log);
		//		|	});

		var isNew = this instanceof nl && has("array-extensible");
		if(typeof array == "number"){
			array = Array(array);
		}
		var nodeArray = (array && "length" in array) ? array : arguments;
		if(isNew || !nodeArray.sort){
			// make sure it's a real array before we pass it on to be wrapped 
			var target = isNew ? this : [],
				l = target.length = nodeArray.length;
			for(var i = 0; i < l; i++){
				target[i] = nodeArray[i];
			}
			if(isNew){
				// called with new operator, this means we are going to use this instance and push
				// the nodes on to it. This is usually much faster since the NodeList properties
				//	don't need to be copied (unless the list of nodes is extremely large).
				return target;
			}
			nodeArray = target;
		}
		// called without new operator, use a real array and copy prototype properties,
		// this is slower and exists for back-compat. Should be removed in 2.0.
		lang._mixin(nodeArray, nlp);
		nodeArray._NodeListCtor = function(array){
			// call without new operator to preserve back-compat behavior
			return nl(array);
		};
		return nodeArray;
	};
	
	var nl = NodeList, nlp = nl.prototype = 
		has("array-extensible") ? [] : {};// extend an array if it is extensible

	// expose adapters and the wrapper as private functions

	nl._wrap = nlp._wrap = tnl;
	nl._adaptAsMap = adaptAsMap;
	nl._adaptAsForEach = adaptAsForEach;
	nl._adaptAsFilter  = adaptAsFilter;
	nl._adaptWithCondition = adaptWithCondition;

	// mass assignment

	// add array redirectors
	forEach(["slice", "splice"], function(name){
		var f = ap[name];
		//Use a copy of the this array via this.slice() to allow .end() to work right in the splice case.
		// CANNOT apply ._stash()/end() to splice since it currently modifies
		// the existing this array -- it would break backward compatibility if we copy the array before
		// the splice so that we can use .end(). So only doing the stash option to this._wrap for slice.
		nlp[name] = function(){ return this._wrap(f.apply(this, arguments), name == "slice" ? this : null); };
	});
	// concat should be here but some browsers with native NodeList have problems with it

	// add array.js redirectors
	forEach(["indexOf", "lastIndexOf", "every", "some"], function(name){
		var f = array[name];
		nlp[name] = function(){ return f.apply(dojo, [this].concat(aps.call(arguments, 0))); };
	});

	lang.extend(NodeList, {
		// copy the constructors
		constructor: nl,
		_NodeListCtor: nl,
		toString: function(){
			// Array.prototype.toString can't be applied to objects, so we use join
			return this.join(",");
		},
		_stash: function(parent){
			// summary:
			//		private function to hold to a parent NodeList. end() to return the parent NodeList.
			//
			// example:
			//		How to make a `dojo/NodeList` method that only returns the third node in
			//		the dojo/NodeList but allows access to the original NodeList by using this._stash:
			//	|	require(["dojo/query", "dojo/_base/lang", "dojo/NodeList", "dojo/NodeList-dom"
			//	|	], function(query, lang){
			//	|		lang.extend(NodeList, {
			//	|			third: function(){
			//	|				var newNodeList = NodeList(this[2]);
			//	|				return newNodeList._stash(this);
			//	|			}
			//	|		});
			//	|		// then see how _stash applies a sub-list, to be .end()'ed out of
			//	|		query(".foo")
			//	|			.third()
			//	|				.addClass("thirdFoo")
			//	|			.end()
			//	|			// access to the orig .foo list
			//	|			.removeClass("foo")
			//	|	});
			//
			this._parent = parent;
			return this; // dojo/NodeList
		},

		on: function(eventName, listener){
			// summary:
			//		Listen for events on the nodes in the NodeList. Basic usage is:
			//
			// example:
			//		|	require(["dojo/query"
			//		|	], function(query){
			//		|		query(".my-class").on("click", listener);
			//			This supports event delegation by using selectors as the first argument with the event names as
			//			pseudo selectors. For example:
			//		| 		query("#my-list").on("li:click", listener);
			//			This will listen for click events within `<li>` elements that are inside the `#my-list` element.
			//			Because on supports CSS selector syntax, we can use comma-delimited events as well:
			//		| 		query("#my-list").on("li button:mouseover, li:click", listener);
			//		|	});
			var handles = this.map(function(node){
				return on(node, eventName, listener); // TODO: apply to the NodeList so the same selector engine is used for matches
			});
			handles.remove = function(){
				for(var i = 0; i < handles.length; i++){
					handles[i].remove();
				}
			};
			return handles;
		},

		end: function(){
			// summary:
			//		Ends use of the current `NodeList` by returning the previous NodeList
			//		that generated the current NodeList.
			// description:
			//		Returns the `NodeList` that generated the current `NodeList`. If there
			//		is no parent NodeList, an empty NodeList is returned.
			// example:
			//	|	require(["dojo/query", "dojo/NodeList-dom"
			//	|	], function(query){
			//	|		query("a")
			//	|			.filter(".disabled")
			//	|				// operate on the anchors that only have a disabled class
			//	|				.style("color", "grey")
			//	|			.end()
			//	|			// jump back to the list of anchors
			//	|			.style(...)
			//	|	});
			//
			if(this._parent){
				return this._parent;
			}else{
				//Just return empty list.
				return new this._NodeListCtor(0);
			}
		},

		// http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array#Methods

		// FIXME: handle return values for #3244
		//		http://trac.dojotoolkit.org/ticket/3244

		// FIXME:
		//		need to wrap or implement:
		//			join (perhaps w/ innerHTML/outerHTML overload for toString() of items?)
		//			reduce
		//			reduceRight

		/*=====
		slice: function(begin, end){
			// summary:
			//		Returns a new NodeList, maintaining this one in place
			// description:
			//		This method behaves exactly like the Array.slice method
			//		with the caveat that it returns a `dojo/NodeList` and not a
			//		raw Array. For more details, see Mozilla's [slice
			//		documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/slice)
			// begin: Integer
			//		Can be a positive or negative integer, with positive
			//		integers noting the offset to begin at, and negative
			//		integers denoting an offset from the end (i.e., to the left
			//		of the end)
			// end: Integer?
			//		Optional parameter to describe what position relative to
			//		the NodeList's zero index to end the slice at. Like begin,
			//		can be positive or negative.
			return this._wrap(a.slice.apply(this, arguments));
		},

		splice: function(index, howmany, item){
			// summary:
			//		Returns a new NodeList, manipulating this NodeList based on
			//		the arguments passed, potentially splicing in new elements
			//		at an offset, optionally deleting elements
			// description:
			//		This method behaves exactly like the Array.splice method
			//		with the caveat that it returns a `dojo/NodeList` and not a
			//		raw Array. For more details, see Mozilla's [splice
			//		documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice)
			//		For backwards compatibility, calling .end() on the spliced NodeList
			//		does not return the original NodeList -- splice alters the NodeList in place.
			// index: Integer
			//		begin can be a positive or negative integer, with positive
			//		integers noting the offset to begin at, and negative
			//		integers denoting an offset from the end (i.e., to the left
			//		of the end)
			// howmany: Integer?
			//		Optional parameter to describe what position relative to
			//		the NodeList's zero index to end the slice at. Like begin,
			//		can be positive or negative.
			// item: Object...?
			//		Any number of optional parameters may be passed in to be
			//		spliced into the NodeList
			return this._wrap(a.splice.apply(this, arguments));	// dojo/NodeList
		},

		indexOf: function(value, fromIndex){
			// summary:
			//		see `dojo/_base/array.indexOf()`. The primary difference is that the acted-on
			//		array is implicitly this NodeList
			// value: Object
			//		The value to search for.
			// fromIndex: Integer?
			//		The location to start searching from. Optional. Defaults to 0.
			// description:
			//		For more details on the behavior of indexOf, see Mozilla's
			//		[indexOf
			//		docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf)
			// returns:
			//		Positive Integer or 0 for a match, -1 of not found.
			return d.indexOf(this, value, fromIndex); // Integer
		},

		lastIndexOf: function(value, fromIndex){
			// summary:
			//		see `dojo/_base/array.lastIndexOf()`. The primary difference is that the
			//		acted-on array is implicitly this NodeList
			// description:
			//		For more details on the behavior of lastIndexOf, see
			//		Mozilla's [lastIndexOf
			//		docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf)
			// value: Object
			//		The value to search for.
			// fromIndex: Integer?
			//		The location to start searching from. Optional. Defaults to 0.
			// returns:
			//		Positive Integer or 0 for a match, -1 of not found.
			return d.lastIndexOf(this, value, fromIndex); // Integer
		},

		every: function(callback, thisObject){
			// summary:
			//		see `dojo/_base/array.every()` and the [Array.every
			//		docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every).
			//		Takes the same structure of arguments and returns as
			//		dojo/_base/array.every() with the caveat that the passed array is
			//		implicitly this NodeList
			// callback: Function
			//		the callback
			// thisObject: Object?
			//		the context
			return d.every(this, callback, thisObject); // Boolean
		},

		some: function(callback, thisObject){
			// summary:
			//		Takes the same structure of arguments and returns as
			//		`dojo/_base/array.some()` with the caveat that the passed array is
			//		implicitly this NodeList.  See `dojo/_base/array.some()` and Mozilla's
			//		[Array.some
			//		documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some).
			// callback: Function
			//		the callback
			// thisObject: Object?
			//		the context
			return d.some(this, callback, thisObject); // Boolean
		},
		=====*/

		concat: function(item){
			// summary:
			//		Returns a new NodeList comprised of items in this NodeList
			//		as well as items passed in as parameters
			// description:
			//		This method behaves exactly like the Array.concat method
			//		with the caveat that it returns a `NodeList` and not a
			//		raw Array. For more details, see the [Array.concat
			//		docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/concat)
			// item: Object?
			//		Any number of optional parameters may be passed in to be
			//		spliced into the NodeList

			//return this._wrap(apc.apply(this, arguments));
			// the line above won't work for the native NodeList, or for Dojo NodeLists either :-(

			// implementation notes:
			// Array.concat() doesn't recognize native NodeLists or Dojo NodeLists
			// as arrays, and so does not inline them into a unioned array, but
			// appends them as single entities. Both the original NodeList and the
			// items passed in as parameters must be converted to raw Arrays
			// and then the concatenation result may be re-_wrap()ed as a Dojo NodeList.

			var t = aps.call(this, 0),
				m = array.map(arguments, function(a){
					return aps.call(a, 0);
				});
			return this._wrap(apc.apply(t, m), this);	// dojo/NodeList
		},

		map: function(/*Function*/ func, /*Function?*/ obj){
			// summary:
			//		see `dojo/_base/array.map()`. The primary difference is that the acted-on
			//		array is implicitly this NodeList and the return is a
			//		NodeList (a subclass of Array)
			return this._wrap(array.map(this, func, obj), this); // dojo/NodeList
		},

		forEach: function(callback, thisObj){
			// summary:
			//		see `dojo/_base/array.forEach()`. The primary difference is that the acted-on
			//		array is implicitly this NodeList. If you want the option to break out
			//		of the forEach loop, use every() or some() instead.
			forEach(this, callback, thisObj);
			// non-standard return to allow easier chaining
			return this; // dojo/NodeList
		},
		filter: function(/*String|Function*/ filter){
			// summary:
			//		"masks" the built-in javascript filter() method (supported
			//		in Dojo via `dojo/_base/array.filter`) to support passing a simple
			//		string filter in addition to supporting filtering function
			//		objects.
			// filter:
			//		If a string, a CSS rule like ".thinger" or "div > span".
			// example:
			//		"regular" JS filter syntax as exposed in `dojo/_base/array.filter`:
			//		|	require(["dojo/query", "dojo/NodeList-dom"
			//		|	], function(query){
			//		|		query("*").filter(function(item){
			//		|			// highlight every paragraph
			//		|			return (item.nodeName == "p");
			//		|		}).style("backgroundColor", "yellow");
			//		|	});
			// example:
			//		the same filtering using a CSS selector
			//		|	require(["dojo/query", "dojo/NodeList-dom"
			//		|	], function(query){
			//		|		query("*").filter("p").styles("backgroundColor", "yellow");
			//		|	});

			var a = arguments, items = this, start = 0;
			if(typeof filter == "string"){ // inline'd type check
				items = query._filterResult(this, a[0]);
				if(a.length == 1){
					// if we only got a string query, pass back the filtered results
					return items._stash(this); // dojo/NodeList
				}
				// if we got a callback, run it over the filtered items
				start = 1;
			}
			return this._wrap(array.filter(items, a[start], a[start + 1]), this);	// dojo/NodeList
		},
		instantiate: function(/*String|Object*/ declaredClass, /*Object?*/ properties){
			// summary:
			//		Create a new instance of a specified class, using the
			//		specified properties and each node in the NodeList as a
			//		srcNodeRef.
			// example:
			//		Grabs all buttons in the page and converts them to dijit/form/Button's.
			//	|	var buttons = query("button").instantiate(Button, {showLabel: true});
			var c = lang.isFunction(declaredClass) ? declaredClass : lang.getObject(declaredClass);
			properties = properties || {};
			return this.forEach(function(node){
				new c(properties, node);
			});	// dojo/NodeList
		},
		at: function(/*===== index =====*/){
			// summary:
			//		Returns a new NodeList comprised of items in this NodeList
			//		at the given index or indices.
			//
			// index: Integer...
			//		One or more 0-based indices of items in the current
			//		NodeList. A negative index will start at the end of the
			//		list and go backwards.
			//
			// example:
			//	Shorten the list to the first, second, and third elements
			//	|	require(["dojo/query"
			//	|	], function(query){
			//	|		query("a").at(0, 1, 2).forEach(fn);
			//	|	});
			//
			// example:
			//	Retrieve the first and last elements of a unordered list:
			//	|	require(["dojo/query"
			//	|	], function(query){
			//	|		query("ul > li").at(0, -1).forEach(cb);
			//	|	});
			//
			// example:
			//	Do something for the first element only, but end() out back to
			//	the original list and continue chaining:
			//	|	require(["dojo/query"
			//	|	], function(query){
			//	|		query("a").at(0).onclick(fn).end().forEach(function(n){
			//	|			console.log(n); // all anchors on the page.
			//	|	})
			//	|	});

			var t = new this._NodeListCtor(0);
			forEach(arguments, function(i){
				if(i < 0){ i = this.length + i; }
				if(this[i]){ t.push(this[i]); }
			}, this);
			return t._stash(this); // dojo/NodeList
		}
	});

	function queryForEngine(engine, NodeList){
		var query = function(/*String*/ query, /*String|DOMNode?*/ root){
			// summary:
			//		Returns nodes which match the given CSS selector, searching the
			//		entire document by default but optionally taking a node to scope
			//		the search by. Returns an instance of NodeList.
			if(typeof root == "string"){
				root = dom.byId(root);
				if(!root){
					return new NodeList([]);
				}
			}
			var results = typeof query == "string" ? engine(query, root) : query ? (query.end && query.on) ? query : [query] : [];
			if(results.end && results.on){
				// already wrapped
				return results;
			}
			return new NodeList(results);
		};
		query.matches = engine.match || function(node, selector, root){
			// summary:
			//		Test to see if a node matches a selector
			return query.filter([node], selector, root).length > 0;
		};
		// the engine provides a filtering function, use it to for matching
		query.filter = engine.filter || function(nodes, selector, root){
			// summary:
			//		Filters an array of nodes. Note that this does not guarantee to return a NodeList, just an array.
			return query(selector, root).filter(function(node){
				return array.indexOf(nodes, node) > -1;
			});
		};
		if(typeof engine != "function"){
			var search = engine.search;
			engine = function(selector, root){
				// Slick does it backwards (or everyone else does it backwards, probably the latter)
				return search(root || document, selector);
			};
		}
		return query;
	}
	var query = queryForEngine(defaultEngine, NodeList);
	/*=====
	query = function(selector, context){
		// summary:
		//		This modules provides DOM querying functionality. The module export is a function
		//		that can be used to query for DOM nodes by CSS selector and returns a NodeList
		//		representing the matching nodes.
		// selector: String
		//		A CSS selector to search for.
		// context: String|DomNode?
		//		An optional context to limit the searching scope. Only nodes under `context` will be
		//		scanned.
		// example:
		//		add an onclick handler to every submit button in the document
		//		which causes the form to be sent via Ajax instead:
		//	|	require(["dojo/query", "dojo/request", "dojo/dom-form", "dojo/dom-construct", "dojo/dom-style"
		//	|	], function(query, request, domForm, domConstruct, domStyle){
		//	|		query("input[type='submit']").on("click", function(e){
		//	|			e.preventDefault(); // prevent sending the form
		//	|			var btn = e.target;
		//	|			request.post("http://example.com/", {
		//	|				data: domForm.toObject(btn.form)
		//	|			}).then(function(response){
		//	|				// replace the form with the response
		//	|				domConstruct.create(div, {innerHTML: response}, btn.form, "after");
		//	|				domStyle.set(btn.form, "display", "none");
		//	|			});
		//	|		});
		//	|	});
		//
		// description:
		//		dojo/query is responsible for loading the appropriate query engine and wrapping
		//		its results with a `NodeList`. You can use dojo/query with a specific selector engine
		//		by using it as a plugin. For example, if you installed the sizzle package, you could
		//		use it as the selector engine with:
		//		|	require(["dojo/query!sizzle"], function(query){
		//		|		query("div")...
		//
		//		The id after the ! can be a module id of the selector engine or one of the following values:
		//
		//		- acme: This is the default engine used by Dojo base, and will ensure that the full
		//		Acme engine is always loaded.
		//
		//		- css2: If the browser has a native selector engine, this will be used, otherwise a
		//		very minimal lightweight selector engine will be loaded that can do simple CSS2 selectors
		//		(by #id, .class, tag, and [name=value] attributes, with standard child or descendant (>)
		//		operators) and nothing more.
		//
		//		- css2.1: If the browser has a native selector engine, this will be used, otherwise the
		//		full Acme engine will be loaded.
		//
		//		- css3: If the browser has a native selector engine with support for CSS3 pseudo
		//		selectors (most modern browsers except IE8), this will be used, otherwise the
		//		full Acme engine will be loaded.
		//
		//		- Or the module id of a selector engine can be used to explicitly choose the selector engine
		//
		//		For example, if you are using CSS3 pseudo selectors in module, you can specify that
		//		you will need support them with:
		//		|	require(["dojo/query!css3"], function(query){
		//		|		query('#t > h3:nth-child(odd)')...
		//
		//		You can also choose the selector engine/load configuration by setting the query-selector:
		//		For example:
		//		|	<script data-dojo-config="query-selector:'css3'" src="dojo.js"></script>
		//
		return new NodeList(); // dojo/NodeList
	 };
	 =====*/

	// the query that is returned from this module is slightly different than dojo.query,
	// because dojo.query has to maintain backwards compatibility with returning a
	// true array which has performance problems. The query returned from the module
	// does not use true arrays, but rather inherits from Array, making it much faster to
	// instantiate.
	dojo.query = queryForEngine(defaultEngine, function(array){
		// call it without the new operator to invoke the back-compat behavior that returns a true array
		return NodeList(array);	// dojo/NodeList
	});

	query.load = function(id, parentRequire, loaded){
		// summary:
		//		can be used as AMD plugin to conditionally load new query engine
		// example:
		//	|	require(["dojo/query!custom"], function(qsa){
		//	|		// loaded selector/custom.js as engine
		//	|		qsa("#foobar").forEach(...);
		//	|	});
		loader.load(id, parentRequire, function(engine){
			loaded(queryForEngine(engine, NodeList));
		});
	};

	dojo._filterQueryResult = query._filterResult = function(nodes, selector, root){
		return new NodeList(query.filter(nodes, selector, root));
	};
	dojo.NodeList = query.NodeList = NodeList;
	return query;
});

},
'dojo/selector/_loader':function(){
define(["../has", "require"],
		function(has, require){

"use strict";
var testDiv = document.createElement("div");
has.add("dom-qsa2.1", !!testDiv.querySelectorAll);
has.add("dom-qsa3", function(){
			// test to see if we have a reasonable native selector engine available
			try{
				testDiv.innerHTML = "<p class='TEST'></p>"; // test kind of from sizzle
				// Safari can't handle uppercase or unicode characters when
				// in quirks mode, IE8 can't handle pseudos like :empty
				return testDiv.querySelectorAll(".TEST:empty").length == 1;
			}catch(e){}
		});
var fullEngine;
var acme = "./acme", lite = "./lite";
return {
	// summary:
	//		This module handles loading the appropriate selector engine for the given browser

	load: function(id, parentRequire, loaded, config){
		var req = require;
		// here we implement the default logic for choosing a selector engine
		id = id == "default" ? has("config-selectorEngine") || "css3" : id;
		id = id == "css2" || id == "lite" ? lite :
				id == "css2.1" ? has("dom-qsa2.1") ? lite : acme :
				id == "css3" ? has("dom-qsa3") ? lite : acme :
				id == "acme" ? acme : (req = parentRequire) && id;
		if(id.charAt(id.length-1) == '?'){
			id = id.substring(0,id.length - 1);
			var optionalLoad = true;
		}
		// the query engine is optional, only load it if a native one is not available or existing one has not been loaded
		if(optionalLoad && (has("dom-compliant-qsa") || fullEngine)){
			return loaded(fullEngine);
		}
		// load the referenced selector engine
		req([id], function(engine){
			if(id != "./lite"){
				fullEngine = engine;
			}
			loaded(engine);
		});
	}
};
});

},
'dojo/selector/lite':function(){
define(["../has", "../_base/kernel"], function(has, dojo){
"use strict";

var testDiv = document.createElement("div");
var matchesSelector = testDiv.matches || testDiv.webkitMatchesSelector || testDiv.mozMatchesSelector || testDiv.msMatchesSelector || testDiv.oMatchesSelector;
var querySelectorAll = testDiv.querySelectorAll;
var unionSplit = /([^\s,](?:"(?:\\.|[^"])+"|'(?:\\.|[^'])+'|[^,])*)/g;
has.add("dom-matches-selector", !!matchesSelector);
has.add("dom-qsa", !!querySelectorAll); 

// this is a simple query engine. It has handles basic selectors, and for simple
// common selectors is extremely fast
var liteEngine = function(selector, root){
	// summary:
	//		A small lightweight query selector engine that implements CSS2.1 selectors
	//		minus pseudo-classes and the sibling combinator, plus CSS3 attribute selectors

	if(combine && selector.indexOf(',') > -1){
		return combine(selector, root);
	}
	// use the root's ownerDocument if provided, otherwise try to use dojo.doc. Note 
	// that we don't use dojo/_base/window's doc to reduce dependencies, and 
	// fallback to plain document if dojo.doc hasn't been defined (by dojo/_base/window).
	// presumably we will have a better way to do this in 2.0 
	var doc = root ? root.ownerDocument || root : dojo.doc || document, 
		match = (querySelectorAll ? 
			/^([\w]*)#([\w\-]+$)|^(\.)([\w\-\*]+$)|^(\w+$)/ : // this one only matches on simple queries where we can beat qSA with specific methods
			/^([\w]*)#([\w\-]+)(?:\s+(.*))?$|(?:^|(>|.+\s+))([\w\-\*]+)(\S*$)/) // this one matches parts of the query that we can use to speed up manual filtering
			.exec(selector);
	root = root || doc;
	if(match){
		// fast path regardless of whether or not querySelectorAll exists
		if(match[2]){
			// an #id
			// use dojo.byId if available as it fixes the id retrieval in IE, note that we can't use the dojo namespace in 2.0, but if there is a conditional module use, we will use that
			var found = dojo.byId ? dojo.byId(match[2], doc) : doc.getElementById(match[2]);
			if(!found || (match[1] && match[1] != found.tagName.toLowerCase())){
				// if there is a tag qualifer and it doesn't match, no matches
				return [];
			}
			if(root != doc){
				// there is a root element, make sure we are a child of it
				var parent = found;
				while(parent != root){
					parent = parent.parentNode;
					if(!parent){
						return [];
					}
				}
			}
			return match[3] ?
					liteEngine(match[3], found) 
					: [found];
		}
		if(match[3] && root.getElementsByClassName){
			// a .class
			return root.getElementsByClassName(match[4]);
		}
		var found;
		if(match[5]){
			// a tag
			found = root.getElementsByTagName(match[5]);
			if(match[4] || match[6]){
				selector = (match[4] || "") + match[6];
			}else{
				// that was the entirety of the query, return results
				return found;
			}
		}
	}
	if(querySelectorAll){
		// qSA works strangely on Element-rooted queries
		// We can work around this by specifying an extra ID on the root
		// and working up from there (Thanks to Andrew Dupont for the technique)
		// IE 8 doesn't work on object elements
		if (root.nodeType === 1 && root.nodeName.toLowerCase() !== "object"){				
			return useRoot(root, selector, root.querySelectorAll);
		}else{
			// we can use the native qSA
			return root.querySelectorAll(selector);
		}
	}else if(!found){
		// search all children and then filter
		found = root.getElementsByTagName("*");
	}
	// now we filter the nodes that were found using the matchesSelector
	var results = [];
	for(var i = 0, l = found.length; i < l; i++){
		var node = found[i];
		if(node.nodeType == 1 && jsMatchesSelector(node, selector, root)){
			// keep the nodes that match the selector
			results.push(node);
		}
	}
	return results;
};
var useRoot = function(context, query, method){
	// this function creates a temporary id so we can do rooted qSA queries, this is taken from sizzle
	var oldContext = context,
		old = context.getAttribute("id"),
		nid = old || "__dojo__",
		hasParent = context.parentNode,
		relativeHierarchySelector = /^\s*[+~]/.test(query);

	if(relativeHierarchySelector && !hasParent){
		return [];
	}
	if(!old){
		context.setAttribute("id", nid);
	}else{
		nid = nid.replace(/'/g, "\\$&");
	}
	if(relativeHierarchySelector && hasParent){
		context = context.parentNode;
	}
	var selectors = query.match(unionSplit);
	for(var i = 0; i < selectors.length; i++){
		selectors[i] = "[id='" + nid + "'] " + selectors[i];
	}
	query = selectors.join(",");

	try{
		return method.call(context, query);
	}finally{
		if(!old){
			oldContext.removeAttribute("id");
		}
	}
};

if(!has("dom-matches-selector")){
	var jsMatchesSelector = (function(){
		// a JS implementation of CSS selector matching, first we start with the various handlers
		var caseFix = testDiv.tagName == "div" ? "toLowerCase" : "toUpperCase";
		var selectorTypes = {
			"": function(tagName){
				tagName = tagName[caseFix]();
				return function(node){
					return node.tagName == tagName;
				};
			},
			".": function(className){
				var classNameSpaced = ' ' + className + ' ';
				return function(node){
					return node.className.indexOf(className) > -1 && (' ' + node.className + ' ').indexOf(classNameSpaced) > -1;
				};
			},
			"#": function(id){
				return function(node){
					return node.id == id;
				};
			}
		};
		var attrComparators = {
			"^=": function(attrValue, value){
				return attrValue.indexOf(value) == 0;
			},
			"*=": function(attrValue, value){
				return attrValue.indexOf(value) > -1;
			},
			"$=": function(attrValue, value){
				return attrValue.substring(attrValue.length - value.length, attrValue.length) == value;
			},
			"~=": function(attrValue, value){
				return (' ' + attrValue + ' ').indexOf(' ' + value + ' ') > -1;
			},
			"|=": function(attrValue, value){
				return (attrValue + '-').indexOf(value + '-') == 0;
			},
			"=": function(attrValue, value){
				return attrValue == value;
			},
			"": function(attrValue, value){
				return true;
			}
		};
		function attr(name, value, type){
			var firstChar = value.charAt(0);
			if(firstChar == '"' || firstChar == "'"){
				// it is quoted, remove the quotes
				value = value.slice(1, -1);
			}
			value = value.replace(/\\/g,'');
			var comparator = attrComparators[type || ""];
			return function(node){
				var attrValue = node.getAttribute(name);
				return attrValue && comparator(attrValue, value);
			};
		}
		function ancestor(matcher){
			return function(node, root){
				while((node = node.parentNode) != root){
					if(matcher(node, root)){
						return true;
					}
				}
			};
		}
		function parent(matcher){
			return function(node, root){
				node = node.parentNode;
				return matcher ? 
					node != root && matcher(node, root)
					: node == root;
			};
		}
		var cache = {};
		function and(matcher, next){
			return matcher ?
				function(node, root){
					return next(node) && matcher(node, root);
				}
				: next;
		}
		return function(node, selector, root){
			// this returns true or false based on if the node matches the selector (optionally within the given root)
			var matcher = cache[selector]; // check to see if we have created a matcher function for the given selector
			if(!matcher){
				// create a matcher function for the given selector
				// parse the selectors
				if(selector.replace(/(?:\s*([> ])\s*)|(#|\.)?((?:\\.|[\w-])+)|\[\s*([\w-]+)\s*(.?=)?\s*("(?:\\.|[^"])+"|'(?:\\.|[^'])+'|(?:\\.|[^\]])*)\s*\]/g, function(t, combinator, type, value, attrName, attrType, attrValue){
					if(value){
						matcher = and(matcher, selectorTypes[type || ""](value.replace(/\\/g, '')));
					}
					else if(combinator){
						matcher = (combinator == " " ? ancestor : parent)(matcher);
					}
					else if(attrName){
						matcher = and(matcher, attr(attrName, attrValue, attrType));
					}
					return "";
				})){
					throw new Error("Syntax error in query");
				}
				if(!matcher){
					return true;
				}
				cache[selector] = matcher;
			}
			// now run the matcher function on the node
			return matcher(node, root);
		};
	})();
}
if(!has("dom-qsa")){
	var combine = function(selector, root){
		// combined queries
		var selectors = selector.match(unionSplit);
		var indexed = [];
		// add all results and keep unique ones, this only runs in IE, so we take advantage 
		// of known IE features, particularly sourceIndex which is unique and allows us to 
		// order the results 
		for(var i = 0; i < selectors.length; i++){
			selector = new String(selectors[i].replace(/\s*$/,''));
			selector.indexOf = escape; // keep it from recursively entering combine
			var results = liteEngine(selector, root);
			for(var j = 0, l = results.length; j < l; j++){
				var node = results[j];
				indexed[node.sourceIndex] = node;
			}
		}
		// now convert from a sparse array to a dense array
		var totalResults = [];
		for(i in indexed){
			totalResults.push(indexed[i]);
		}
		return totalResults;
	};
}

liteEngine.match = matchesSelector ? function(node, selector, root){
	if(root && root.nodeType != 9){
		// doesn't support three args, use rooted id trick
		return useRoot(root, selector, function(query){
			return matchesSelector.call(node, query);
		});
	}
	// we have a native matchesSelector, use that
	return matchesSelector.call(node, selector);
} : jsMatchesSelector; // otherwise use the JS matches impl

return liteEngine;
});

},
'dojo/dom-class':function(){
define(["./_base/lang", "./_base/array", "./dom"], function(lang, array, dom){
	// module:
	//		dojo/dom-class

	var className = "className";

	/* Part I of classList-based implementation is preserved here for posterity
	var classList = "classList";
	has.add("dom-classList", function(){
		return classList in document.createElement("p");
	});
	*/

	// =============================
	// (CSS) Class Functions
	// =============================

	var cls, // exports object
		spaces = /\s+/, a1 = [""];

	function str2array(s){
		if(typeof s == "string" || s instanceof String){
			if(s && !spaces.test(s)){
				a1[0] = s;
				return a1;
			}
			var a = s.split(spaces);
			if(a.length && !a[0]){
				a.shift();
			}
			if(a.length && !a[a.length - 1]){
				a.pop();
			}
			return a;
		}
		// assumed to be an array
		if(!s){
			return [];
		}
		return array.filter(s, function(x){ return x; });
	}

	/* Part II of classList-based implementation is preserved here for posterity
	if(has("dom-classList")){
		// new classList version
		cls = {
			contains: function containsClass(node, classStr){
				var clslst = classStr && dom.byId(node)[classList];
				return clslst && clslst.contains(classStr); // Boolean
			},

			add: function addClass(node, classStr){
				node = dom.byId(node);
				classStr = str2array(classStr);
				for(var i = 0, len = classStr.length; i < len; ++i){
					node[classList].add(classStr[i]);
				}
			},

			remove: function removeClass(node, classStr){
				node = dom.byId(node);
				if(classStr === undefined){
					node[className] = "";
				}else{
					classStr = str2array(classStr);
					for(var i = 0, len = classStr.length; i < len; ++i){
						node[classList].remove(classStr[i]);
					}
				}
			},

			replace: function replaceClass(node, addClassStr, removeClassStr){
				node = dom.byId(node);
				if(removeClassStr === undefined){
					node[className] = "";
				}else{
					removeClassStr = str2array(removeClassStr);
					for(var i = 0, len = removeClassStr.length; i < len; ++i){
						node[classList].remove(removeClassStr[i]);
					}
				}
				addClassStr = str2array(addClassStr);
				for(i = 0, len = addClassStr.length; i < len; ++i){
					node[classList].add(addClassStr[i]);
				}
			},

			toggle: function toggleClass(node, classStr, condition){
				node = dom.byId(node);
				if(condition === undefined){
					classStr = str2array(classStr);
					for(var i = 0, len = classStr.length; i < len; ++i){
						node[classList].toggle(classStr[i]);
					}
				}else{
					cls[condition ? "add" : "remove"](node, classStr);
				}
				return condition;   // Boolean
			}
		}
	}
	*/

	// regular DOM version
	var fakeNode = {};  // for effective replacement
	cls = {
		// summary:
		//		This module defines the core dojo DOM class API.

		contains: function containsClass(/*DomNode|String*/ node, /*String*/ classStr){
			// summary:
			//		Returns whether or not the specified classes are a portion of the
			//		class list currently applied to the node.
			// node: String|DOMNode
			//		String ID or DomNode reference to check the class for.
			// classStr: String
			//		A string class name to look for.
			// example:
			//		Do something if a node with id="someNode" has class="aSillyClassName" present
			//	|	if(dojo.hasClass("someNode","aSillyClassName")){ ... }

			return ((" " + dom.byId(node)[className] + " ").indexOf(" " + classStr + " ") >= 0); // Boolean
		},

		add: function addClass(/*DomNode|String*/ node, /*String|Array*/ classStr){
			// summary:
			//		Adds the specified classes to the end of the class list on the
			//		passed node. Will not re-apply duplicate classes.
			//
			// node: String|DOMNode
			//		String ID or DomNode reference to add a class string too
			//
			// classStr: String|Array
			//		A String class name to add, or several space-separated class names,
			//		or an array of class names.
			//
			// example:
			//		Add a class to some node:
			//	|	require(["dojo/dom-class"], function(domClass){
			//	|		domClass.add("someNode", "anewClass");
			//	|	});
			//
			// example:
			//		Add two classes at once:
			//	|	require(["dojo/dom-class"], function(domClass){
			//	|		domClass.add("someNode", "firstClass secondClass");
			//	|	});
			//
			// example:
			//		Add two classes at once (using array):
			//	|	require(["dojo/dom-class"], function(domClass){
			//	|		domClass.add("someNode", ["firstClass", "secondClass"]);
			//	|	});
			//
			// example:
			//		Available in `dojo/NodeList` for multiple additions
			//	|	require(["dojo/query"], function(query){
			//	|		query("ul > li").addClass("firstLevel");
			//	|	});

			node = dom.byId(node);
			classStr = str2array(classStr);
			var cls = node[className], oldLen;
			cls = cls ? " " + cls + " " : " ";
			oldLen = cls.length;
			for(var i = 0, len = classStr.length, c; i < len; ++i){
				c = classStr[i];
				if(c && cls.indexOf(" " + c + " ") < 0){
					cls += c + " ";
				}
			}
			if(oldLen < cls.length){
				node[className] = cls.substr(1, cls.length - 2);
			}
		},

		remove: function removeClass(/*DomNode|String*/ node, /*String|Array?*/ classStr){
			// summary:
			//		Removes the specified classes from node. No `contains()`
			//		check is required.
			//
			// node: String|DOMNode
			//		String ID or DomNode reference to remove the class from.
			//
			// classStr: String|Array
			//		An optional String class name to remove, or several space-separated
			//		class names, or an array of class names. If omitted, all class names
			//		will be deleted.
			//
			// example:
			//		Remove a class from some node:
			//	|	require(["dojo/dom-class"], function(domClass){
			//	|		domClass.remove("someNode", "firstClass");
			//	|	});
			//
			// example:
			//		Remove two classes from some node:
			//	|	require(["dojo/dom-class"], function(domClass){
			//	|		domClass.remove("someNode", "firstClass secondClass");
			//	|	});
			//
			// example:
			//		Remove two classes from some node (using array):
			//	|	require(["dojo/dom-class"], function(domClass){
			//	|		domClass.remove("someNode", ["firstClass", "secondClass"]);
			//	|	});
			//
			// example:
			//		Remove all classes from some node:
			//	|	require(["dojo/dom-class"], function(domClass){
			//	|		domClass.remove("someNode");
			//	|	});
			//
			// example:
			//		Available in `dojo/NodeList` for multiple removal
			//	|	require(["dojo/query"], function(query){
			//	|		query("ul > li").removeClass("foo");
			//	|	});

			node = dom.byId(node);
			var cls;
			if(classStr !== undefined){
				classStr = str2array(classStr);
				cls = " " + node[className] + " ";
				for(var i = 0, len = classStr.length; i < len; ++i){
					cls = cls.replace(" " + classStr[i] + " ", " ");
				}
				cls = lang.trim(cls);
			}else{
				cls = "";
			}
			if(node[className] != cls){ node[className] = cls; }
		},

		replace: function replaceClass(/*DomNode|String*/ node, /*String|Array*/ addClassStr, /*String|Array?*/ removeClassStr){
			// summary:
			//		Replaces one or more classes on a node if not present.
			//		Operates more quickly than calling dojo.removeClass and dojo.addClass
			//
			// node: String|DOMNode
			//		String ID or DomNode reference to remove the class from.
			//
			// addClassStr: String|Array
			//		A String class name to add, or several space-separated class names,
			//		or an array of class names.
			//
			// removeClassStr: String|Array?
			//		A String class name to remove, or several space-separated class names,
			//		or an array of class names.
			//
			// example:
			//	|	require(["dojo/dom-class"], function(domClass){
			//	|		domClass.replace("someNode", "add1 add2", "remove1 remove2");
			//	|	});
			//
			// example:
			//	Replace all classes with addMe
			//	|	require(["dojo/dom-class"], function(domClass){
			//	|		domClass.replace("someNode", "addMe");
			//	|	});
			//
			// example:
			//	Available in `dojo/NodeList` for multiple toggles
			//	|	require(["dojo/query"], function(query){
			//	|		query(".findMe").replaceClass("addMe", "removeMe");
			//	|	});

			node = dom.byId(node);
			fakeNode[className] = node[className];
			cls.remove(fakeNode, removeClassStr);
			cls.add(fakeNode, addClassStr);
			if(node[className] !== fakeNode[className]){
				node[className] = fakeNode[className];
			}
		},

		toggle: function toggleClass(/*DomNode|String*/ node, /*String|Array*/ classStr, /*Boolean?*/ condition){
			// summary:
			//		Adds a class to node if not present, or removes if present.
			//		Pass a boolean condition if you want to explicitly add or remove.
			//		Returns the condition that was specified directly or indirectly.
			//
			// node: String|DOMNode
			//		String ID or DomNode reference to toggle a class string
			//
			// classStr: String|Array
			//		A String class name to toggle, or several space-separated class names,
			//		or an array of class names.
			//
			// condition:
			//		If passed, true means to add the class, false means to remove.
			//		Otherwise dojo.hasClass(node, classStr) is used to detect the class presence.
			//
			// example:
			//	|	require(["dojo/dom-class"], function(domClass){
			//	|		domClass.toggle("someNode", "hovered");
			//	|	});
			//
			// example:
			//		Forcefully add a class
			//	|	require(["dojo/dom-class"], function(domClass){
			//	|		domClass.toggle("someNode", "hovered", true);
			//	|	});
			//
			// example:
			//		Available in `dojo/NodeList` for multiple toggles
			//	|	require(["dojo/query"], function(query){
			//	|		query(".toggleMe").toggleClass("toggleMe");
			//	|	});

			node = dom.byId(node);
			if(condition === undefined){
				classStr = str2array(classStr);
				for(var i = 0, len = classStr.length, c; i < len; ++i){
					c = classStr[i];
					cls[cls.contains(node, c) ? "remove" : "add"](node, c);
				}
			}else{
				cls[condition ? "add" : "remove"](node, classStr);
			}
			return condition;   // Boolean
		}
	};

	return cls;
});

},
'esri/kernel':function(){
//>>built
define(["dojo/_base/kernel", "dojo/_base/config", "dojo/has"], function(b, c, a) {
    b = window.location;
    a = b.pathname;
    a = {
        version: "3.13",
        _appBaseUrl: b.protocol + "//" + b.host + a.substring(0, a.lastIndexOf(a.split("/")[a.split("/").length - 1]))
    };
    c.noGlobals || (window.esri = a);
    (a.dijit = a.dijit || {})._arcgisUrl = ("file:" === b.protocol ? "http:" : b.protocol) + "//www.arcgis.com/sharing/rest";
    return a
});
},
'esri/lang':function(){
//>>built
define(["dojo/_base/array", "dojo/_base/json", "dojo/_base/kernel", "dojo/_base/lang", "dojo/date", "dojo/has", "dojo/number", "dojo/date/locale", "./kernel"], function(l, q, r, g, s, w, t, u, x) {
    function h(a) {
        return void 0 !== a && null !== a
    }

    function m(a, c, b) {
        var d = b.match(/([^\(]+)(\([^\)]+\))?/i),
            e = g.trim(d[1]);
        b = c[a];
        var d = q.fromJson((d[2] ? g.trim(d[2]) : "()").replace(/^\(/, "({").replace(/\)$/, "})")),
            f = d.utcOffset;
        if (-1 === l.indexOf(v, e)) e = g.getObject(e), g.isFunction(e) && (b = e(b, a, c, d));
        else if ("number" === typeof b || "string" ===
            typeof b && b && !isNaN(Number(b))) switch (b = Number(b), e) {
            case "NumberFormat":
                return t.format(b, d);
            case "DateString":
                a = new Date(b);
                if (d.local || d.systemLocale) return d.systemLocale ? a.toLocaleDateString() + (d.hideTime ? "" : " " + a.toLocaleTimeString()) : a.toDateString() + (d.hideTime ? "" : " " + a.toTimeString());
                a = a.toUTCString();
                d.hideTime && (a = a.replace(/\s+\d\d\:\d\d\:\d\d\s+(utc|gmt)/i, ""));
                return a;
            case "DateFormat":
                return a = new Date(b), h(f) && (a = s.add(a, "minute", a.getTimezoneOffset() - f)), u.format(a, d)
        }
        return h(b) ?
            b : ""
    }

    function n(a, c) {
        var b;
        if (c)
            for (b in a) a.hasOwnProperty(b) && (void 0 === a[b] ? delete a[b] : a[b] instanceof Object && n(a[b], !0));
        else
            for (b in a) a.hasOwnProperty(b) && void 0 === a[b] && delete a[b];
        return a
    }
    var v = ["NumberFormat", "DateString", "DateFormat"],
        p = /<\/?[^>]+>/g;
    return {
        valueOf: function(a, c) {
            for (var b in a)
                if (a[b] == c) return b;
            return null
        },
        stripTags: function(a) {
            if (a) {
                var c = typeof a;
                if ("string" === c) a = a.replace(p, "");
                else if ("object" === c)
                    for (var b in a)(c = a[b]) && "string" === typeof c && (c = c.replace(p, "")),
                        a[b] = c
            }
            return a
        },
        substitute: function(a, c, b) {
            var d, e, f;
            h(b) && (g.isObject(b) ? (d = b.first, e = b.dateFormat, f = b.numberFormat) : d = b);
            if (!c || "${*}" === c) {
                c = [];
                for (var k in a) {
                    b = a[k];
                    if (e && -1 !== l.indexOf(e.properties || "", k)) b = m(k, a, e.formatter || "DateString");
                    else if (f && -1 !== l.indexOf(f.properties || "", k)) b = m(k, a, f.formatter || "NumberFormat");
                    c.push(k + " \x3d " + (h(b) ? b : "") + "\x3cbr/\x3e");
                    if (d) break
                }
                return c.join("")
            }
            return g.replace(c, g.hitch({
                obj: a
            }, function(a, b) {
                var c = b.split(":");
                return 1 < c.length ? (b = c[0], c.shift(),
                    m(b, this.obj, c.join(":"))) : e && -1 !== l.indexOf(e.properties || "", b) ? m(b, this.obj, e.formatter || "DateString") : f && -1 !== l.indexOf(f.properties || "", b) ? m(b, this.obj, f.formatter || "NumberFormat") : h(this.obj[b]) ? this.obj[b] : ""
            }), /\$\{([^\}]+)\}/g)
        },
        filter: function(a, c, b) {
            c = [g.isString(a) ? a.split("") : a, b || r.global, g.isString(c) ? new Function("item", "index", "array", c) : c];
            b = {};
            var d;
            a = c[0];
            for (d in a) c[2].call(c[d], a[d], d, a) && (b[d] = a[d]);
            return b
        },
        isDefined: h,
        fixJson: n
    }
});
},
'dojo/_base/json':function(){
define(["./kernel", "../json"], function(dojo, json){

// module:
//		dojo/_base/json

/*=====
return {
	// summary:
	//		This module defines the dojo JSON API.
};
=====*/

dojo.fromJson = function(/*String*/ js){
	// summary:
	//		Parses a JavaScript expression and returns a JavaScript value.
	// description:
	//		Throws for invalid JavaScript expressions. It does not use a strict JSON parser. It
	//		always delegates to eval(). The content passed to this method must therefore come
	//		from a trusted source.
	//		It is recommend that you use dojo/json's parse function for an
	//		implementation uses the (faster) native JSON parse when available.
	// js:
	//		a string literal of a JavaScript expression, for instance:
	//		`'{ "foo": [ "bar", 1, { "baz": "thud" } ] }'`

	return eval("(" + js + ")"); // Object
};

/*=====
dojo._escapeString = function(){
	// summary:
	//		Adds escape sequences for non-visual characters, double quote and
	//		backslash and surrounds with double quotes to form a valid string
	//		literal.
};
=====*/
dojo._escapeString = json.stringify; // just delegate to json.stringify

dojo.toJsonIndentStr = "\t";
dojo.toJson = function(/*Object*/ it, /*Boolean?*/ prettyPrint){
	// summary:
	//		Returns a [JSON](http://json.org) serialization of an object.
	// description:
	//		Returns a [JSON](http://json.org) serialization of an object.
	//		Note that this doesn't check for infinite recursion, so don't do that!
	//		It is recommend that you use dojo/json's stringify function for an lighter
	//		and faster implementation that matches the native JSON API and uses the
	//		native JSON serializer when available.
	// it:
	//		an object to be serialized. Objects may define their own
	//		serialization via a special "__json__" or "json" function
	//		property. If a specialized serializer has been defined, it will
	//		be used as a fallback.
	//		Note that in 1.6, toJson would serialize undefined, but this no longer supported
	//		since it is not supported by native JSON serializer.
	// prettyPrint:
	//		if true, we indent objects and arrays to make the output prettier.
	//		The variable `dojo.toJsonIndentStr` is used as the indent string --
	//		to use something other than the default (tab), change that variable
	//		before calling dojo.toJson().
	//		Note that if native JSON support is available, it will be used for serialization,
	//		and native implementations vary on the exact spacing used in pretty printing.
	// returns:
	//		A JSON string serialization of the passed-in object.
	// example:
	//		simple serialization of a trivial object
	//		|	var jsonStr = dojo.toJson({ howdy: "stranger!", isStrange: true });
	//		|	doh.is('{"howdy":"stranger!","isStrange":true}', jsonStr);
	// example:
	//		a custom serializer for an objects of a particular class:
	//		|	dojo.declare("Furby", null, {
	//		|		furbies: "are strange",
	//		|		furbyCount: 10,
	//		|		__json__: function(){
	//		|		},
	//		|	});

	// use dojo/json
	return json.stringify(it, function(key, value){
		if(value){
			var tf = value.__json__||value.json;
			if(typeof tf == "function"){
				return tf.call(value);
			}
		}
		return value;
	}, prettyPrint && dojo.toJsonIndentStr);	// String
};

return dojo;
});

},
'dojo/json':function(){
define(["./has"], function(has){
	"use strict";
	var hasJSON = typeof JSON != "undefined";
	has.add("json-parse", hasJSON); // all the parsers work fine
		// Firefox 3.5/Gecko 1.9 fails to use replacer in stringify properly https://bugzilla.mozilla.org/show_bug.cgi?id=509184
	has.add("json-stringify", hasJSON && JSON.stringify({a:0}, function(k,v){return v||1;}) == '{"a":1}');

	/*=====
	return {
		// summary:
		//		Functions to parse and serialize JSON

		parse: function(str, strict){
			// summary:
			//		Parses a [JSON](http://json.org) string to return a JavaScript object.
			// description:
			//		This function follows [native JSON API](https://developer.mozilla.org/en/JSON)
			//		Throws for invalid JSON strings. This delegates to eval() if native JSON
			//		support is not available. By default this will evaluate any valid JS expression.
			//		With the strict parameter set to true, the parser will ensure that only
			//		valid JSON strings are parsed (otherwise throwing an error). Without the strict
			//		parameter, the content passed to this method must come
			//		from a trusted source.
			// str:
			//		a string literal of a JSON item, for instance:
			//		`'{ "foo": [ "bar", 1, { "baz": "thud" } ] }'`
			// strict:
			//		When set to true, this will ensure that only valid, secure JSON is ever parsed.
			//		Make sure this is set to true for untrusted content. Note that on browsers/engines
			//		without native JSON support, setting this to true will run slower.
		},
		stringify: function(value, replacer, spacer){
			// summary:
			//		Returns a [JSON](http://json.org) serialization of an object.
			// description:
			//		Returns a [JSON](http://json.org) serialization of an object.
			//		This function follows [native JSON API](https://developer.mozilla.org/en/JSON)
			//		Note that this doesn't check for infinite recursion, so don't do that!
			// value:
			//		A value to be serialized.
			// replacer:
			//		A replacer function that is called for each value and can return a replacement
			// spacer:
			//		A spacer string to be used for pretty printing of JSON
			// example:
			//		simple serialization of a trivial object
			//	|	define(["dojo/json"], function(JSON){
			// 	|		var jsonStr = JSON.stringify({ howdy: "stranger!", isStrange: true });
			//	|		doh.is('{"howdy":"stranger!","isStrange":true}', jsonStr);
		}
	};
	=====*/

	if(has("json-stringify")){
		return JSON;
	}else{
		var escapeString = function(/*String*/str){
			// summary:
			//		Adds escape sequences for non-visual characters, double quote and
			//		backslash and surrounds with double quotes to form a valid string
			//		literal.
			return ('"' + str.replace(/(["\\])/g, '\\$1') + '"').
				replace(/[\f]/g, "\\f").replace(/[\b]/g, "\\b").replace(/[\n]/g, "\\n").
				replace(/[\t]/g, "\\t").replace(/[\r]/g, "\\r"); // string
		};
		return {
			parse: has("json-parse") ? JSON.parse : function(str, strict){
				if(strict && !/^([\s\[\{]*(?:"(?:\\.|[^"])*"|-?\d[\d\.]*(?:[Ee][+-]?\d+)?|null|true|false|)[\s\]\}]*(?:,|:|$))+$/.test(str)){
					throw new SyntaxError("Invalid characters in JSON");
				}
				return eval('(' + str + ')');
			},
			stringify: function(value, replacer, spacer){
				var undef;
				if(typeof replacer == "string"){
					spacer = replacer;
					replacer = null;
				}
				function stringify(it, indent, key){
					if(replacer){
						it = replacer(key, it);
					}
					var val, objtype = typeof it;
					if(objtype == "number"){
						return isFinite(it) ? it + "" : "null";
					}
					if(objtype == "boolean"){
						return it + "";
					}
					if(it === null){
						return "null";
					}
					if(typeof it == "string"){
						return escapeString(it);
					}
					if(objtype == "function" || objtype == "undefined"){
						return undef; // undefined
					}
					// short-circuit for objects that support "json" serialization
					// if they return "self" then just pass-through...
					if(typeof it.toJSON == "function"){
						return stringify(it.toJSON(key), indent, key);
					}
					if(it instanceof Date){
						return '"{FullYear}-{Month+}-{Date}T{Hours}:{Minutes}:{Seconds}Z"'.replace(/\{(\w+)(\+)?\}/g, function(t, prop, plus){
							var num = it["getUTC" + prop]() + (plus ? 1 : 0);
							return num < 10 ? "0" + num : num;
						});
					}
					if(it.valueOf() !== it){
						// primitive wrapper, try again unwrapped:
						return stringify(it.valueOf(), indent, key);
					}
					var nextIndent= spacer ? (indent + spacer) : "";
					/* we used to test for DOM nodes and throw, but FF serializes them as {}, so cross-browser consistency is probably not efficiently attainable */ 
				
					var sep = spacer ? " " : "";
					var newLine = spacer ? "\n" : "";
				
					// array
					if(it instanceof Array){
						var itl = it.length, res = [];
						for(key = 0; key < itl; key++){
							var obj = it[key];
							val = stringify(obj, nextIndent, key);
							if(typeof val != "string"){
								val = "null";
							}
							res.push(newLine + nextIndent + val);
						}
						return "[" + res.join(",") + newLine + indent + "]";
					}
					// generic object code path
					var output = [];
					for(key in it){
						var keyStr;
						if(it.hasOwnProperty(key)){
							if(typeof key == "number"){
								keyStr = '"' + key + '"';
							}else if(typeof key == "string"){
								keyStr = escapeString(key);
							}else{
								// skip non-string or number keys
								continue;
							}
							val = stringify(it[key], nextIndent, key);
							if(typeof val != "string"){
								// skip non-serializable values
								continue;
							}
							// At this point, the most non-IE browsers don't get in this branch 
							// (they have native JSON), so push is definitely the way to
							output.push(newLine + nextIndent + keyStr + ":" + sep + val);
						}
					}
					return "{" + output.join(",") + newLine + indent + "}"; // String
				}
				return stringify(value, "", "");
			}
		};
	}
});

},
'dojo/date':function(){
define(["./has", "./_base/lang"], function(has, lang){
// module:
//		dojo/date

var date = {
	// summary:
	//		Date manipulation utilities
};

date.getDaysInMonth = function(/*Date*/dateObject){
	// summary:
	//		Returns the number of days in the month used by dateObject
	var month = dateObject.getMonth();
	var days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	if(month == 1 && date.isLeapYear(dateObject)){ return 29; } // Number
	return days[month]; // Number
};

date.isLeapYear = function(/*Date*/dateObject){
	// summary:
	//		Determines if the year of the dateObject is a leap year
	// description:
	//		Leap years are years with an additional day YYYY-02-29, where the
	//		year number is a multiple of four with the following exception: If
	//		a year is a multiple of 100, then it is only a leap year if it is
	//		also a multiple of 400. For example, 1900 was not a leap year, but
	//		2000 is one.

	var year = dateObject.getFullYear();
	return !(year%400) || (!(year%4) && !!(year%100)); // Boolean
};

// FIXME: This is not localized
date.getTimezoneName = function(/*Date*/dateObject){
	// summary:
	//		Get the user's time zone as provided by the browser
	// dateObject:
	//		Needed because the timezone may vary with time (daylight savings)
	// description:
	//		Try to get time zone info from toString or toLocaleString method of
	//		the Date object -- UTC offset is not a time zone.  See
	//		http://www.twinsun.com/tz/tz-link.htm Note: results may be
	//		inconsistent across browsers.

	var str = dateObject.toString(); // Start looking in toString
	var tz = ''; // The result -- return empty string if nothing found
	var match;

	// First look for something in parentheses -- fast lookup, no regex
	var pos = str.indexOf('(');
	if(pos > -1){
		tz = str.substring(++pos, str.indexOf(')'));
	}else{
		// If at first you don't succeed ...
		// If IE knows about the TZ, it appears before the year
		// Capital letters or slash before a 4-digit year
		// at the end of string
		var pat = /([A-Z\/]+) \d{4}$/;
		if((match = str.match(pat))){
			tz = match[1];
		}else{
		// Some browsers (e.g. Safari) glue the TZ on the end
		// of toLocaleString instead of putting it in toString
			str = dateObject.toLocaleString();
			// Capital letters or slash -- end of string,
			// after space
			pat = / ([A-Z\/]+)$/;
			if((match = str.match(pat))){
				tz = match[1];
			}
		}
	}

	// Make sure it doesn't somehow end up return AM or PM
	return (tz == 'AM' || tz == 'PM') ? '' : tz; // String
};

// Utility methods to do arithmetic calculations with Dates

date.compare = function(/*Date*/date1, /*Date?*/date2, /*String?*/portion){
	// summary:
	//		Compare two date objects by date, time, or both.
	// description:
	//		Returns 0 if equal, positive if a > b, else negative.
	// date1:
	//		Date object
	// date2:
	//		Date object.  If not specified, the current Date is used.
	// portion:
	//		A string indicating the "date" or "time" portion of a Date object.
	//		Compares both "date" and "time" by default.  One of the following:
	//		"date", "time", "datetime"

	// Extra step required in copy for IE - see #3112
	date1 = new Date(+date1);
	date2 = new Date(+(date2 || new Date()));

	if(portion == "date"){
		// Ignore times and compare dates.
		date1.setHours(0, 0, 0, 0);
		date2.setHours(0, 0, 0, 0);
	}else if(portion == "time"){
		// Ignore dates and compare times.
		date1.setFullYear(0, 0, 0);
		date2.setFullYear(0, 0, 0);
	}

	if(date1 > date2){ return 1; } // int
	if(date1 < date2){ return -1; } // int
	return 0; // int
};

date.add = function(/*Date*/date, /*String*/interval, /*int*/amount){
	// summary:
	//		Add to a Date in intervals of different size, from milliseconds to years
	// date: Date
	//		Date object to start with
	// interval:
	//		A string representing the interval.  One of the following:
	//		"year", "month", "day", "hour", "minute", "second",
	//		"millisecond", "quarter", "week", "weekday"
	// amount:
	//		How much to add to the date.

	var sum = new Date(+date); // convert to Number before copying to accommodate IE (#3112)
	var fixOvershoot = false;
	var property = "Date";

	switch(interval){
		case "day":
			break;
		case "weekday":
			//i18n FIXME: assumes Saturday/Sunday weekend, but this is not always true.  see dojo/cldr/supplemental

			// Divide the increment time span into weekspans plus leftover days
			// e.g., 8 days is one 5-day weekspan / and two leftover days
			// Can't have zero leftover days, so numbers divisible by 5 get
			// a days value of 5, and the remaining days make up the number of weeks
			var days, weeks;
			var mod = amount % 5;
			if(!mod){
				days = (amount > 0) ? 5 : -5;
				weeks = (amount > 0) ? ((amount-5)/5) : ((amount+5)/5);
			}else{
				days = mod;
				weeks = parseInt(amount/5);
			}
			// Get weekday value for orig date param
			var strt = date.getDay();
			// Orig date is Sat / positive incrementer
			// Jump over Sun
			var adj = 0;
			if(strt == 6 && amount > 0){
				adj = 1;
			}else if(strt == 0 && amount < 0){
			// Orig date is Sun / negative incrementer
			// Jump back over Sat
				adj = -1;
			}
			// Get weekday val for the new date
			var trgt = strt + days;
			// New date is on Sat or Sun
			if(trgt == 0 || trgt == 6){
				adj = (amount > 0) ? 2 : -2;
			}
			// Increment by number of weeks plus leftover days plus
			// weekend adjustments
			amount = (7 * weeks) + days + adj;
			break;
		case "year":
			property = "FullYear";
			// Keep increment/decrement from 2/29 out of March
			fixOvershoot = true;
			break;
		case "week":
			amount *= 7;
			break;
		case "quarter":
			// Naive quarter is just three months
			amount *= 3;
			// fallthrough...
		case "month":
			// Reset to last day of month if you overshoot
			fixOvershoot = true;
			property = "Month";
			break;
//		case "hour":
//		case "minute":
//		case "second":
//		case "millisecond":
		default:
			property = "UTC"+interval.charAt(0).toUpperCase() + interval.substring(1) + "s";
	}

	if(property){
		sum["set"+property](sum["get"+property]()+amount);
	}

	if(fixOvershoot && (sum.getDate() < date.getDate())){
		sum.setDate(0);
	}

	return sum; // Date
};

date.difference = function(/*Date*/date1, /*Date?*/date2, /*String?*/interval){
	// summary:
	//		Get the difference in a specific unit of time (e.g., number of
	//		months, weeks, days, etc.) between two dates, rounded to the
	//		nearest integer.
	// date1:
	//		Date object
	// date2:
	//		Date object.  If not specified, the current Date is used.
	// interval:
	//		A string representing the interval.  One of the following:
	//		"year", "month", "day", "hour", "minute", "second",
	//		"millisecond", "quarter", "week", "weekday"
	//
	//		Defaults to "day".

	date2 = date2 || new Date();
	interval = interval || "day";
	var yearDiff = date2.getFullYear() - date1.getFullYear();
	var delta = 1; // Integer return value

	switch(interval){
		case "quarter":
			var m1 = date1.getMonth();
			var m2 = date2.getMonth();
			// Figure out which quarter the months are in
			var q1 = Math.floor(m1/3) + 1;
			var q2 = Math.floor(m2/3) + 1;
			// Add quarters for any year difference between the dates
			q2 += (yearDiff * 4);
			delta = q2 - q1;
			break;
		case "weekday":
			var days = Math.round(date.difference(date1, date2, "day"));
			var weeks = parseInt(date.difference(date1, date2, "week"));
			var mod = days % 7;

			// Even number of weeks
			if(mod == 0){
				days = weeks*5;
			}else{
				// Weeks plus spare change (< 7 days)
				var adj = 0;
				var aDay = date1.getDay();
				var bDay = date2.getDay();

				weeks = parseInt(days/7);
				mod = days % 7;
				// Mark the date advanced by the number of
				// round weeks (may be zero)
				var dtMark = new Date(date1);
				dtMark.setDate(dtMark.getDate()+(weeks*7));
				var dayMark = dtMark.getDay();

				// Spare change days -- 6 or less
				if(days > 0){
					switch(true){
						// Range starts on Sat
						case aDay == 6:
							adj = -1;
							break;
						// Range starts on Sun
						case aDay == 0:
							adj = 0;
							break;
						// Range ends on Sat
						case bDay == 6:
							adj = -1;
							break;
						// Range ends on Sun
						case bDay == 0:
							adj = -2;
							break;
						// Range contains weekend
						case (dayMark + mod) > 5:
							adj = -2;
					}
				}else if(days < 0){
					switch(true){
						// Range starts on Sat
						case aDay == 6:
							adj = 0;
							break;
						// Range starts on Sun
						case aDay == 0:
							adj = 1;
							break;
						// Range ends on Sat
						case bDay == 6:
							adj = 2;
							break;
						// Range ends on Sun
						case bDay == 0:
							adj = 1;
							break;
						// Range contains weekend
						case (dayMark + mod) < 0:
							adj = 2;
					}
				}
				days += adj;
				days -= (weeks*2);
			}
			delta = days;
			break;
		case "year":
			delta = yearDiff;
			break;
		case "month":
			delta = (date2.getMonth() - date1.getMonth()) + (yearDiff * 12);
			break;
		case "week":
			// Truncate instead of rounding
			// Don't use Math.floor -- value may be negative
			delta = parseInt(date.difference(date1, date2, "day")/7);
			break;
		case "day":
			delta /= 24;
			// fallthrough
		case "hour":
			delta /= 60;
			// fallthrough
		case "minute":
			delta /= 60;
			// fallthrough
		case "second":
			delta /= 1000;
			// fallthrough
		case "millisecond":
			delta *= date2.getTime() - date1.getTime();
	}

	// Round for fractional values and DST leaps
	return Math.round(delta); // Number (integer)
};

// Don't use setObject() because it may overwrite dojo/date/stamp (if that has already been loaded)
 1  && lang.mixin(lang.getObject("dojo.date", true), date);

return date;
});

},
'dojo/number':function(){
define([/*===== "./_base/declare", =====*/ "./_base/lang", "./i18n", "./i18n!./cldr/nls/number", "./string", "./regexp"],
	function(/*===== declare, =====*/ lang, i18n, nlsNumber, dstring, dregexp){

// module:
//		dojo/number

var number = {
	// summary:
	//		localized formatting and parsing routines for Number
};
lang.setObject("dojo.number", number);

/*=====
number.__FormatOptions = declare(null, {
	// pattern: String?
	//		override [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)
	//		with this string.  Default value is based on locale.  Overriding this property will defeat
	//		localization.  Literal characters in patterns are not supported.
	// type: String?
	//		choose a format type based on the locale from the following:
	//		decimal, scientific (not yet supported), percent, currency. decimal by default.
	// places: Number?
	//		fixed number of decimal places to show.  This overrides any
	//		information in the provided pattern.
	// round: Number?
	//		5 rounds to nearest .5; 0 rounds to nearest whole (default). -1
	//		means do not round.
	// locale: String?
	//		override the locale used to determine formatting rules
	// fractional: Boolean?
	//		If false, show no decimal places, overriding places and pattern settings.
});
=====*/

number.format = function(/*Number*/ value, /*number.__FormatOptions?*/ options){
	// summary:
	//		Format a Number as a String, using locale-specific settings
	// description:
	//		Create a string from a Number using a known localized pattern.
	//		Formatting patterns appropriate to the locale are chosen from the
	//		[Common Locale Data Repository](http://unicode.org/cldr) as well as the appropriate symbols and
	//		delimiters.
	//		If value is Infinity, -Infinity, or is not a valid JavaScript number, return null.
	// value:
	//		the number to be formatted

	options = lang.mixin({}, options || {});
	var locale = i18n.normalizeLocale(options.locale),
		bundle = i18n.getLocalization("dojo.cldr", "number", locale);
	options.customs = bundle;
	var pattern = options.pattern || bundle[(options.type || "decimal") + "Format"];
	if(isNaN(value) || Math.abs(value) == Infinity){ return null; } // null
	return number._applyPattern(value, pattern, options); // String
};

//number._numberPatternRE = /(?:[#0]*,?)*[#0](?:\.0*#*)?/; // not precise, but good enough
number._numberPatternRE = /[#0,]*[#0](?:\.0*#*)?/; // not precise, but good enough

number._applyPattern = function(/*Number*/ value, /*String*/ pattern, /*number.__FormatOptions?*/ options){
	// summary:
	//		Apply pattern to format value as a string using options. Gives no
	//		consideration to local customs.
	// value:
	//		the number to be formatted.
	// pattern:
	//		a pattern string as described by
	//		[unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)
	// options: number.__FormatOptions?
	//		_applyPattern is usually called via `dojo/number.format()` which
	//		populates an extra property in the options parameter, "customs".
	//		The customs object specifies group and decimal parameters if set.

	//TODO: support escapes
	options = options || {};
	var group = options.customs.group,
		decimal = options.customs.decimal,
		patternList = pattern.split(';'),
		positivePattern = patternList[0];
	pattern = patternList[(value < 0) ? 1 : 0] || ("-" + positivePattern);

	//TODO: only test against unescaped
	if(pattern.indexOf('%') != -1){
		value *= 100;
	}else if(pattern.indexOf('\u2030') != -1){
		value *= 1000; // per mille
	}else if(pattern.indexOf('\u00a4') != -1){
		group = options.customs.currencyGroup || group;//mixins instead?
		decimal = options.customs.currencyDecimal || decimal;// Should these be mixins instead?
		pattern = pattern.replace(/\u00a4{1,3}/, function(match){
			var prop = ["symbol", "currency", "displayName"][match.length-1];
			return options[prop] || options.currency || "";
		});
	}else if(pattern.indexOf('E') != -1){
		throw new Error("exponential notation not supported");
	}

	//TODO: support @ sig figs?
	var numberPatternRE = number._numberPatternRE;
	var numberPattern = positivePattern.match(numberPatternRE);
	if(!numberPattern){
		throw new Error("unable to find a number expression in pattern: "+pattern);
	}
	if(options.fractional === false){ options.places = 0; }
	return pattern.replace(numberPatternRE,
		number._formatAbsolute(value, numberPattern[0], {decimal: decimal, group: group, places: options.places, round: options.round}));
};

number.round = function(/*Number*/ value, /*Number?*/ places, /*Number?*/ increment){
	// summary:
	//		Rounds to the nearest value with the given number of decimal places, away from zero
	// description:
	//		Rounds to the nearest value with the given number of decimal places, away from zero if equal.
	//		Similar to Number.toFixed(), but compensates for browser quirks. Rounding can be done by
	//		fractional increments also, such as the nearest quarter.
	//		NOTE: Subject to floating point errors.  See dojox/math/round for experimental workaround.
	// value:
	//		The number to round
	// places:
	//		The number of decimal places where rounding takes place.  Defaults to 0 for whole rounding.
	//		Must be non-negative.
	// increment:
	//		Rounds next place to nearest value of increment/10.  10 by default.
	// example:
	// |	>>> number.round(-0.5)
	// |	-1
	// |	>>> number.round(162.295, 2)
	// |	162.29  // note floating point error.  Should be 162.3
	// |	>>> number.round(10.71, 0, 2.5)
	// |	10.75
	var factor = 10 / (increment || 10);
	return (factor * +value).toFixed(places) / factor; // Number
};

if((0.9).toFixed() == 0){
	// (isIE) toFixed() bug workaround: Rounding fails on IE when most significant digit
	// is just after the rounding place and is >=5
	var round = number.round;
	number.round = function(v, p, m){
		var d = Math.pow(10, -p || 0), a = Math.abs(v);
		if(!v || a >= d){
			d = 0;
		}else{
			a /= d;
			if(a < 0.5 || a >= 0.95){
				d = 0;
			}
		}
		return round(v, p, m) + (v > 0 ? d : -d);
	};

	// Use "doc hint" so the doc parser ignores this new definition of round(), and uses the one above.
	/*===== number.round = round; =====*/
}

/*=====
number.__FormatAbsoluteOptions = declare(null, {
	// decimal: String?
	//		the decimal separator
	// group: String?
	//		the group separator
	// places: Number|String?
	//		number of decimal places.  the range "n,m" will format to m places.
	// round: Number?
	//		5 rounds to nearest .5; 0 rounds to nearest whole (default). -1
	//		means don't round.
});
=====*/

number._formatAbsolute = function(/*Number*/ value, /*String*/ pattern, /*number.__FormatAbsoluteOptions?*/ options){
	// summary:
	//		Apply numeric pattern to absolute value using options. Gives no
	//		consideration to local customs.
	// value:
	//		the number to be formatted, ignores sign
	// pattern:
	//		the number portion of a pattern (e.g. `#,##0.00`)
	options = options || {};
	if(options.places === true){options.places=0;}
	if(options.places === Infinity){options.places=6;} // avoid a loop; pick a limit

	var patternParts = pattern.split("."),
		comma = typeof options.places == "string" && options.places.indexOf(","),
		maxPlaces = options.places;
	if(comma){
		maxPlaces = options.places.substring(comma + 1);
	}else if(!(maxPlaces >= 0)){
		maxPlaces = (patternParts[1] || []).length;
	}
	if(!(options.round < 0)){
		value = number.round(value, maxPlaces, options.round);
	}

	var valueParts = String(Math.abs(value)).split("."),
		fractional = valueParts[1] || "";
	if(patternParts[1] || options.places){
		if(comma){
			options.places = options.places.substring(0, comma);
		}
		// Pad fractional with trailing zeros
		var pad = options.places !== undefined ? options.places : (patternParts[1] && patternParts[1].lastIndexOf("0") + 1);
		if(pad > fractional.length){
			valueParts[1] = dstring.pad(fractional, pad, '0', true);
		}

		// Truncate fractional
		if(maxPlaces < fractional.length){
			valueParts[1] = fractional.substr(0, maxPlaces);
		}
	}else{
		if(valueParts[1]){ valueParts.pop(); }
	}

	// Pad whole with leading zeros
	var patternDigits = patternParts[0].replace(',', '');
	pad = patternDigits.indexOf("0");
	if(pad != -1){
		pad = patternDigits.length - pad;
		if(pad > valueParts[0].length){
			valueParts[0] = dstring.pad(valueParts[0], pad);
		}

		// Truncate whole
		if(patternDigits.indexOf("#") == -1){
			valueParts[0] = valueParts[0].substr(valueParts[0].length - pad);
		}
	}

	// Add group separators
	var index = patternParts[0].lastIndexOf(','),
		groupSize, groupSize2;
	if(index != -1){
		groupSize = patternParts[0].length - index - 1;
		var remainder = patternParts[0].substr(0, index);
		index = remainder.lastIndexOf(',');
		if(index != -1){
			groupSize2 = remainder.length - index - 1;
		}
	}
	var pieces = [];
	for(var whole = valueParts[0]; whole;){
		var off = whole.length - groupSize;
		pieces.push((off > 0) ? whole.substr(off) : whole);
		whole = (off > 0) ? whole.slice(0, off) : "";
		if(groupSize2){
			groupSize = groupSize2;
			delete groupSize2;
		}
	}
	valueParts[0] = pieces.reverse().join(options.group || ",");

	return valueParts.join(options.decimal || ".");
};

/*=====
number.__RegexpOptions = declare(null, {
	// pattern: String?
	//		override [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)
	//		with this string.  Default value is based on locale.  Overriding this property will defeat
	//		localization.
	// type: String?
	//		choose a format type based on the locale from the following:
	//		decimal, scientific (not yet supported), percent, currency. decimal by default.
	// locale: String?
	//		override the locale used to determine formatting rules
	// strict: Boolean?
	//		strict parsing, false by default.  Strict parsing requires input as produced by the format() method.
	//		Non-strict is more permissive, e.g. flexible on white space, omitting thousands separators
	// places: Number|String?
	//		number of decimal places to accept: Infinity, a positive number, or
	//		a range "n,m".  Defined by pattern or Infinity if pattern not provided.
});
=====*/
number.regexp = function(/*number.__RegexpOptions?*/ options){
	// summary:
	//		Builds the regular needed to parse a number
	// description:
	//		Returns regular expression with positive and negative match, group
	//		and decimal separators
	return number._parseInfo(options).regexp; // String
};

number._parseInfo = function(/*Object?*/ options){
	options = options || {};
	var locale = i18n.normalizeLocale(options.locale),
		bundle = i18n.getLocalization("dojo.cldr", "number", locale),
		pattern = options.pattern || bundle[(options.type || "decimal") + "Format"],
//TODO: memoize?
		group = bundle.group,
		decimal = bundle.decimal,
		factor = 1;

	if(pattern.indexOf('%') != -1){
		factor /= 100;
	}else if(pattern.indexOf('\u2030') != -1){
		factor /= 1000; // per mille
	}else{
		var isCurrency = pattern.indexOf('\u00a4') != -1;
		if(isCurrency){
			group = bundle.currencyGroup || group;
			decimal = bundle.currencyDecimal || decimal;
		}
	}

	//TODO: handle quoted escapes
	var patternList = pattern.split(';');
	if(patternList.length == 1){
		patternList.push("-" + patternList[0]);
	}

	var re = dregexp.buildGroupRE(patternList, function(pattern){
		pattern = "(?:"+dregexp.escapeString(pattern, '.')+")";
		return pattern.replace(number._numberPatternRE, function(format){
			var flags = {
				signed: false,
				separator: options.strict ? group : [group,""],
				fractional: options.fractional,
				decimal: decimal,
				exponent: false
				},

				parts = format.split('.'),
				places = options.places;

			// special condition for percent (factor != 1)
			// allow decimal places even if not specified in pattern
			if(parts.length == 1 && factor != 1){
			    parts[1] = "###";
			}
			if(parts.length == 1 || places === 0){
				flags.fractional = false;
			}else{
				if(places === undefined){ places = options.pattern ? parts[1].lastIndexOf('0') + 1 : Infinity; }
				if(places && options.fractional == undefined){flags.fractional = true;} // required fractional, unless otherwise specified
				if(!options.places && (places < parts[1].length)){ places += "," + parts[1].length; }
				flags.places = places;
			}
			var groups = parts[0].split(',');
			if(groups.length > 1){
				flags.groupSize = groups.pop().length;
				if(groups.length > 1){
					flags.groupSize2 = groups.pop().length;
				}
			}
			return "("+number._realNumberRegexp(flags)+")";
		});
	}, true);

	if(isCurrency){
		// substitute the currency symbol for the placeholder in the pattern
		re = re.replace(/([\s\xa0]*)(\u00a4{1,3})([\s\xa0]*)/g, function(match, before, target, after){
			var prop = ["symbol", "currency", "displayName"][target.length-1],
				symbol = dregexp.escapeString(options[prop] || options.currency || "");
			before = before ? "[\\s\\xa0]" : "";
			after = after ? "[\\s\\xa0]" : "";
			if(!options.strict){
				if(before){before += "*";}
				if(after){after += "*";}
				return "(?:"+before+symbol+after+")?";
			}
			return before+symbol+after;
		});
	}

//TODO: substitute localized sign/percent/permille/etc.?

	// normalize whitespace and return
	return {regexp: re.replace(/[\xa0 ]/g, "[\\s\\xa0]"), group: group, decimal: decimal, factor: factor}; // Object
};

/*=====
number.__ParseOptions = declare(null, {
	// pattern: String?
	//		override [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)
	//		with this string.  Default value is based on locale.  Overriding this property will defeat
	//		localization.  Literal characters in patterns are not supported.
	// type: String?
	//		choose a format type based on the locale from the following:
	//		decimal, scientific (not yet supported), percent, currency. decimal by default.
	// locale: String?
	//		override the locale used to determine formatting rules
	// strict: Boolean?
	//		strict parsing, false by default.  Strict parsing requires input as produced by the format() method.
	//		Non-strict is more permissive, e.g. flexible on white space, omitting thousands separators
	// fractional: Boolean|Array?
	//		Whether to include the fractional portion, where the number of decimal places are implied by pattern
	//		or explicit 'places' parameter.  The value [true,false] makes the fractional portion optional.
});
=====*/
number.parse = function(/*String*/ expression, /*number.__ParseOptions?*/ options){
	// summary:
	//		Convert a properly formatted string to a primitive Number, using
	//		locale-specific settings.
	// description:
	//		Create a Number from a string using a known localized pattern.
	//		Formatting patterns are chosen appropriate to the locale
	//		and follow the syntax described by
	//		[unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)
    	//		Note that literal characters in patterns are not supported.
	// expression:
	//		A string representation of a Number
	var info = number._parseInfo(options),
		results = (new RegExp("^"+info.regexp+"$")).exec(expression);
	if(!results){
		return NaN; //NaN
	}
	var absoluteMatch = results[1]; // match for the positive expression
	if(!results[1]){
		if(!results[2]){
			return NaN; //NaN
		}
		// matched the negative pattern
		absoluteMatch =results[2];
		info.factor *= -1;
	}

	// Transform it to something Javascript can parse as a number.  Normalize
	// decimal point and strip out group separators or alternate forms of whitespace
	absoluteMatch = absoluteMatch.
		replace(new RegExp("["+info.group + "\\s\\xa0"+"]", "g"), "").
		replace(info.decimal, ".");
	// Adjust for negative sign, percent, etc. as necessary
	return absoluteMatch * info.factor; //Number
};

/*=====
number.__RealNumberRegexpFlags = declare(null, {
	// places: Number?
	//		The integer number of decimal places or a range given as "n,m".  If
	//		not given, the decimal part is optional and the number of places is
	//		unlimited.
	// decimal: String?
	//		A string for the character used as the decimal point.  Default
	//		is ".".
	// fractional: Boolean|Array?
	//		Whether decimal places are used.  Can be true, false, or [true,
	//		false].  Default is [true, false] which means optional.
	// exponent: Boolean|Array?
	//		Express in exponential notation.  Can be true, false, or [true,
	//		false]. Default is [true, false], (i.e. will match if the
	//		exponential part is present are not).
	// eSigned: Boolean|Array?
	//		The leading plus-or-minus sign on the exponent.  Can be true,
	//		false, or [true, false].  Default is [true, false], (i.e. will
	//		match if it is signed or unsigned).  flags in regexp.integer can be
	//		applied.
});
=====*/

number._realNumberRegexp = function(/*__RealNumberRegexpFlags?*/ flags){
	// summary:
	//		Builds a regular expression to match a real number in exponential
	//		notation

	// assign default values to missing parameters
	flags = flags || {};
	//TODO: use mixin instead?
	if(!("places" in flags)){ flags.places = Infinity; }
	if(typeof flags.decimal != "string"){ flags.decimal = "."; }
	if(!("fractional" in flags) || /^0/.test(flags.places)){ flags.fractional = [true, false]; }
	if(!("exponent" in flags)){ flags.exponent = [true, false]; }
	if(!("eSigned" in flags)){ flags.eSigned = [true, false]; }

	var integerRE = number._integerRegexp(flags),
		decimalRE = dregexp.buildGroupRE(flags.fractional,
		function(q){
			var re = "";
			if(q && (flags.places!==0)){
				re = "\\" + flags.decimal;
				if(flags.places == Infinity){
					re = "(?:" + re + "\\d+)?";
				}else{
					re += "\\d{" + flags.places + "}";
				}
			}
			return re;
		},
		true
	);

	var exponentRE = dregexp.buildGroupRE(flags.exponent,
		function(q){
			if(q){ return "([eE]" + number._integerRegexp({ signed: flags.eSigned}) + ")"; }
			return "";
		}
	);

	var realRE = integerRE + decimalRE;
	// allow for decimals without integers, e.g. .25
	if(decimalRE){realRE = "(?:(?:"+ realRE + ")|(?:" + decimalRE + "))";}
	return realRE + exponentRE; // String
};

/*=====
number.__IntegerRegexpFlags = declare(null, {
	// signed: Boolean?
	//		The leading plus-or-minus sign. Can be true, false, or `[true,false]`.
	//		Default is `[true, false]`, (i.e. will match if it is signed
	//		or unsigned).
	// separator: String?
	//		The character used as the thousands separator. Default is no
	//		separator. For more than one symbol use an array, e.g. `[",", ""]`,
	//		makes ',' optional.
	// groupSize: Number?
	//		group size between separators
	// groupSize2: Number?
	//		second grouping, where separators 2..n have a different interval than the first separator (for India)
});
=====*/

number._integerRegexp = function(/*number.__IntegerRegexpFlags?*/ flags){
	// summary:
	//		Builds a regular expression that matches an integer

	// assign default values to missing parameters
	flags = flags || {};
	if(!("signed" in flags)){ flags.signed = [true, false]; }
	if(!("separator" in flags)){
		flags.separator = "";
	}else if(!("groupSize" in flags)){
		flags.groupSize = 3;
	}

	var signRE = dregexp.buildGroupRE(flags.signed,
		function(q){ return q ? "[-+]" : ""; },
		true
	);

	var numberRE = dregexp.buildGroupRE(flags.separator,
		function(sep){
			if(!sep){
				return "(?:\\d+)";
			}

			sep = dregexp.escapeString(sep);
			if(sep == " "){ sep = "\\s"; }
			else if(sep == "\xa0"){ sep = "\\s\\xa0"; }

			var grp = flags.groupSize, grp2 = flags.groupSize2;
			//TODO: should we continue to enforce that numbers with separators begin with 1-9?  See #6933
			if(grp2){
				var grp2RE = "(?:0|[1-9]\\d{0," + (grp2-1) + "}(?:[" + sep + "]\\d{" + grp2 + "})*[" + sep + "]\\d{" + grp + "})";
				return ((grp-grp2) > 0) ? "(?:" + grp2RE + "|(?:0|[1-9]\\d{0," + (grp-1) + "}))" : grp2RE;
			}
			return "(?:0|[1-9]\\d{0," + (grp-1) + "}(?:[" + sep + "]\\d{" + grp + "})*)";
		},
		true
	);

	return signRE + numberRE; // String
};

return number;
});

},
'dojo/i18n':function(){
define(["./_base/kernel", "require", "./has", "./_base/array", "./_base/config", "./_base/lang", "./_base/xhr", "./json", "module"],
	function(dojo, require, has, array, config, lang, xhr, json, module){

	// module:
	//		dojo/i18n

	has.add("dojo-preload-i18n-Api",
		// if true, define the preload localizations machinery
		1
	);

	 1 || has.add("dojo-v1x-i18n-Api",
		// if true, define the v1.x i18n functions
		1
	);

	var
		thisModule = dojo.i18n =
			{
				// summary:
				//		This module implements the dojo/i18n! plugin and the v1.6- i18n API
				// description:
				//		We choose to include our own plugin to leverage functionality already contained in dojo
				//		and thereby reduce the size of the plugin compared to various loader implementations. Also, this
				//		allows foreign AMD loaders to be used without their plugins.
			},

		nlsRe =
			// regexp for reconstructing the master bundle name from parts of the regexp match
			// nlsRe.exec("foo/bar/baz/nls/en-ca/foo") gives:
			// ["foo/bar/baz/nls/en-ca/foo", "foo/bar/baz/nls/", "/", "/", "en-ca", "foo"]
			// nlsRe.exec("foo/bar/baz/nls/foo") gives:
			// ["foo/bar/baz/nls/foo", "foo/bar/baz/nls/", "/", "/", "foo", ""]
			// so, if match[5] is blank, it means this is the top bundle definition.
			// courtesy of http://requirejs.org
			/(^.*(^|\/)nls)(\/|$)([^\/]*)\/?([^\/]*)/,

		getAvailableLocales = function(
			root,
			locale,
			bundlePath,
			bundleName
		){
			// summary:
			//		return a vector of module ids containing all available locales with respect to the target locale
			//		For example, assuming:
			//
			//		- the root bundle indicates specific bundles for "fr" and "fr-ca",
			//		-  bundlePath is "myPackage/nls"
			//		- bundleName is "myBundle"
			//
			//		Then a locale argument of "fr-ca" would return
			//
			//			["myPackage/nls/myBundle", "myPackage/nls/fr/myBundle", "myPackage/nls/fr-ca/myBundle"]
			//
			//		Notice that bundles are returned least-specific to most-specific, starting with the root.
			//
			//		If root===false indicates we're working with a pre-AMD i18n bundle that doesn't tell about the available locales;
			//		therefore, assume everything is available and get 404 errors that indicate a particular localization is not available

			for(var result = [bundlePath + bundleName], localeParts = locale.split("-"), current = "", i = 0; i<localeParts.length; i++){
				current += (current ? "-" : "") + localeParts[i];
				if(!root || root[current]){
					result.push(bundlePath + current + "/" + bundleName);
					result.specificity = current;
				}
			}
			return result;
		},

		cache = {},

		getBundleName = function(moduleName, bundleName, locale){
			locale = locale ? locale.toLowerCase() : dojo.locale;
			moduleName = moduleName.replace(/\./g, "/");
			bundleName = bundleName.replace(/\./g, "/");
			return (/root/i.test(locale)) ?
				(moduleName + "/nls/" + bundleName) :
				(moduleName + "/nls/" + locale + "/" + bundleName);
		},

		getL10nName = dojo.getL10nName = function(moduleName, bundleName, locale){
			return moduleName = module.id + "!" + getBundleName(moduleName, bundleName, locale);
		},

		doLoad = function(require, bundlePathAndName, bundlePath, bundleName, locale, load){
			// summary:
			//		get the root bundle which instructs which other bundles are required to construct the localized bundle
			require([bundlePathAndName], function(root){
				var current = lang.clone(root.root || root.ROOT),// 1.6 built bundle defined ROOT
					availableLocales = getAvailableLocales(!root._v1x && root, locale, bundlePath, bundleName);
				require(availableLocales, function(){
					for (var i = 1; i<availableLocales.length; i++){
						current = lang.mixin(lang.clone(current), arguments[i]);
					}
					// target may not have been resolve (e.g., maybe only "fr" exists when "fr-ca" was requested)
					var target = bundlePathAndName + "/" + locale;
					cache[target] = current;
					current.$locale = availableLocales.specificity;
					load();
				});
			});
		},

		normalize = function(id, toAbsMid){
			// summary:
			//		id may be relative.
			//		preload has form `*preload*<path>/nls/<module>*<flattened locales>` and
			//		therefore never looks like a relative
			return /^\./.test(id) ? toAbsMid(id) : id;
		},

		getLocalesToLoad = function(targetLocale){
			var list = config.extraLocale || [];
			list = lang.isArray(list) ? list : [list];
			list.push(targetLocale);
			return list;
		},

		load = function(id, require, load){
			// summary:
			//		id is in one of the following formats
			//
			//		1. <path>/nls/<bundle>
			//			=> load the bundle, localized to config.locale; load all bundles localized to
			//			config.extraLocale (if any); return the loaded bundle localized to config.locale.
			//
			//		2. <path>/nls/<locale>/<bundle>
			//			=> load then return the bundle localized to <locale>
			//
			//		3. *preload*<path>/nls/<module>*<JSON array of available locales>
			//			=> for config.locale and all config.extraLocale, load all bundles found
			//			in the best-matching bundle rollup. A value of 1 is returned, which
			//			is meaningless other than to say the plugin is executing the requested
			//			preloads
			//
			//		In cases 1 and 2, <path> is always normalized to an absolute module id upon entry; see
			//		normalize. In case 3, it <path> is assumed to be absolute; this is arranged by the builder.
			//
			//		To load a bundle means to insert the bundle into the plugin's cache and publish the bundle
			//		value to the loader. Given <path>, <bundle>, and a particular <locale>, the cache key
			//
			//			<path>/nls/<bundle>/<locale>
			//
			//		will hold the value. Similarly, then plugin will publish this value to the loader by
			//
			//			define("<path>/nls/<bundle>/<locale>", <bundle-value>);
			//
			//		Given this algorithm, other machinery can provide fast load paths be preplacing
			//		values in the plugin's cache, which is public. When a load is demanded the
			//		cache is inspected before starting any loading. Explicitly placing values in the plugin
			//		cache is an advanced/experimental feature that should not be needed; use at your own risk.
			//
			//		For the normal AMD algorithm, the root bundle is loaded first, which instructs the
			//		plugin what additional localized bundles are required for a particular locale. These
			//		additional locales are loaded and a mix of the root and each progressively-specific
			//		locale is returned. For example:
			//
			//		1. The client demands "dojo/i18n!some/path/nls/someBundle
			//
			//		2. The loader demands load(some/path/nls/someBundle)
			//
			//		3. This plugin require's "some/path/nls/someBundle", which is the root bundle.
			//
			//		4. Assuming config.locale is "ab-cd-ef" and the root bundle indicates that localizations
			//		are available for "ab" and "ab-cd-ef" (note the missing "ab-cd", then the plugin
			//		requires "some/path/nls/ab/someBundle" and "some/path/nls/ab-cd-ef/someBundle"
			//
			//		5. Upon receiving all required bundles, the plugin constructs the value of the bundle
			//		ab-cd-ef as...
			//
			//				mixin(mixin(mixin({}, require("some/path/nls/someBundle"),
			//		  			require("some/path/nls/ab/someBundle")),
			//					require("some/path/nls/ab-cd-ef/someBundle"));
			//
			//		This value is inserted into the cache and published to the loader at the
			//		key/module-id some/path/nls/someBundle/ab-cd-ef.
			//
			//		The special preload signature (case 3) instructs the plugin to stop servicing all normal requests
			//		(further preload requests will be serviced) until all ongoing preloading has completed.
			//
			//		The preload signature instructs the plugin that a special rollup module is available that contains
			//		one or more flattened, localized bundles. The JSON array of available locales indicates which locales
			//		are available. Here is an example:
			//
			//			*preload*some/path/nls/someModule*["root", "ab", "ab-cd-ef"]
			//
			//		This indicates the following rollup modules are available:
			//
			//			some/path/nls/someModule_ROOT
			//			some/path/nls/someModule_ab
			//			some/path/nls/someModule_ab-cd-ef
			//
			//		Each of these modules is a normal AMD module that contains one or more flattened bundles in a hash.
			//		For example, assume someModule contained the bundles some/bundle/path/someBundle and
			//		some/bundle/path/someOtherBundle, then some/path/nls/someModule_ab would be expressed as follows:
			//
			//			define({
			//				some/bundle/path/someBundle:<value of someBundle, flattened with respect to locale ab>,
			//				some/bundle/path/someOtherBundle:<value of someOtherBundle, flattened with respect to locale ab>,
			//			});
			//
			//		E.g., given this design, preloading for locale=="ab" can execute the following algorithm:
			//
			//			require(["some/path/nls/someModule_ab"], function(rollup){
			//				for(var p in rollup){
			//					var id = p + "/ab",
			//					cache[id] = rollup[p];
			//					define(id, rollup[p]);
			//				}
			//			});
			//
			//		Similarly, if "ab-cd" is requested, the algorithm can determine that "ab" is the best available and
			//		load accordingly.
			//
			//		The builder will write such rollups for every layer if a non-empty localeList  profile property is
			//		provided. Further, the builder will include the following cache entry in the cache associated with
			//		any layer.
			//
			//			"*now":function(r){r(['dojo/i18n!*preload*<path>/nls/<module>*<JSON array of available locales>']);}
			//
			//		The *now special cache module instructs the loader to apply the provided function to context-require
			//		with respect to the particular layer being defined. This causes the plugin to hold all normal service
			//		requests until all preloading is complete.
			//
			//		Notice that this algorithm is rarely better than the standard AMD load algorithm. Consider the normal case
			//		where the target locale has a single segment and a layer depends on a single bundle:
			//
			//		Without Preloads:
			//
			//		1. Layer loads root bundle.
			//		2. bundle is demanded; plugin loads single localized bundle.
			//
			//		With Preloads:
			//
			//		1. Layer causes preloading of target bundle.
			//		2. bundle is demanded; service is delayed until preloading complete; bundle is returned.
			//
			//		In each case a single transaction is required to load the target bundle. In cases where multiple bundles
			//		are required and/or the locale has multiple segments, preloads still requires a single transaction whereas
			//		the normal path requires an additional transaction for each additional bundle/locale-segment. However all
			//		of these additional transactions can be done concurrently. Owing to this analysis, the entire preloading
			//		algorithm can be discard during a build by setting the has feature dojo-preload-i18n-Api to false.

			if(has("dojo-preload-i18n-Api")){
				var split = id.split("*"),
					preloadDemand = split[1] == "preload";
				if(preloadDemand){
					if(!cache[id]){
						// use cache[id] to prevent multiple preloads of the same preload; this shouldn't happen, but
						// who knows what over-aggressive human optimizers may attempt
						cache[id] = 1;
						preloadL10n(split[2], json.parse(split[3]), 1, require);
					}
					// don't stall the loader!
					load(1);
				}
				if(preloadDemand || waitForPreloads(id, require, load)){
					return;
				}
			}

			var match = nlsRe.exec(id),
				bundlePath = match[1] + "/",
				bundleName = match[5] || match[4],
				bundlePathAndName = bundlePath + bundleName,
				localeSpecified = (match[5] && match[4]),
				targetLocale =	localeSpecified || dojo.locale || "",
				loadTarget = bundlePathAndName + "/" + targetLocale,
				loadList = localeSpecified ? [targetLocale] : getLocalesToLoad(targetLocale),
				remaining = loadList.length,
				finish = function(){
					if(!--remaining){
						load(lang.delegate(cache[loadTarget]));
					}
				};
			array.forEach(loadList, function(locale){
				var target = bundlePathAndName + "/" + locale;
				if(has("dojo-preload-i18n-Api")){
					checkForLegacyModules(target);
				}
				if(!cache[target]){
					doLoad(require, bundlePathAndName, bundlePath, bundleName, locale, finish);
				}else{
					finish();
				}
			});
		};

	if(has("dojo-unit-tests")){
		var unitTests = thisModule.unitTests = [];
	}

	if(has("dojo-preload-i18n-Api") ||  1 ){
		var normalizeLocale = thisModule.normalizeLocale = function(locale){
				var result = locale ? locale.toLowerCase() : dojo.locale;
				return result == "root" ? "ROOT" : result;
			},

			isXd = function(mid, contextRequire){
				return ( false  &&  1 ) ?
					contextRequire.isXdUrl(require.toUrl(mid + ".js")) :
					true;
			},

			preloading = 0,

			preloadWaitQueue = [],

			preloadL10n = thisModule._preloadLocalizations = function(/*String*/bundlePrefix, /*Array*/localesGenerated, /*boolean?*/ guaranteedAmdFormat, /*function?*/ contextRequire){
				// summary:
				//		Load available flattened resource bundles associated with a particular module for dojo/locale and all dojo/config.extraLocale (if any)
				// description:
				//		Only called by built layer files. The entire locale hierarchy is loaded. For example,
				//		if locale=="ab-cd", then ROOT, "ab", and "ab-cd" are loaded. This is different than v1.6-
				//		in that the v1.6- would only load ab-cd...which was *always* flattened.
				//
				//		If guaranteedAmdFormat is true, then the module can be loaded with require thereby circumventing the detection algorithm
				//		and the extra possible extra transaction.

				// If this function is called from legacy code, then guaranteedAmdFormat and contextRequire will be undefined. Since the function
				// needs a require in order to resolve module ids, fall back to the context-require associated with this dojo/i18n module, which
				// itself may have been mapped.
				contextRequire = contextRequire || require;

				function doRequire(mid, callback){
					if(isXd(mid, contextRequire) || guaranteedAmdFormat){
						contextRequire([mid], callback);
					}else{
						syncRequire([mid], callback, contextRequire);
					}
				}

				function forEachLocale(locale, func){
					// given locale= "ab-cd-ef", calls func on "ab-cd-ef", "ab-cd", "ab", "ROOT"; stops calling the first time func returns truthy
					var parts = locale.split("-");
					while(parts.length){
						if(func(parts.join("-"))){
							return;
						}
						parts.pop();
					}
					func("ROOT");
				}

					function preloadingAddLock(){
						preloading++;
					}

					function preloadingRelLock(){
						--preloading;
						while(!preloading && preloadWaitQueue.length){
							load.apply(null, preloadWaitQueue.shift());
						}
					}

					function cacheId(path, name, loc, require){
						// path is assumed to have a trailing "/"
						return require.toAbsMid(path + name + "/" + loc)
					}

					function preload(locale){
						locale = normalizeLocale(locale);
						forEachLocale(locale, function(loc){
							if(array.indexOf(localesGenerated, loc) >= 0){
								var mid = bundlePrefix.replace(/\./g, "/") + "_" + loc;
								preloadingAddLock();
								doRequire(mid, function(rollup){
									for(var p in rollup){
										var bundle = rollup[p],
											match = p.match(/(.+)\/([^\/]+)$/),
											bundleName, bundlePath;
											
											// If there is no match, the bundle is not a regular bundle from an AMD layer.
											if (!match){continue;}

											bundleName = match[2];
											bundlePath = match[1] + "/";

										// backcompat
										bundle._localized = bundle._localized || {};

										var localized;
										if(loc === "ROOT"){
											var root = localized = bundle._localized;
											delete bundle._localized;
											root.root = bundle;
											cache[require.toAbsMid(p)] = root;
										}else{
											localized = bundle._localized;
											cache[cacheId(bundlePath, bundleName, loc, require)] = bundle;
										}

										if(loc !== locale){
											// capture some locale variables
											function improveBundle(bundlePath, bundleName, bundle, localized){
												// locale was not flattened and we've fallen back to a less-specific locale that was flattened
												// for example, we had a flattened 'fr', a 'fr-ca' is available for at least this bundle, and
												// locale==='fr-ca'; therefore, we must improve the bundle as retrieved from the rollup by
												// manually loading the fr-ca version of the bundle and mixing this into the already-retrieved 'fr'
												// version of the bundle.
												//
												// Remember, different bundles may have different sets of locales available.
												//
												// we are really falling back on the regular algorithm here, but--hopefully--starting with most
												// of the required bundles already on board as given by the rollup and we need to "manually" load
												// only one locale from a few bundles...or even better...we won't find anything better to load.
												// This algorithm ensures there is nothing better to load even when we can only load a less-specific rollup.
												//
												// note: this feature is only available in async mode

												// inspect the loaded bundle that came from the rollup to see if something better is available
												// for any bundle in a rollup, more-specific available locales are given at localized.
												var requiredBundles = [],
													cacheIds = [];
												forEachLocale(locale, function(loc){
													if(localized[loc]){
														requiredBundles.push(require.toAbsMid(bundlePath + loc + "/" + bundleName));
														cacheIds.push(cacheId(bundlePath, bundleName, loc, require));
													}
												});

												if(requiredBundles.length){
													preloadingAddLock();
													contextRequire(requiredBundles, function(){
														for(var i = 0; i < requiredBundles.length; i++){
															bundle = lang.mixin(lang.clone(bundle), arguments[i]);
															cache[cacheIds[i]] = bundle;
														}
														// this is the best possible (maybe a perfect match, maybe not), accept it
														cache[cacheId(bundlePath, bundleName, locale, require)] = lang.clone(bundle);
														preloadingRelLock();
													});
												}else{
													// this is the best possible (definitely not a perfect match), accept it
													cache[cacheId(bundlePath, bundleName, locale, require)] = bundle;
												}
											}
											improveBundle(bundlePath, bundleName, bundle, localized);
										}
									}
									preloadingRelLock();
								});
								return true;
							}
							return false;
						});
					}

				preload();
				array.forEach(dojo.config.extraLocale, preload);
			},

			waitForPreloads = function(id, require, load){
				if(preloading){
					preloadWaitQueue.push([id, require, load]);
				}
				return preloading;
			},

			checkForLegacyModules = function()
				{};
	}

	if( 1 ){
		// this code path assumes the dojo loader and won't work with a standard AMD loader
		var amdValue = {},
			evalBundle =
				// use the function ctor to keep the minifiers away (also come close to global scope, but this is secondary)
				new Function(
					"__bundle",				   // the bundle to evalutate
					"__checkForLegacyModules", // a function that checks if __bundle defined __mid in the global space
					"__mid",				   // the mid that __bundle is intended to define
					"__amdValue",

					// returns one of:
					//		1 => the bundle was an AMD bundle
					//		a legacy bundle object that is the value of __mid
					//		instance of Error => could not figure out how to evaluate bundle

					  // used to detect when __bundle calls define
					  "var define = function(mid, factory){define.called = 1; __amdValue.result = factory || mid;},"
					+ "	   require = function(){define.called = 1;};"

					+ "try{"
					+		"define.called = 0;"
					+		"eval(__bundle);"
					+		"if(define.called==1)"
								// bundle called define; therefore signal it's an AMD bundle
					+			"return __amdValue;"

					+		"if((__checkForLegacyModules = __checkForLegacyModules(__mid)))"
								// bundle was probably a v1.6- built NLS flattened NLS bundle that defined __mid in the global space
					+			"return __checkForLegacyModules;"

					+ "}catch(e){}"
					// evaulating the bundle was *neither* an AMD *nor* a legacy flattened bundle
					// either way, re-eval *after* surrounding with parentheses

					+ "try{"
					+		"return eval('('+__bundle+')');"
					+ "}catch(e){"
					+		"return e;"
					+ "}"
				),

			syncRequire = function(deps, callback, require){
				var results = [];
				array.forEach(deps, function(mid){
					var url = require.toUrl(mid + ".js");

					function load(text){
						var result = evalBundle(text, checkForLegacyModules, mid, amdValue);
						if(result===amdValue){
							// the bundle was an AMD module; re-inject it through the normal AMD path
							// we gotta do this since it could be an anonymous module and simply evaluating
							// the text here won't provide the loader with the context to know what
							// module is being defined()'d. With browser caching, this should be free; further
							// this entire code path can be circumvented by using the AMD format to begin with
							results.push(cache[url] = amdValue.result);
						}else{
							if(result instanceof Error){
								console.error("failed to evaluate i18n bundle; url=" + url, result);
								result = {};
							}
							// nls/<locale>/<bundle-name> indicates not the root.
							results.push(cache[url] = (/nls\/[^\/]+\/[^\/]+$/.test(url) ? result : {root:result, _v1x:1}));
						}
					}

					if(cache[url]){
						results.push(cache[url]);
					}else{
						var bundle = require.syncLoadNls(mid);
						// don't need to check for legacy since syncLoadNls returns a module if the module
						// (1) was already loaded, or (2) was in the cache. In case 1, if syncRequire is called
						// from getLocalization --> load, then load will have called checkForLegacyModules() before
						// calling syncRequire; if syncRequire is called from preloadLocalizations, then we
						// don't care about checkForLegacyModules() because that will be done when a particular
						// bundle is actually demanded. In case 2, checkForLegacyModules() is never relevant
						// because cached modules are always v1.7+ built modules.
						if(bundle){
							results.push(bundle);
						}else{
							if(!xhr){
								try{
									require.getText(url, true, load);
								}catch(e){
									results.push(cache[url] = {});
								}
							}else{
								xhr.get({
									url:url,
									sync:true,
									load:load,
									error:function(){
										results.push(cache[url] = {});
									}
								});
							}
						}
					}
				});
				callback && callback.apply(null, results);
			};

		checkForLegacyModules = function(target){
			// legacy code may have already loaded [e.g] the raw bundle x/y/z at x.y.z; when true, push into the cache
			for(var result, names = target.split("/"), object = dojo.global[names[0]], i = 1; object && i<names.length-1; object = object[names[i++]]){}
			if(object){
				result = object[names[i]];
				if(!result){
					// fallback for incorrect bundle build of 1.6
					result = object[names[i].replace(/-/g,"_")];
				}
				if(result){
					cache[target] = result;
				}
			}
			return result;
		};

		thisModule.getLocalization = function(moduleName, bundleName, locale){
			var result,
				l10nName = getBundleName(moduleName, bundleName, locale);
			load(
				l10nName,

				// isXd() and syncRequire() need a context-require in order to resolve the mid with respect to a reference module.
				// Since this legacy function does not have the concept of a reference module, resolve with respect to this
				// dojo/i18n module, which, itself may have been mapped.
				(!isXd(l10nName, require) ? function(deps, callback){ syncRequire(deps, callback, require); } : require),

				function(result_){ result = result_; }
			);
			return result;
		};

		if(has("dojo-unit-tests")){
			unitTests.push(function(doh){
				doh.register("tests.i18n.unit", function(t){
					var check;

					check = evalBundle("{prop:1}", checkForLegacyModules, "nonsense", amdValue);
					t.is({prop:1}, check); t.is(undefined, check[1]);

					check = evalBundle("({prop:1})", checkForLegacyModules, "nonsense", amdValue);
					t.is({prop:1}, check); t.is(undefined, check[1]);

					check = evalBundle("{'prop-x':1}", checkForLegacyModules, "nonsense", amdValue);
					t.is({'prop-x':1}, check); t.is(undefined, check[1]);

					check = evalBundle("({'prop-x':1})", checkForLegacyModules, "nonsense", amdValue);
					t.is({'prop-x':1}, check); t.is(undefined, check[1]);

					check = evalBundle("define({'prop-x':1})", checkForLegacyModules, "nonsense", amdValue);
					t.is(amdValue, check); t.is({'prop-x':1}, amdValue.result);

					check = evalBundle("define('some/module', {'prop-x':1})", checkForLegacyModules, "nonsense", amdValue);
					t.is(amdValue, check); t.is({'prop-x':1}, amdValue.result);

					check = evalBundle("this is total nonsense and should throw an error", checkForLegacyModules, "nonsense", amdValue);
					t.is(check instanceof Error, true);
				});
			});
		}
	}

	return lang.mixin(thisModule, {
		dynamic:true,
		normalize:normalize,
		load:load,
		cache:cache,
		getL10nName: getL10nName
	});
});

},
'dojo/_base/xhr':function(){
define([
	"./kernel",
	"./sniff",
	"require",
	"../io-query",
	/*===== "./declare", =====*/
	"../dom",
	"../dom-form",
	"./Deferred",
	"./config",
	"./json",
	"./lang",
	"./array",
	"../on",
	"../aspect",
	"../request/watch",
	"../request/xhr",
	"../request/util"
], function(dojo, has, require, ioq, /*===== declare, =====*/ dom, domForm, Deferred, config, json, lang, array, on, aspect, watch, _xhr, util){
	// module:
	//		dojo/_base/xhr

	/*=====
	dojo._xhrObj = function(){
		// summary:
		//		does the work of portably generating a new XMLHTTPRequest object.
	};
	=====*/
	dojo._xhrObj = _xhr._create;

	var cfg = dojo.config;

	// mix in io-query and dom-form
	dojo.objectToQuery = ioq.objectToQuery;
	dojo.queryToObject = ioq.queryToObject;
	dojo.fieldToObject = domForm.fieldToObject;
	dojo.formToObject = domForm.toObject;
	dojo.formToQuery = domForm.toQuery;
	dojo.formToJson = domForm.toJson;

	// need to block async callbacks from snatching this thread as the result
	// of an async callback might call another sync XHR, this hangs khtml forever
	// must checked by watchInFlight()

	dojo._blockAsync = false;

	// MOW: remove dojo._contentHandlers alias in 2.0
	var handlers = dojo._contentHandlers = dojo.contentHandlers = {
		// summary:
		//		A map of available XHR transport handle types. Name matches the
		//		`handleAs` attribute passed to XHR calls.
		// description:
		//		A map of available XHR transport handle types. Name matches the
		//		`handleAs` attribute passed to XHR calls. Each contentHandler is
		//		called, passing the xhr object for manipulation. The return value
		//		from the contentHandler will be passed to the `load` or `handle`
		//		functions defined in the original xhr call.
		// example:
		//		Creating a custom content-handler:
		//	|	xhr.contentHandlers.makeCaps = function(xhr){
		//	|		return xhr.responseText.toUpperCase();
		//	|	}
		//	|	// and later:
		//	|	dojo.xhrGet({
		//	|		url:"foo.txt",
		//	|		handleAs:"makeCaps",
		//	|		load: function(data){ /* data is a toUpper version of foo.txt */ }
		//	|	});

		"text": function(xhr){
			// summary:
			//		A contentHandler which simply returns the plaintext response data
			return xhr.responseText;
		},
		"json": function(xhr){
			// summary:
			//		A contentHandler which returns a JavaScript object created from the response data
			return json.fromJson(xhr.responseText || null);
		},
		"json-comment-filtered": function(xhr){
			// summary:
			//		A contentHandler which expects comment-filtered JSON.
			// description:
			//		A contentHandler which expects comment-filtered JSON.
			//		the json-comment-filtered option was implemented to prevent
			//		"JavaScript Hijacking", but it is less secure than standard JSON. Use
			//		standard JSON instead. JSON prefixing can be used to subvert hijacking.
			//
			//		Will throw a notice suggesting to use application/json mimetype, as
			//		json-commenting can introduce security issues. To decrease the chances of hijacking,
			//		use the standard `json` contentHandler, and prefix your "JSON" with: {}&&
			//
			//		use djConfig.useCommentedJson = true to turn off the notice
			if(!config.useCommentedJson){
				console.warn("Consider using the standard mimetype:application/json."
					+ " json-commenting can introduce security issues. To"
					+ " decrease the chances of hijacking, use the standard the 'json' handler and"
					+ " prefix your json with: {}&&\n"
					+ "Use djConfig.useCommentedJson=true to turn off this message.");
			}

			var value = xhr.responseText;
			var cStartIdx = value.indexOf("\/*");
			var cEndIdx = value.lastIndexOf("*\/");
			if(cStartIdx == -1 || cEndIdx == -1){
				throw new Error("JSON was not comment filtered");
			}
			return json.fromJson(value.substring(cStartIdx+2, cEndIdx));
		},
		"javascript": function(xhr){
			// summary:
			//		A contentHandler which evaluates the response data, expecting it to be valid JavaScript

			// FIXME: try Moz and IE specific eval variants?
			return dojo.eval(xhr.responseText);
		},
		"xml": function(xhr){
			// summary:
			//		A contentHandler returning an XML Document parsed from the response data
			var result = xhr.responseXML;

			if(result && has("dom-qsa2.1") && !result.querySelectorAll && has("dom-parser")){
				// http://bugs.dojotoolkit.org/ticket/15631
				// IE9 supports a CSS3 querySelectorAll implementation, but the DOM implementation 
				// returned by IE9 xhr.responseXML does not. Manually create the XML DOM to gain 
				// the fuller-featured implementation and avoid bugs caused by the inconsistency
				result = new DOMParser().parseFromString(xhr.responseText, "application/xml");
			}

			if(has("ie")){
				if((!result || !result.documentElement)){
					//WARNING: this branch used by the xml handling in dojo.io.iframe,
					//so be sure to test dojo.io.iframe if making changes below.
					var ms = function(n){ return "MSXML" + n + ".DOMDocument"; };
					var dp = ["Microsoft.XMLDOM", ms(6), ms(4), ms(3), ms(2)];
					array.some(dp, function(p){
						try{
							var dom = new ActiveXObject(p);
							dom.async = false;
							dom.loadXML(xhr.responseText);
							result = dom;
						}catch(e){ return false; }
						return true;
					});
				}
			}
			return result; // DOMDocument
		},
		"json-comment-optional": function(xhr){
			// summary:
			//		A contentHandler which checks the presence of comment-filtered JSON and
			//		alternates between the `json` and `json-comment-filtered` contentHandlers.
			if(xhr.responseText && /^[^{\[]*\/\*/.test(xhr.responseText)){
				return handlers["json-comment-filtered"](xhr);
			}else{
				return handlers["json"](xhr);
			}
		}
	};

	/*=====

	// kwargs function parameter definitions.   Assigning to dojo namespace rather than making them local variables
	// because they are used by dojo/io modules too

	dojo.__IoArgs = declare(null, {
		// url: String
		//		URL to server endpoint.
		// content: Object?
		//		Contains properties with string values. These
		//		properties will be serialized as name1=value2 and
		//		passed in the request.
		// timeout: Integer?
		//		Milliseconds to wait for the response. If this time
		//		passes, the then error callbacks are called.
		// form: DOMNode?
		//		DOM node for a form. Used to extract the form values
		//		and send to the server.
		// preventCache: Boolean?
		//		Default is false. If true, then a
		//		"dojo.preventCache" parameter is sent in the request
		//		with a value that changes with each request
		//		(timestamp). Useful only with GET-type requests.
		// handleAs: String?
		//		Acceptable values depend on the type of IO
		//		transport (see specific IO calls for more information).
		// rawBody: String?
		//		Sets the raw body for an HTTP request. If this is used, then the content
		//		property is ignored. This is mostly useful for HTTP methods that have
		//		a body to their requests, like PUT or POST. This property can be used instead
		//		of postData and putData for dojo/_base/xhr.rawXhrPost and dojo/_base/xhr.rawXhrPut respectively.
		// ioPublish: Boolean?
		//		Set this explicitly to false to prevent publishing of topics related to
		//		IO operations. Otherwise, if djConfig.ioPublish is set to true, topics
		//		will be published via dojo/topic.publish() for different phases of an IO operation.
		//		See dojo/main.__IoPublish for a list of topics that are published.

		load: function(response, ioArgs){
			// summary:
			//		This function will be
			//		called on a successful HTTP response code.
	 		// ioArgs: dojo/main.__IoCallbackArgs
			//		Provides additional information about the request.
			// response: Object
			//		The response in the format as defined with handleAs.
		},

		error: function(response, ioArgs){
			// summary:
			//		This function will
			//		be called when the request fails due to a network or server error, the url
			//		is invalid, etc. It will also be called if the load or handle callback throws an
			//		exception, unless djConfig.debugAtAllCosts is true.	 This allows deployed applications
			//		to continue to run even when a logic error happens in the callback, while making
			//		it easier to troubleshoot while in debug mode.
			// ioArgs: dojo/main.__IoCallbackArgs
			//		Provides additional information about the request.
			// response: Object
			//		The response in the format as defined with handleAs.
		},

		handle: function(loadOrError, response, ioArgs){
			// summary:
	 		//		This function will
	 		//		be called at the end of every request, whether or not an error occurs.
			// loadOrError: String
			//		Provides a string that tells you whether this function
			//		was called because of success (load) or failure (error).
			// response: Object
			//		The response in the format as defined with handleAs.
			// ioArgs: dojo/main.__IoCallbackArgs
			//		Provides additional information about the request.
		}
	});

	dojo.__IoCallbackArgs = declare(null, {
		// args: Object
		//		the original object argument to the IO call.
		// xhr: XMLHttpRequest
		//		For XMLHttpRequest calls only, the
		//		XMLHttpRequest object that was used for the
		//		request.
		// url: String
		//		The final URL used for the call. Many times it
		//		will be different than the original args.url
		//		value.
		// query: String
		//		For non-GET requests, the
		//		name1=value1&name2=value2 parameters sent up in
		//		the request.
		// handleAs: String
		//		The final indicator on how the response will be
		//		handled.
		// id: String
		//		For dojo/io/script calls only, the internal
		//		script ID used for the request.
		// canDelete: Boolean
		//		For dojo/io/script calls only, indicates
		//		whether the script tag that represents the
		//		request can be deleted after callbacks have
		//		been called. Used internally to know when
		//		cleanup can happen on JSONP-type requests.
		// json: Object
		//		For dojo/io/script calls only: holds the JSON
		//		response for JSONP-type requests. Used
		//		internally to hold on to the JSON responses.
		//		You should not need to access it directly --
		//		the same object should be passed to the success
		//		callbacks directly.
	});

	dojo.__IoPublish = declare(null, {
		// summary:
		//		This is a list of IO topics that can be published
		//		if djConfig.ioPublish is set to true. IO topics can be
		//		published for any Input/Output, network operation. So,
		//		dojo.xhr, dojo.io.script and dojo.io.iframe can all
		//		trigger these topics to be published.
		// start: String
		//		"/dojo/io/start" is sent when there are no outstanding IO
		//		requests, and a new IO request is started. No arguments
		//		are passed with this topic.
		// send: String
		//		"/dojo/io/send" is sent whenever a new IO request is started.
		//		It passes the dojo.Deferred for the request with the topic.
		// load: String
		//		"/dojo/io/load" is sent whenever an IO request has loaded
		//		successfully. It passes the response and the dojo.Deferred
		//		for the request with the topic.
		// error: String
		//		"/dojo/io/error" is sent whenever an IO request has errored.
		//		It passes the error and the dojo.Deferred
		//		for the request with the topic.
		// done: String
		//		"/dojo/io/done" is sent whenever an IO request has completed,
		//		either by loading or by erroring. It passes the error and
		//		the dojo.Deferred for the request with the topic.
		// stop: String
		//		"/dojo/io/stop" is sent when all outstanding IO requests have
		//		finished. No arguments are passed with this topic.
	});
	=====*/


	dojo._ioSetArgs = function(/*dojo/main.__IoArgs*/args,
			/*Function*/canceller,
			/*Function*/okHandler,
			/*Function*/errHandler){
		// summary:
		//		sets up the Deferred and ioArgs property on the Deferred so it
		//		can be used in an io call.
		// args:
		//		The args object passed into the public io call. Recognized properties on
		//		the args object are:
		// canceller:
		//		The canceller function used for the Deferred object. The function
		//		will receive one argument, the Deferred object that is related to the
		//		canceller.
		// okHandler:
		//		The first OK callback to be registered with Deferred. It has the opportunity
		//		to transform the OK response. It will receive one argument -- the Deferred
		//		object returned from this function.
		// errHandler:
		//		The first error callback to be registered with Deferred. It has the opportunity
		//		to do cleanup on an error. It will receive two arguments: error (the
		//		Error object) and dfd, the Deferred object returned from this function.

		var ioArgs = {args: args, url: args.url};

		//Get values from form if requested.
		var formObject = null;
		if(args.form){
			var form = dom.byId(args.form);
			//IE requires going through getAttributeNode instead of just getAttribute in some form cases,
			//so use it for all. See #2844
			var actnNode = form.getAttributeNode("action");
			ioArgs.url = ioArgs.url || (actnNode ? actnNode.value : null);
			formObject = domForm.toObject(form);
		}

		// set up the query params
		var miArgs = [{}];

		if(formObject){
			// potentially over-ride url-provided params w/ form values
			miArgs.push(formObject);
		}
		if(args.content){
			// stuff in content over-rides what's set by form
			miArgs.push(args.content);
		}
		if(args.preventCache){
			miArgs.push({"dojo.preventCache": new Date().valueOf()});
		}
		ioArgs.query = ioq.objectToQuery(lang.mixin.apply(null, miArgs));

		// .. and the real work of getting the deferred in order, etc.
		ioArgs.handleAs = args.handleAs || "text";
		var d = new Deferred(function(dfd){
			dfd.canceled = true;
			canceller && canceller(dfd);

			var err = dfd.ioArgs.error;
			if(!err){
				err = new Error("request cancelled");
				err.dojoType="cancel";
				dfd.ioArgs.error = err;
			}
			return err;
		});
		d.addCallback(okHandler);

		//Support specifying load, error and handle callback functions from the args.
		//For those callbacks, the "this" object will be the args object.
		//The callbacks will get the deferred result value as the
		//first argument and the ioArgs object as the second argument.
		var ld = args.load;
		if(ld && lang.isFunction(ld)){
			d.addCallback(function(value){
				return ld.call(args, value, ioArgs);
			});
		}
		var err = args.error;
		if(err && lang.isFunction(err)){
			d.addErrback(function(value){
				return err.call(args, value, ioArgs);
			});
		}
		var handle = args.handle;
		if(handle && lang.isFunction(handle)){
			d.addBoth(function(value){
				return handle.call(args, value, ioArgs);
			});
		}

		// Attach error handler last (not including topic publishing)
		// to catch any errors that may have been generated from load
		// or handle functions.
		d.addErrback(function(error){
			return errHandler(error, d);
		});

		//Plug in topic publishing, if dojo.publish is loaded.
		if(cfg.ioPublish && dojo.publish && ioArgs.args.ioPublish !== false){
			d.addCallbacks(
				function(res){
					dojo.publish("/dojo/io/load", [d, res]);
					return res;
				},
				function(res){
					dojo.publish("/dojo/io/error", [d, res]);
					return res;
				}
			);
			d.addBoth(function(res){
				dojo.publish("/dojo/io/done", [d, res]);
				return res;
			});
		}

		d.ioArgs = ioArgs;

		// FIXME: need to wire up the xhr object's abort method to something
		// analogous in the Deferred
		return d;
	};

	var _deferredOk = function(/*Deferred*/dfd){
		// summary:
		//		okHandler function for dojo._ioSetArgs call.

		var ret = handlers[dfd.ioArgs.handleAs](dfd.ioArgs.xhr);
		return ret === undefined ? null : ret;
	};
	var _deferError = function(/*Error*/error, /*Deferred*/dfd){
		// summary:
		//		errHandler function for dojo._ioSetArgs call.

		if(!dfd.ioArgs.args.failOk){
			console.error(error);
		}
		return error;
	};

	//Use a separate count for knowing if we are starting/stopping io calls.
	var _checkPubCount = function(dfd){
		if(_pubCount <= 0){
			_pubCount = 0;
			if(cfg.ioPublish && dojo.publish && (!dfd || dfd && dfd.ioArgs.args.ioPublish !== false)){
				dojo.publish("/dojo/io/stop");
			}
		}
	};

	var _pubCount = 0;
	aspect.after(watch, "_onAction", function(){
		_pubCount -= 1;
	});
	aspect.after(watch, "_onInFlight", _checkPubCount);

	dojo._ioCancelAll = watch.cancelAll;
	/*=====
	dojo._ioCancelAll = function(){
		// summary:
		//		Cancels all pending IO requests, regardless of IO type
		//		(xhr, script, iframe).
	};
	=====*/

	dojo._ioNotifyStart = function(/*Deferred*/dfd){
		// summary:
		//		If dojo.publish is available, publish topics
		//		about the start of a request queue and/or the
		//		the beginning of request.
		//
		//		Used by IO transports. An IO transport should
		//		call this method before making the network connection.
		if(cfg.ioPublish && dojo.publish && dfd.ioArgs.args.ioPublish !== false){
			if(!_pubCount){
				dojo.publish("/dojo/io/start");
			}
			_pubCount += 1;
			dojo.publish("/dojo/io/send", [dfd]);
		}
	};

	dojo._ioWatch = function(dfd, validCheck, ioCheck, resHandle){
		// summary:
		//		Watches the io request represented by dfd to see if it completes.
		// dfd: Deferred
		//		The Deferred object to watch.
		// validCheck: Function
		//		Function used to check if the IO request is still valid. Gets the dfd
		//		object as its only argument.
		// ioCheck: Function
		//		Function used to check if basic IO call worked. Gets the dfd
		//		object as its only argument.
		// resHandle: Function
		//		Function used to process response. Gets the dfd
		//		object as its only argument.

		var args = dfd.ioArgs.options = dfd.ioArgs.args;
		lang.mixin(dfd, {
			response: dfd.ioArgs,
			isValid: function(response){
				return validCheck(dfd);
			},
			isReady: function(response){
				return ioCheck(dfd);
			},
			handleResponse: function(response){
				return resHandle(dfd);
			}
		});
		watch(dfd);

		_checkPubCount(dfd);
	};

	var _defaultContentType = "application/x-www-form-urlencoded";

	dojo._ioAddQueryToUrl = function(/*dojo.__IoCallbackArgs*/ioArgs){
		// summary:
		//		Adds query params discovered by the io deferred construction to the URL.
		//		Only use this for operations which are fundamentally GET-type operations.
		if(ioArgs.query.length){
			ioArgs.url += (ioArgs.url.indexOf("?") == -1 ? "?" : "&") + ioArgs.query;
			ioArgs.query = null;
		}
	};

	/*=====
	dojo.__XhrArgs = declare(dojo.__IoArgs, {
		// summary:
		//		In addition to the properties listed for the dojo._IoArgs type,
		//		the following properties are allowed for dojo.xhr* methods.
		// handleAs: String?
		//		Acceptable values are: text (default), json, json-comment-optional,
		//		json-comment-filtered, javascript, xml. See `dojo/_base/xhr.contentHandlers`
	 	// sync: Boolean?
		//		false is default. Indicates whether the request should
		//		be a synchronous (blocking) request.
		// headers: Object?
		//		Additional HTTP headers to send in the request.
		// failOk: Boolean?
		//		false is default. Indicates whether a request should be
		//		allowed to fail (and therefore no console error message in
		//		the event of a failure)
		// contentType: String|Boolean
		//		"application/x-www-form-urlencoded" is default. Set to false to
		//		prevent a Content-Type header from being sent, or to a string
		//		to send a different Content-Type.
	 });
	=====*/

	dojo.xhr = function(/*String*/ method, /*dojo.__XhrArgs*/ args, /*Boolean?*/ hasBody){
		// summary:
		//		Deprecated.   Use dojo/request instead.
		// description:
		//		Sends an HTTP request with the given method.
		//		See also dojo.xhrGet(), xhrPost(), xhrPut() and dojo.xhrDelete() for shortcuts
		//		for those HTTP methods. There are also methods for "raw" PUT and POST methods
		//		via dojo.rawXhrPut() and dojo.rawXhrPost() respectively.
		// method:
		//		HTTP method to be used, such as GET, POST, PUT, DELETE. Should be uppercase.
		// hasBody:
		//		If the request has an HTTP body, then pass true for hasBody.

		var rDfd;
		//Make the Deferred object for this xhr request.
		var dfd = dojo._ioSetArgs(args, function(dfd){
			rDfd && rDfd.cancel();
		}, _deferredOk, _deferError);
		var ioArgs = dfd.ioArgs;

		//Allow for specifying the HTTP body completely.
		if("postData" in args){
			ioArgs.query = args.postData;
		}else if("putData" in args){
			ioArgs.query = args.putData;
		}else if("rawBody" in args){
			ioArgs.query = args.rawBody;
		}else if((arguments.length > 2 && !hasBody) || "POST|PUT".indexOf(method.toUpperCase()) === -1){
			//Check for hasBody being passed. If no hasBody,
			//then only append query string if not a POST or PUT request.
			dojo._ioAddQueryToUrl(ioArgs);
		}

		var options = {
			method: method,
			handleAs: "text",
			timeout: args.timeout,
			withCredentials: args.withCredentials,
			ioArgs: ioArgs
		};

		if(typeof args.headers !== 'undefined'){
			options.headers = args.headers;
		}
		if(typeof args.contentType !== 'undefined'){
			if(!options.headers){
				options.headers = {};
			}
			options.headers['Content-Type'] = args.contentType;
		}
		if(typeof ioArgs.query !== 'undefined'){
			options.data = ioArgs.query;
		}
		if(typeof args.sync !== 'undefined'){
			options.sync = args.sync;
		}

		dojo._ioNotifyStart(dfd);
		try{
			rDfd = _xhr(ioArgs.url, options, true);
		}catch(e){
			// If XHR creation fails, dojo/request/xhr throws
			// When this happens, cancel the deferred
			dfd.cancel();
			return dfd;
		}

		// sync ioArgs
		dfd.ioArgs.xhr = rDfd.response.xhr;

		rDfd.then(function(){
			dfd.resolve(dfd);
		}).otherwise(function(error){
			ioArgs.error = error;
			if(error.response){
				error.status = error.response.status;
				error.responseText = error.response.text;
				error.xhr = error.response.xhr;
			}
			dfd.reject(error);
		});
		return dfd; // dojo/_base/Deferred
	};

	dojo.xhrGet = function(/*dojo.__XhrArgs*/ args){
		// summary:
		//		Sends an HTTP GET request to the server.
		return dojo.xhr("GET", args); // dojo/_base/Deferred
	};

	dojo.rawXhrPost = dojo.xhrPost = function(/*dojo.__XhrArgs*/ args){
		// summary:
		//		Sends an HTTP POST request to the server. In addition to the properties
		//		listed for the dojo.__XhrArgs type, the following property is allowed:
		// postData:
		//		String. Send raw data in the body of the POST request.
		return dojo.xhr("POST", args, true); // dojo/_base/Deferred
	};

	dojo.rawXhrPut = dojo.xhrPut = function(/*dojo.__XhrArgs*/ args){
		// summary:
		//		Sends an HTTP PUT request to the server. In addition to the properties
		//		listed for the dojo.__XhrArgs type, the following property is allowed:
		// putData:
		//		String. Send raw data in the body of the PUT request.
		return dojo.xhr("PUT", args, true); // dojo/_base/Deferred
	};

	dojo.xhrDelete = function(/*dojo.__XhrArgs*/ args){
		// summary:
		//		Sends an HTTP DELETE request to the server.
		return dojo.xhr("DELETE", args); // dojo/_base/Deferred
	};

	/*
	dojo.wrapForm = function(formNode){
		// summary:
		//		A replacement for FormBind, but not implemented yet.

		// FIXME: need to think harder about what extensions to this we might
		// want. What should we allow folks to do w/ this? What events to
		// set/send?
		throw new Error("dojo.wrapForm not yet implemented");
	}
	*/

	dojo._isDocumentOk = function(x){
		return util.checkStatus(x.status);
	};

	dojo._getText = function(url){
		var result;
		dojo.xhrGet({url:url, sync:true, load:function(text){
			result = text;
		}});
		return result;
	};

	// Add aliases for static functions to dojo.xhr since dojo.xhr is what's returned from this module
	lang.mixin(dojo.xhr, {
		_xhrObj: dojo._xhrObj,
		fieldToObject: domForm.fieldToObject,
		formToObject: domForm.toObject,
		objectToQuery: ioq.objectToQuery,
		formToQuery: domForm.toQuery,
		formToJson: domForm.toJson,
		queryToObject: ioq.queryToObject,
		contentHandlers: handlers,
		_ioSetArgs: dojo._ioSetArgs,
		_ioCancelAll: dojo._ioCancelAll,
		_ioNotifyStart: dojo._ioNotifyStart,
		_ioWatch: dojo._ioWatch,
		_ioAddQueryToUrl: dojo._ioAddQueryToUrl,
		_isDocumentOk: dojo._isDocumentOk,
		_getText: dojo._getText,
		get: dojo.xhrGet,
		post: dojo.xhrPost,
		put: dojo.xhrPut,
		del: dojo.xhrDelete	// because "delete" is a reserved word
	});

	return dojo.xhr;
});

},
'dojo/io-query':function(){
define(["./_base/lang"], function(lang){

// module:
//		dojo/io-query

var backstop = {};

return {
// summary:
//		This module defines query string processing functions.

	objectToQuery: function objectToQuery(/*Object*/ map){
		// summary:
        //		takes a name/value mapping object and returns a string representing
        //		a URL-encoded version of that object.
        // example:
        //		this object:
        //
        //	|	{
        //	|		blah: "blah",
        //	|		multi: [
        //	|			"thud",
        //	|			"thonk"
        //	|		]
        //	|	};
        //
        //		yields the following query string:
        //
        //	|	"blah=blah&multi=thud&multi=thonk"

        // FIXME: need to implement encodeAscii!!
        var enc = encodeURIComponent, pairs = [];
        for(var name in map){
            var value = map[name];
            if(value != backstop[name]){
                var assign = enc(name) + "=";
                if(lang.isArray(value)){
                    for(var i = 0, l = value.length; i < l; ++i){
                        pairs.push(assign + enc(value[i]));
                    }
                }else{
                    pairs.push(assign + enc(value));
                }
            }
        }
        return pairs.join("&"); // String
    },

	queryToObject: function queryToObject(/*String*/ str){
        // summary:
        //		Create an object representing a de-serialized query section of a
        //		URL. Query keys with multiple values are returned in an array.
        //
        // example:
        //		This string:
        //
        //	|		"foo=bar&foo=baz&thinger=%20spaces%20=blah&zonk=blarg&"
        //
        //		results in this object structure:
        //
        //	|		{
        //	|			foo: [ "bar", "baz" ],
        //	|			thinger: " spaces =blah",
        //	|			zonk: "blarg"
        //	|		}
        //
        //		Note that spaces and other urlencoded entities are correctly
        //		handled.

        // FIXME: should we grab the URL string if we're not passed one?
        var dec = decodeURIComponent, qp = str.split("&"), ret = {}, name, val;
        for(var i = 0, l = qp.length, item; i < l; ++i){
            item = qp[i];
            if(item.length){
                var s = item.indexOf("=");
                if(s < 0){
                    name = dec(item);
                    val = "";
                }else{
                    name = dec(item.slice(0, s));
                    val  = dec(item.slice(s + 1));
                }
                if(typeof ret[name] == "string"){ // inline'd type check
                    ret[name] = [ret[name]];
                }

                if(lang.isArray(ret[name])){
                    ret[name].push(val);
                }else{
                    ret[name] = val;
                }
            }
        }
        return ret; // Object
    }
};
});
},
'dojo/dom-form':function(){
define(["./_base/lang", "./dom", "./io-query", "./json"], function(lang, dom, ioq, json){
	// module:
	//		dojo/dom-form

    function setValue(/*Object*/ obj, /*String*/ name, /*String*/ value){
        // summary:
        //		For the named property in object, set the value. If a value
        //		already exists and it is a string, convert the value to be an
        //		array of values.

        // Skip it if there is no value
        if(value === null){
            return;
        }

        var val = obj[name];
        if(typeof val == "string"){ // inline'd type check
            obj[name] = [val, value];
        }else if(lang.isArray(val)){
            val.push(value);
        }else{
            obj[name] = value;
        }
    }

	var exclude = "file|submit|image|reset|button";

	var form = {
		// summary:
		//		This module defines form-processing functions.

		fieldToObject: function fieldToObject(/*DOMNode|String*/ inputNode){
			// summary:
			//		Serialize a form field to a JavaScript object.
			// description:
			//		Returns the value encoded in a form field as
			//		as a string or an array of strings. Disabled form elements
			//		and unchecked radio and checkboxes are skipped.	Multi-select
			//		elements are returned as an array of string values.
			// inputNode: DOMNode|String
			// returns: Object

			var ret = null;
			inputNode = dom.byId(inputNode);
			if(inputNode){
				var _in = inputNode.name, type = (inputNode.type || "").toLowerCase();
				if(_in && type && !inputNode.disabled){
					if(type == "radio" || type == "checkbox"){
						if(inputNode.checked){
							ret = inputNode.value;
						}
					}else if(inputNode.multiple){
						ret = [];
						var nodes = [inputNode.firstChild];
						while(nodes.length){
							for(var node = nodes.pop(); node; node = node.nextSibling){
								if(node.nodeType == 1 && node.tagName.toLowerCase() == "option"){
									if(node.selected){
										ret.push(node.value);
									}
								}else{
									if(node.nextSibling){
										nodes.push(node.nextSibling);
									}
									if(node.firstChild){
										nodes.push(node.firstChild);
									}
									break;
								}
							}
						}
					}else{
						ret = inputNode.value;
					}
				}
			}
			return ret; // Object
		},

		toObject: function formToObject(/*DOMNode|String*/ formNode){
			// summary:
			//		Serialize a form node to a JavaScript object.
			// description:
			//		Returns the values encoded in an HTML form as
			//		string properties in an object which it then returns. Disabled form
			//		elements, buttons, and other non-value form elements are skipped.
			//		Multi-select elements are returned as an array of string values.
			// formNode: DOMNode|String
			// example:
			//		This form:
			//		|	<form id="test_form">
			//		|		<input type="text" name="blah" value="blah">
			//		|		<input type="text" name="no_value" value="blah" disabled>
			//		|		<input type="button" name="no_value2" value="blah">
			//		|		<select type="select" multiple name="multi" size="5">
			//		|			<option value="blah">blah</option>
			//		|			<option value="thud" selected>thud</option>
			//		|			<option value="thonk" selected>thonk</option>
			//		|		</select>
			//		|	</form>
			//
			//		yields this object structure as the result of a call to
			//		formToObject():
			//
			//		|	{
			//		|		blah: "blah",
			//		|		multi: [
			//		|			"thud",
			//		|			"thonk"
			//		|		]
			//		|	};

			var ret = {}, elems = dom.byId(formNode).elements;
			for(var i = 0, l = elems.length; i < l; ++i){
				var item = elems[i], _in = item.name, type = (item.type || "").toLowerCase();
				if(_in && type && exclude.indexOf(type) < 0 && !item.disabled){
					setValue(ret, _in, form.fieldToObject(item));
					if(type == "image"){
						ret[_in + ".x"] = ret[_in + ".y"] = ret[_in].x = ret[_in].y = 0;
					}
				}
			}
			return ret; // Object
		},

		toQuery: function formToQuery(/*DOMNode|String*/ formNode){
			// summary:
			//		Returns a URL-encoded string representing the form passed as either a
			//		node or string ID identifying the form to serialize
			// formNode: DOMNode|String
			// returns: String

			return ioq.objectToQuery(form.toObject(formNode)); // String
		},

		toJson: function formToJson(/*DOMNode|String*/ formNode, /*Boolean?*/ prettyPrint){
			// summary:
			//		Create a serialized JSON string from a form node or string
			//		ID identifying the form to serialize
			// formNode: DOMNode|String
			// prettyPrint: Boolean?
			// returns: String

			return json.stringify(form.toObject(formNode), null, prettyPrint ? 4 : 0); // String
		}
	};

    return form;
});

},
'dojo/_base/Deferred':function(){
define([
	"./kernel",
	"../Deferred",
	"../promise/Promise",
	"../errors/CancelError",
	"../has",
	"./lang",
	"../when"
], function(dojo, NewDeferred, Promise, CancelError, has, lang, when){
	// module:
	//		dojo/_base/Deferred

	var mutator = function(){};
	var freeze = Object.freeze || function(){};
	// A deferred provides an API for creating and resolving a promise.
	var Deferred = dojo.Deferred = function(/*Function?*/ canceller){
		// summary:
		//		Deprecated.   This module defines the legacy dojo/_base/Deferred API.
		//		New code should use dojo/Deferred instead.
		// description:
		//		The Deferred API is based on the concept of promises that provide a
		//		generic interface into the eventual completion of an asynchronous action.
		//		The motivation for promises fundamentally is about creating a
		//		separation of concerns that allows one to achieve the same type of
		//		call patterns and logical data flow in asynchronous code as can be
		//		achieved in synchronous code. Promises allows one
		//		to be able to call a function purely with arguments needed for
		//		execution, without conflating the call with concerns of whether it is
		//		sync or async. One shouldn't need to alter a call's arguments if the
		//		implementation switches from sync to async (or vice versa). By having
		//		async functions return promises, the concerns of making the call are
		//		separated from the concerns of asynchronous interaction (which are
		//		handled by the promise).
		//
		//		The Deferred is a type of promise that provides methods for fulfilling the
		//		promise with a successful result or an error. The most important method for
		//		working with Dojo's promises is the then() method, which follows the
		//		CommonJS proposed promise API. An example of using a Dojo promise:
		//
		//		|	var resultingPromise = someAsyncOperation.then(function(result){
		//		|		... handle result ...
		//		|	},
		//		|	function(error){
		//		|		... handle error ...
		//		|	});
		//
		//		The .then() call returns a new promise that represents the result of the
		//		execution of the callback. The callbacks will never affect the original promises value.
		//
		//		The Deferred instances also provide the following functions for backwards compatibility:
		//
		//		- addCallback(handler)
		//		- addErrback(handler)
		//		- callback(result)
		//		- errback(result)
		//
		//		Callbacks are allowed to return promises themselves, so
		//		you can build complicated sequences of events with ease.
		//
		//		The creator of the Deferred may specify a canceller.  The canceller
		//		is a function that will be called if Deferred.cancel is called
		//		before the Deferred fires. You can use this to implement clean
		//		aborting of an XMLHttpRequest, etc. Note that cancel will fire the
		//		deferred with a CancelledError (unless your canceller returns
		//		another kind of error), so the errbacks should be prepared to
		//		handle that error for cancellable Deferreds.
		// example:
		//	|	var deferred = new Deferred();
		//	|	setTimeout(function(){ deferred.callback({success: true}); }, 1000);
		//	|	return deferred;
		// example:
		//		Deferred objects are often used when making code asynchronous. It
		//		may be easiest to write functions in a synchronous manner and then
		//		split code using a deferred to trigger a response to a long-lived
		//		operation. For example, instead of register a callback function to
		//		denote when a rendering operation completes, the function can
		//		simply return a deferred:
		//
		//		|	// callback style:
		//		|	function renderLotsOfData(data, callback){
		//		|		var success = false
		//		|		try{
		//		|			for(var x in data){
		//		|				renderDataitem(data[x]);
		//		|			}
		//		|			success = true;
		//		|		}catch(e){ }
		//		|		if(callback){
		//		|			callback(success);
		//		|		}
		//		|	}
		//
		//		|	// using callback style
		//		|	renderLotsOfData(someDataObj, function(success){
		//		|		// handles success or failure
		//		|		if(!success){
		//		|			promptUserToRecover();
		//		|		}
		//		|	});
		//		|	// NOTE: no way to add another callback here!!
		// example:
		//		Using a Deferred doesn't simplify the sending code any, but it
		//		provides a standard interface for callers and senders alike,
		//		providing both with a simple way to service multiple callbacks for
		//		an operation and freeing both sides from worrying about details
		//		such as "did this get called already?". With Deferreds, new
		//		callbacks can be added at any time.
		//
		//		|	// Deferred style:
		//		|	function renderLotsOfData(data){
		//		|		var d = new Deferred();
		//		|		try{
		//		|			for(var x in data){
		//		|				renderDataitem(data[x]);
		//		|			}
		//		|			d.callback(true);
		//		|		}catch(e){
		//		|			d.errback(new Error("rendering failed"));
		//		|		}
		//		|		return d;
		//		|	}
		//
		//		|	// using Deferred style
		//		|	renderLotsOfData(someDataObj).then(null, function(){
		//		|		promptUserToRecover();
		//		|	});
		//		|	// NOTE: addErrback and addCallback both return the Deferred
		//		|	// again, so we could chain adding callbacks or save the
		//		|	// deferred for later should we need to be notified again.
		// example:
		//		In this example, renderLotsOfData is synchronous and so both
		//		versions are pretty artificial. Putting the data display on a
		//		timeout helps show why Deferreds rock:
		//
		//		|	// Deferred style and async func
		//		|	function renderLotsOfData(data){
		//		|		var d = new Deferred();
		//		|		setTimeout(function(){
		//		|			try{
		//		|				for(var x in data){
		//		|					renderDataitem(data[x]);
		//		|				}
		//		|				d.callback(true);
		//		|			}catch(e){
		//		|				d.errback(new Error("rendering failed"));
		//		|			}
		//		|		}, 100);
		//		|		return d;
		//		|	}
		//
		//		|	// using Deferred style
		//		|	renderLotsOfData(someDataObj).then(null, function(){
		//		|		promptUserToRecover();
		//		|	});
		//
		//		Note that the caller doesn't have to change his code at all to
		//		handle the asynchronous case.

		var result, finished, canceled, fired, isError, head, nextListener;
		var promise = (this.promise = new Promise());

		function complete(value){
			if(finished){
				throw new Error("This deferred has already been resolved");
			}
			result = value;
			finished = true;
			notify();
		}
		function notify(){
			var mutated;
			while(!mutated && nextListener){
				var listener = nextListener;
				nextListener = nextListener.next;
				if((mutated = (listener.progress == mutator))){ // assignment and check
					finished = false;
				}

				var func = (isError ? listener.error : listener.resolved);
				if(has("config-useDeferredInstrumentation")){
					if(isError && NewDeferred.instrumentRejected){
						NewDeferred.instrumentRejected(result, !!func);
					}
				}
				if(func){
					try{
						var newResult = func(result);
						if (newResult && typeof newResult.then === "function"){
							newResult.then(lang.hitch(listener.deferred, "resolve"), lang.hitch(listener.deferred, "reject"), lang.hitch(listener.deferred, "progress"));
							continue;
						}
						var unchanged = mutated && newResult === undefined;
						if(mutated && !unchanged){
							isError = newResult instanceof Error;
						}
						listener.deferred[unchanged && isError ? "reject" : "resolve"](unchanged ? result : newResult);
					}catch(e){
						listener.deferred.reject(e);
					}
				}else{
					if(isError){
						listener.deferred.reject(result);
					}else{
						listener.deferred.resolve(result);
					}
				}
			}
		}

		this.isResolved = promise.isResolved = function(){
			// summary:
			//		Checks whether the deferred has been resolved.
			// returns: Boolean

			return fired == 0;
		};

		this.isRejected = promise.isRejected = function(){
			// summary:
			//		Checks whether the deferred has been rejected.
			// returns: Boolean

			return fired == 1;
		};

		this.isFulfilled = promise.isFulfilled = function(){
			// summary:
			//		Checks whether the deferred has been resolved or rejected.
			// returns: Boolean

			return fired >= 0;
		};

		this.isCanceled = promise.isCanceled = function(){
			// summary:
			//		Checks whether the deferred has been canceled.
			// returns: Boolean

			return canceled;
		};

		// calling resolve will resolve the promise
		this.resolve = this.callback = function(value){
			// summary:
			//		Fulfills the Deferred instance successfully with the provide value
			this.fired = fired = 0;
			this.results = [value, null];
			complete(value);
		};


		// calling error will indicate that the promise failed
		this.reject = this.errback = function(error){
			// summary:
			//		Fulfills the Deferred instance as an error with the provided error
			isError = true;
			this.fired = fired = 1;
			if(has("config-useDeferredInstrumentation")){
				if(NewDeferred.instrumentRejected){
					NewDeferred.instrumentRejected(error, !!nextListener);
				}
			}
			complete(error);
			this.results = [null, error];
		};
		// call progress to provide updates on the progress on the completion of the promise
		this.progress = function(update){
			// summary:
			//		Send progress events to all listeners
			var listener = nextListener;
			while(listener){
				var progress = listener.progress;
				progress && progress(update);
				listener = listener.next;
			}
		};
		this.addCallbacks = function(callback, errback){
			// summary:
			//		Adds callback and error callback for this deferred instance.
			// callback: Function?
			//		The callback attached to this deferred object.
			// errback: Function?
			//		The error callback attached to this deferred object.
			// returns:
			//		Returns this deferred object.
			this.then(callback, errback, mutator);
			return this;	// Deferred
		};
		// provide the implementation of the promise
		promise.then = this.then = function(/*Function?*/resolvedCallback, /*Function?*/errorCallback, /*Function?*/progressCallback){
			// summary:
			//		Adds a fulfilledHandler, errorHandler, and progressHandler to be called for
			//		completion of a promise. The fulfilledHandler is called when the promise
			//		is fulfilled. The errorHandler is called when a promise fails. The
			//		progressHandler is called for progress events. All arguments are optional
			//		and non-function values are ignored. The progressHandler is not only an
			//		optional argument, but progress events are purely optional. Promise
			//		providers are not required to ever create progress events.
			//
			//		This function will return a new promise that is fulfilled when the given
			//		fulfilledHandler or errorHandler callback is finished. This allows promise
			//		operations to be chained together. The value returned from the callback
			//		handler is the fulfillment value for the returned promise. If the callback
			//		throws an error, the returned promise will be moved to failed state.
			//
			// returns:
			//		Returns a new promise that represents the result of the
			//		execution of the callback. The callbacks will never affect the original promises value.
			// example:
			//		An example of using a CommonJS compliant promise:
			//		|	asyncComputeTheAnswerToEverything().
			//		|		then(addTwo).
			//		|		then(printResult, onError);
			//		|	>44
			//
			var returnDeferred = progressCallback == mutator ? this : new Deferred(promise.cancel);
			var listener = {
				resolved: resolvedCallback,
				error: errorCallback,
				progress: progressCallback,
				deferred: returnDeferred
			};
			if(nextListener){
				head = head.next = listener;
			}
			else{
				nextListener = head = listener;
			}
			if(finished){
				notify();
			}
			return returnDeferred.promise; // Promise
		};
		var deferred = this;
		promise.cancel = this.cancel = function(){
			// summary:
			//		Cancels the asynchronous operation
			if(!finished){
				var error = canceller && canceller(deferred);
				if(!finished){
					if (!(error instanceof Error)){
						error = new CancelError(error);
					}
					error.log = false;
					deferred.reject(error);
				}
			}
			canceled = true;
		};
		freeze(promise);
	};
	lang.extend(Deferred, {
		addCallback: function(/*Function*/ callback){
			// summary:
			//		Adds successful callback for this deferred instance.
			// returns:
			//		Returns this deferred object.
			return this.addCallbacks(lang.hitch.apply(dojo, arguments));	// Deferred
		},

		addErrback: function(/*Function*/ errback){
			// summary:
			//		Adds error callback for this deferred instance.
			// returns:
			//		Returns this deferred object.
			return this.addCallbacks(null, lang.hitch.apply(dojo, arguments));	// Deferred
		},

		addBoth: function(/*Function*/ callback){
			// summary:
			//		Add handler as both successful callback and error callback for this deferred instance.
			// returns:
			//		Returns this deferred object.
			var enclosed = lang.hitch.apply(dojo, arguments);
			return this.addCallbacks(enclosed, enclosed);	// Deferred
		},
		fired: -1
	});

	Deferred.when = dojo.when = when;

	return Deferred;
});

},
'dojo/Deferred':function(){
define([
	"./has",
	"./_base/lang",
	"./errors/CancelError",
	"./promise/Promise",
	"./promise/instrumentation"
], function(has, lang, CancelError, Promise, instrumentation){
	"use strict";

	// module:
	//		dojo/Deferred

	var PROGRESS = 0,
			RESOLVED = 1,
			REJECTED = 2;
	var FULFILLED_ERROR_MESSAGE = "This deferred has already been fulfilled.";

	var freezeObject = Object.freeze || function(){};

	var signalWaiting = function(waiting, type, result, rejection, deferred){
		if( 1 ){
			if(type === REJECTED && Deferred.instrumentRejected && waiting.length === 0){
				Deferred.instrumentRejected(result, false, rejection, deferred);
			}
		}

		for(var i = 0; i < waiting.length; i++){
			signalListener(waiting[i], type, result, rejection);
		}
	};

	var signalListener = function(listener, type, result, rejection){
		var func = listener[type];
		var deferred = listener.deferred;
		if(func){
			try{
				var newResult = func(result);
				if(type === PROGRESS){
					if(typeof newResult !== "undefined"){
						signalDeferred(deferred, type, newResult);
					}
				}else{
					if(newResult && typeof newResult.then === "function"){
						listener.cancel = newResult.cancel;
						newResult.then(
								// Only make resolvers if they're actually going to be used
								makeDeferredSignaler(deferred, RESOLVED),
								makeDeferredSignaler(deferred, REJECTED),
								makeDeferredSignaler(deferred, PROGRESS));
						return;
					}
					signalDeferred(deferred, RESOLVED, newResult);
				}
			}catch(error){
				signalDeferred(deferred, REJECTED, error);
			}
		}else{
			signalDeferred(deferred, type, result);
		}

		if( 1 ){
			if(type === REJECTED && Deferred.instrumentRejected){
				Deferred.instrumentRejected(result, !!func, rejection, deferred.promise);
			}
		}
	};

	var makeDeferredSignaler = function(deferred, type){
		return function(value){
			signalDeferred(deferred, type, value);
		};
	};

	var signalDeferred = function(deferred, type, result){
		if(!deferred.isCanceled()){
			switch(type){
				case PROGRESS:
					deferred.progress(result);
					break;
				case RESOLVED:
					deferred.resolve(result);
					break;
				case REJECTED:
					deferred.reject(result);
					break;
			}
		}
	};

	var Deferred = function(canceler){
		// summary:
		//		Creates a new deferred. This API is preferred over
		//		`dojo/_base/Deferred`.
		// description:
		//		Creates a new deferred, as an abstraction over (primarily)
		//		asynchronous operations. The deferred is the private interface
		//		that should not be returned to calling code. That's what the
		//		`promise` is for. See `dojo/promise/Promise`.
		// canceler: Function?
		//		Will be invoked if the deferred is canceled. The canceler
		//		receives the reason the deferred was canceled as its argument.
		//		The deferred is rejected with its return value, or a new
		//		`dojo/errors/CancelError` instance.

		// promise: dojo/promise/Promise
		//		The public promise object that clients can add callbacks to. 
		var promise = this.promise = new Promise();

		var deferred = this;
		var fulfilled, result, rejection;
		var canceled = false;
		var waiting = [];

		if( 1  && Error.captureStackTrace){
			Error.captureStackTrace(deferred, Deferred);
			Error.captureStackTrace(promise, Deferred);
		}

		this.isResolved = promise.isResolved = function(){
			// summary:
			//		Checks whether the deferred has been resolved.
			// returns: Boolean

			return fulfilled === RESOLVED;
		};

		this.isRejected = promise.isRejected = function(){
			// summary:
			//		Checks whether the deferred has been rejected.
			// returns: Boolean

			return fulfilled === REJECTED;
		};

		this.isFulfilled = promise.isFulfilled = function(){
			// summary:
			//		Checks whether the deferred has been resolved or rejected.
			// returns: Boolean

			return !!fulfilled;
		};

		this.isCanceled = promise.isCanceled = function(){
			// summary:
			//		Checks whether the deferred has been canceled.
			// returns: Boolean

			return canceled;
		};

		this.progress = function(update, strict){
			// summary:
			//		Emit a progress update on the deferred.
			// description:
			//		Emit a progress update on the deferred. Progress updates
			//		can be used to communicate updates about the asynchronous
			//		operation before it has finished.
			// update: any
			//		The progress update. Passed to progbacks.
			// strict: Boolean?
			//		If strict, will throw an error if the deferred has already
			//		been fulfilled and consequently no progress can be emitted.
			// returns: dojo/promise/Promise
			//		Returns the original promise for the deferred.

			if(!fulfilled){
				signalWaiting(waiting, PROGRESS, update, null, deferred);
				return promise;
			}else if(strict === true){
				throw new Error(FULFILLED_ERROR_MESSAGE);
			}else{
				return promise;
			}
		};

		this.resolve = function(value, strict){
			// summary:
			//		Resolve the deferred.
			// description:
			//		Resolve the deferred, putting it in a success state.
			// value: any
			//		The result of the deferred. Passed to callbacks.
			// strict: Boolean?
			//		If strict, will throw an error if the deferred has already
			//		been fulfilled and consequently cannot be resolved.
			// returns: dojo/promise/Promise
			//		Returns the original promise for the deferred.

			if(!fulfilled){
				// Set fulfilled, store value. After signaling waiting listeners unset
				// waiting.
				signalWaiting(waiting, fulfilled = RESOLVED, result = value, null, deferred);
				waiting = null;
				return promise;
			}else if(strict === true){
				throw new Error(FULFILLED_ERROR_MESSAGE);
			}else{
				return promise;
			}
		};

		var reject = this.reject = function(error, strict){
			// summary:
			//		Reject the deferred.
			// description:
			//		Reject the deferred, putting it in an error state.
			// error: any
			//		The error result of the deferred. Passed to errbacks.
			// strict: Boolean?
			//		If strict, will throw an error if the deferred has already
			//		been fulfilled and consequently cannot be rejected.
			// returns: dojo/promise/Promise
			//		Returns the original promise for the deferred.

			if(!fulfilled){
				if( 1  && Error.captureStackTrace){
					Error.captureStackTrace(rejection = {}, reject);
				}
				signalWaiting(waiting, fulfilled = REJECTED, result = error, rejection, deferred);
				waiting = null;
				return promise;
			}else if(strict === true){
				throw new Error(FULFILLED_ERROR_MESSAGE);
			}else{
				return promise;
			}
		};

		this.then = promise.then = function(callback, errback, progback){
			// summary:
			//		Add new callbacks to the deferred.
			// description:
			//		Add new callbacks to the deferred. Callbacks can be added
			//		before or after the deferred is fulfilled.
			// callback: Function?
			//		Callback to be invoked when the promise is resolved.
			//		Receives the resolution value.
			// errback: Function?
			//		Callback to be invoked when the promise is rejected.
			//		Receives the rejection error.
			// progback: Function?
			//		Callback to be invoked when the promise emits a progress
			//		update. Receives the progress update.
			// returns: dojo/promise/Promise
			//		Returns a new promise for the result of the callback(s).
			//		This can be used for chaining many asynchronous operations.

			var listener = [progback, callback, errback];
			// Ensure we cancel the promise we're waiting for, or if callback/errback
			// have returned a promise, cancel that one.
			listener.cancel = promise.cancel;
			listener.deferred = new Deferred(function(reason){
				// Check whether cancel is really available, returned promises are not
				// required to expose `cancel`
				return listener.cancel && listener.cancel(reason);
			});
			if(fulfilled && !waiting){
				signalListener(listener, fulfilled, result, rejection);
			}else{
				waiting.push(listener);
			}
			return listener.deferred.promise;
		};

		this.cancel = promise.cancel = function(reason, strict){
			// summary:
			//		Inform the deferred it may cancel its asynchronous operation.
			// description:
			//		Inform the deferred it may cancel its asynchronous operation.
			//		The deferred's (optional) canceler is invoked and the
			//		deferred will be left in a rejected state. Can affect other
			//		promises that originate with the same deferred.
			// reason: any
			//		A message that may be sent to the deferred's canceler,
			//		explaining why it's being canceled.
			// strict: Boolean?
			//		If strict, will throw an error if the deferred has already
			//		been fulfilled and consequently cannot be canceled.
			// returns: any
			//		Returns the rejection reason if the deferred was canceled
			//		normally.

			if(!fulfilled){
				// Cancel can be called even after the deferred is fulfilled
				if(canceler){
					var returnedReason = canceler(reason);
					reason = typeof returnedReason === "undefined" ? reason : returnedReason;
				}
				canceled = true;
				if(!fulfilled){
					// Allow canceler to provide its own reason, but fall back to a CancelError
					if(typeof reason === "undefined"){
						reason = new CancelError();
					}
					reject(reason);
					return reason;
				}else if(fulfilled === REJECTED && result === reason){
					return reason;
				}
			}else if(strict === true){
				throw new Error(FULFILLED_ERROR_MESSAGE);
			}
		};

		freezeObject(promise);
	};

	Deferred.prototype.toString = function(){
		// returns: String
		//		Returns `[object Deferred]`.

		return "[object Deferred]";
	};

	if(instrumentation){
		instrumentation(Deferred);
	}

	return Deferred;
});

},
'dojo/errors/CancelError':function(){
define(["./create"], function(create){
	// module:
	//		dojo/errors/CancelError

	/*=====
	return function(){
		// summary:
		//		Default error if a promise is canceled without a reason.
	};
	=====*/

	return create("CancelError", null, null, { dojoType: "cancel" });
});

},
'dojo/errors/create':function(){
define(["../_base/lang"], function(lang){
	return function(name, ctor, base, props){
		base = base || Error;

		var ErrorCtor = function(message){
			if(base === Error){
				if(Error.captureStackTrace){
					Error.captureStackTrace(this, ErrorCtor);
				}

				// Error.call() operates on the returned error
				// object rather than operating on |this|
				var err = Error.call(this, message),
					prop;

				// Copy own properties from err to |this|
				for(prop in err){
					if(err.hasOwnProperty(prop)){
						this[prop] = err[prop];
					}
				}

				// messsage is non-enumerable in ES5
				this.message = message;
				// stack is non-enumerable in at least Firefox
				this.stack = err.stack;
			}else{
				base.apply(this, arguments);
			}
			if(ctor){
				ctor.apply(this, arguments);
			}
		};

		ErrorCtor.prototype = lang.delegate(base.prototype, props);
		ErrorCtor.prototype.name = name;
		ErrorCtor.prototype.constructor = ErrorCtor;

		return ErrorCtor;
	};
});

},
'dojo/promise/Promise':function(){
define([
	"../_base/lang"
], function(lang){
	"use strict";

	// module:
	//		dojo/promise/Promise

	function throwAbstract(){
		throw new TypeError("abstract");
	}

	return lang.extend(function Promise(){
		// summary:
		//		The public interface to a deferred.
		// description:
		//		The public interface to a deferred. All promises in Dojo are
		//		instances of this class.
	}, {
		then: function(callback, errback, progback){
			// summary:
			//		Add new callbacks to the promise.
			// description:
			//		Add new callbacks to the deferred. Callbacks can be added
			//		before or after the deferred is fulfilled.
			// callback: Function?
			//		Callback to be invoked when the promise is resolved.
			//		Receives the resolution value.
			// errback: Function?
			//		Callback to be invoked when the promise is rejected.
			//		Receives the rejection error.
			// progback: Function?
			//		Callback to be invoked when the promise emits a progress
			//		update. Receives the progress update.
			// returns: dojo/promise/Promise
			//		Returns a new promise for the result of the callback(s).
			//		This can be used for chaining many asynchronous operations.

			throwAbstract();
		},

		cancel: function(reason, strict){
			// summary:
			//		Inform the deferred it may cancel its asynchronous operation.
			// description:
			//		Inform the deferred it may cancel its asynchronous operation.
			//		The deferred's (optional) canceler is invoked and the
			//		deferred will be left in a rejected state. Can affect other
			//		promises that originate with the same deferred.
			// reason: any
			//		A message that may be sent to the deferred's canceler,
			//		explaining why it's being canceled.
			// strict: Boolean?
			//		If strict, will throw an error if the deferred has already
			//		been fulfilled and consequently cannot be canceled.
			// returns: any
			//		Returns the rejection reason if the deferred was canceled
			//		normally.

			throwAbstract();
		},

		isResolved: function(){
			// summary:
			//		Checks whether the promise has been resolved.
			// returns: Boolean

			throwAbstract();
		},

		isRejected: function(){
			// summary:
			//		Checks whether the promise has been rejected.
			// returns: Boolean

			throwAbstract();
		},

		isFulfilled: function(){
			// summary:
			//		Checks whether the promise has been resolved or rejected.
			// returns: Boolean

			throwAbstract();
		},

		isCanceled: function(){
			// summary:
			//		Checks whether the promise has been canceled.
			// returns: Boolean

			throwAbstract();
		},

		always: function(callbackOrErrback){
			// summary:
			//		Add a callback to be invoked when the promise is resolved
			//		or rejected.
			// callbackOrErrback: Function?
			//		A function that is used both as a callback and errback.
			// returns: dojo/promise/Promise
			//		Returns a new promise for the result of the callback/errback.

			return this.then(callbackOrErrback, callbackOrErrback);
		},

		otherwise: function(errback){
			// summary:
			//		Add new errbacks to the promise.
			// errback: Function?
			//		Callback to be invoked when the promise is rejected.
			// returns: dojo/promise/Promise
			//		Returns a new promise for the result of the errback.

			return this.then(null, errback);
		},

		trace: function(){
			return this;
		},

		traceRejected: function(){
			return this;
		},

		toString: function(){
			// returns: string
			//		Returns `[object Promise]`.

			return "[object Promise]";
		}
	});
});

},
'dojo/promise/instrumentation':function(){
define([
	"./tracer",
	"../has",
	"../_base/lang",
	"../_base/array"
], function(tracer, has, lang, arrayUtil){
	has.add("config-useDeferredInstrumentation", "report-unhandled-rejections");

	function logError(error, rejection, deferred){
		var stack = "";
		if(error && error.stack){
			stack += error.stack;
		}
		if(rejection && rejection.stack){
			stack += "\n    ----------------------------------------\n    rejected" + rejection.stack.split("\n").slice(1).join("\n").replace(/^\s+/, " ");
		}
		if(deferred && deferred.stack){
			stack += "\n    ----------------------------------------\n" + deferred.stack;
		}
		console.error(error, stack);
	}

	function reportRejections(error, handled, rejection, deferred){
		if(!handled){
			logError(error, rejection, deferred);
		}
	}

	var errors = [];
	var activeTimeout = false;
	var unhandledWait = 1000;
	function trackUnhandledRejections(error, handled, rejection, deferred){
		// try to find the existing tracking object
		if(!arrayUtil.some(errors, function(obj){
			if(obj.error === error){
				// found the tracking object for this error
				if(handled){
					// if handled, update the state
					obj.handled = true;
				}
				return true;
			}
		})){
			// no tracking object has been setup, create one
			errors.push({
				error: error,
				rejection: rejection,
				handled: handled,
				deferred: deferred,
				timestamp: new Date().getTime()
			});
		}

		if(!activeTimeout){
			activeTimeout = setTimeout(logRejected, unhandledWait);
		}
	}

	function logRejected(){
		var now = new Date().getTime();
		var reportBefore = now - unhandledWait;
		errors = arrayUtil.filter(errors, function(obj){
			// only report the error if we have waited long enough and
			// it hasn't been handled
			if(obj.timestamp < reportBefore){
				if(!obj.handled){
					logError(obj.error, obj.rejection, obj.deferred);
				}
				return false;
			}
			return true;
		});

		if(errors.length){
			activeTimeout = setTimeout(logRejected, errors[0].timestamp + unhandledWait - now);
		}else{
			activeTimeout = false;
		}
	}

	return function(Deferred){
		// summary:
		//		Initialize instrumentation for the Deferred class.
		// description:
		//		Initialize instrumentation for the Deferred class.
		//		Done automatically by `dojo/Deferred` if the
		//		`deferredInstrumentation` and `useDeferredInstrumentation`
		//		config options are set.
		//
		//		Sets up `dojo/promise/tracer` to log to the console.
		//
		//		Sets up instrumentation of rejected deferreds so unhandled
		//		errors are logged to the console.

		var usage = has("config-useDeferredInstrumentation");
		if(usage){
			tracer.on("resolved", lang.hitch(console, "log", "resolved"));
			tracer.on("rejected", lang.hitch(console, "log", "rejected"));
			tracer.on("progress", lang.hitch(console, "log", "progress"));

			var args = [];
			if(typeof usage === "string"){
				args = usage.split(",");
				usage = args.shift();
			}
			if(usage === "report-rejections"){
				Deferred.instrumentRejected = reportRejections;
			}else if(usage === "report-unhandled-rejections" || usage === true || usage === 1){
				Deferred.instrumentRejected = trackUnhandledRejections;
				unhandledWait = parseInt(args[0], 10) || unhandledWait;
			}else{
				throw new Error("Unsupported instrumentation usage <" + usage + ">");
			}
		}
	};
});

},
'dojo/promise/tracer':function(){
define([
	"../_base/lang",
	"./Promise",
	"../Evented"
], function(lang, Promise, Evented){
	"use strict";

	// module:
	//		dojo/promise/tracer

	/*=====
	return {
		// summary:
		//		Trace promise fulfillment.
		// description:
		//		Trace promise fulfillment. Calling `.trace()` or `.traceError()` on a
		//		promise enables tracing. Will emit `resolved`, `rejected` or `progress`
		//		events.

		on: function(type, listener){
			// summary:
			//		Subscribe to traces.
			// description:
			//		See `dojo/Evented#on()`.
			// type: String
			//		`resolved`, `rejected`, or `progress`
			// listener: Function
			//		The listener is passed the traced value and any arguments
			//		that were used with the `.trace()` call.
		}
	};
	=====*/

	var evented = new Evented;
	var emit = evented.emit;
	evented.emit = null;
	// Emit events asynchronously since they should not change the promise state.
	function emitAsync(args){
		setTimeout(function(){
			emit.apply(evented, args);
		}, 0);
	}

	Promise.prototype.trace = function(){
		// summary:
		//		Trace the promise.
		// description:
		//		Tracing allows you to transparently log progress,
		//		resolution and rejection of promises, without affecting the
		//		promise itself. Any arguments passed to `trace()` are
		//		emitted in trace events. See `dojo/promise/tracer` on how
		//		to handle traces.
		// returns: dojo/promise/Promise
		//		The promise instance `trace()` is called on.

		var args = lang._toArray(arguments);
		this.then(
			function(value){ emitAsync(["resolved", value].concat(args)); },
			function(error){ emitAsync(["rejected", error].concat(args)); },
			function(update){ emitAsync(["progress", update].concat(args)); }
		);
		return this;
	};

	Promise.prototype.traceRejected = function(){
		// summary:
		//		Trace rejection of the promise.
		// description:
		//		Tracing allows you to transparently log progress,
		//		resolution and rejection of promises, without affecting the
		//		promise itself. Any arguments passed to `trace()` are
		//		emitted in trace events. See `dojo/promise/tracer` on how
		//		to handle traces.
		// returns: dojo/promise/Promise
		//		The promise instance `traceRejected()` is called on.

		var args = lang._toArray(arguments);
		this.otherwise(function(error){
			emitAsync(["rejected", error].concat(args));
		});
		return this;
	};

	return evented;
});

},
'dojo/when':function(){
define([
	"./Deferred",
	"./promise/Promise"
], function(Deferred, Promise){
	"use strict";

	// module:
	//		dojo/when

	return function when(valueOrPromise, callback, errback, progback){
		// summary:
		//		Transparently applies callbacks to values and/or promises.
		// description:
		//		Accepts promises but also transparently handles non-promises. If no
		//		callbacks are provided returns a promise, regardless of the initial
		//		value. Foreign promises are converted.
		//
		//		If callbacks are provided and the initial value is not a promise,
		//		the callback is executed immediately with no error handling. Returns
		//		a promise if the initial value is a promise, or the result of the
		//		callback otherwise.
		// valueOrPromise:
		//		Either a regular value or an object with a `then()` method that
		//		follows the Promises/A specification.
		// callback: Function?
		//		Callback to be invoked when the promise is resolved, or a non-promise
		//		is received.
		// errback: Function?
		//		Callback to be invoked when the promise is rejected.
		// progback: Function?
		//		Callback to be invoked when the promise emits a progress update.
		// returns: dojo/promise/Promise
		//		Promise, or if a callback is provided, the result of the callback.

		var receivedPromise = valueOrPromise && typeof valueOrPromise.then === "function";
		var nativePromise = receivedPromise && valueOrPromise instanceof Promise;

		if(!receivedPromise){
			if(arguments.length > 1){
				return callback ? callback(valueOrPromise) : valueOrPromise;
			}else{
				return new Deferred().resolve(valueOrPromise);
			}
		}else if(!nativePromise){
			var deferred = new Deferred(valueOrPromise.cancel);
			valueOrPromise.then(deferred.resolve, deferred.reject, deferred.progress);
			valueOrPromise = deferred.promise;
		}

		if(callback || errback || progback){
			return valueOrPromise.then(callback, errback, progback);
		}
		return valueOrPromise;
	};
});

},
'dojo/request/watch':function(){
define([
	'./util',
	'../errors/RequestTimeoutError',
	'../errors/CancelError',
	'../_base/array',
	'../_base/window',
	'../has!host-browser?dom-addeventlistener?:../on:'
], function(util, RequestTimeoutError, CancelError, array, win, on){
	// avoid setting a timer per request. It degrades performance on IE
	// something fierece if we don't use unified loops.
	var _inFlightIntvl = null,
		_inFlight = [];

	function watchInFlight(){
		// summary:
		//		internal method that checks each inflight XMLHttpRequest to see
		//		if it has completed or if the timeout situation applies.

		var now = +(new Date);

		// we need manual loop because we often modify _inFlight (and therefore 'i') while iterating
		for(var i = 0, dfd; i < _inFlight.length && (dfd = _inFlight[i]); i++){
			var response = dfd.response,
				options = response.options;
			if((dfd.isCanceled && dfd.isCanceled()) || (dfd.isValid && !dfd.isValid(response))){
				_inFlight.splice(i--, 1);
				watch._onAction && watch._onAction();
			}else if(dfd.isReady && dfd.isReady(response)){
				_inFlight.splice(i--, 1);
				dfd.handleResponse(response);
				watch._onAction && watch._onAction();
			}else if(dfd.startTime){
				// did we timeout?
				if(dfd.startTime + (options.timeout || 0) < now){
					_inFlight.splice(i--, 1);
					// Cancel the request so the io module can do appropriate cleanup.
					dfd.cancel(new RequestTimeoutError('Timeout exceeded', response));
					watch._onAction && watch._onAction();
				}
			}
		}

		watch._onInFlight && watch._onInFlight(dfd);

		if(!_inFlight.length){
			clearInterval(_inFlightIntvl);
			_inFlightIntvl = null;
		}
	}

	function watch(dfd){
		// summary:
		//		Watches the io request represented by dfd to see if it completes.
		// dfd: Deferred
		//		The Deferred object to watch.
		// response: Object
		//		The object used as the value of the request promise.
		// validCheck: Function
		//		Function used to check if the IO request is still valid. Gets the dfd
		//		object as its only argument.
		// ioCheck: Function
		//		Function used to check if basic IO call worked. Gets the dfd
		//		object as its only argument.
		// resHandle: Function
		//		Function used to process response. Gets the dfd
		//		object as its only argument.
		if(dfd.response.options.timeout){
			dfd.startTime = +(new Date);
		}

		if(dfd.isFulfilled()){
			// bail out if the deferred is already fulfilled
			return;
		}

		_inFlight.push(dfd);
		if(!_inFlightIntvl){
			_inFlightIntvl = setInterval(watchInFlight, 50);
		}

		// handle sync requests separately from async:
		// http://bugs.dojotoolkit.org/ticket/8467
		if(dfd.response.options.sync){
			watchInFlight();
		}
	}

	watch.cancelAll = function cancelAll(){
		// summary:
		//		Cancels all pending IO requests, regardless of IO type
		try{
			array.forEach(_inFlight, function(dfd){
				try{
					dfd.cancel(new CancelError('All requests canceled.'));
				}catch(e){}
			});
		}catch(e){}
	};

	if(win && on && win.doc.attachEvent){
		// Automatically call cancel all io calls on unload in IE
		// http://bugs.dojotoolkit.org/ticket/2357
		on(win.global, 'unload', function(){
			watch.cancelAll();
		});
	}

	return watch;
});

},
'dojo/request/util':function(){
define([
	'exports',
	'../errors/RequestError',
	'../errors/CancelError',
	'../Deferred',
	'../io-query',
	'../_base/array',
	'../_base/lang',
	'../promise/Promise'
], function(exports, RequestError, CancelError, Deferred, ioQuery, array, lang, Promise){
	exports.deepCopy = function deepCopy(target, source){
		for(var name in source){
			var tval = target[name],
				sval = source[name];
			if(tval !== sval){
				if(tval && typeof tval === 'object' && sval && typeof sval === 'object'){
					exports.deepCopy(tval, sval);
				}else{
					target[name] = sval;
				}
			}
		}
		return target;
	};

	exports.deepCreate = function deepCreate(source, properties){
		properties = properties || {};
		var target = lang.delegate(source),
			name, value;

		for(name in source){
			value = source[name];

			if(value && typeof value === 'object'){
				target[name] = exports.deepCreate(value, properties[name]);
			}
		}
		return exports.deepCopy(target, properties);
	};

	var freeze = Object.freeze || function(obj){ return obj; };
	function okHandler(response){
		return freeze(response);
	}
	function dataHandler (response) {
		return response.data || response.text;
	}

	exports.deferred = function deferred(response, cancel, isValid, isReady, handleResponse, last){
		var def = new Deferred(function(reason){
			cancel && cancel(def, response);

			if(!reason || !(reason instanceof RequestError) && !(reason instanceof CancelError)){
				return new CancelError('Request canceled', response);
			}
			return reason;
		});

		def.response = response;
		def.isValid = isValid;
		def.isReady = isReady;
		def.handleResponse = handleResponse;

		function errHandler(error){
			error.response = response;
			throw error;
		}
		var responsePromise = def.then(okHandler).otherwise(errHandler);

		if(exports.notify){
			responsePromise.then(
				lang.hitch(exports.notify, 'emit', 'load'),
				lang.hitch(exports.notify, 'emit', 'error')
			);
		}

		var dataPromise = responsePromise.then(dataHandler);

		// http://bugs.dojotoolkit.org/ticket/16794
		// The following works around a leak in IE9 through the
		// prototype using lang.delegate on dataPromise and
		// assigning the result a property with a reference to
		// responsePromise.
		var promise = new Promise();
		for (var prop in dataPromise) {
			if (dataPromise.hasOwnProperty(prop)) {
				promise[prop] = dataPromise[prop];
			}
		}
		promise.response = responsePromise;
		freeze(promise);
		// End leak fix


		if(last){
			def.then(function(response){
				last.call(def, response);
			}, function(error){
				last.call(def, response, error);
			});
		}

		def.promise = promise;
		def.then = promise.then;

		return def;
	};

	exports.addCommonMethods = function addCommonMethods(provider, methods){
		array.forEach(methods||['GET', 'POST', 'PUT', 'DELETE'], function(method){
			provider[(method === 'DELETE' ? 'DEL' : method).toLowerCase()] = function(url, options){
				options = lang.delegate(options||{});
				options.method = method;
				return provider(url, options);
			};
		});
	};

	exports.parseArgs = function parseArgs(url, options, skipData){
		var data = options.data,
			query = options.query;
		
		if(data && !skipData){
			if(typeof data === 'object'){
				options.data = ioQuery.objectToQuery(data);
			}
		}

		if(query){
			if(typeof query === 'object'){
				query = ioQuery.objectToQuery(query);
			}
			if(options.preventCache){
				query += (query ? '&' : '') + 'request.preventCache=' + (+(new Date));
			}
		}else if(options.preventCache){
			query = 'request.preventCache=' + (+(new Date));
		}

		if(url && query){
			url += (~url.indexOf('?') ? '&' : '?') + query;
		}

		return {
			url: url,
			options: options,
			getHeader: function(headerName){ return null; }
		};
	};

	exports.checkStatus = function(stat){
		stat = stat || 0;
		return (stat >= 200 && stat < 300) || // allow any 2XX response code
			stat === 304 ||                 // or, get it out of the cache
			stat === 1223 ||                // or, Internet Explorer mangled the status code
			!stat;                         // or, we're Titanium/browser chrome/chrome extension requesting a local file
	};
});

},
'dojo/errors/RequestError':function(){
define(['./create'], function(create){
	// module:
	//		dojo/errors/RequestError

	/*=====
	 return function(){
		 // summary:
		 //		TODOC
	 };
	 =====*/

	return create("RequestError", function(message, response){
		this.response = response;
	});
});

},
'dojo/errors/RequestTimeoutError':function(){
define(['./create', './RequestError'], function(create, RequestError){
	// module:
	//		dojo/errors/RequestTimeoutError

	/*=====
	 return function(){
		 // summary:
		 //		TODOC
	 };
	 =====*/

	return create("RequestTimeoutError", null, RequestError, {
		dojoType: "timeout"
	});
});

},
'dojo/request/xhr':function(){
define([
	'../errors/RequestError',
	'./watch',
	'./handlers',
	'./util',
	'../has'/*=====,
	'../request',
	'../_base/declare' =====*/
], function(RequestError, watch, handlers, util, has/*=====, request, declare =====*/){
	has.add('native-xhr', function(){
		// if true, the environment has a native XHR implementation
		return typeof XMLHttpRequest !== 'undefined';
	});
	has.add('dojo-force-activex-xhr', function(){
		return has('activex') && !document.addEventListener && window.location.protocol === 'file:';
	});

	has.add('native-xhr2', function(){
		if(!has('native-xhr')){ return; }
		var x = new XMLHttpRequest();
		return typeof x['addEventListener'] !== 'undefined' &&
			(typeof opera === 'undefined' || typeof x['upload'] !== 'undefined');
	});

	has.add('native-formdata', function(){
		// if true, the environment has a native FormData implementation
		return typeof FormData !== 'undefined';
	});

	has.add('native-response-type', function(){
		return has('native-xhr') && typeof new XMLHttpRequest().responseType !== 'undefined';
	});

	has.add('native-xhr2-blob', function(){
		if(!has('native-response-type')){ return; }
		var x = new XMLHttpRequest();
		x.open('GET', '/', true);
		x.responseType = 'blob';
		// will not be set if unsupported
		var responseType = x.responseType;
		x.abort();
		return responseType === 'blob';
	});

	// Google Chrome doesn't support "json" response type
	// up to version 30, so it's intentionally not included here
	var nativeResponseTypes = {
		'blob': has('native-xhr2-blob') ? 'blob' : 'arraybuffer',
		'document': 'document',
		'arraybuffer': 'arraybuffer'
	};

	function handleResponse(response, error){
		var _xhr = response.xhr;
		response.status = response.xhr.status;

		try {
			// Firefox throws an error when trying to access
			// xhr.responseText if response isn't text
			response.text = _xhr.responseText;
		} catch (e) {}

		if(response.options.handleAs === 'xml'){
			response.data = _xhr.responseXML;
		}

		if(!error){
			try{
				handlers(response);
			}catch(e){
				error = e;
			}
		}

		if(error){
			this.reject(error);
		}else if(util.checkStatus(_xhr.status)){
			this.resolve(response);
		}else{
			error = new RequestError('Unable to load ' + response.url + ' status: ' + _xhr.status, response);

			this.reject(error);
		}
	}

	var isValid, isReady, addListeners, cancel;
	if(has('native-xhr2')){
		// Any platform with XHR2 will only use the watch mechanism for timeout.

		isValid = function(response){
			// summary:
			//		Check to see if the request should be taken out of the watch queue
			return !this.isFulfilled();
		};
		cancel = function(dfd, response){
			// summary:
			//		Canceler for deferred
			response.xhr.abort();
		};
		addListeners = function(_xhr, dfd, response){
			// summary:
			//		Adds event listeners to the XMLHttpRequest object
			function onLoad(evt){
				dfd.handleResponse(response);
			}
			function onError(evt){
				var _xhr = evt.target;
				var error = new RequestError('Unable to load ' + response.url + ' status: ' + _xhr.status, response);
				dfd.handleResponse(response, error);
			}

			function onProgress(evt){
				if(evt.lengthComputable){
					response.loaded = evt.loaded;
					response.total = evt.total;
					dfd.progress(response);
				} else if(response.xhr.readyState === 3){
					response.loaded = evt.position;
					dfd.progress(response);
				}
			}

			_xhr.addEventListener('load', onLoad, false);
			_xhr.addEventListener('error', onError, false);
			_xhr.addEventListener('progress', onProgress, false);

			return function(){
				_xhr.removeEventListener('load', onLoad, false);
				_xhr.removeEventListener('error', onError, false);
				_xhr.removeEventListener('progress', onProgress, false);
				_xhr = null;
			};
		};
	}else{
		isValid = function(response){
			return response.xhr.readyState; //boolean
		};
		isReady = function(response){
			return 4 === response.xhr.readyState; //boolean
		};
		cancel = function(dfd, response){
			// summary:
			//		canceller function for util.deferred call.
			var xhr = response.xhr;
			var _at = typeof xhr.abort;
			if(_at === 'function' || _at === 'object' || _at === 'unknown'){
				xhr.abort();
			}
		};
	}

	function getHeader(headerName){
		return this.xhr.getResponseHeader(headerName);
	}

	var undefined,
		defaultOptions = {
			data: null,
			query: null,
			sync: false,
			method: 'GET'
		};
	function xhr(url, options, returnDeferred){
		var isFormData = has('native-formdata') && options && options.data && options.data instanceof FormData;
		var response = util.parseArgs(
			url,
			util.deepCreate(defaultOptions, options),
			isFormData
		);
		url = response.url;
		options = response.options;

		var remover,
			last = function(){
				remover && remover();
			};

		//Make the Deferred object for this xhr request.
		var dfd = util.deferred(
			response,
			cancel,
			isValid,
			isReady,
			handleResponse,
			last
		);
		var _xhr = response.xhr = xhr._create();

		if(!_xhr){
			// If XHR factory somehow returns nothings,
			// cancel the deferred.
			dfd.cancel(new RequestError('XHR was not created'));
			return returnDeferred ? dfd : dfd.promise;
		}

		response.getHeader = getHeader;

		if(addListeners){
			remover = addListeners(_xhr, dfd, response);
		}

		var data = options.data,
			async = !options.sync,
			method = options.method;

		try{
			// IE6 won't let you call apply() on the native function.
			_xhr.open(method, url, async, options.user || undefined, options.password || undefined);

			if(options.withCredentials){
				_xhr.withCredentials = options.withCredentials;
			}

			if(has('native-response-type') && options.handleAs in nativeResponseTypes) {
				_xhr.responseType = nativeResponseTypes[options.handleAs];
			}

			var headers = options.headers,
				contentType = isFormData ? false : 'application/x-www-form-urlencoded';
			if(headers){
				for(var hdr in headers){
					if(hdr.toLowerCase() === 'content-type'){
						contentType = headers[hdr];
					}else if(headers[hdr]){
						//Only add header if it has a value. This allows for instance, skipping
						//insertion of X-Requested-With by specifying empty value.
						_xhr.setRequestHeader(hdr, headers[hdr]);
					}
				}
			}

			if(contentType && contentType !== false){
				_xhr.setRequestHeader('Content-Type', contentType);
			}
			if(!headers || !('X-Requested-With' in headers)){
				_xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
			}

			if(util.notify){
				util.notify.emit('send', response, dfd.promise.cancel);
			}
			_xhr.send(data);
		}catch(e){
			dfd.reject(e);
		}

		watch(dfd);
		_xhr = null;

		return returnDeferred ? dfd : dfd.promise;
	}

	/*=====
	xhr = function(url, options){
		// summary:
		//		Sends a request using XMLHttpRequest with the given URL and options.
		// url: String
		//		URL to request
		// options: dojo/request/xhr.__Options?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	xhr.__BaseOptions = declare(request.__BaseOptions, {
		// sync: Boolean?
		//		Whether to make a synchronous request or not. Default
		//		is `false` (asynchronous).
		// data: String|Object|FormData?
		//		Data to transfer. This is ignored for GET and DELETE
		//		requests.
		// headers: Object?
		//		Headers to use for the request.
		// user: String?
		//		Username to use during the request.
		// password: String?
		//		Password to use during the request.
		// withCredentials: Boolean?
		//		For cross-site requests, whether to send credentials
		//		or not.
	});
	xhr.__MethodOptions = declare(null, {
		// method: String?
		//		The HTTP method to use to make the request. Must be
		//		uppercase. Default is `"GET"`.
	});
	xhr.__Options = declare([xhr.__BaseOptions, xhr.__MethodOptions]);

	xhr.get = function(url, options){
		// summary:
		//		Send an HTTP GET request using XMLHttpRequest with the given URL and options.
		// url: String
		//		URL to request
		// options: dojo/request/xhr.__BaseOptions?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	xhr.post = function(url, options){
		// summary:
		//		Send an HTTP POST request using XMLHttpRequest with the given URL and options.
		// url: String
		//		URL to request
		// options: dojo/request/xhr.__BaseOptions?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	xhr.put = function(url, options){
		// summary:
		//		Send an HTTP PUT request using XMLHttpRequest with the given URL and options.
		// url: String
		//		URL to request
		// options: dojo/request/xhr.__BaseOptions?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	xhr.del = function(url, options){
		// summary:
		//		Send an HTTP DELETE request using XMLHttpRequest with the given URL and options.
		// url: String
		//		URL to request
		// options: dojo/request/xhr.__BaseOptions?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	=====*/
	xhr._create = function(){
		// summary:
		//		does the work of portably generating a new XMLHTTPRequest object.
		throw new Error('XMLHTTP not available');
	};
	if(has('native-xhr') && !has('dojo-force-activex-xhr')){
		xhr._create = function(){
			return new XMLHttpRequest();
		};
	}else if(has('activex')){
		try{
			new ActiveXObject('Msxml2.XMLHTTP');
			xhr._create = function(){
				return new ActiveXObject('Msxml2.XMLHTTP');
			};
		}catch(e){
			try{
				new ActiveXObject('Microsoft.XMLHTTP');
				xhr._create = function(){
					return new ActiveXObject('Microsoft.XMLHTTP');
				};
			}catch(e){}
		}
	}

	util.addCommonMethods(xhr);

	return xhr;
});

},
'dojo/request/handlers':function(){
define([
	'../json',
	'../_base/kernel',
	'../_base/array',
	'../has',
	'../selector/_loader' // only included for has() qsa tests
], function(JSON, kernel, array, has){
	has.add('activex', typeof ActiveXObject !== 'undefined');
	has.add('dom-parser', function(global){
		return 'DOMParser' in global;
	});

	var handleXML;
	if(has('activex')){
		// GUIDs obtained from http://msdn.microsoft.com/en-us/library/ms757837(VS.85).aspx
		var dp = [
			'Msxml2.DOMDocument.6.0',
			'Msxml2.DOMDocument.4.0',
			'MSXML2.DOMDocument.3.0',
			'MSXML.DOMDocument' // 2.0
		];
		var lastParser;

		handleXML = function(response){
			var result = response.data;
			var text = response.text;

			if(result && has('dom-qsa2.1') && !result.querySelectorAll && has('dom-parser')){
				// http://bugs.dojotoolkit.org/ticket/15631
				// IE9 supports a CSS3 querySelectorAll implementation, but the DOM implementation
				// returned by IE9 xhr.responseXML does not. Manually create the XML DOM to gain
				// the fuller-featured implementation and avoid bugs caused by the inconsistency
				result = new DOMParser().parseFromString(text, 'application/xml');
			}

			function createDocument(p) {
					try{
						var dom = new ActiveXObject(p);
						dom.async = false;
						dom.loadXML(text);
						result = dom;
						lastParser = p;
					}catch(e){ return false; }
					return true;
			}

			if(!result || !result.documentElement){
				// The creation of an ActiveX object is expensive, so we cache the
				// parser type to avoid trying all parser types each time we handle a
				// document. There is some concern that some parser types might fail
				// depending on the document being parsed. If parsing using the cached
				// parser type fails, we do the more expensive operation of finding one
				// that works for the given document.
				// https://bugs.dojotoolkit.org/ticket/15246
				if(!lastParser || !createDocument(lastParser)) {
					array.some(dp, createDocument);
				}
			}

			return result;
		};
	}

	var handleNativeResponse = function(response) {
		if(!has('native-xhr2-blob') && response.options.handleAs === 'blob' && typeof Blob !== 'undefined'){
			return new Blob([ response.xhr.response ], { type: response.xhr.getResponseHeader('Content-Type') });
		}

		return response.xhr.response;
	}

	var handlers = {
		'javascript': function(response){
			return kernel.eval(response.text || '');
		},
		'json': function(response){
			return JSON.parse(response.text || null);
		},
		'xml': handleXML,
		'blob': handleNativeResponse,
		'arraybuffer': handleNativeResponse,
		'document': handleNativeResponse
	};

	function handle(response){
		var handler = handlers[response.options.handleAs];

		response.data = handler ? handler(response) : (response.data || response.text);

		return response;
	}

	handle.register = function(name, handler){
		handlers[name] = handler;
	};

	return handle;
});

},
'dojo/cldr/nls/number':function(){
define({ root:

//begin v1.x content
{
	"scientificFormat": "#E0",
	"currencySpacing-afterCurrency-currencyMatch": "[:^S:]",
	"infinity": "∞",
	"superscriptingExponent": "×",
	"list": ";",
	"percentSign": "%",
	"minusSign": "-",
	"currencySpacing-beforeCurrency-surroundingMatch": "[:digit:]",
	"decimalFormat-short": "000T",
	"currencySpacing-afterCurrency-insertBetween": " ",
	"nan": "NaN",
	"plusSign": "+",
	"currencySpacing-afterCurrency-surroundingMatch": "[:digit:]",
	"currencySpacing-beforeCurrency-currencyMatch": "[:^S:]",
	"currencyFormat": "¤ #,##0.00",
	"perMille": "‰",
	"group": ",",
	"percentFormat": "#,##0%",
	"decimalFormat-long": "000T",
	"decimalFormat": "#,##0.###",
	"decimal": ".",
	"currencySpacing-beforeCurrency-insertBetween": " ",
	"exponential": "E"
}
//end v1.x content
,
	"ar": true,
	"ca": true,
	"cs": true,
	"da": true,
	"de": true,
	"el": true,
	"en": true,
	"en-au": true,
	"es": true,
	"fi": true,
	"fr": true,
	"fr-ch": true,
	"he": true,
	"hu": true,
	"it": true,
	"ja": true,
	"ko": true,
	"nb": true,
	"nl": true,
	"pl": true,
	"pt": true,
	"pt-pt": true,
	"ro": true,
	"ru": true,
	"sk": true,
	"sl": true,
	"sv": true,
	"th": true,
	"tr": true,
	"zh": true,
	"zh-hant": true,
	"zh-hk": true,
	"zh-tw": true
});
},
'dojo/cldr/nls/en/number':function(){
define(
//begin v1.x content
{
	"group": ",",
	"percentSign": "%",
	"exponential": "E",
	"scientificFormat": "#E0",
	"percentFormat": "#,##0%",
	"list": ";",
	"infinity": "∞",
	"minusSign": "-",
	"decimal": ".",
	"superscriptingExponent": "×",
	"nan": "NaN",
	"perMille": "‰",
	"decimalFormat": "#,##0.###",
	"currencyFormat": "¤#,##0.00;(¤#,##0.00)",
	"plusSign": "+",
	"decimalFormat-long": "000 trillion",
	"decimalFormat-short": "000T"
}
//end v1.x content
);
},
'dojo/string':function(){
define([
	"./_base/kernel",	// kernel.global
	"./_base/lang"
], function(kernel, lang){

// module:
//		dojo/string
var ESCAPE_REGEXP = /[&<>'"\/]/g;
var ESCAPE_MAP = {
	'&': '&amp;',
	'<': '&lt;',
	'>': '&gt;',
	'"': '&quot;',
	"'": '&#x27;',
	'/': '&#x2F;'
};
var string = {
	// summary:
	//		String utilities for Dojo
};
lang.setObject("dojo.string", string);

string.escape = function(/*String*/str){
	// summary:
	//		Efficiently escape a string for insertion into HTML (innerHTML or attributes), replacing &, <, >, ", ', and / characters.
	// str:
	//		the string to escape
	if(!str){ return ""; }
	return str.replace(ESCAPE_REGEXP, function(c) {
		return ESCAPE_MAP[c];
	});
};

string.rep = function(/*String*/str, /*Integer*/num){
	// summary:
	//		Efficiently replicate a string `n` times.
	// str:
	//		the string to replicate
	// num:
	//		number of times to replicate the string

	if(num <= 0 || !str){ return ""; }

	var buf = [];
	for(;;){
		if(num & 1){
			buf.push(str);
		}
		if(!(num >>= 1)){ break; }
		str += str;
	}
	return buf.join("");	// String
};

string.pad = function(/*String*/text, /*Integer*/size, /*String?*/ch, /*Boolean?*/end){
	// summary:
	//		Pad a string to guarantee that it is at least `size` length by
	//		filling with the character `ch` at either the start or end of the
	//		string. Pads at the start, by default.
	// text:
	//		the string to pad
	// size:
	//		length to provide padding
	// ch:
	//		character to pad, defaults to '0'
	// end:
	//		adds padding at the end if true, otherwise pads at start
	// example:
	//	|	// Fill the string to length 10 with "+" characters on the right.  Yields "Dojo++++++".
	//	|	string.pad("Dojo", 10, "+", true);

	if(!ch){
		ch = '0';
	}
	var out = String(text),
		pad = string.rep(ch, Math.ceil((size - out.length) / ch.length));
	return end ? out + pad : pad + out;	// String
};

string.substitute = function(	/*String*/		template,
									/*Object|Array*/map,
									/*Function?*/	transform,
									/*Object?*/		thisObject){
	// summary:
	//		Performs parameterized substitutions on a string. Throws an
	//		exception if any parameter is unmatched.
	// template:
	//		a string with expressions in the form `${key}` to be replaced or
	//		`${key:format}` which specifies a format function. keys are case-sensitive.
	// map:
	//		hash to search for substitutions
	// transform:
	//		a function to process all parameters before substitution takes
	//		place, e.g. mylib.encodeXML
	// thisObject:
	//		where to look for optional format function; default to the global
	//		namespace
	// example:
	//		Substitutes two expressions in a string from an Array or Object
	//	|	// returns "File 'foo.html' is not found in directory '/temp'."
	//	|	// by providing substitution data in an Array
	//	|	string.substitute(
	//	|		"File '${0}' is not found in directory '${1}'.",
	//	|		["foo.html","/temp"]
	//	|	);
	//	|
	//	|	// also returns "File 'foo.html' is not found in directory '/temp'."
	//	|	// but provides substitution data in an Object structure.  Dotted
	//	|	// notation may be used to traverse the structure.
	//	|	string.substitute(
	//	|		"File '${name}' is not found in directory '${info.dir}'.",
	//	|		{ name: "foo.html", info: { dir: "/temp" } }
	//	|	);
	// example:
	//		Use a transform function to modify the values:
	//	|	// returns "file 'foo.html' is not found in directory '/temp'."
	//	|	string.substitute(
	//	|		"${0} is not found in ${1}.",
	//	|		["foo.html","/temp"],
	//	|		function(str){
	//	|			// try to figure out the type
	//	|			var prefix = (str.charAt(0) == "/") ? "directory": "file";
	//	|			return prefix + " '" + str + "'";
	//	|		}
	//	|	);
	// example:
	//		Use a formatter
	//	|	// returns "thinger -- howdy"
	//	|	string.substitute(
	//	|		"${0:postfix}", ["thinger"], null, {
	//	|			postfix: function(value, key){
	//	|				return value + " -- howdy";
	//	|			}
	//	|		}
	//	|	);

	thisObject = thisObject || kernel.global;
	transform = transform ?
		lang.hitch(thisObject, transform) : function(v){ return v; };

	return template.replace(/\$\{([^\s\:\}]+)(?:\:([^\s\:\}]+))?\}/g,
		function(match, key, format){
			var value = lang.getObject(key, false, map);
			if(format){
				value = lang.getObject(format, false, thisObject).call(thisObject, value, key);
			}
			return transform(value, key).toString();
		}); // String
};

string.trim = String.prototype.trim ?
	lang.trim : // aliasing to the native function
	function(str){
		str = str.replace(/^\s+/, '');
		for(var i = str.length - 1; i >= 0; i--){
			if(/\S/.test(str.charAt(i))){
				str = str.substring(0, i + 1);
				break;
			}
		}
		return str;
	};

/*=====
 string.trim = function(str){
	 // summary:
	 //		Trims whitespace from both sides of the string
	 // str: String
	 //		String to be trimmed
	 // returns: String
	 //		Returns the trimmed string
	 // description:
	 //		This version of trim() was taken from [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript).
	 //		The short yet performant version of this function is dojo/_base/lang.trim(),
	 //		which is part of Dojo base.  Uses String.prototype.trim instead, if available.
	 return "";	// String
 };
 =====*/

	return string;
});

},
'dojo/regexp':function(){
define(["./_base/kernel", "./_base/lang"], function(dojo, lang){

// module:
//		dojo/regexp

var regexp = {
	// summary:
	//		Regular expressions and Builder resources
};
lang.setObject("dojo.regexp", regexp);

regexp.escapeString = function(/*String*/str, /*String?*/except){
	// summary:
	//		Adds escape sequences for special characters in regular expressions
	// except:
	//		a String with special characters to be left unescaped

	return str.replace(/([\.$?*|{}\(\)\[\]\\\/\+\-^])/g, function(ch){
		if(except && except.indexOf(ch) != -1){
			return ch;
		}
		return "\\" + ch;
	}); // String
};

regexp.buildGroupRE = function(/*Object|Array*/arr, /*Function*/re, /*Boolean?*/nonCapture){
	// summary:
	//		Builds a regular expression that groups subexpressions
	// description:
	//		A utility function used by some of the RE generators. The
	//		subexpressions are constructed by the function, re, in the second
	//		parameter.  re builds one subexpression for each elem in the array
	//		a, in the first parameter. Returns a string for a regular
	//		expression that groups all the subexpressions.
	// arr:
	//		A single value or an array of values.
	// re:
	//		A function. Takes one parameter and converts it to a regular
	//		expression.
	// nonCapture:
	//		If true, uses non-capturing match, otherwise matches are retained
	//		by regular expression. Defaults to false

	// case 1: a is a single value.
	if(!(arr instanceof Array)){
		return re(arr); // String
	}

	// case 2: a is an array
	var b = [];
	for(var i = 0; i < arr.length; i++){
		// convert each elem to a RE
		b.push(re(arr[i]));
	}

	 // join the REs as alternatives in a RE group.
	return regexp.group(b.join("|"), nonCapture); // String
};

regexp.group = function(/*String*/expression, /*Boolean?*/nonCapture){
	// summary:
	//		adds group match to expression
	// nonCapture:
	//		If true, uses non-capturing match, otherwise matches are retained
	//		by regular expression.
	return "(" + (nonCapture ? "?:":"") + expression + ")"; // String
};

return regexp;
});

},
'dojo/date/locale':function(){
define([
	"../_base/lang",
	"../_base/array",
	"../date",
	/*===== "../_base/declare", =====*/
	"../cldr/supplemental",
	"../i18n",
	"../regexp",
	"../string",
	"../i18n!../cldr/nls/gregorian",
	"module"
], function(lang, array, date, /*===== declare, =====*/ supplemental, i18n, regexp, string, gregorian, module){

// module:
//		dojo/date/locale

var exports = {
	// summary:
	//		This modules defines dojo/date/locale, localization methods for Date.
};
lang.setObject(module.id.replace(/\//g, "."), exports);

// Localization methods for Date.   Honor local customs using locale-dependent dojo.cldr data.

// Load the bundles containing localization information for
// names and formats

//NOTE: Everything in this module assumes Gregorian calendars.
// Other calendars will be implemented in separate modules.

	// Format a pattern without literals
	function formatPattern(dateObject, bundle, options, pattern){
		return pattern.replace(/([a-z])\1*/ig, function(match){
			var s, pad,
				c = match.charAt(0),
				l = match.length,
				widthList = ["abbr", "wide", "narrow"];
			switch(c){
				case 'G':
					s = bundle[(l < 4) ? "eraAbbr" : "eraNames"][dateObject.getFullYear() < 0 ? 0 : 1];
					break;
				case 'y':
					s = dateObject.getFullYear();
					switch(l){
						case 1:
							break;
						case 2:
							if(!options.fullYear){
								s = String(s); s = s.substr(s.length - 2);
								break;
							}
							// fallthrough
						default:
							pad = true;
					}
					break;
				case 'Q':
				case 'q':
					s = Math.ceil((dateObject.getMonth()+1)/3);
//					switch(l){
//						case 1: case 2:
							pad = true;
//							break;
//						case 3: case 4: // unimplemented
//					}
					break;
				case 'M':
				case 'L':
					var m = dateObject.getMonth();
					if(l<3){
						s = m+1; pad = true;
					}else{
						var propM = [
							"months",
							c == 'L' ? "standAlone" : "format",
							widthList[l-3]
						].join("-");
						s = bundle[propM][m];
					}
					break;
				case 'w':
					var firstDay = 0;
					s = exports._getWeekOfYear(dateObject, firstDay); pad = true;
					break;
				case 'd':
					s = dateObject.getDate(); pad = true;
					break;
				case 'D':
					s = exports._getDayOfYear(dateObject); pad = true;
					break;
				case 'e':
				case 'c':
					var d = dateObject.getDay();
					if(l<2){
						s = (d - supplemental.getFirstDayOfWeek(options.locale) + 8) % 7
						break;
					}
					// fallthrough
				case 'E':
					d = dateObject.getDay();
					if(l<3){
						s = d+1; pad = true;
					}else{
						var propD = [
							"days",
							c == 'c' ? "standAlone" : "format",
							widthList[l-3]
						].join("-");
						s = bundle[propD][d];
					}
					break;
				case 'a':
					var timePeriod = dateObject.getHours() < 12 ? 'am' : 'pm';
					s = options[timePeriod] || bundle['dayPeriods-format-wide-' + timePeriod];
					break;
				case 'h':
				case 'H':
				case 'K':
				case 'k':
					var h = dateObject.getHours();
					// strange choices in the date format make it impossible to write this succinctly
					switch (c){
						case 'h': // 1-12
							s = (h % 12) || 12;
							break;
						case 'H': // 0-23
							s = h;
							break;
						case 'K': // 0-11
							s = (h % 12);
							break;
						case 'k': // 1-24
							s = h || 24;
							break;
					}
					pad = true;
					break;
				case 'm':
					s = dateObject.getMinutes(); pad = true;
					break;
				case 's':
					s = dateObject.getSeconds(); pad = true;
					break;
				case 'S':
					s = Math.round(dateObject.getMilliseconds() * Math.pow(10, l-3)); pad = true;
					break;
				case 'v': // FIXME: don't know what this is. seems to be same as z?
				case 'z':
					// We only have one timezone to offer; the one from the browser
					s = exports._getZone(dateObject, true, options);
					if(s){break;}
					l=4;
					// fallthrough... use GMT if tz not available
				case 'Z':
					var offset = exports._getZone(dateObject, false, options);
					var tz = [
						(offset<=0 ? "+" : "-"),
						string.pad(Math.floor(Math.abs(offset)/60), 2),
						string.pad(Math.abs(offset)% 60, 2)
					];
					if(l==4){
						tz.splice(0, 0, "GMT");
						tz.splice(3, 0, ":");
					}
					s = tz.join("");
					break;
//				case 'Y': case 'u': case 'W': case 'F': case 'g': case 'A':
//					console.log(match+" modifier unimplemented");
				default:
					throw new Error("dojo.date.locale.format: invalid pattern char: "+pattern);
			}
			if(pad){ s = string.pad(s, l); }
			return s;
		});
	}

/*=====
var __FormatOptions = exports.__FormatOptions = declare(null, {
	// selector: String
	//		choice of 'time','date' (default: date and time)
	// formatLength: String
	//		choice of long, short, medium or full (plus any custom additions).  Defaults to 'short'
	// datePattern:String
	//		override pattern with this string
	// timePattern:String
	//		override pattern with this string
	// am: String
	//		override strings for am in times
	// pm: String
	//		override strings for pm in times
	// locale: String
	//		override the locale used to determine formatting rules
	// fullYear: Boolean
	//		(format only) use 4 digit years whenever 2 digit years are called for
	// strict: Boolean
	//		(parse only) strict parsing, off by default
});
=====*/

exports._getZone = function(/*Date*/ dateObject, /*boolean*/ getName, /*__FormatOptions?*/ options){
	// summary:
	//		Returns the zone (or offset) for the given date and options.  This
	//		is broken out into a separate function so that it can be overridden
	//		by timezone-aware code.
	//
	// dateObject:
	//		the date and/or time being formatted.
	//
	// getName:
	//		Whether to return the timezone string (if true), or the offset (if false)
	//
	// options:
	//		The options being used for formatting
	if(getName){
		return date.getTimezoneName(dateObject);
	}else{
		return dateObject.getTimezoneOffset();
	}
};


exports.format = function(/*Date*/ dateObject, /*__FormatOptions?*/ options){
	// summary:
	//		Format a Date object as a String, using locale-specific settings.
	//
	// description:
	//		Create a string from a Date object using a known localized pattern.
	//		By default, this method formats both date and time from dateObject.
	//		Formatting patterns are chosen appropriate to the locale.  Different
	//		formatting lengths may be chosen, with "full" used by default.
	//		Custom patterns may be used or registered with translations using
	//		the dojo/date/locale.addCustomFormats() method.
	//		Formatting patterns are implemented using [the syntax described at
	//		unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)
	//
	// dateObject:
	//		the date and/or time to be formatted.  If a time only is formatted,
	//		the values in the year, month, and day fields are irrelevant.  The
	//		opposite is true when formatting only dates.

	options = options || {};

	var locale = i18n.normalizeLocale(options.locale),
		formatLength = options.formatLength || 'short',
		bundle = exports._getGregorianBundle(locale),
		str = [],
		sauce = lang.hitch(this, formatPattern, dateObject, bundle, options);
	if(options.selector == "year"){
		return _processPattern(bundle["dateFormatItem-yyyy"] || "yyyy", sauce);
	}
	var pattern;
	if(options.selector != "date"){
		pattern = options.timePattern || bundle["timeFormat-"+formatLength];
		if(pattern){str.push(_processPattern(pattern, sauce));}
	}
	if(options.selector != "time"){
		pattern = options.datePattern || bundle["dateFormat-"+formatLength];
		if(pattern){str.push(_processPattern(pattern, sauce));}
	}

	return str.length == 1 ? str[0] : bundle["dateTimeFormat-"+formatLength].replace(/\'/g,'').replace(/\{(\d+)\}/g,
		function(match, key){ return str[key]; }); // String
};

exports.regexp = function(/*__FormatOptions?*/ options){
	// summary:
	//		Builds the regular needed to parse a localized date

	return exports._parseInfo(options).regexp; // String
};

exports._parseInfo = function(/*__FormatOptions?*/ options){
	options = options || {};
	var locale = i18n.normalizeLocale(options.locale),
		bundle = exports._getGregorianBundle(locale),
		formatLength = options.formatLength || 'short',
		datePattern = options.datePattern || bundle["dateFormat-" + formatLength],
		timePattern = options.timePattern || bundle["timeFormat-" + formatLength],
		pattern;
	if(options.selector == 'date'){
		pattern = datePattern;
	}else if(options.selector == 'time'){
		pattern = timePattern;
	}else{
		pattern = bundle["dateTimeFormat-"+formatLength].replace(/\{(\d+)\}/g,
			function(match, key){ return [timePattern, datePattern][key]; });
	}

	var tokens = [],
		re = _processPattern(pattern, lang.hitch(this, _buildDateTimeRE, tokens, bundle, options));
	return {regexp: re, tokens: tokens, bundle: bundle};
};

exports.parse = function(/*String*/ value, /*__FormatOptions?*/ options){
	// summary:
	//		Convert a properly formatted string to a primitive Date object,
	//		using locale-specific settings.
	//
	// description:
	//		Create a Date object from a string using a known localized pattern.
	//		By default, this method parses looking for both date and time in the string.
	//		Formatting patterns are chosen appropriate to the locale.  Different
	//		formatting lengths may be chosen, with "full" used by default.
	//		Custom patterns may be used or registered with translations using
	//		the dojo/date/locale.addCustomFormats() method.
	//
	//		Formatting patterns are implemented using [the syntax described at
	//		unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)
	//		When two digit years are used, a century is chosen according to a sliding
	//		window of 80 years before and 20 years after present year, for both `yy` and `yyyy` patterns.
	//		year < 100CE requires strict mode.
	//
	// value:
	//		A string representation of a date

	// remove non-printing bidi control chars from input and pattern
	var controlChars = /[\u200E\u200F\u202A\u202E]/g,
		info = exports._parseInfo(options),
		tokens = info.tokens, bundle = info.bundle,
		re = new RegExp("^" + info.regexp.replace(controlChars, "") + "$",
			info.strict ? "" : "i"),
		match = re.exec(value && value.replace(controlChars, ""));

	if(!match){ return null; } // null

	var widthList = ['abbr', 'wide', 'narrow'],
		result = [1970,0,1,0,0,0,0], // will get converted to a Date at the end
		amPm = "",
		valid = array.every(match, function(v, i){
		if(!i){return true;}
		var token = tokens[i-1],
			l = token.length,
			c = token.charAt(0);
		switch(c){
			case 'y':
				if(l != 2 && options.strict){
					//interpret year literally, so '5' would be 5 A.D.
					result[0] = v;
				}else{
					if(v<100){
						v = Number(v);
						//choose century to apply, according to a sliding window
						//of 80 years before and 20 years after present year
						var year = '' + new Date().getFullYear(),
							century = year.substring(0, 2) * 100,
							cutoff = Math.min(Number(year.substring(2, 4)) + 20, 99);
						result[0] = (v < cutoff) ? century + v : century - 100 + v;
					}else{
						//we expected 2 digits and got more...
						if(options.strict){
							return false;
						}
						//interpret literally, so '150' would be 150 A.D.
						//also tolerate '1950', if 'yyyy' input passed to 'yy' format
						result[0] = v;
					}
				}
				break;
			case 'M':
			case 'L':
				if(l>2){
					var months = bundle['months-' +
							    (c == 'L' ? 'standAlone' : 'format') +
							    '-' + widthList[l-3]].concat();
					if(!options.strict){
						//Tolerate abbreviating period in month part
						//Case-insensitive comparison
						v = v.replace(".","").toLowerCase();
						months = array.map(months, function(s){ return s.replace(".","").toLowerCase(); } );
					}
					v = array.indexOf(months, v);
					if(v == -1){
//						console.log("dojo/date/locale.parse: Could not parse month name: '" + v + "'.");
						return false;
					}
				}else{
					v--;
				}
				result[1] = v;
				break;
			case 'E':
			case 'e':
			case 'c':
				var days = bundle['days-' +
						  (c == 'c' ? 'standAlone' : 'format') +
						  '-' + widthList[l-3]].concat();
				if(!options.strict){
					//Case-insensitive comparison
					v = v.toLowerCase();
					days = array.map(days, function(d){return d.toLowerCase();});
				}
				v = array.indexOf(days, v);
				if(v == -1){
//					console.log("dojo/date/locale.parse: Could not parse weekday name: '" + v + "'.");
					return false;
				}

				//TODO: not sure what to actually do with this input,
				//in terms of setting something on the Date obj...?
				//without more context, can't affect the actual date
				//TODO: just validate?
				break;
			case 'D':
				result[1] = 0;
				// fallthrough...
			case 'd':
				result[2] = v;
				break;
			case 'a': //am/pm
				var am = options.am || bundle['dayPeriods-format-wide-am'],
					pm = options.pm || bundle['dayPeriods-format-wide-pm'];
				if(!options.strict){
					var period = /\./g;
					v = v.replace(period,'').toLowerCase();
					am = am.replace(period,'').toLowerCase();
					pm = pm.replace(period,'').toLowerCase();
				}
				if(options.strict && v != am && v != pm){
//					console.log("dojo/date/locale.parse: Could not parse am/pm part.");
					return false;
				}

				// we might not have seen the hours field yet, so store the state and apply hour change later
				amPm = (v == pm) ? 'p' : (v == am) ? 'a' : '';
				break;
			case 'K': //hour (1-24)
				if(v == 24){ v = 0; }
				// fallthrough...
			case 'h': //hour (1-12)
			case 'H': //hour (0-23)
			case 'k': //hour (0-11)
				//TODO: strict bounds checking, padding
				if(v > 23){
//					console.log("dojo/date/locale.parse: Illegal hours value");
					return false;
				}

				//in the 12-hour case, adjusting for am/pm requires the 'a' part
				//which could come before or after the hour, so we will adjust later
				result[3] = v;
				break;
			case 'm': //minutes
				result[4] = v;
				break;
			case 's': //seconds
				result[5] = v;
				break;
			case 'S': //milliseconds
				result[6] = v;
//				break;
//			case 'w':
//TODO				var firstDay = 0;
//			default:
//TODO: throw?
//				console.log("dojo/date/locale.parse: unsupported pattern char=" + token.charAt(0));
		}
		return true;
	});

	var hours = +result[3];
	if(amPm === 'p' && hours < 12){
		result[3] = hours + 12; //e.g., 3pm -> 15
	}else if(amPm === 'a' && hours == 12){
		result[3] = 0; //12am -> 0
	}

	//TODO: implement a getWeekday() method in order to test
	//validity of input strings containing 'EEE' or 'EEEE'...

	var dateObject = new Date(result[0], result[1], result[2], result[3], result[4], result[5], result[6]); // Date
	if(options.strict){
		dateObject.setFullYear(result[0]);
	}

	// Check for overflow.  The Date() constructor normalizes things like April 32nd...
	//TODO: why isn't this done for times as well?
	var allTokens = tokens.join(""),
		dateToken = allTokens.indexOf('d') != -1,
		monthToken = allTokens.indexOf('M') != -1;

	if(!valid ||
		(monthToken && dateObject.getMonth() > result[1]) ||
		(dateToken && dateObject.getDate() > result[2])){
		return null;
	}

	// Check for underflow, due to DST shifts.  See #9366
	// This assumes a 1 hour dst shift correction at midnight
	// We could compare the timezone offset after the shift and add the difference instead.
	if((monthToken && dateObject.getMonth() < result[1]) ||
		(dateToken && dateObject.getDate() < result[2])){
		dateObject = date.add(dateObject, "hour", 1);
	}

	return dateObject; // Date
};

function _processPattern(pattern, applyPattern, applyLiteral, applyAll){
	//summary: Process a pattern with literals in it

	// Break up on single quotes, treat every other one as a literal, except '' which becomes '
	var identity = function(x){return x;};
	applyPattern = applyPattern || identity;
	applyLiteral = applyLiteral || identity;
	applyAll = applyAll || identity;

	//split on single quotes (which escape literals in date format strings)
	//but preserve escaped single quotes (e.g., o''clock)
	var chunks = pattern.match(/(''|[^'])+/g),
		literal = pattern.charAt(0) == "'";

	array.forEach(chunks, function(chunk, i){
		if(!chunk){
			chunks[i]='';
		}else{
			chunks[i]=(literal ? applyLiteral : applyPattern)(chunk.replace(/''/g, "'"));
			literal = !literal;
		}
	});
	return applyAll(chunks.join(''));
}

function _buildDateTimeRE(tokens, bundle, options, pattern){
	pattern = regexp.escapeString(pattern);
	if(!options.strict){ pattern = pattern.replace(" a", " ?a"); } // kludge to tolerate no space before am/pm
	return pattern.replace(/([a-z])\1*/ig, function(match){
		// Build a simple regexp.  Avoid captures, which would ruin the tokens list
		var s,
			c = match.charAt(0),
			l = match.length,
			p2 = '', p3 = '';
		if(options.strict){
			if(l > 1){ p2 = '0' + '{'+(l-1)+'}'; }
			if(l > 2){ p3 = '0' + '{'+(l-2)+'}'; }
		}else{
			p2 = '0?'; p3 = '0{0,2}';
		}
		switch(c){
			case 'y':
				s = '\\d{2,4}';
				break;
			case 'M':
			case 'L':
				s = (l>2) ? '\\S+?' : '1[0-2]|'+p2+'[1-9]';
				break;
			case 'D':
				s = '[12][0-9][0-9]|3[0-5][0-9]|36[0-6]|'+p2+'[1-9][0-9]|'+p3+'[1-9]';
				break;
			case 'd':
				s = '3[01]|[12]\\d|'+p2+'[1-9]';
				break;
			case 'w':
				s = '[1-4][0-9]|5[0-3]|'+p2+'[1-9]';
				break;
			case 'E':
			case 'e':
			case 'c':
				s = '.+?'; // match anything including spaces until the first pattern delimiter is found such as a comma or space
				break;
			case 'h': //hour (1-12)
				s = '1[0-2]|'+p2+'[1-9]';
				break;
			case 'k': //hour (0-11)
				s = '1[01]|'+p2+'\\d';
				break;
			case 'H': //hour (0-23)
				s = '1\\d|2[0-3]|'+p2+'\\d';
				break;
			case 'K': //hour (1-24)
				s = '1\\d|2[0-4]|'+p2+'[1-9]';
				break;
			case 'm':
			case 's':
				s = '[0-5]\\d';
				break;
			case 'S':
				s = '\\d{'+l+'}';
				break;
			case 'a':
				var am = options.am || bundle['dayPeriods-format-wide-am'],
					pm = options.pm || bundle['dayPeriods-format-wide-pm'];
					s = am + '|' + pm;
				if(!options.strict){
					if(am != am.toLowerCase()){ s += '|' + am.toLowerCase(); }
					if(pm != pm.toLowerCase()){ s += '|' + pm.toLowerCase(); }
					if(s.indexOf('.') != -1){ s += '|' + s.replace(/\./g, ""); }
				}
				s = s.replace(/\./g, "\\.");
				break;
			default:
			// case 'v':
			// case 'z':
			// case 'Z':
				s = ".*";
//				console.log("parse of date format, pattern=" + pattern);
		}

		if(tokens){ tokens.push(match); }

		return "(" + s + ")"; // add capture
	}).replace(/[\xa0 ]/g, "[\\s\\xa0]"); // normalize whitespace.  Need explicit handling of \xa0 for IE.
}

var _customFormats = [];
exports.addCustomFormats = function(/*String*/ packageName, /*String*/ bundleName){
	// summary:
	//		Add a reference to a bundle containing localized custom formats to be
	//		used by date/time formatting and parsing routines.
	//
	// description:
	//		The user may add custom localized formats where the bundle has properties following the
	//		same naming convention used by dojo.cldr: `dateFormat-xxxx` / `timeFormat-xxxx`
	//		The pattern string should match the format used by the CLDR.
	//		See dojo/date/locale.format() for details.
	//		The resources must be loaded by dojo.requireLocalization() prior to use

	_customFormats.push({pkg:packageName,name:bundleName});
};

exports._getGregorianBundle = function(/*String*/ locale){
	var gregorian = {};
	array.forEach(_customFormats, function(desc){
		var bundle = i18n.getLocalization(desc.pkg, desc.name, locale);
		gregorian = lang.mixin(gregorian, bundle);
	}, this);
	return gregorian; /*Object*/
};

exports.addCustomFormats(module.id.replace(/\/date\/locale$/, ".cldr"),"gregorian");

exports.getNames = function(/*String*/ item, /*String*/ type, /*String?*/ context, /*String?*/ locale){
	// summary:
	//		Used to get localized strings from dojo.cldr for day or month names.
	//
	// item:
	//	'months' || 'days'
	// type:
	//	'wide' || 'abbr' || 'narrow' (e.g. "Monday", "Mon", or "M" respectively, in English)
	// context:
	//	'standAlone' || 'format' (default)
	// locale:
	//	override locale used to find the names

	var label,
		lookup = exports._getGregorianBundle(locale),
		props = [item, context, type];
	if(context == 'standAlone'){
		var key = props.join('-');
		label = lookup[key];
		// Fall back to 'format' flavor of name
		if(label[0] == 1){ label = undefined; } // kludge, in the absence of real aliasing support in dojo.cldr
	}
	props[1] = 'format';

	// return by copy so changes won't be made accidentally to the in-memory model
	return (label || lookup[props.join('-')]).concat(); /*Array*/
};

exports.isWeekend = function(/*Date?*/ dateObject, /*String?*/ locale){
	// summary:
	//	Determines if the date falls on a weekend, according to local custom.

	var weekend = supplemental.getWeekend(locale),
		day = (dateObject || new Date()).getDay();
	if(weekend.end < weekend.start){
		weekend.end += 7;
		if(day < weekend.start){ day += 7; }
	}
	return day >= weekend.start && day <= weekend.end; // Boolean
};

// These are used only by format and strftime.  Do they need to be public?  Which module should they go in?

exports._getDayOfYear = function(/*Date*/ dateObject){
	// summary:
	//		gets the day of the year as represented by dateObject
	return date.difference(new Date(dateObject.getFullYear(), 0, 1, dateObject.getHours()), dateObject) + 1; // Number
};

exports._getWeekOfYear = function(/*Date*/ dateObject, /*Number*/ firstDayOfWeek){
	if(arguments.length == 1){ firstDayOfWeek = 0; } // Sunday

	var firstDayOfYear = new Date(dateObject.getFullYear(), 0, 1).getDay(),
		adj = (firstDayOfYear - firstDayOfWeek + 7) % 7,
		week = Math.floor((exports._getDayOfYear(dateObject) + adj - 1) / 7);

	// if year starts on the specified day, start counting weeks at 1
	if(firstDayOfYear == firstDayOfWeek){ week++; }

	return week; // Number
};

return exports;
});

},
'dojo/cldr/supplemental':function(){
define(["../_base/lang", "../i18n"], function(lang, i18n){

// module:
//		dojo/cldr/supplemental


var supplemental = {
	// summary:
	//		TODOC
};
lang.setObject("dojo.cldr.supplemental", supplemental);

supplemental.getFirstDayOfWeek = function(/*String?*/locale){
	// summary:
	//		Returns a zero-based index for first day of the week
	// description:
	//		Returns a zero-based index for first day of the week, as used by the local (Gregorian) calendar.
	//		e.g. Sunday (returns 0), or Monday (returns 1)

	// from http://www.unicode.org/cldr/data/common/supplemental/supplementalData.xml:supplementalData/weekData/firstDay
	var firstDay = {/*default is 1=Monday*/
		bd:5,mv:5,
		ae:6,af:6,bh:6,dj:6,dz:6,eg:6,iq:6,ir:6,jo:6,kw:6,
		ly:6,ma:6,om:6,qa:6,sa:6,sd:6,sy:6,ye:6,
		ag:0,ar:0,as:0,au:0,br:0,bs:0,bt:0,bw:0,by:0,bz:0,ca:0,cn:0,
		co:0,dm:0,'do':0,et:0,gt:0,gu:0,hk:0,hn:0,id:0,ie:0,il:0,'in':0,
		jm:0,jp:0,ke:0,kh:0,kr:0,la:0,mh:0,mm:0,mo:0,mt:0,mx:0,mz:0,
		ni:0,np:0,nz:0,pa:0,pe:0,ph:0,pk:0,pr:0,py:0,sg:0,sv:0,th:0,
		tn:0,tt:0,tw:0,um:0,us:0,ve:0,vi:0,ws:0,za:0,zw:0
	};

	var country = supplemental._region(locale);
	var dow = firstDay[country];
	return (dow === undefined) ? 1 : dow; /*Number*/
};

supplemental._region = function(/*String?*/locale){
	locale = i18n.normalizeLocale(locale);
	var tags = locale.split('-');
	var region = tags[1];
	if(!region){
		// IE often gives language only (#2269)
		// Arbitrary mappings of language-only locales to a country:
		region = {
			aa:"et", ab:"ge", af:"za", ak:"gh", am:"et", ar:"eg", as:"in", av:"ru", ay:"bo", az:"az", ba:"ru",
			be:"by", bg:"bg", bi:"vu", bm:"ml", bn:"bd", bo:"cn", br:"fr", bs:"ba", ca:"es", ce:"ru", ch:"gu",
			co:"fr", cr:"ca", cs:"cz", cv:"ru", cy:"gb", da:"dk", de:"de", dv:"mv", dz:"bt", ee:"gh", el:"gr",
			en:"us", es:"es", et:"ee", eu:"es", fa:"ir", ff:"sn", fi:"fi", fj:"fj", fo:"fo", fr:"fr", fy:"nl",
			ga:"ie", gd:"gb", gl:"es", gn:"py", gu:"in", gv:"gb", ha:"ng", he:"il", hi:"in", ho:"pg", hr:"hr",
			ht:"ht", hu:"hu", hy:"am", ia:"fr", id:"id", ig:"ng", ii:"cn", ik:"us", "in":"id", is:"is", it:"it",
			iu:"ca", iw:"il", ja:"jp", ji:"ua", jv:"id", jw:"id", ka:"ge", kg:"cd", ki:"ke", kj:"na", kk:"kz",
			kl:"gl", km:"kh", kn:"in", ko:"kr", ks:"in", ku:"tr", kv:"ru", kw:"gb", ky:"kg", la:"va", lb:"lu",
			lg:"ug", li:"nl", ln:"cd", lo:"la", lt:"lt", lu:"cd", lv:"lv", mg:"mg", mh:"mh", mi:"nz", mk:"mk",
			ml:"in", mn:"mn", mo:"ro", mr:"in", ms:"my", mt:"mt", my:"mm", na:"nr", nb:"no", nd:"zw", ne:"np",
			ng:"na", nl:"nl", nn:"no", no:"no", nr:"za", nv:"us", ny:"mw", oc:"fr", om:"et", or:"in", os:"ge",
			pa:"in", pl:"pl", ps:"af", pt:"br", qu:"pe", rm:"ch", rn:"bi", ro:"ro", ru:"ru", rw:"rw", sa:"in",
			sd:"in", se:"no", sg:"cf", si:"lk", sk:"sk", sl:"si", sm:"ws", sn:"zw", so:"so", sq:"al", sr:"rs",
			ss:"za", st:"za", su:"id", sv:"se", sw:"tz", ta:"in", te:"in", tg:"tj", th:"th", ti:"et", tk:"tm",
			tl:"ph", tn:"za", to:"to", tr:"tr", ts:"za", tt:"ru", ty:"pf", ug:"cn", uk:"ua", ur:"pk", uz:"uz",
			ve:"za", vi:"vn", wa:"be", wo:"sn", xh:"za", yi:"il", yo:"ng", za:"cn", zh:"cn", zu:"za",
			ace:"id", ady:"ru", agq:"cm", alt:"ru", amo:"ng", asa:"tz", ast:"es", awa:"in", bal:"pk",
			ban:"id", bas:"cm", bax:"cm", bbc:"id", bem:"zm", bez:"tz", bfq:"in", bft:"pk", bfy:"in",
			bhb:"in", bho:"in", bik:"ph", bin:"ng", bjj:"in", bku:"ph", bqv:"ci", bra:"in", brx:"in",
			bss:"cm", btv:"pk", bua:"ru", buc:"yt", bug:"id", bya:"id", byn:"er", cch:"ng", ccp:"in",
			ceb:"ph", cgg:"ug", chk:"fm", chm:"ru", chp:"ca", chr:"us", cja:"kh", cjm:"vn", ckb:"iq",
			crk:"ca", csb:"pl", dar:"ru", dav:"ke", den:"ca", dgr:"ca", dje:"ne", doi:"in", dsb:"de",
			dua:"cm", dyo:"sn", dyu:"bf", ebu:"ke", efi:"ng", ewo:"cm", fan:"gq", fil:"ph", fon:"bj",
			fur:"it", gaa:"gh", gag:"md", gbm:"in", gcr:"gf", gez:"et", gil:"ki", gon:"in", gor:"id",
			grt:"in", gsw:"ch", guz:"ke", gwi:"ca", haw:"us", hil:"ph", hne:"in", hnn:"ph", hoc:"in",
			hoj:"in", ibb:"ng", ilo:"ph", inh:"ru", jgo:"cm", jmc:"tz", kaa:"uz", kab:"dz", kaj:"ng",
			kam:"ke", kbd:"ru", kcg:"ng", kde:"tz", kdt:"th", kea:"cv", ken:"cm", kfo:"ci", kfr:"in",
			kha:"in", khb:"cn", khq:"ml", kht:"in", kkj:"cm", kln:"ke", kmb:"ao", koi:"ru", kok:"in",
			kos:"fm", kpe:"lr", krc:"ru", kri:"sl", krl:"ru", kru:"in", ksb:"tz", ksf:"cm", ksh:"de",
			kum:"ru", lag:"tz", lah:"pk", lbe:"ru", lcp:"cn", lep:"in", lez:"ru", lif:"np", lis:"cn",
			lki:"ir", lmn:"in", lol:"cd", lua:"cd", luo:"ke", luy:"ke", lwl:"th", mad:"id", mag:"in",
			mai:"in", mak:"id", man:"gn", mas:"ke", mdf:"ru", mdh:"ph", mdr:"id", men:"sl", mer:"ke",
			mfe:"mu", mgh:"mz", mgo:"cm", min:"id", mni:"in", mnk:"gm", mnw:"mm", mos:"bf", mua:"cm",
			mwr:"in", myv:"ru", nap:"it", naq:"na", nds:"de", "new":"np", niu:"nu", nmg:"cm", nnh:"cm",
			nod:"th", nso:"za", nus:"sd", nym:"tz", nyn:"ug", pag:"ph", pam:"ph", pap:"bq", pau:"pw",
			pon:"fm", prd:"ir", raj:"in", rcf:"re", rej:"id", rjs:"np", rkt:"in", rof:"tz", rwk:"tz",
			saf:"gh", sah:"ru", saq:"ke", sas:"id", sat:"in", saz:"in", sbp:"tz", scn:"it", sco:"gb",
			sdh:"ir", seh:"mz", ses:"ml", shi:"ma", shn:"mm", sid:"et", sma:"se", smj:"se", smn:"fi",
			sms:"fi", snk:"ml", srn:"sr", srr:"sn", ssy:"er", suk:"tz", sus:"gn", swb:"yt", swc:"cd",
			syl:"bd", syr:"sy", tbw:"ph", tcy:"in", tdd:"cn", tem:"sl", teo:"ug", tet:"tl", tig:"er",
			tiv:"ng", tkl:"tk", tmh:"ne", tpi:"pg", trv:"tw", tsg:"ph", tts:"th", tum:"mw", tvl:"tv",
			twq:"ne", tyv:"ru", tzm:"ma", udm:"ru", uli:"fm", umb:"ao", unr:"in", unx:"in", vai:"lr",
			vun:"tz", wae:"ch", wal:"et", war:"ph", xog:"ug", xsr:"np", yao:"mz", yap:"fm", yav:"cm", zza:"tr"
		}[tags[0]];
	}else if(region.length == 4){
		// The ISO 3166 country code is usually in the second position, unless a
		// 4-letter script is given. See http://www.ietf.org/rfc/rfc4646.txt
		region = tags[2];
	}
	return region;
};

supplemental.getWeekend = function(/*String?*/locale){
	// summary:
	//		Returns a hash containing the start and end days of the weekend
	// description:
	//		Returns a hash containing the start and end days of the weekend according to local custom using locale,
	//		or by default in the user's locale.
	//		e.g. {start:6, end:0}

	// from http://www.unicode.org/cldr/data/common/supplemental/supplementalData.xml:supplementalData/weekData/weekend{Start,End}
	var weekendStart = {/*default is 6=Saturday*/
			'in':0,
			af:4,dz:4,ir:4,om:4,sa:4,ye:4,
			ae:5,bh:5,eg:5,il:5,iq:5,jo:5,kw:5,ly:5,ma:5,qa:5,sd:5,sy:5,tn:5
		},

		weekendEnd = {/*default is 0=Sunday*/
			af:5,dz:5,ir:5,om:5,sa:5,ye:5,
			ae:6,bh:5,eg:6,il:6,iq:6,jo:6,kw:6,ly:6,ma:6,qa:6,sd:6,sy:6,tn:6
		},

		country = supplemental._region(locale),
		start = weekendStart[country],
		end = weekendEnd[country];

	if(start === undefined){start=6;}
	if(end === undefined){end=0;}
	return {start:start, end:end}; /*Object {start,end}*/
};

return supplemental;
});

},
'dojo/cldr/nls/gregorian':function(){
define({ root:

//begin v1.x content
{
	"dateFormatItem-Ehm": "E h:mm a",
	"days-standAlone-short": [
		"Sun",
		"Mon",
		"Tue",
		"Wed",
		"Thu",
		"Fri",
		"Sat"
	],
	"months-format-narrow": [
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9",
		"10",
		"11",
		"12"
	],
	"field-second-relative+0": "now",
	"quarters-standAlone-narrow": [
		"1",
		"2",
		"3",
		"4"
	],
	"field-weekday": "Day of the Week",
	"dateFormatItem-yQQQ": "y QQQ",
	"dateFormatItem-yMEd": "y-MM-dd, E",
	"field-wed-relative+0": "this Wednesday",
	"field-wed-relative+1": "next Wednesday",
	"dateFormatItem-GyMMMEd": "G y MMM d, E",
	"dateFormatItem-MMMEd": "MMM d, E",
	"eraNarrow": [
		"BCE",
		"CE"
	],
	"field-tue-relative+-1": "last Tuesday",
	"days-format-short": [
		"Sun",
		"Mon",
		"Tue",
		"Wed",
		"Thu",
		"Fri",
		"Sat"
	],
	"dateTimeFormats-appendItem-Day-Of-Week": "{0} {1}",
	"dateFormat-long": "y MMMM d",
	"field-fri-relative+-1": "last Friday",
	"field-wed-relative+-1": "last Wednesday",
	"months-format-wide": [
		"M01",
		"M02",
		"M03",
		"M04",
		"M05",
		"M06",
		"M07",
		"M08",
		"M09",
		"M10",
		"M11",
		"M12"
	],
	"dateTimeFormat-medium": "{1} {0}",
	"dayPeriods-format-wide-pm": "PM",
	"dateFormat-full": "y MMMM d, EEEE",
	"field-thu-relative+-1": "last Thursday",
	"dateFormatItem-Md": "MM-dd",
	"dayPeriods-format-abbr-am": "AM",
	"dateTimeFormats-appendItem-Second": "{0} ({2}: {1})",
	"dayPeriods-format-wide-noon": "noon",
	"dateFormatItem-yMd": "y-MM-dd",
	"field-era": "Era",
	"dateFormatItem-yM": "y-MM",
	"months-standAlone-wide": [
		"M01",
		"M02",
		"M03",
		"M04",
		"M05",
		"M06",
		"M07",
		"M08",
		"M09",
		"M10",
		"M11",
		"M12"
	],
	"timeFormat-short": "HH:mm",
	"quarters-format-wide": [
		"Q1",
		"Q2",
		"Q3",
		"Q4"
	],
	"dateFormatItem-yQQQQ": "y QQQQ",
	"timeFormat-long": "HH:mm:ss z",
	"field-year": "Year",
	"dateFormatItem-yMMM": "y MMM",
	"dateTimeFormats-appendItem-Era": "{1} {0}",
	"field-hour": "Hour",
	"months-format-abbr": [
		"M01",
		"M02",
		"M03",
		"M04",
		"M05",
		"M06",
		"M07",
		"M08",
		"M09",
		"M10",
		"M11",
		"M12"
	],
	"field-sat-relative+0": "this Saturday",
	"field-sat-relative+1": "next Saturday",
	"timeFormat-full": "HH:mm:ss zzzz",
	"dateTimeFormats-appendItem-Week": "{0} ({2}: {1})",
	"field-day-relative+0": "today",
	"field-thu-relative+0": "this Thursday",
	"field-day-relative+1": "tomorrow",
	"field-thu-relative+1": "next Thursday",
	"dateFormatItem-GyMMMd": "G y MMM d",
	"dateFormatItem-H": "HH",
	"months-standAlone-abbr": [
		"M01",
		"M02",
		"M03",
		"M04",
		"M05",
		"M06",
		"M07",
		"M08",
		"M09",
		"M10",
		"M11",
		"M12"
	],
	"quarters-format-abbr": [
		"Q1",
		"Q2",
		"Q3",
		"Q4"
	],
	"quarters-standAlone-wide": [
		"Q1",
		"Q2",
		"Q3",
		"Q4"
	],
	"dateFormatItem-Gy": "G y",
	"dateFormatItem-M": "L",
	"days-standAlone-wide": [
		"Sun",
		"Mon",
		"Tue",
		"Wed",
		"Thu",
		"Fri",
		"Sat"
	],
	"dayPeriods-format-abbr-noon": "noon",
	"timeFormat-medium": "HH:mm:ss",
	"field-sun-relative+0": "this Sunday",
	"dateFormatItem-Hm": "HH:mm",
	"field-sun-relative+1": "next Sunday",
	"quarters-standAlone-abbr": [
		"Q1",
		"Q2",
		"Q3",
		"Q4"
	],
	"eraAbbr": [
		"BCE",
		"CE"
	],
	"field-minute": "Minute",
	"field-dayperiod": "Dayperiod",
	"days-standAlone-abbr": [
		"Sun",
		"Mon",
		"Tue",
		"Wed",
		"Thu",
		"Fri",
		"Sat"
	],
	"dateFormatItem-d": "d",
	"dateFormatItem-ms": "mm:ss",
	"quarters-format-narrow": [
		"1",
		"2",
		"3",
		"4"
	],
	"field-day-relative+-1": "yesterday",
	"dateTimeFormat-long": "{1} {0}",
	"dayPeriods-format-narrow-am": "a",
	"dateFormatItem-h": "h a",
	"dateFormatItem-MMMd": "MMM d",
	"dateFormatItem-MEd": "MM-dd, E",
	"dateTimeFormat-full": "{1} {0}",
	"field-fri-relative+0": "this Friday",
	"field-fri-relative+1": "next Friday",
	"field-day": "Day",
	"days-format-wide": [
		"Sun",
		"Mon",
		"Tue",
		"Wed",
		"Thu",
		"Fri",
		"Sat"
	],
	"field-zone": "Zone",
	"months-standAlone-narrow": [
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9",
		"10",
		"11",
		"12"
	],
	"dateFormatItem-y": "y",
	"dateTimeFormats-appendItem-Day": "{0} ({2}: {1})",
	"field-year-relative+-1": "last year",
	"field-month-relative+-1": "last month",
	"dateTimeFormats-appendItem-Year": "{1} {0}",
	"dateFormatItem-hm": "h:mm a",
	"dateTimeFormats-appendItem-Hour": "{0} ({2}: {1})",
	"dayPeriods-format-abbr-pm": "PM",
	"days-format-abbr": [
		"Sun",
		"Mon",
		"Tue",
		"Wed",
		"Thu",
		"Fri",
		"Sat"
	],
	"eraNames": [
		"BCE",
		"CE"
	],
	"dateFormatItem-yMMMd": "y MMM d",
	"days-format-narrow": [
		"S",
		"M",
		"T",
		"W",
		"T",
		"F",
		"S"
	],
	"field-month": "Month",
	"days-standAlone-narrow": [
		"S",
		"M",
		"T",
		"W",
		"T",
		"F",
		"S"
	],
	"dateFormatItem-MMM": "LLL",
	"field-tue-relative+0": "this Tuesday",
	"dateTimeFormats-appendItem-Quarter": "{0} ({2}: {1})",
	"field-tue-relative+1": "next Tuesday",
	"dayPeriods-format-wide-am": "AM",
	"dateTimeFormats-appendItem-Month": "{0} ({2}: {1})",
	"dateTimeFormats-appendItem-Minute": "{0} ({2}: {1})",
	"dateFormatItem-EHm": "E HH:mm",
	"field-mon-relative+0": "this Monday",
	"field-mon-relative+1": "next Monday",
	"dateFormat-short": "y-MM-dd",
	"dateFormatItem-EHms": "E HH:mm:ss",
	"dateFormatItem-Ehms": "E h:mm:ss a",
	"dayPeriods-format-narrow-noon": "n",
	"field-second": "Second",
	"field-sat-relative+-1": "last Saturday",
	"dateFormatItem-yMMMEd": "y MMM d, E",
	"field-sun-relative+-1": "last Sunday",
	"field-month-relative+0": "this month",
	"field-month-relative+1": "next month",
	"dateTimeFormats-appendItem-Timezone": "{0} {1}",
	"dateFormatItem-Ed": "d, E",
	"field-week": "Week",
	"dateFormat-medium": "y MMM d",
	"field-week-relative+-1": "last week",
	"field-year-relative+0": "this year",
	"field-year-relative+1": "next year",
	"dayPeriods-format-narrow-pm": "p",
	"dateTimeFormat-short": "{1} {0}",
	"dateFormatItem-Hms": "HH:mm:ss",
	"dateFormatItem-hms": "h:mm:ss a",
	"dateFormatItem-GyMMM": "G y MMM",
	"field-mon-relative+-1": "last Monday",
	"field-week-relative+0": "this week",
	"field-week-relative+1": "next week"
}
//end v1.x content
,
	"ar": true,
	"ca": true,
	"cs": true,
	"da": true,
	"de": true,
	"el": true,
	"en": true,
	"en-au": true,
	"en-ca": true,
	"en-gb": true,
	"es": true,
	"fi": true,
	"fr": true,
	"fr-ch": true,
	"he": true,
	"hu": true,
	"it": true,
	"ja": true,
	"ko": true,
	"nb": true,
	"nl": true,
	"pl": true,
	"pt": true,
	"pt-pt": true,
	"ro": true,
	"ru": true,
	"sk": true,
	"sl": true,
	"sv": true,
	"th": true,
	"tr": true,
	"zh": true,
	"zh-hant": true,
	"zh-hk": true,
	"zh-tw": true
});
},
'dojo/cldr/nls/en/gregorian':function(){
define(
//begin v1.x content
{
	"dateFormatItem-Ehm": "E h:mm a",
	"days-standAlone-short": [
		"Su",
		"Mo",
		"Tu",
		"We",
		"Th",
		"Fr",
		"Sa"
	],
	"months-format-narrow": [
		"J",
		"F",
		"M",
		"A",
		"M",
		"J",
		"J",
		"A",
		"S",
		"O",
		"N",
		"D"
	],
	"field-second-relative+0": "now",
	"quarters-standAlone-narrow": [
		"1",
		"2",
		"3",
		"4"
	],
	"field-weekday": "Day of the Week",
	"dateFormatItem-yQQQ": "QQQ y",
	"dateFormatItem-yMEd": "E, M/d/y",
	"field-wed-relative+0": "this Wednesday",
	"field-wed-relative+1": "next Wednesday",
	"dateFormatItem-GyMMMEd": "E, MMM d, y G",
	"dateFormatItem-MMMEd": "E, MMM d",
	"eraNarrow": [
		"B",
		"A"
	],
	"field-tue-relative+-1": "last Tuesday",
	"days-format-short": [
		"Su",
		"Mo",
		"Tu",
		"We",
		"Th",
		"Fr",
		"Sa"
	],
	"dateTimeFormats-appendItem-Day-Of-Week": "{0} {1}",
	"dateFormat-long": "MMMM d, y",
	"field-fri-relative+-1": "last Friday",
	"field-wed-relative+-1": "last Wednesday",
	"months-format-wide": [
		"January",
		"February",
		"March",
		"April",
		"May",
		"June",
		"July",
		"August",
		"September",
		"October",
		"November",
		"December"
	],
	"dateTimeFormat-medium": "{1}, {0}",
	"dayPeriods-format-wide-pm": "PM",
	"dateFormat-full": "EEEE, MMMM d, y",
	"field-thu-relative+-1": "last Thursday",
	"dateFormatItem-Md": "M/d",
	"dateTimeFormats-appendItem-Second": "{0} ({2}: {1})",
	"dayPeriods-format-wide-noon": "noon",
	"dateFormatItem-yMd": "M/d/y",
	"field-era": "Era",
	"dateFormatItem-yM": "M/y",
	"months-standAlone-wide": [
		"January",
		"February",
		"March",
		"April",
		"May",
		"June",
		"July",
		"August",
		"September",
		"October",
		"November",
		"December"
	],
	"timeFormat-short": "h:mm a",
	"quarters-format-wide": [
		"1st quarter",
		"2nd quarter",
		"3rd quarter",
		"4th quarter"
	],
	"dateFormatItem-yQQQQ": "QQQQ y",
	"timeFormat-long": "h:mm:ss a z",
	"field-year": "Year",
	"dateFormatItem-yMMM": "MMM y",
	"dateTimeFormats-appendItem-Era": "{0} {1}",
	"field-hour": "Hour",
	"months-format-abbr": [
		"Jan",
		"Feb",
		"Mar",
		"Apr",
		"May",
		"Jun",
		"Jul",
		"Aug",
		"Sep",
		"Oct",
		"Nov",
		"Dec"
	],
	"field-sat-relative+0": "this Saturday",
	"field-sat-relative+1": "next Saturday",
	"timeFormat-full": "h:mm:ss a zzzz",
	"dateTimeFormats-appendItem-Week": "{0} ({2}: {1})",
	"field-day-relative+0": "today",
	"field-thu-relative+0": "this Thursday",
	"field-day-relative+1": "tomorrow",
	"field-thu-relative+1": "next Thursday",
	"dateFormatItem-GyMMMd": "MMM d, y G",
	"dateFormatItem-H": "HH",
	"months-standAlone-abbr": [
		"Jan",
		"Feb",
		"Mar",
		"Apr",
		"May",
		"Jun",
		"Jul",
		"Aug",
		"Sep",
		"Oct",
		"Nov",
		"Dec"
	],
	"quarters-format-abbr": [
		"Q1",
		"Q2",
		"Q3",
		"Q4"
	],
	"quarters-standAlone-wide": [
		"1st quarter",
		"2nd quarter",
		"3rd quarter",
		"4th quarter"
	],
	"dateFormatItem-Gy": "y G",
	"dateFormatItem-M": "L",
	"days-standAlone-wide": [
		"Sunday",
		"Monday",
		"Tuesday",
		"Wednesday",
		"Thursday",
		"Friday",
		"Saturday"
	],
	"timeFormat-medium": "h:mm:ss a",
	"field-sun-relative+0": "this Sunday",
	"dateFormatItem-Hm": "HH:mm",
	"field-sun-relative+1": "next Sunday",
	"eraAbbr": [
		"BC",
		"AD"
	],
	"field-minute": "Minute",
	"field-dayperiod": "AM/PM",
	"dateFormatItem-d": "d",
	"dateFormatItem-ms": "mm:ss",
	"field-day-relative+-1": "yesterday",
	"dateFormatItem-h": "h a",
	"dateTimeFormat-long": "{1} 'at' {0}",
	"dayPeriods-format-narrow-am": "a",
	"dateFormatItem-MMMd": "MMM d",
	"dateFormatItem-MEd": "E, M/d",
	"dateTimeFormat-full": "{1} 'at' {0}",
	"field-fri-relative+0": "this Friday",
	"field-fri-relative+1": "next Friday",
	"field-day": "Day",
	"days-format-wide": [
		"Sunday",
		"Monday",
		"Tuesday",
		"Wednesday",
		"Thursday",
		"Friday",
		"Saturday"
	],
	"field-zone": "Time Zone",
	"dateTimeFormats-appendItem-Day": "{0} ({2}: {1})",
	"dateFormatItem-y": "y",
	"months-standAlone-narrow": [
		"J",
		"F",
		"M",
		"A",
		"M",
		"J",
		"J",
		"A",
		"S",
		"O",
		"N",
		"D"
	],
	"field-year-relative+-1": "last year",
	"field-month-relative+-1": "last month",
	"dateFormatItem-hm": "h:mm a",
	"dateTimeFormats-appendItem-Year": "{0} {1}",
	"dateTimeFormats-appendItem-Hour": "{0} ({2}: {1})",
	"days-format-abbr": [
		"Sun",
		"Mon",
		"Tue",
		"Wed",
		"Thu",
		"Fri",
		"Sat"
	],
	"dateFormatItem-yMMMd": "MMM d, y",
	"eraNames": [
		"Before Christ",
		"Anno Domini"
	],
	"days-standAlone-narrow": [
		"S",
		"M",
		"T",
		"W",
		"T",
		"F",
		"S"
	],
	"dateFormatItem-MMM": "LLL",
	"field-month": "Month",
	"field-tue-relative+0": "this Tuesday",
	"dateTimeFormats-appendItem-Quarter": "{0} ({2}: {1})",
	"field-tue-relative+1": "next Tuesday",
	"dayPeriods-format-wide-am": "AM",
	"dateTimeFormats-appendItem-Month": "{0} ({2}: {1})",
	"dateTimeFormats-appendItem-Minute": "{0} ({2}: {1})",
	"dateFormatItem-EHm": "E HH:mm",
	"field-mon-relative+0": "this Monday",
	"field-mon-relative+1": "next Monday",
	"dateFormat-short": "M/d/yy",
	"dateFormatItem-EHms": "E HH:mm:ss",
	"dateFormatItem-Ehms": "E h:mm:ss a",
	"dayPeriods-format-narrow-noon": "n",
	"field-second": "Second",
	"field-sat-relative+-1": "last Saturday",
	"dateFormatItem-yMMMEd": "E, MMM d, y",
	"field-sun-relative+-1": "last Sunday",
	"field-month-relative+0": "this month",
	"field-month-relative+1": "next month",
	"dateFormatItem-Ed": "d E",
	"dateTimeFormats-appendItem-Timezone": "{0} {1}",
	"field-week": "Week",
	"dateFormat-medium": "MMM d, y",
	"field-year-relative+0": "this year",
	"field-week-relative+-1": "last week",
	"field-year-relative+1": "next year",
	"dayPeriods-format-narrow-pm": "p",
	"dateTimeFormat-short": "{1}, {0}",
	"dateFormatItem-Hms": "HH:mm:ss",
	"dateFormatItem-hms": "h:mm:ss a",
	"dateFormatItem-GyMMM": "MMM y G",
	"field-mon-relative+-1": "last Monday",
	"field-week-relative+0": "this week",
	"field-week-relative+1": "next week"
}
//end v1.x content
);
},
'esri/SpatialReference':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/has", "./kernel", "./lang"], function(g, f, e, c, d, h) {
    c = [-2.0037508342788905E7, 2.0037508342788905E7];
    d = [-2.0037508342787E7, 2.0037508342787E7];
    return g(null, {
        declaredClass: "esri.SpatialReference",
        constructor: function(a) {
            a && (e.isObject(a) ? e.mixin(this, a) : e.isString(a) ? this.wkt = a : this.wkid = a)
        },
        wkid: null,
        wkt: null,
        _info: {
            102113: {
                wkTemplate: 'PROJCS["WGS_1984_Web_Mercator",GEOGCS["GCS_WGS_1984_Major_Auxiliary_Sphere",DATUM["D_WGS_1984_Major_Auxiliary_Sphere",SPHEROID["WGS_1984_Major_Auxiliary_Sphere",6378137.0,0.0]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Mercator"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",${Central_Meridian}],PARAMETER["Standard_Parallel_1",0.0],UNIT["Meter",1.0]]',
                valid: c,
                origin: d,
                dx: 1E-5
            },
            102100: {
                wkTemplate: 'PROJCS["WGS_1984_Web_Mercator_Auxiliary_Sphere",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Mercator_Auxiliary_Sphere"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",${Central_Meridian}],PARAMETER["Standard_Parallel_1",0.0],PARAMETER["Auxiliary_Sphere_Type",0.0],UNIT["Meter",1.0]]',
                valid: c,
                origin: d,
                dx: 1E-5
            },
            3785: {
                wkTemplate: 'PROJCS["WGS_1984_Web_Mercator",GEOGCS["GCS_WGS_1984_Major_Auxiliary_Sphere",DATUM["D_WGS_1984_Major_Auxiliary_Sphere",SPHEROID["WGS_1984_Major_Auxiliary_Sphere",6378137.0,0.0]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Mercator"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",${Central_Meridian}],PARAMETER["Standard_Parallel_1",0.0],UNIT["Meter",1.0]]',
                valid: c,
                origin: d,
                dx: 1E-5
            },
            3857: {
                wkTemplate: 'PROJCS["WGS_1984_Web_Mercator_Auxiliary_Sphere",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Mercator_Auxiliary_Sphere"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",${Central_Meridian}],PARAMETER["Standard_Parallel_1",0.0],PARAMETER["Auxiliary_Sphere_Type",0.0],UNIT["Meter",1.0]]',
                valid: c,
                origin: d,
                dx: 1E-5
            },
            4326: {
                wkTemplate: 'GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",${Central_Meridian}],UNIT["Degree",0.0174532925199433]]',
                altTemplate: 'PROJCS["WGS_1984_Plate_Carree",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Plate_Carree"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",${Central_Meridian}],UNIT["Degrees",111319.491]]',
                valid: [-180, 180],
                origin: [-180, 180],
                dx: 1E-5
            }
        },
        _isWebMercator: function() {
            return -1 !== f.indexOf([102113, 102100, 3857, 3785], this.wkid)
        },
        _isWrappable: function() {
            return -1 !== f.indexOf([102113, 102100, 3857, 3785, 4326], this.wkid)
        },
        _getInfo: function() {
            return this.wkid ? this._info[this.wkid] : null
        },
        _canProject: function(a) {
            var b = !1;
            a && (b = this.isWebMercator() && 4326 === a.wkid || a.isWebMercator() && 4326 === this.wkid);
            return b
        },
        isWebMercator: function() {
            return this._isWebMercator()
        },
        equals: function(a) {
            var b = !1;
            a && (this === a &&
                (b = !0), this.wkid || a.wkid ? b = this.wkid === a.wkid || this.isWebMercator() && a.isWebMercator() || this.wkid === a.latestWkid || a.wkid === this.latestWkid : this.wkt && a.wkt && (b = this.wkt.toUpperCase() === a.wkt.toUpperCase()));
            return b
        },
        toJson: function() {
            var a = null,
                b = h.isDefined;
            b(this.wkid) ? a = {
                wkid: this.wkid
            } : b(this.wkt) && (a = {
                wkt: this.wkt
            });
            a && b(this.latestWkid) && (a.latestWkid = this.latestWkid);
            return a
        }
    })
});
},
'esri/geometry/webMercatorUtils':function(){
//>>built
define(["dojo/_base/array", "dojo/_base/lang", "dojo/has", "../kernel", "../SpatialReference", "./Point"], function(k, n, p, q, l, e) {
    function f(a, b, d, c) {
        if ("point" === a.type) {
            var g = b(a.x, a.y, c);
            return new a.constructor(g[0], g[1], new l(d))
        }
        if ("extent" === a.type) {
            var g = b(a.xmin, a.ymin, c),
                e = b(a.xmax, a.ymax, c);
            return new a.constructor(g[0], g[1], e[0], e[1], new l(d))
        }
        if ("polyline" === a.type || "polygon" === a.type) {
            var g = "polyline" === a.type,
                f = [],
                h;
            k.forEach(g ? a.paths : a.rings, function(a) {
                f.push(h = []);
                k.forEach(a, function(a) {
                    h.push(b(a[0],
                        a[1], c))
                })
            });
            return g ? new a.constructor({
                paths: f,
                spatialReference: d
            }) : new a.constructor({
                rings: f,
                spatialReference: d
            })
        }
        if ("multipoint" === a.type) {
            var m = [];
            k.forEach(a.points, function(a) {
                m.push(b(a[0], a[1], c))
            });
            return new a.constructor({
                points: m,
                spatialReference: d
            })
        }
    }

    function h(a, b) {
        var d = a && (null != a.wkid ? a : a.spatialReference),
            c = b && (null != b.wkid ? b : b.spatialReference);
        return !d || !c ? !1 : c.equals(d) ? !0 : c._canProject(d)
    }
    return {
        canProject: h,
        project: function(a, b) {
            var d = a && a.spatialReference,
                c = b && (null != b.wkid ?
                    b : b.spatialReference);
            d && c ? d.equals(c) ? a = new a.constructor(a.toJson()) : h(d, c) ? c.isWebMercator() ? a = f(a, e.lngLatToXY, {
                wkid: 102100
            }) : 4326 === c.wkid && (a = f(a, e.xyToLngLat, {
                wkid: 4326
            })) : a = null : a = null;
            return a
        },
        lngLatToXY: e.lngLatToXY,
        xyToLngLat: e.xyToLngLat,
        geographicToWebMercator: function(a) {
            return f(a, e.lngLatToXY, {
                wkid: 102100
            })
        },
        webMercatorToGeographic: function(a, b) {
            return f(a, e.xyToLngLat, {
                wkid: 4326
            }, b)
        }
    }
});
},
'esri/geometry/Point':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../lang", "../SpatialReference", "./Geometry"], function(d, f, s, t, l, q, r) {
    function g(a, b) {
        89.99999 < b ? b = 89.99999 : -89.99999 > b && (b = -89.99999);
        var c = b * m;
        return [a * m * e, e / 2 * Math.log((1 + Math.sin(c)) / (1 - Math.sin(c)))]
    }

    function h(a, b, c) {
        a = a / e * k;
        if (c) return b = n / 2 - 2 * Math.atan(Math.exp(-1 * b / e)), [a, b * k];
        c = a - 360 * Math.floor((a + 180) / 360);
        b = n / 2 - 2 * Math.atan(Math.exp(-1 * b / e));
        return [c, b * k]
    }
    var e = 6378137,
        n = 3.141592653589793,
        k = 57.29577951308232,
        m = 0.017453292519943,
        p = {
            type: "point",
            x: 0,
            y: 0
        };
    d = d(r, {
        declaredClass: "esri.geometry.Point",
        constructor: function(a, b, c) {
            f.mixin(this, p);
            f.isArray(a) ? (this.x = a[0], this.y = a[1], this.spatialReference = b) : f.isObject(a) ? (f.mixin(this, a), l.isDefined(this.latitude) && (this.y = this.latitude), l.isDefined(this.longitude) && (this.x = this.longitude), this.spatialReference && (this.spatialReference = new q(this.spatialReference))) : (this.x = a, this.y = b, this.spatialReference = c);
            this.verifySR()
        },
        offset: function(a, b) {
            return new this.constructor(this.x +
                a, this.y + b, this.spatialReference)
        },
        setX: function(a) {
            this.x = a;
            this.clearCache();
            return this
        },
        setY: function(a) {
            this.y = a;
            this.clearCache();
            return this
        },
        setLongitude: function(a) {
            var b = this.spatialReference;
            b && (b._isWebMercator() ? this.setX(g(a, this.y)[0]) : 4326 === b.wkid && this.setX(a));
            return this
        },
        setLatitude: function(a) {
            var b = this.spatialReference;
            b && (b._isWebMercator() ? this.setY(g(this.x, a)[1]) : 4326 === b.wkid && this.setY(a));
            return this
        },
        getLongitude: function() {
            var a = this.spatialReference,
                b;
            a && (a._isWebMercator() ?
                b = h(this.x, this.y)[0] : 4326 === a.wkid && (b = this.x));
            return b
        },
        getLatitude: function() {
            var a = this.spatialReference,
                b;
            a && (a._isWebMercator() ? b = h(this.x, this.y)[1] : 4326 === a.wkid && (b = this.y));
            return b
        },
        update: function(a, b) {
            this.x = a;
            this.y = b;
            this.clearCache();
            return this
        },
        normalize: function() {
            var a = this.x,
                b = this.spatialReference;
            if (b) {
                var c = b._getInfo();
                if (c) {
                    var d = c.valid[0],
                        e = c.valid[1],
                        c = 2 * e;
                    a > e ? (d = Math.ceil(Math.abs(a - e) / c), a -= d * c) : a < d && (d = Math.ceil(Math.abs(a - d) / c), a += d * c)
                }
            }
            return new this.constructor(a,
                this.y, b)
        },
        toJson: function() {
            var a = {
                    x: this.x,
                    y: this.y
                },
                b = this.spatialReference;
            b && (a.spatialReference = b.toJson());
            return a
        }
    });
    d.lngLatToXY = g;
    d.xyToLngLat = h;
    d.defaultProps = p;
    return d
});
},
'esri/geometry/Geometry':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../SpatialReference"], function(b, d, e, f, c) {
    return b(null, {
        declaredClass: "esri.geometry.Geometry",
        spatialReference: null,
        type: null,
        cache: void 0,
        setSpatialReference: function(a) {
            this.spatialReference = a;
            return this
        },
        verifySR: function() {
            this.spatialReference || this.setSpatialReference(new c(4326))
        },
        getExtent: function() {
            return null
        },
        clearCache: function() {
            this.cache = void 0
        },
        getCacheValue: function(a) {
            return this.cache && this.cache[a]
        },
        setCacheValue: function(a,
            b) {
            this.cache || (this.cache = {});
            this.cache[a] = b
        }
    })
});
},
'esri/geometry/Extent':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/has", "../kernel", "../lang", "../SpatialReference", "./Geometry", "./Point", "./webMercatorUtils", "./mathUtils"], function(y, w, t, C, D, z, u, A, m, v, B) {
    var x = {
            type: "extent",
            xmin: 0,
            ymin: 0,
            xmax: 0,
            ymax: 0
        },
        g = y(A, {
            declaredClass: "esri.geometry.Extent",
            constructor: function(a, c, b, d, e) {
                t.mixin(this, x);
                t.isObject(a) ? (t.mixin(this, a), this.spatialReference && (this.spatialReference = new u(this.spatialReference))) : this.update(a, c, b, d, e);
                this.verifySR()
            },
            getWidth: function() {
                return Math.abs(this.xmax -
                    this.xmin)
            },
            getHeight: function() {
                return Math.abs(this.ymax - this.ymin)
            },
            getCenter: function() {
                return new m((this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2, this.spatialReference)
            },
            centerAt: function(a) {
                var c = this.getCenter(),
                    b = a.x - c.x;
                a = a.y - c.y;
                return new g(this.xmin + b, this.ymin + a, this.xmax + b, this.ymax + a, this.spatialReference)
            },
            update: function(a, c, b, d, e) {
                this.xmin = a;
                this.ymin = c;
                this.xmax = b;
                this.ymax = d;
                this.spatialReference = e;
                this.clearCache();
                return this
            },
            offset: function(a, c) {
                return new g(this.xmin + a,
                    this.ymin + c, this.xmax + a, this.ymax + c, this.spatialReference)
            },
            expand: function(a) {
                var c = (1 - a) / 2;
                a = this.getWidth() * c;
                c *= this.getHeight();
                return new g(this.xmin + a, this.ymin + c, this.xmax - a, this.ymax - c, this.spatialReference)
            },
            intersects: function(a) {
                if (!a) return !1;
                var c = a.type,
                    b = this.spatialReference,
                    d = a.spatialReference;
                b && (d && !b.equals(d) && b._canProject(d)) && (a = b.isWebMercator() ? v.geographicToWebMercator(a) : v.webMercatorToGeographic(a, !0));
                switch (c) {
                    case "point":
                        return this.contains(a);
                    case "multipoint":
                        return this._intersectsMultipoint(a);
                    case "extent":
                        return this._intersectsExtent(a);
                    case "polygon":
                        return this._intersectsPolygon(a);
                    case "polyline":
                        return this._intersectsPolyline(a)
                }
            },
            normalize: function() {
                var a = this._normalize(!1, !0);
                t.isArray(a) || (a = [a]);
                return a
            },
            shiftCentralMeridian: function() {
                return this._normalize(!0)
            },
            _intersectsMultipoint: function(a) {
                var c = a.points.length,
                    b;
                for (b = 0; b < c; b++)
                    if (this.contains(a.getPoint(b))) return !0;
                return !1
            },
            _intersectsExtent: function(a) {
                var c, b, d, e, f = !1;
                this.xmin <= a.xmin ? (c = a.xmin, this.xmax <
                    c ? f = !0 : d = Math.min(this.xmax, a.xmax) - c) : (c = this.xmin, a.xmax < c ? f = !0 : d = Math.min(this.xmax, a.xmax) - c);
                this.ymin <= a.ymin ? (b = a.ymin, this.ymax < b ? f = !0 : e = Math.min(this.ymax, a.ymax) - b) : (b = this.ymin, a.ymax < b ? f = !0 : e = Math.min(this.ymax, a.ymax) - b);
                return f ? null : new g(c, b, c + d, b + e, this.spatialReference)
            },
            _intersectsPolygon: function(a) {
                var c = [this.xmin, this.ymax],
                    b = [this.xmax, this.ymax],
                    d = [this.xmin, this.ymin],
                    e = [this.xmax, this.ymin],
                    f = [c, b, d, e],
                    c = [
                        [d, c],
                        [c, b],
                        [b, e],
                        [e, d]
                    ],
                    d = a.rings,
                    e = d.length,
                    h, k = new m(0, 0, this.spatialReference);
                h = f.length;
                for (b = 0; b < h; b++)
                    if (k.update(f[b][0], f[b][1]), a.contains(k)) return !0;
                k.setSpatialReference(a.spatialReference);
                for (var g, l, b = 0; b < e; b++)
                    if (f = d[b], h = f.length) {
                        g = f[0];
                        k.update(g[0], g[1]);
                        if (this.contains(k)) return !0;
                        for (a = 1; a < h; a++) {
                            l = f[a];
                            k.update(l[0], l[1]);
                            if (this.contains(k) || this._intersectsLine([g, l], c)) return !0;
                            g = l
                        }
                    }
                return !1
            },
            _intersectsPolyline: function(a) {
                var c = [
                        [
                            [this.xmin, this.ymin],
                            [this.xmin, this.ymax]
                        ],
                        [
                            [this.xmin, this.ymax],
                            [this.xmax, this.ymax]
                        ],
                        [
                            [this.xmax, this.ymax],
                            [this.xmax,
                                this.ymin
                            ]
                        ],
                        [
                            [this.xmax, this.ymin],
                            [this.xmin, this.ymin]
                        ]
                    ],
                    b, d = a.paths,
                    e = d.length,
                    f, h, g, s, l = new m(0, 0, a.spatialReference);
                for (a = 0; a < e; a++)
                    if (f = d[a], h = f.length) {
                        g = f[0];
                        l.update(g[0], g[1]);
                        if (this.contains(l)) return !0;
                        for (b = 1; b < h; b++) {
                            s = f[b];
                            l.update(s[0], s[1]);
                            if (this.contains(l) || this._intersectsLine([g, s], c)) return !0;
                            g = s
                        }
                    }
                return !1
            },
            _intersectsLine: function(a, c) {
                var b = B._getLineIntersection2,
                    d, e = c.length;
                for (d = 0; d < e; d++)
                    if (b(a, c[d])) return !0;
                return !1
            },
            contains: function(a) {
                if (!a) return !1;
                var c = a.type;
                if ("point" === c) {
                    var b = this.spatialReference,
                        d = a.spatialReference,
                        c = a.x;
                    a = a.y;
                    b && (d && !b.equals(d) && b._canProject(d)) && (a = b.isWebMercator() ? m.lngLatToXY(c, a) : m.xyToLngLat(c, a, !0), c = a[0], a = a[1]);
                    return c >= this.xmin && c <= this.xmax && a >= this.ymin && a <= this.ymax
                }
                return "extent" === c ? this._containsExtent(a) : !1
            },
            _containsExtent: function(a) {
                var c = a.xmin,
                    b = a.ymin,
                    d = a.xmax,
                    e = a.ymax,
                    f = a.spatialReference;
                a = new m(c, b, f);
                c = new m(c, e, f);
                e = new m(d, e, f);
                b = new m(d, b, f);
                return this.contains(a) && this.contains(c) && this.contains(e) &&
                    this.contains(b) ? !0 : !1
            },
            union: function(a) {
                return new g(Math.min(this.xmin, a.xmin), Math.min(this.ymin, a.ymin), Math.max(this.xmax, a.xmax), Math.max(this.ymax, a.ymax), this.spatialReference)
            },
            getExtent: function() {
                var a = this.spatialReference;
                return new g(this.xmin, this.ymin, this.xmax, this.ymax, a && new u(a.toJson()))
            },
            _shiftCM: function(a) {
                var c = this.getCacheValue("_shifted");
                if (!c) {
                    var c = new g(this.toJson()),
                        b = c.spatialReference;
                    if (a = a || b._getInfo()) {
                        var d = this._getCM(a);
                        if (d) {
                            var e = b._isWebMercator() ? v.webMercatorToGeographic(d) :
                                d;
                            c.xmin -= d.x;
                            c.xmax -= d.x;
                            b._isWebMercator() || (e.x = this._normalizeX(e.x, a).x);
                            c.setSpatialReference(new u(z.substitute({
                                Central_Meridian: e.x
                            }, 4326 === b.wkid ? a.altTemplate : a.wkTemplate)))
                        }
                    }
                    this.setCacheValue("_shifted", c)
                }
                return c
            },
            _getCM: function(a) {
                var c, b = a.valid[0];
                a = a.valid[1];
                var d = this.xmin,
                    e = this.xmax;
                if (!(d >= b && d <= a) || !(e >= b && e <= a)) c = this.getCenter();
                return c
            },
            _normalize: function(a, c, b) {
                var d = new g(this.toJson()),
                    e = d.spatialReference;
                if (e && (b = b || e._getInfo())) {
                    var f = w.map(this._getParts(b),
                        function(a) {
                            return a.extent
                        });
                    return 2 < f.length ? a ? this._shiftCM(b) : d.update(b.valid[0], d.ymin, b.valid[1], d.ymax, e) : 2 === f.length ? a ? this._shiftCM(b) : c ? f : {
                        rings: w.map(f, function(a) {
                            return [
                                [a.xmin, a.ymin],
                                [a.xmin, a.ymax],
                                [a.xmax, a.ymax],
                                [a.xmax, a.ymin],
                                [a.xmin, a.ymin]
                            ]
                        }),
                        spatialReference: e
                    } : f[0] || d
                }
                return d
            },
            _getParts: function(a) {
                var c = this.getCacheValue("_parts");
                if (!c) {
                    var c = [],
                        b = this.xmin,
                        d = this.xmax,
                        e = this.ymin,
                        f = this.ymax,
                        h = this.spatialReference,
                        k = this.getWidth(),
                        m = b,
                        l = d,
                        r = 0,
                        n = 0,
                        p, q;
                    a = a || h._getInfo();
                    p = a.valid[0];
                    q = a.valid[1];
                    n = this._normalizeX(b, a);
                    b = n.x;
                    r = n.frameId;
                    n = this._normalizeX(d, a);
                    d = n.x;
                    n = n.frameId;
                    a = b === d && 0 < k;
                    if (k > 2 * q) {
                        k = new g(m < l ? b : d, e, q, f, h);
                        b = new g(p, e, m < l ? d : b, f, h);
                        q = new g(0, e, q, f, h);
                        e = new g(p, e, 0, f, h);
                        h = [];
                        p = [];
                        k.contains(q) && h.push(r);
                        k.contains(e) && p.push(r);
                        b.contains(q) && h.push(n);
                        b.contains(e) && p.push(n);
                        for (f = r + 1; f < n; f++) h.push(f), p.push(f);
                        c.push({
                            extent: k,
                            frameIds: [r]
                        }, {
                            extent: b,
                            frameIds: [n]
                        }, {
                            extent: q,
                            frameIds: h
                        }, {
                            extent: e,
                            frameIds: p
                        })
                    } else b > d || a ? c.push({
                        extent: new g(b,
                            e, q, f, h),
                        frameIds: [r]
                    }, {
                        extent: new g(p, e, d, f, h),
                        frameIds: [n]
                    }) : c.push({
                        extent: new g(b, e, d, f, h),
                        frameIds: [r]
                    });
                    this.setCacheValue("_parts", c)
                }
                return c
            },
            _normalizeX: function(a, c) {
                var b = 0,
                    d = c.valid[0],
                    e = c.valid[1],
                    f = 2 * e;
                a > e ? (b = Math.ceil(Math.abs(a - e) / f), a -= b * f) : a < d && (b = Math.ceil(Math.abs(a - d) / f), a += b * f, b = -b);
                return {
                    x: a,
                    frameId: b
                }
            },
            toJson: function() {
                var a = {
                        xmin: this.xmin,
                        ymin: this.ymin,
                        xmax: this.xmax,
                        ymax: this.ymax
                    },
                    c = this.spatialReference;
                c && (a.spatialReference = c.toJson());
                return a
            }
        });
    g.defaultProps =
        x;
    return g
});
},
'esri/geometry/mathUtils':function(){
//>>built
define(["dojo/_base/lang", "dojo/has", "../kernel", "./Point"], function(t, u, v, p) {
    function r(a, c, b) {
        return a instanceof p ? new p(a.x + b * (c.x - a.x), a.y + b * (c.y - a.y)) : [a[0] + b * (c[0] - a[0]), a[1] + b * (c[1] - a[1])]
    }

    function g(a, c) {
        return 1E-8 > Math.abs(a - c)
    }

    function s(a, c, b, d) {
        var e, f = g(a[0], c[0]) ? 1E10 : (a[1] - c[1]) / (a[0] - c[0]),
            k = g(b[0], d[0]) ? 1E10 : (b[1] - d[1]) / (b[0] - d[0]),
            l = a[1] - f * a[0],
            h = b[1] - k * b[0];
        if (g(f, k)) {
            if (g(l, h)) {
                if (g(a[0], c[0]))
                    if (Math.min(a[1], c[1]) < Math.max(b[1], d[1]) || Math.max(a[1], c[1]) > Math.min(b[1], d[1])) a =
                        (a[1] + c[1] + b[1] + d[1] - Math.min(a[1], c[1], b[1], d[1]) - Math.max(a[1], c[1], b[1], d[1])) / 2, e = (a - l) / f;
                    else return null;
                else if (Math.min(a[0], c[0]) < Math.max(b[0], d[0]) || Math.max(a[0], c[0]) > Math.min(b[0], d[0])) e = (a[0] + c[0] + b[0] + d[0] - Math.min(a[0], c[0], b[0], d[0]) - Math.max(a[0], c[0], b[0], d[0])) / 2, a = f * e + l;
                else return null;
                return [e, a]
            }
            return null
        }
        g(f, 1E10) ? (e = a[0], a = k * e + h) : g(k, 1E10) ? (e = b[0], a = f * e + l) : (e = -(l - h) / (f - k), a = a[1] === c[1] ? a[1] : b[1] === d[1] ? b[1] : f * e + l);
        return [e, a]
    }
    return {
        getLength: function(a, c) {
            var b = c.x -
                a.x,
                d = c.y - a.y;
            return Math.sqrt(b * b + d * d)
        },
        _getLength: function(a, c) {
            var b = c[0] - a[0],
                d = c[1] - a[1];
            return Math.sqrt(b * b + d * d)
        },
        getPointOnLine: r,
        getMidpoint: function(a, c) {
            return r(a, c, 0.5)
        },
        _equals: g,
        _getLineIntersection: s,
        getLineIntersection: function(a, c, b, d, e) {
            (a = s([a.x, a.y], [c.x, c.y], [b.x, b.y], [d.x, d.y])) && (a = new p(a[0], a[1], e));
            return a
        },
        _getLineIntersection2: function(a, c) {
            var b = a[0],
                d = a[1],
                e = c[0],
                f = c[1],
                k = b[0],
                b = b[1],
                l = d[0],
                d = d[1],
                h = e[0],
                q = e[1],
                e = f[0] - h,
                h = k - h,
                g = l - k,
                f = f[1] - q,
                q = b - q,
                m = d - b,
                n = f * g - e * m;
            if (0 ===
                n) return !1;
            e = (e * q - f * h) / n;
            h = (g * q - m * h) / n;
            return 0 <= e && 1 >= e && 0 <= h && 1 >= h ? [k + e * (l - k), b + e * (d - b)] : !1
        },
        _pointLineDistance: function(a, c) {
            var b = c[0],
                d = c[1],
                e = b[0],
                f = b[1],
                b = a[0],
                k = a[1],
                l = d[0] - e,
                h = d[1] - f,
                g = b - e,
                p = k - f,
                d = Math.sqrt,
                m = Math.pow,
                n = d(m(l, 2) + m(h, 2)),
                g = (g * l + p * h) / (n * n),
                f = f + g * h;
            return d(m(b - (e + g * l), 2) + m(k - f, 2))
        }
    }
});
},
'esri/map':function(){
//>>built
define(["require", "dojo/_base/kernel", "dojo/_base/declare", "dojo/_base/connect", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/event", "dojo/on", "dojo/aspect", "dojo/dom", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-geometry", "dojo/dom-style", "dijit/registry", "./kernel", "./config", "./sniff", "./lang", "./_coremap", "./MapNavigationManager"], function(v, K, L, A, p, r, B, C, M, D, g, E, N, O, P, w, F, h, s, Q, R) {
    var x = {
            up: "panUp",
            right: "panRight",
            down: "panDown",
            left: "panLeft"
        },
        G = {
            upperRight: "panUpperRight",
            lowerRight: "panLowerRight",
            lowerLeft: "panLowerLeft",
            upperLeft: "panUpperLeft"
        },
        e = A.connect,
        l = A.disconnect,
        m = E.create,
        q = O.set,
        y = p.hitch,
        t = N.getMarginBox,
        H = K.deprecated,
        z = p.mixin,
        I = 0;
    return L(Q, {
        declaredClass: "esri.Map",
        constructor: function(a, c) {
            z(this, {
                _slider: null,
                _navDiv: null,
                _mapParams: z({
                    attributionWidth: 0.45,
                    slider: !0,
                    nav: !1,
                    logo: !0,
                    sliderStyle: "small",
                    sliderPosition: "top-left",
                    sliderOrientation: "vertical",
                    autoResize: !0
                }, c || {})
            });
            z(this, {
                isDoubleClickZoom: !1,
                isShiftDoubleClickZoom: !1,
                isClickRecenter: !1,
                isScrollWheelZoom: !1,
                isPan: !1,
                isRubberBandZoom: !1,
                isKeyboardNavigation: !1,
                isPanArrows: !1,
                isZoomSlider: !1
            });
            p.isFunction(w._css) && (w._css = w._css(this._mapParams.force3DTransforms), this.force3DTransforms = this._mapParams.force3DTransforms);
            var b = h("esri-transforms") && h("esri-transitions");
            this.navigationMode = this._mapParams.navigationMode || b && "css-transforms" || "classic";
            "css-transforms" === this.navigationMode && !b && (this.navigationMode = "classic");
            this.fadeOnZoom = s.isDefined(this._mapParams.fadeOnZoom) ? this._mapParams.fadeOnZoom : "css-transforms" === this.navigationMode;
            "css-transforms" !== this.navigationMode && (this.fadeOnZoom = !1);
            this.setMapCursor("default");
            this.smartNavigation = c && c.smartNavigation;
            if (!s.isDefined(this.smartNavigation) && h("mac") && !h("esri-touch") && !h("esri-pointer") && !(3.5 >= h("ff"))) {
                var d = navigator.userAgent.match(/Mac\s+OS\s+X\s+([\d]+)(\.|\_)([\d]+)\D/i);
                d && (s.isDefined(d[1]) && s.isDefined(d[3])) && (b = parseInt(d[1], 10), d = parseInt(d[3], 10), this.smartNavigation = 10 < b || 10 === b && 6 <= d)
            }
            this.showAttribution = s.isDefined(this._mapParams.showAttribution) ?
                this._mapParams.showAttribution : !0;
            this._onLoadHandler_connect = e(this, "onLoad", this, "_onLoadInitNavsHandler");
            var k = m("div", {
                "class": "esriControlsBR" + (this._mapParams.nav ? " withPanArrows" : "")
            }, this.root);
            if (this.showAttribution)
                if (b = p.getObject("esri.dijit.Attribution", !1)) this._initAttribution(b, k);
                else {
                    var J = I++,
                        f = this;
                    this._rids && this._rids.push(J);
                    v(["./dijit/Attribution"], function(a) {
                        var b = f._rids ? r.indexOf(f._rids, J) : -1; - 1 !== b && (f._rids.splice(b, 1), f._initAttribution(a, k))
                    })
                }
            this._mapParams.logo &&
                (b = {}, 6 === h("ie") && (b.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled\x3d'true', sizingMethod\x3d'crop', src\x3d'" + v.toUrl("./images/map/logo-med.png") + "')"), this._ogol = m("div", {
                    style: b
                }, k), this._setLogoSize(), this._onMapResizeLogo_connect = e(this, "onResize", this, "_setLogoSize"), h("esri-touch") || (this._ogol_connect = e(this._ogol, "onclick", this, "_openLogoLink")));
            this.navigationManager = new R(this);
            c && c.basemap && (this._onLoadFix = !0, this.setBasemap(c.basemap), this._onLoadFix = !1);
            if (this.autoResize =
                this._mapParams.autoResize) b = this._getEnclosingResizableWidget(this.container) || window, d = y(this, this.resize), this._rszSignal = C.pausable(b, "resize", d), this._oriSignal = C.pausable(window, "orientationchange", d), M.after(b, "resize", d, !0)
        },
        _getEnclosingResizableWidget: function(a) {
            var c = P.getEnclosingWidget(a);
            return !c ? c : c.resize ? c : this._getEnclosingResizableWidget(a.parentNode)
        },
        _setLogoSize: function() {
            this._ogol && (25E4 > this.root.clientWidth * this.root.clientHeight ? (g.remove(this._ogol, "logo-med"), g.add(this._ogol,
                "logo-sm")) : (g.remove(this._ogol, "logo-sm"), g.add(this._ogol, "logo-med")))
        },
        _initAttribution: function(a, c) {
            var b = m("span", {
                "class": "esriAttribution"
            }, c, "first");
            q(b, "maxWidth", Math.floor(this.width * this._mapParams.attributionWidth) + "px");
            this._connects.push(e(b, "onclick", function() {
                g.contains(this, "esriAttributionOpen") ? g.remove(this, "esriAttributionOpen") : this.scrollWidth > this.clientWidth && g.add(this, "esriAttributionOpen")
            }));
            this.attribution = new a({
                map: this
            }, b)
        },
        _cleanUp: function() {
            this.disableMapNavigation();
            this.navigationManager.destroy();
            var a = this._slider;
            a && (a.destroy && !a._destroyed) && a.destroy();
            var a = this._navDiv,
                c = this.attribution;
            a && E.destroy(a);
            c && c.destroy();
            this._connects.push(this._slider_connect, this._ogol_connect, this._rszSignal, this._oriSignal);
            r.forEach(this._connects, l);
            this.attribution = this.navigationManager = this._rids = this._connects = this._slider_connect = this._ogol_connect = this._rszSignal = this._oriSignal = null;
            this.inherited("_cleanUp", arguments)
        },
        _isPanningOrZooming: function() {
            return this.__panning ||
                this.__zooming
        },
        _canZoom: function(a) {
            var c = this.getLevel();
            return !this.__tileInfo || !(c === this.getMinZoom() && 0 > a || c === this.getMaxZoom() && 0 < a)
        },
        _onLoadInitNavsHandler: function() {
            this.enableMapNavigation();
            this._createNav();
            if ("small" === this._mapParams.sliderStyle || !this._createSlider) this._createSimpleSlider();
            else if (this._mapParams.slider) {
                var a = -1 !== this._getSliderClass(!0).indexOf("Horizontal"),
                    a = [a ? "dijit.form.HorizontalSlider" : "dijit.form.VerticalSlider", a ? "dijit.form.HorizontalRule" : "dijit.form.VerticalRule",
                        a ? "dijit.form.HorizontalRuleLabels" : "dijit.form.VerticalRuleLabels"
                    ];
                if (r.some(a, function(a) {
                        return !p.getObject(a, !1)
                    })) {
                    var a = r.map(a, function(a) {
                            return a.replace(/\./g, "/")
                        }),
                        c = I++,
                        b = this;
                    this._rids && this._rids.push(c);
                    v(a, function() {
                        var a = b._rids ? r.indexOf(b._rids, c) : -1; - 1 !== a && (b._rids.splice(a, 1), b._createSlider.apply(b, arguments))
                    })
                } else a = r.map(a, function(a) {
                    return p.getObject(a, !1)
                }), this._createSlider.apply(this, a)
            }
            l(this._onLoadHandler_connect)
        },
        _createNav: function() {
            if (this._mapParams.nav) {
                var a,
                    c, b, d = g.add,
                    k = this.id;
                this._navDiv = m("div", {
                    id: k + "_navdiv"
                }, this.root);
                d(this._navDiv, "navDiv");
                var h = this.width / 2,
                    f = this.height / 2,
                    n;
                for (b in x) c = x[b], a = m("div", {
                    id: k + "_pan_" + b
                }, this._navDiv), d(a, "fixedPan " + c), "up" === b || "down" === b ? (n = parseInt(t(a).w, 10) / 2, q(a, {
                    left: h - n + "px",
                    zIndex: 30
                })) : (n = parseInt(t(a).h, 10) / 2, q(a, {
                    top: f - n + "px",
                    zIndex: 30
                })), this._connects.push(e(a, "onclick", y(this, this[c])));
                this._onMapResizeNavHandler_connect = e(this, "onResize", this, "_onMapResizeNavHandler");
                for (b in G) c = G[b], a =
                    m("div", {
                        id: k + "_pan_" + b,
                        style: {
                            zIndex: 30
                        }
                    }, this._navDiv), d(a, "fixedPan " + c), this._connects.push(e(a, "onclick", y(this, this[c])));
                this.isPanArrows = !0
            }
        },
        _onMapResizeNavHandler: function(a, c, b) {
            a = this.id;
            c /= 2;
            b /= 2;
            var d = D.byId,
                k, e, f;
            for (k in x) e = d(a + "_pan_" + k), "up" === k || "down" === k ? (f = parseInt(t(e).w, 10) / 2, q(e, "left", c - f + "px")) : (f = parseInt(t(e).h, 10) / 2, q(e, "top", b - f + "px"))
        },
        _createSimpleSlider: function() {
            if (this._mapParams.slider) {
                var a = this._slider = m("div", {
                        id: this.id + "_zoom_slider",
                        "class": this._getSliderClass(),
                        style: {
                            zIndex: 30
                        }
                    }),
                    c = h("esri-touch") && !h("ff") ? "touchstart" : h("esri-pointer") ? navigator.msPointerEnabled ? "MSPointerDown" : "pointerdown" : "onclick",
                    b = m("div", {
                        "class": "esriSimpleSliderIncrementButton"
                    }, a),
                    d = m("div", {
                        "class": "esriSimpleSliderDecrementButton"
                    }, a);
                this._incButton = b;
                this._decButton = d;
                this._simpleSliderZoomHandler(null, null, null, this.getLevel());
                b.innerHTML = "\x3cspan\x3e+\x3c/span\x3e";
                d.innerHTML = "\x3cspan\x3e\x26ndash;\x3c/span\x3e";
                8 > h("ie") && g.add(d, "dj_ie67Fix");
                this._connects.push(e(b,
                    c, this, this._simpleSliderChangeHandler));
                this._connects.push(e(d, c, this, this._simpleSliderChangeHandler));
                "touchstart" == c && (this._connects.push(e(b, "onclick", this, this._simpleSliderChangeHandler)), this._connects.push(e(d, "onclick", this, this._simpleSliderChangeHandler)));
                (-1 < this.getMaxZoom() || -1 < this.getMinZoom()) && this._connects.push(e(this, "onZoomEnd", this, this._simpleSliderZoomHandler));
                10 > h("ie") && D.setSelectable(a, !1);
                this.root.appendChild(a);
                this.isZoomSlider = !0
            }
        },
        _simpleSliderChangeHandler: function(a) {
            B.stop(a);
            a = -1 !== a.currentTarget.className.indexOf("IncrementButton") ? !0 : !1;
            this._extentUtil({
                numLevels: a ? 1 : -1
            })
        },
        _simpleSliderZoomHandler: function(a, c, b, d) {
            var e;
            a = this._incButton;
            c = this._decButton; - 1 < d && d === this.getMaxZoom() ? e = a : -1 < d && d === this.getMinZoom() && (e = c);
            e ? (g.add(e, "esriSimpleSliderDisabledButton"), g.remove(e === a ? c : a, "esriSimpleSliderDisabledButton")) : (g.remove(a, "esriSimpleSliderDisabledButton"), g.remove(c, "esriSimpleSliderDisabledButton"))
        },
        _getSliderClass: function(a) {
            a = a ? "Large" : "Simple";
            var c =
                this._mapParams.sliderOrientation,
                b = this._mapParams.sliderPosition || "",
                c = c && "horizontal" === c.toLowerCase() ? "esri" + a + "SliderHorizontal" : "esri" + a + "SliderVertical";
            if (b) switch (b.toLowerCase()) {
                case "top-left":
                    b = "esri" + a + "SliderTL";
                    break;
                case "top-right":
                    b = "esri" + a + "SliderTR";
                    break;
                case "bottom-left":
                    b = "esri" + a + "SliderBL";
                    break;
                case "bottom-right":
                    b = "esri" + a + "SliderBR"
            }
            return "esri" + a + "Slider " + c + " " + b
        },
        _createSlider: function(a, c, b) {
            if (this._mapParams.slider) {
                var d = m("div", {
                            id: this.id + "_zoom_slider"
                        },
                        this.root),
                    k = F.defaults.map,
                    g = this._getSliderClass(!0),
                    f = -1 !== g.indexOf("Horizontal"),
                    n = this.getNumLevels();
                if (0 < n) {
                    var l, p, u = this._mapParams.sliderLabels,
                        s = !!u;
                    if (k = !1 !== u) {
                        var t = f ? "bottomDecoration" : "rightDecoration";
                        if (!u) {
                            u = [];
                            for (f = 0; f < n; f++) u[f] = ""
                        }
                        r.forEach([{
                            "class": "esriLargeSliderTicks",
                            container: t,
                            count: n,
                            dijitClass: c
                        }, {
                            "class": s && "esriLargeSliderLabels",
                            container: t,
                            count: n,
                            labels: u,
                            dijitClass: b
                        }], function(a) {
                            var b = m("div"),
                                e = a.dijitClass;
                            delete a.dijitClass;
                            d.appendChild(b);
                            e === c ? l = new e(a,
                                b) : p = new e(a, b)
                        })
                    }
                    a = this._slider = new a({
                        id: d.id,
                        "class": g,
                        minimum: this.getMinZoom(),
                        maximum: this.getMaxZoom(),
                        discreteValues: n,
                        value: this.getLevel(),
                        clickSelect: !0,
                        intermediateChanges: !0,
                        style: "z-index:30;"
                    }, d);
                    a.startup();
                    k && (l.startup(), p.startup());
                    this._slider_connect = e(a, "onChange", this, "_onSliderChangeHandler");
                    this._connects.push(e(this, "onExtentChange", this, "_onExtentChangeSliderHandler"));
                    this._connects.push(e(a._movable, "onFirstMove", this, "_onSliderMoveStartHandler"))
                } else {
                    a = this._slider =
                        new a({
                            id: d.id,
                            "class": g,
                            minimum: 0,
                            maximum: 2,
                            discreteValues: 3,
                            value: 1,
                            clickSelect: !0,
                            intermediateChanges: k.sliderChangeImmediate,
                            style: "height:50px; z-index:30;"
                        }, d);
                    b = a.domNode.firstChild.childNodes;
                    for (f = 1; 3 >= f; f++) q(b[f], "visibility", "hidden");
                    a.startup();
                    this._slider_connect = e(a, "onChange", this, "_onDynSliderChangeHandler");
                    this._connects.push(e(this, "onExtentChange", this, "_onExtentChangeDynSliderHandler"))
                }
                b = a.decrementButton;
                a.incrementButton.style.outline = "none";
                b.style.outline = "none";
                a.sliderHandle.style.outline =
                    "none";
                a._onKeyPress = function() {};
                if (a = a._movable) {
                    var v = a.onMouseDown;
                    a.onMouseDown = function(a) {
                        9 > h("ie") && 1 !== a.button || v.apply(this, arguments)
                    }
                }
                this.isZoomSlider = !0
            }
        },
        _onSliderMoveStartHandler: function() {
            l(this._slider_connect);
            l(this._slidermovestop_connect);
            this._slider_connect = e(this._slider, "onChange", this, "_onSliderChangeDragHandler");
            this._slidermovestop_connect = e(this._slider._movable, "onMoveStop", this, "_onSliderMoveEndHandler")
        },
        _onSliderChangeDragHandler: function(a) {
            this._extentUtil({
                targetLevel: a
            })
        },
        _onSliderMoveEndHandler: function() {
            l(this._slider_connect);
            l(this._slidermovestop_connect)
        },
        _onSliderChangeHandler: function(a) {
            this.setLevel(a)
        },
        _updateSliderValue: function(a, c) {
            l(this._slider_connect);
            var b = this._slider,
                d = b._onChangeActive;
            b._onChangeActive = !1;
            b.set("value", a);
            b._onChangeActive = d;
            this._slider_connect = e(b, "onChange", this, c)
        },
        _onExtentChangeSliderHandler: function(a, c, b, d) {
            l(this._slidermovestop_connect);
            this._updateSliderValue(d.level, "_onSliderChangeHandler")
        },
        _onDynSliderChangeHandler: function(a) {
            this._extentUtil({
                numLevels: 0 <
                    a ? 1 : -1
            })
        },
        _onExtentChangeDynSliderHandler: function() {
            this._updateSliderValue(1, "_onDynSliderChangeHandler")
        },
        _openLogoLink: function(a) {
            window.open(F.defaults.map.logoLink, "_blank");
            B.stop(a)
        },
        enableMapNavigation: function() {
            this.navigationManager.enableNavigation()
        },
        disableMapNavigation: function() {
            this.navigationManager.disableNavigation()
        },
        enableDoubleClickZoom: function() {
            this.isDoubleClickZoom || (this.navigationManager.enableDoubleClickZoom(), this.isDoubleClickZoom = !0)
        },
        disableDoubleClickZoom: function() {
            this.isDoubleClickZoom &&
                (this.navigationManager.disableDoubleClickZoom(), this.isDoubleClickZoom = !1)
        },
        enableShiftDoubleClickZoom: function() {
            this.isShiftDoubleClickZoom || (H(this.declaredClass + ": Map.(enable/disable)ShiftDoubleClickZoom deprecated. Shift-Double-Click zoom behavior will not be supported.", null, "v2.0"), this.navigationManager.enableShiftDoubleClickZoom(), this.isShiftDoubleClickZoom = !0)
        },
        disableShiftDoubleClickZoom: function() {
            this.isShiftDoubleClickZoom && (H(this.declaredClass + ": Map.(enable/disable)ShiftDoubleClickZoom deprecated. Shift-Double-Click zoom behavior will not be supported.",
                null, "v2.0"), this.navigationManager.disableShiftDoubleClickZoom(), this.isShiftDoubleClickZoom = !1)
        },
        enableClickRecenter: function() {
            this.isClickRecenter || (this.navigationManager.enableClickRecenter(), this.isClickRecenter = !0)
        },
        disableClickRecenter: function() {
            this.isClickRecenter && (this.navigationManager.disableClickRecenter(), this.isClickRecenter = !1)
        },
        enablePan: function() {
            this.isPan || (this.navigationManager.enablePan(), this.isPan = !0)
        },
        disablePan: function() {
            this.isPan && (this.navigationManager.disablePan(),
                this.isPan = !1)
        },
        enableRubberBandZoom: function() {
            this.isRubberBandZoom || (this.navigationManager.enableRubberBandZoom(), this.isRubberBandZoom = !0)
        },
        disableRubberBandZoom: function() {
            this.isRubberBandZoom && (this.navigationManager.disableRubberBandZoom(), this.isRubberBandZoom = !1)
        },
        enableKeyboardNavigation: function() {
            this.isKeyboardNavigation || (this.navigationManager.enableKeyboardNavigation(), this.isKeyboardNavigation = !0)
        },
        disableKeyboardNavigation: function() {
            this.isKeyboardNavigation && (this.navigationManager.disableKeyboardNavigation(),
                this.isKeyboardNavigation = !1)
        },
        enableScrollWheelZoom: function() {
            this.isScrollWheelZoom || (this.navigationManager.enableScrollWheelZoom(), this.isScrollWheelZoom = !0)
        },
        disableScrollWheelZoom: function() {
            this.isScrollWheelZoom && (this.navigationManager.disableScrollWheelZoom(), this.isScrollWheelZoom = !1)
        },
        showPanArrows: function() {
            this._navDiv && (this._navDiv.style.display = "block", this.isPanArrows = !0)
        },
        hidePanArrows: function() {
            this._navDiv && (this._navDiv.style.display = "none", this.isPanArrows = !1)
        },
        showZoomSlider: function() {
            this._slider &&
                (q(this._slider.domNode || this._slider, "visibility", "visible"), this.isZoomSlider = !0)
        },
        hideZoomSlider: function() {
            this._slider && (q(this._slider.domNode || this._slider, "visibility", "hidden"), this.isZoomSlider = !1)
        }
    })
});
},
'dijit/registry':function(){
define([
	"dojo/_base/array", // array.forEach array.map
	"dojo/_base/window", // win.body
	"./main"	// dijit._scopeName
], function(array, win, dijit){

	// module:
	//		dijit/registry

	var _widgetTypeCtr = {}, hash = {};

	var registry =  {
		// summary:
		//		Registry of existing widget on page, plus some utility methods.

		// length: Number
		//		Number of registered widgets
		length: 0,

		add: function(widget){
			// summary:
			//		Add a widget to the registry. If a duplicate ID is detected, a error is thrown.
			// widget: dijit/_WidgetBase
			//		Any dijit/_WidgetBase subclass.
			if(hash[widget.id]){
				throw new Error("Tried to register widget with id==" + widget.id + " but that id is already registered");
			}
			hash[widget.id] = widget;
			this.length++;
		},

		remove: function(/*String*/ id){
			// summary:
			//		Remove a widget from the registry. Does not destroy the widget; simply
			//		removes the reference.
			if(hash[id]){
				delete hash[id];
				this.length--;
			}
		},

		byId: function(/*String|Widget*/ id){
			// summary:
			//		Find a widget by it's id.
			//		If passed a widget then just returns the widget.
			return typeof id == "string" ? hash[id] : id;	// dijit/_WidgetBase
		},

		byNode: function(/*DOMNode*/ node){
			// summary:
			//		Returns the widget corresponding to the given DOMNode
			return hash[node.getAttribute("widgetId")]; // dijit/_WidgetBase
		},

		toArray: function(){
			// summary:
			//		Convert registry into a true Array
			//
			// example:
			//		Work with the widget .domNodes in a real Array
			//		|	array.map(registry.toArray(), function(w){ return w.domNode; });

			var ar = [];
			for(var id in hash){
				ar.push(hash[id]);
			}
			return ar;	// dijit/_WidgetBase[]
		},

		getUniqueId: function(/*String*/widgetType){
			// summary:
			//		Generates a unique id for a given widgetType

			var id;
			do{
				id = widgetType + "_" +
					(widgetType in _widgetTypeCtr ?
						++_widgetTypeCtr[widgetType] : _widgetTypeCtr[widgetType] = 0);
			}while(hash[id]);
			return dijit._scopeName == "dijit" ? id : dijit._scopeName + "_" + id; // String
		},

		findWidgets: function(root, skipNode){
			// summary:
			//		Search subtree under root returning widgets found.
			//		Doesn't search for nested widgets (ie, widgets inside other widgets).
			// root: DOMNode
			//		Node to search under.
			// skipNode: DOMNode
			//		If specified, don't search beneath this node (usually containerNode).

			var outAry = [];

			function getChildrenHelper(root){
				for(var node = root.firstChild; node; node = node.nextSibling){
					if(node.nodeType == 1){
						var widgetId = node.getAttribute("widgetId");
						if(widgetId){
							var widget = hash[widgetId];
							if(widget){	// may be null on page w/multiple dojo's loaded
								outAry.push(widget);
							}
						}else if(node !== skipNode){
							getChildrenHelper(node);
						}
					}
				}
			}

			getChildrenHelper(root);
			return outAry;
		},

		_destroyAll: function(){
			// summary:
			//		Code to destroy all widgets and do other cleanup on page unload

			// Clean up focus manager lingering references to widgets and nodes
			dijit._curFocus = null;
			dijit._prevFocus = null;
			dijit._activeStack = [];

			// Destroy all the widgets, top down
			array.forEach(registry.findWidgets(win.body()), function(widget){
				// Avoid double destroy of widgets like Menu that are attached to <body>
				// even though they are logically children of other widgets.
				if(!widget._destroyed){
					if(widget.destroyRecursive){
						widget.destroyRecursive();
					}else if(widget.destroy){
						widget.destroy();
					}
				}
			});
		},

		getEnclosingWidget: function(/*DOMNode*/ node){
			// summary:
			//		Returns the widget whose DOM tree contains the specified DOMNode, or null if
			//		the node is not contained within the DOM tree of any widget
			while(node){
				var id = node.nodeType == 1 && node.getAttribute("widgetId");
				if(id){
					return hash[id];
				}
				node = node.parentNode;
			}
			return null;
		},

		// In case someone needs to access hash.
		// Actually, this is accessed from WidgetSet back-compatibility code
		_hash: hash
	};

	dijit.registry = registry;

	return registry;
});

},
'dijit/main':function(){
define([
	"dojo/_base/kernel"
], function(dojo){
	// module:
	//		dijit/main

/*=====
return {
	// summary:
	//		The dijit package main module.
	//		Deprecated.   Users should access individual modules (ex: dijit/registry) directly.
};
=====*/

	return dojo.dijit;
});

},
'esri/config':function(){
//>>built
define(["dojo/_base/config", "dojo/topic", "dojo/has", "./kernel"], function(b, c, a, d) {
    a = {
        defaults: {
            screenDPI: 96,
            geometryService: null,
            kmlService: null,
            map: {
                width: 400,
                height: 400,
                layerNamePrefix: "layer",
                graphicsLayerNamePrefix: "graphicsLayer",
                slider: {
                    left: "30px",
                    top: "30px",
                    width: null,
                    height: "200px"
                },
                sliderLabel: {
                    tick: 5,
                    labels: null,
                    style: "width:2em; font-family:Verdana; font-size:75%;"
                },
                sliderChangeImmediate: !0,
                zoomSymbol: {
                    color: [0, 0, 0, 64],
                    outline: {
                        color: [255, 0, 0, 255],
                        width: 1.25,
                        style: "esriSLSSolid"
                    },
                    style: "esriSFSSolid"
                },
                zoomDuration: 500,
                zoomRate: 25,
                panDuration: 350,
                panRate: 25,
                logoLink: "http://www.esri.com"
            },
            autoSpatialIndexing: window.Worker && !1,
            io: {
                errorHandler: function(a, b) {
                    c.publish("esri.Error", [a])
                },
                proxyUrl: null,
                alwaysUseProxy: !1,
                useCors: !0,
                corsEnabledServers: "server.arcgisonline.com services.arcgisonline.com www.arcgis.com tiles.arcgis.com tiles1.arcgis.com tiles2.arcgis.com tiles3.arcgis.com tiles4.arcgis.com elevation3d.arcgis.com services.arcgis.com services1.arcgis.com services2.arcgis.com services3.arcgis.com services4.arcgis.com services5.arcgis.com static.arcgis.com utility.arcgisonline.com geocode.arcgis.com geoenrich.arcgis.com qaext.arcgis.com tilesqa.arcgis.com servicesqa.arcgis.com servicesqa1.arcgis.com servicesqa2.arcgis.com servicesqa3.arcgis.com geocodeqa.arcgis.com geoenrichqa.arcgis.com dev.arcgis.com devext.arcgis.com staticdev.arcgis.com tilesdevext.arcgis.com elevation3ddev.arcgis.com servicesdev.arcgis.com servicesdev1.arcgis.com servicesdev2.arcgis.com servicesdev3.arcgis.com geocodedev.arcgis.com geoenrichdev.arcgis.com".split(" "),
                corsDetection: window.cordova ? !1 : !0,
                corsStatus: {},
                webTierAuthServers: [],
                proxyRules: [],
                postLength: 2E3,
                timeout: 6E4,
                useWorkers: "on-request",
                maxRequestWorkers: 5
            }
        }
    };
    b.noGlobals || (window.esriConfig = a);
    return a
});
},
'esri/sniff':function(){
//>>built
define(["dojo/_base/sniff", "./kernel"], function(a, m) {
    var c = a("ff"),
        e = a("ie"),
        k = void 0 === e && 7 <= a("trident"),
        g = a("webkit"),
        f = a("opera"),
        l = a("chrome"),
        n = a("safari"),
        h = navigator.userAgent,
        d;
    (d = h.match(/(iPhone|iPad|CPU)\s+OS\s+(\d+\_\d+)/i)) && a.add("esri-iphone", parseFloat(d[2].replace("_", ".")));
    (d = h.match(/Android\s+(\d+\.\d+)/i)) && a.add("esri-android", parseFloat(d[1]));
    (d = h.match(/Fennec\/(\d+\.\d+)/i)) && a.add("esri-fennec", parseFloat(d[1]));
    0 <= h.indexOf("BlackBerry") && 0 <= h.indexOf("WebKit") && a.add("esri-blackberry",
        1);
    a.add("esri-touch", a("esri-iphone") || a("esri-android") || a("esri-blackberry") || 6 <= a("esri-fennec") || (c || g) && document.createTouch ? !0 : !1);
    a.add("esri-pointer", navigator.pointerEnabled || navigator.msPointerEnabled);
    m._getDOMAccessor = function(a) {
        var b = "";
        c ? b = "Moz" : g ? b = "Webkit" : e ? b = "ms" : f && (b = "O");
        return b + a.charAt(0).toUpperCase() + a.substr(1)
    };
    a.add("esri-phonegap", !!window.cordova);
    a.add("esri-cors", a("esri-phonegap") || "XMLHttpRequest" in window && "withCredentials" in new XMLHttpRequest);
    a.add("esri-file-upload",
        window.FormData && window.FileList ? !0 : !1);
    a.add("esri-workers", window.Worker ? !0 : !1);
    a.add("esri-transforms", k || 9 <= e || 3.5 <= c || 4 <= l || 3.1 <= n || 10.5 <= f || 3.2 <= a("esri-iphone") || 2.1 <= a("esri-android"));
    a.add("esri-transitions", k || 10 <= e || 4 <= c || 4 <= l || 3.1 <= n || 10.5 <= f || 3.2 <= a("esri-iphone") || 2.1 <= a("esri-android"));
    a.add("esri-transforms3d", k || 10 <= c || 12 <= l || 4 <= n || 3.2 <= a("esri-iphone") || 3 <= a("esri-android"));
    a.add("esri-url-encodes-apostrophe", function() {
        var a = window.document.createElement("a");
        a.href = "?'";
        return -1 <
            a.href.indexOf("?%27")
    });
    3 > a("esri-android") && (a.add("esri-transforms", !1, !1, !0), a.add("esri-transitions", !1, !1, !0), a.add("esri-transforms3d", !1, !1, !0));
    m._css = function(d) {
        var b = a("esri-transforms3d");
        if (void 0 !== d && null !== d) b = d;
        else if (b && (l || n && !a("esri-iphone"))) b = !1;
        var h = b ? "translate3d(" : "translate(",
            k = b ? l ? ",-1px)" : ",0px)" : ")",
            m = b ? "scale3d(" : "scale(",
            p = b ? ",1)" : ")",
            q = b ? "rotate3d(0,0,1," : "rotate(",
            r = b ? "matrix3d(" : "matrix(",
            s = b ? ",0,0," : ",",
            t = b ? ",0,0,0,0,1,0," : ",",
            u = b ? ",0,1)" : ")";
        return {
            names: {
                transition: g &&
                    "-webkit-transition" || c && "MozTransition" || f && "OTransition" || e && "msTransition" || "transition",
                transform: g && "-webkit-transform" || c && "MozTransform" || f && "OTransform" || e && "msTransform" || "transform",
                transformName: g && "-webkit-transform" || c && "-moz-transform" || f && "-o-transform" || e && "-ms-transform" || "transform",
                origin: g && "-webkit-transform-origin" || c && "MozTransformOrigin" || f && "OTransformOrigin" || e && "msTransformOrigin" || "transformOrigin",
                endEvent: g && "webkitTransitionEnd" || c && "transitionend" || f && "oTransitionEnd" ||
                    e && "MSTransitionEnd" || "transitionend"
            },
            translate: function(a, b) {
                return h + a + "px," + b + "px" + k
            },
            scale: function(a) {
                return m + a + "," + a + p
            },
            rotate: function(a) {
                return q + a + "deg)"
            },
            matrix: function(a) {
                return r + a.xx + "," + a.xy + s + a.yx + "," + a.yy + t + a.dx.toFixed(10) + (c ? "px," : ",") + a.dy.toFixed(10) + (c ? "px" : "") + u
            },
            getScaleFromMatrix: function(a) {
                if (!a) return 1;
                a = a.toLowerCase();
                var b = -1 < a.indexOf("matrix3d") ? "matrix3d(" : "matrix(";
                return Number(a.substring(b.length, a.indexOf(",")))
            }
        }
    };
    return a
});
},
'esri/_coremap':function(){
//>>built
define(["require", "module", "dojo/_base/kernel", "dojo/_base/declare", "dojo/_base/connect", "dojo/_base/Deferred", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/event", "dojo/_base/unload", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-geometry", "dojo/dom-style", "dojo/sniff", "dijit/registry", "dojox/gfx/matrix", "./kernel", "./config", "./basemaps", "./lang", "./Evented", "./fx", "./deferredUtils", "./tileUtils", "./PluginTarget", "./geometry/Point", "./geometry/ScreenPoint", "./geometry/Extent", "./geometry/Rect", "./geometry/mathUtils", "./geometry/scaleUtils", "./geometry/screenUtils", "./geometry/webMercatorUtils", "./layers/GraphicsLayer", "./layers/TileInfo", "./layers/LOD", "./layers/ArcGISTiledMapServiceLayer", "./layers/MapImageLayer", "./layers/OpenStreetMapLayer", "./dijit/Popup", "./plugins/popupManager", "dojo/uacss"], function(Q, ka, la, ma, z, ba, G, m, Fa, na, oa, pa, Y, H, U, V, R, qa, ra, Ga, sa, D, s, ta, ca, ua, da, va, M, C, A, N, wa, I, ea, Z, x, xa, ya, za, Aa, fa, Ba) {
    function ga(a, b) {
        var c = a.lods;
        c.sort(function(a, b) {
            return a.scale > b.scale ? -1 : a.scale < b.scale ? 1 : 0
        });
        var d = [],
            c = m.filter(c, function(a) {
                if (-1 === O(d, a.scale)) return d.push(a.scale), !0
            }),
            e = b.lods = [],
            f;
        m.forEach(c, function(a, b) {
            f = e[b] = new ya(a);
            f.level = b
        });
        b.tileInfo = new xa(S(a, {
            lods: e
        }))
    }
    var $, T = ea.toMapPoint,
        aa = ea.toScreenPoint,
        W = z.connect,
        P = z.disconnect,
        B = G.hitch,
        F = V.set,
        O = m.indexOf,
        S = G.mixin,
        X = 0,
        J = sa.defaults.map,
        ha = J.layerNamePrefix,
        ia = J.graphicsLayerNamePrefix,
        Ca = RegExp("^" + ha + "(\\d+)$"),
        Da = RegExp("^" + ia + "(\\d+)$"),
        Ea = function() {};
    return ma([ta, va], {
        declaredClass: "esri._CoreMap",
        resizeDelay: 300,
        invalidExtent: "Map does not have a valid extent.",
        invalidGeometry: "Geometry (wkid: ${geometry}) cannot be converted to spatial reference of the map (wkid: ${map})",
        unknownBasemap: 'Unable to find basemap definition for: "${basemapName}". Try one of these: ${list}',
        invalidBasemap: 'Unable to add basemap: "${basemapName}".',
        unknownLayerType: 'Unknown basemap layer type: "${type}" found in basemap definition for: "${basemapName}".',
        visible: !0,
        _eventMap: {
            "basemap-change": !0,
            "extent-change": ["extent", "delta", "levelChange", "lod"],
            "layer-add": ["layer"],
            "layer-add-result": ["layer", "error"],
            "layer-remove": ["layer"],
            "layer-reorder": ["layer", "index"],
            "layer-resume": ["layer"],
            "layer-suspend": ["layer"],
            "layers-add-result": ["layers"],
            "layers-removed": !0,
            "layers-reordered": ["layerIds"],
            load: ["map"],
            pan: ["extent", "delta"],
            "pan-end": ["extent",
                "delta"
            ],
            "pan-start": ["extent", "screenPoint"],
            reposition: ["x", "y"],
            resize: ["extent", "width", "height"],
            scale: ["matrix", "immediate"],
            "time-extent-change": ["timeExtent"],
            "before-unload": ["map"],
            unload: ["map"],
            "update-end": ["error"],
            "update-start": !0,
            zoom: ["extent", "zoomFactor", "anchor"],
            "zoom-end": ["extent", "zoomFactor", "anchor", "level"],
            "zoom-start": ["extent", "zoomFactor", "anchor", "level"],
            click: !0,
            "dbl-click": !0,
            "key-down": !0,
            "key-up": !0,
            "mouse-down": !0,
            "mouse-drag": !0,
            "mouse-drag-end": !0,
            "mouse-drag-start": !0,
            "mouse-move": !0,
            "mouse-out": !0,
            "mouse-over": !0,
            "mouse-up": !0,
            "mouse-wheel": !0,
            "basic-tap": !0,
            "double-tap": !0,
            "pinch-end": !0,
            "pinch-move": !0,
            "pinch-start": !0,
            "processed-double-tap": !0,
            "processed-tap": !0,
            "swipe-end": !0,
            "swipe-move": !0,
            "swipe-start": !0,
            tap: !0,
            "two-finger-tap": !0
        },
        constructor: function(a, b) {
            var c = this;
            this.registerConnectEvents();
            S(this, {
                _internalLayerIds: [],
                _layers: [],
                _layerDivs: [],
                _layerSize: 0,
                _connects: [],
                _zoomAnimDiv: null,
                _zoomAnim: null,
                _layersDiv: null,
                _firstLayerId: null,
                _delta: null,
                _cursor: null,
                _ratioW: 1,
                _ratioH: 1,
                _params: null,
                cursor: null,
                layerIds: [],
                graphicsLayerIds: [],
                graphics: null,
                _labels: null,
                loaded: !1,
                __panning: !1,
                __zooming: !1,
                __container: null,
                root: null,
                __LOD: null,
                __tileInfo: null,
                __visibleRect: null,
                __visibleDelta: null,
                _rids: []
            });
            var d = this.container = oa.byId(a),
                e = this.id = pa.get(d, "id") || qa.getUniqueId(this.declaredClass);
            Y.add(d, "map");
            var f = U.getContentBox(d),
                g = Y.add,
                k = H.create;
            this.position = new C(0, 0);
            this._reposition();
            var h = this.width = f.w || J.width,
                l = this.height = f.h ||
                J.height;
            0 === f.w && F(d, "width", h + "px");
            0 === f.h && F(d, "height", l + "px");
            var t = this.root = k("div", {
                id: e + "_root",
                style: {
                    width: h + "px",
                    height: l + "px",
                    direction: "ltr"
                }
            });
            g(t, "container");
            f = this.__container = k("div", {
                id: e + "_container"
            }, t);
            F(f, "position", "absolute");
            g(f, "container");
            d.appendChild(t);
            d = this._params = S({
                slider: !0,
                nav: !1,
                zoom: -1,
                minZoom: -1,
                maxZoom: -1,
                scale: -1,
                minScale: 0,
                maxScale: 0,
                showInfoWindowOnClick: !0,
                displayGraphicsOnPan: !0,
                wrapAround180: !0,
                fitExtent: !1,
                optimizePanAnimation: !0
            }, b || {});
            this.wrapAround180 =
                d.wrapAround180;
            this.optimizePanAnimation = d.optimizePanAnimation;
            s.isDefined(d.resizeDelay) && (this.resizeDelay = d.resizeDelay);
            d.lods && (ga({
                rows: 512,
                cols: 512,
                dpi: 96,
                format: "JPEG",
                compressionQuality: 75,
                origin: {
                    x: -180,
                    y: 90
                },
                spatialReference: {
                    wkid: 4326
                },
                lods: d.lods
            }, d), this.__tileInfo = d.tileInfo);
            this.extent = d.extent;
            this._extentUtil({
                mapCenter: d.center,
                targetLevel: d.zoom,
                targetScale: d.scale
            });
            this.__visibleRect = new N(0, 0, h, l);
            this.__visibleDelta = new N(0, 0, h, l);
            e = this._layersDiv = k("div", {
                id: e + "_layers"
            });
            g(e, "layersDiv");
            f.appendChild(e);
            this._zoomAnimDiv = k("div", {
                style: {
                    position: "absolute"
                }
            });
            d.infoWindow ? this.infoWindow = d.infoWindow : (g = this.infoWindow = new Ba(d.popupOptions, k("div")), g.startup(), g._ootb = !0, F(g.domNode, "zIndex", 40));
            d.showLabels && (Q(["./layers/LabelLayer"], function(a) {
                $ = a;
                c._createLabelLayer()
            }), this.on("load", function() {
                c._createLabelLayer()
            }));
            this.addPlugin(this._getAbsMid("./plugins/popupManager"), {
                enabled: d.showInfoWindowOnClick
            });
            this._zoomStartHandler = B(this, this._zoomStartHandler);
            this._zoomingHandler = B(this, this._zoomingHandler);
            this._zoomEndHandler = B(this, this._zoomEndHandler);
            this._panningHandler = B(this, this._panningHandler);
            this._panEndHandler = B(this, this._panEndHandler);
            this._endTranslate = B(this, this._endTranslate);
            na.addOnWindowUnload(this, this.destroy)
        },
        _getAbsMid: function(a) {
            return Q.toAbsMid ? Q.toAbsMid(a) : ka.id.replace(/\/[^\/]*$/ig, "/") + a
        },
        _cleanUp: function() {
            var a = this.infoWindow;
            a && (a._ootb && a.destroy ? a.destroy() : a.unsetMap(this), delete this.infoWindow);
            P(this._tsTimeExtentChange_connect);
            this.removePlugin("./plugins/popupManager");
            H.destroy(this.root);
            this.root = null
        },
        _addLayer: function(a, b, c) {
            if (a.id) {
                var d = a.id.match(a instanceof x ? Da : Ca);
                d && d[1] && (d = Number(d[1]), X <= d && (X = d + 1))
            }
            var e = a.id || (a instanceof x ? ia : ha) + X++;
            a.id = e;
            this._layers[e] = a;
            var f, g;
            if (b === this.layerIds || b === this.graphicsLayerIds) f = this._layerSize, this._layerSize++;
            a._isRefLayer = "top" === c;
            c = !s.isDefined(c) || 0 > c || c > b.length || "top" === c ? b.length : c;
            0 === f && (this._firstLayerId = e);
            if (!a._isRefLayer)
                for (;
                    (g = this.getLayer(b[c -
                        1])) && g._isRefLayer;) c--;
            b.splice(c, 0, e);
            var k = B(this, this._addLayerHandler),
                h = this;
            c = this._connects;
            d = function() {
                a.loaded ? h._onLoadFix ? (h._onLoadFix = !1, setTimeout(function() {
                    k(a)
                }, 0)) : k(a) : (h["_" + e + "_addtoken_load"] = W(a, "onLoad", h, "_addLayerHandler"), h["_" + e + "_addtoken_err"] = W(a, "onError", h, function(c) {
                    k(a, c, b)
                }))
            };
            this.loaded || 0 === f || a.loaded && -1 === O(this.graphicsLayerIds, e) ? d() : c.push(W(this, "onLoad", d));
            return a
        },
        _addLayerHandler: function(a, b, c) {
            var d = this.id,
                e = a.id,
                f = O(a instanceof x ? this.graphicsLayerIds :
                    this.layerIds, e),
                g = f,
                k = !1,
                h = this._params;
            P(this["_" + e + "_addtoken_load"]);
            P(this["_" + e + "_addtoken_err"]);
            if (b) delete this._layers[e], -1 !== f && (c.splice(f, 1), this.onLayerAddResult(a, b));
            else {
                -1 === f && (f = O(this._internalLayerIds, e), g = 20 + f, k = !0);
                if (e === this._firstLayerId) {
                    b = a.spatialReference;
                    if ((c = this.extent && this.extent.spatialReference) && !c.equals(b) && (a.tileInfo || !a.url)) c = null;
                    c = this.spatialReference = c || b;
                    this.wrapAround180 = this.wrapAround180 && c && c._isWrappable() ? !0 : !1;
                    a.tileInfo && (this.__tileInfo ?
                        (b = this.__tileInfo.lods, this.__tileInfo = S({}, a.tileInfo), this.__tileInfo.lods = b) : (ga(S({}, a.tileInfo), h), this.__tileInfo = h.tileInfo));
                    if (this.wrapAround180) {
                        b = this.__tileInfo;
                        c = c._getInfo();
                        if (!b || Math.abs(c.origin[0] - b.origin.x) > c.dx) this.wrapAround180 = !1;
                        this.wrapAround180 && b && da._addFrameInfo(b, c)
                    }
                    h.units = a.units;
                    if ((b = this.__tileInfo && this.__tileInfo.lods) && b.length) {
                        c = h.minScale;
                        var f = h.maxScale,
                            l = -1,
                            t = -1,
                            n = !1,
                            ja = !1,
                            q;
                        for (q = 0; q < b.length; q++) 0 < c && (!n && c >= b[q].scale) && (l = b[q].level, n = !0), 0 < f &&
                            (!ja && f >= b[q].scale) && (t = 0 < q ? b[q - 1].level : -1, ja = !0); - 1 === h.minZoom && (h.minZoom = 0 === c ? b[0].level : l); - 1 === h.maxZoom && (h.maxZoom = 0 === f ? b[b.length - 1].level : t);
                        for (q = 0; q < b.length; q++) h.minZoom === b[q].level && (h.minScale = b[q].scale), h.maxZoom === b[q].level && (h.maxScale = b[q].scale)
                    } else h.minZoom = h.maxZoom = h.zoom = -1
                }
                a instanceof x ? (this._gc || (this._gc = new x._GraphicsContainer, this._gc._setMap(this, this._layersDiv).id = d + "_gc"), g = a._setMap(this, this._gc._surface), g.id = d + "_" + e, this._layerDivs[e] = g, this._reorderLayers(this.graphicsLayerIds)) :
                    (g = a._setMap(this, this._layersDiv, g, this.__LOD), g.id = d + "_" + e, this._layerDivs[e] = g, this._reorderLayers(this.layerIds), !k && -1 !== a.declaredClass.indexOf("VETiledLayer") && this._onBingLayerAdd(a));
                e === this._firstLayerId && (this.graphics = new x({
                    id: d + "_graphics",
                    displayOnPan: h.displayGraphicsOnPan
                }), this._addLayer(this.graphics, this._internalLayerIds, 20));
                if (a === this.graphics) {
                    c = this._layers[this._firstLayerId];
                    d = h.zoom;
                    g = h.scale;
                    b = h.center;
                    c = c.initialExtent || c.fullExtent;
                    this._firstLayerId = null;
                    this.extent &&
                        (this.extent = this._convertGeometry(this, this.extent));
                    !this.extent && c && (b && (b = this._convertGeometry(c, b)), b && (c = c.centerAt(b)));
                    if (b = this.extent || c && new A(c.toJson())) - 1 < d ? b = this.__getExtentForLevel(d, null, b).extent : 0 < g && (b = I.getExtentForScale(this, g, b));
                    if (!b) {
                        console.log("Map: " + this.invalidExtent);
                        return
                    }
                    d = this._fixExtent(b, h.fitExtent);
                    this.extent = d.extent;
                    this.__LOD = d.lod;
                    this.__setExtent(this.extent, null, null, h.fitExtent);
                    this.loaded = !0;
                    this.attr("data-loaded", "");
                    this.infoWindow.setMap(this);
                    this.onLoad(this)
                }
                k || (this.onLayerAdd(a), this.onLayerAddResult(a));
                P(this[e + "_addLayerHandler_connect"])
            }
        },
        _convertGeometry: function(a, b) {
            var c = a && a.spatialReference,
                d = b && b.spatialReference;
            c && (d && !c.equals(d)) && (c._canProject(d) ? c.isWebMercator() ? b = Z.geographicToWebMercator(b) : 4326 === c.wkid && (b = Z.webMercatorToGeographic(b, !0)) : (console.log("Map: " + s.substitute({
                geometry: d.wkid || d.wkt,
                map: c.wkid || c.wkt
            }, this.invalidGeometry)), b = null));
            return b
        },
        _reorderLayers: function(a) {
            var b = this.onLayerReorder,
                c = H.place,
                d = this._layerDivs,
                e = this._layers,
                f = this._gc ? this._gc._surface.getEventSource() : null;
            if (a === this.graphicsLayerIds) m.forEach(a, function(a, g) {
                var h = d[a];
                h && (c(h.getEventSource(), f, g), b(e[a], g))
            });
            else {
                var g = this.graphics,
                    k = g ? g.id : null,
                    h = this._layersDiv,
                    l;
                m.forEach(a, function(a, f) {
                    l = d[a];
                    a !== k && l && (c(l, h, f), b(e[a], f))
                });
                this._mapImageLyr && this._placeMapImageLyr();
                f && (f = 9 > R("ie") ? f.parentNode : f, c(f, f.parentNode, a.length))
            }
            this.onLayersReordered([].concat(a))
        },
        _zoomStartHandler: function() {
            this.__zoomStart(this._zoomAnimDiv.startingExtent,
                this._zoomAnimDiv.anchor)
        },
        _zoomingHandler: function(a) {
            var b = parseFloat(a.left),
                c = parseFloat(a.top);
            a = new A(b, c - parseFloat(a.height), b + parseFloat(a.width), c, this.spatialReference);
            b = this.extent.getWidth() / a.getWidth();
            this.__zoom(a, b, this._zoomAnimDiv.anchor)
        },
        _zoomEndHandler: function() {
            var a = this._zoomAnimDiv,
                b = a.extent,
                c = this.extent.getWidth() / b.getWidth(),
                d = a.anchor,
                e = a.newLod,
                f = a.levelChange;
            a.extent = a.anchor = a.levelChange = a.startingExtent = a.newLod = this._delta = this._zoomAnim = null;
            this.__zoomEnd(b,
                c, d, e, f)
        },
        _panningHandler: function(a) {
            if (isNaN(parseFloat(a.left)) || isNaN(parseFloat(a.top))) {
                var b = Math.round,
                    c = this._panAnim.node;
                a.left = -1 * (this._delta.x - b(this.width / 2)) + "px";
                a.top = -1 * (this._delta.y - b(this.height / 2)) + "px";
                V.set(c, "left", a.left);
                V.set(c, "top", a.top)
            }
            a = new C(parseFloat(a.left), parseFloat(a.top));
            b = this.toMap(a);
            this.onPan(this.extent.offset(this.extent.xmin - b.x, this.extent.ymax - b.y), a)
        },
        _panEndHandler: function(a) {
            this.__panning = !1;
            var b = Math.round;
            a = new C(-b(parseFloat(a.style.left)), -b(parseFloat(a.style.top)));
            var b = a.x,
                c = a.y,
                d = this.__visibleRect,
                e = this.__visibleDelta;
            d.x += -b;
            d.y += -c;
            e.x += -b;
            e.y += -c;
            F(this._zoomAnimDiv, {
                left: "0px",
                top: "0px"
            });
            var d = this.extent,
                e = this._ratioW,
                f = this._ratioH,
                d = new A(d.xmin + b / e, d.ymin - c / f, d.xmax + b / e, d.ymax - c / f, this.spatialReference);
            a.setX(-a.x);
            a.setY(-a.y);
            this._delta = this._panAnim = null;
            this._updateExtent(d);
            this.onPanEnd(d, a);
            this._fireExtChg([d, a, !1, this.__LOD])
        },
        _fixExtent: function(a, b) {
            for (var c = this._reshapeExtent(a), d = 1.25; !0 === b && (c.extent.getWidth() <
                    a.getWidth() || c.extent.getHeight() < a.getHeight()) && 0 < c.lod.level && 3 >= d;) c = this._reshapeExtent(a.expand(d)), d += 0.25;
            return c
        },
        _getFrameWidth: function() {
            var a = -1,
                b = this.spatialReference._getInfo();
            this.__LOD ? (b = this.__LOD._frameInfo) && (a = b[3]) : b && (a = Math.round(2 * b.valid[1] / (this.extent.getWidth() / this.width)));
            return a
        },
        _fixAspectRatio: function(a) {
            var b = a.getWidth(),
                c = a.getHeight(),
                d = b / c,
                e = this.width / this.height,
                f = 0,
                g = 0;
            this.width > this.height ? b > c ? e > d ? f = c * e - b : g = b / e - c : f = c * e - b : this.width < this.height ? b <
                c ? e > d ? f = c * e - b : g = b / e - c : g = b / e - c : b < c ? f = c - b : b > c && (g = b / e - c);
            f && (a.xmin -= f / 2, a.xmax += f / 2);
            g && (a.ymin -= g / 2, a.ymax += g / 2);
            return a
        },
        _reshapeExtent: function(a) {
            a = this._fixAspectRatio(a);
            return this._getAdjustedExtent(a)
        },
        _getAdjustedExtent: function(a) {
            if (this.__tileInfo) return da.getCandidateTileInfo(this, this.__tileInfo, a);
            var b = I.getScale(this, a),
                c = this.getMinScale(),
                d = this.getMaxScale(),
                e = !d || b >= d;
            c && !(b <= c) ? a = I.getExtentForScale(this, c, a) : e || (a = I.getExtentForScale(this, d, a));
            return {
                extent: a
            }
        },
        _onBingLayerAdd: function(a) {
            this["__" +
                a.id + "_vis_connect"] = z.connect(a, "onVisibilityChange", this, "_toggleBingLogo");
            this._toggleBingLogo(a.visible)
        },
        _onBingLayerRemove: function(a) {
            z.disconnect(this["__" + a.id + "_vis_connect"]);
            delete this["__" + a.id + "_vis_connect"];
            var b = m.some(this.layerIds, function(b) {
                return (a = this._layers[b]) && a.visible && -1 !== a.declaredClass.indexOf("VETiledLayer")
            }, this);
            this._toggleBingLogo(b)
        },
        _toggleBingLogo: function(a) {
            a && !this._bingLogo ? (a = {
                left: this._mapParams && this._mapParams.nav ? "25px" : ""
            }, 6 === R("ie") && (a.filter =
                "progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled\x3d'true', sizingMethod\x3d'crop', src\x3d'" + Q.toUrl("./images/map/bing-logo-lg.png") + "')"), a = this._bingLogo = H.create("div", {
                style: a
            }, this.root), Y.add(a, "bingLogo-lg")) : !a && this._bingLogo && (H.destroy(this._bingLogo), delete this._bingLogo)
        },
        __panStart: function(a, b) {
            var c = this._zoomAnim,
                d = this._panAnim;
            if (c && c._active) c.stop(), c._fire("onEnd", [c.node]);
            else if (d && d._active) {
                d.stop();
                this._panAnim = null;
                var d = d.curve.getValue(d._getStep()),
                    c =
                    Math.round(parseFloat(d.left)),
                    d = Math.round(parseFloat(d.top)),
                    e = this.navigationManager._dragOrigin;
                this.__pan(c, d);
                e && (e.x -= c, e.y -= d);
                return
            }
            this.__panning = !0;
            this.onPanStart(this.extent, new C(a, b))
        },
        __pan: function(a, b) {
            var c = this.extent,
                d = this._ratioW,
                e = this._ratioH;
            this.onPan(new A(c.xmin - a / d, c.ymin + b / e, c.xmax - a / d, c.ymax + b / e, this.spatialReference), new C(a, b))
        },
        __panEnd: function(a, b) {
            var c = this.__visibleRect,
                d = this.__visibleDelta;
            c.x += a;
            c.y += b;
            d.x += a;
            d.y += b;
            var c = new C(a, b),
                d = this.extent,
                e = this._ratioW,
                f = this._ratioH,
                d = new A(d.xmin - a / e, d.ymin + b / f, d.xmax - a / e, d.ymax + b / f, this.spatialReference);
            this.__panning = !1;
            this._updateExtent(d);
            this.onPanEnd(d, c);
            this._fireExtChg([d, c, !1, this.__LOD])
        },
        __zoomStart: function(a, b) {
            this.__zooming = !0;
            this.onZoomStart(a, 1, b, this.__LOD ? this.__LOD.level : null)
        },
        __zoom: function(a, b, c) {
            this.onZoom(a, b, c)
        },
        __zoomEnd: function(a, b, c, d, e) {
            F(this._layersDiv, {
                left: "0px",
                top: "0px"
            });
            this._delta = new C(0, 0);
            this.__visibleRect.x = this.__visibleRect.y = 0;
            a = new A(a);
            this.__LOD = d;
            this._ratioW =
                this.width / a.getWidth();
            this._ratioH = this.height / a.getHeight();
            var f = this._delta;
            this._delta = null;
            this.__zooming = !1;
            this._updateExtent(a, e);
            this.onZoomEnd(a, b, c, d ? d.level : null);
            this._fireExtChg([a, f, e, d])
        },
        _extentUtil: function(a, b, c, d, e) {
            var f = new ba,
                g, k, h, l, t, n, m, q, u, y, r = this.width,
                p = this.height,
                L, v, w;
            a && (g = a.numLevels, k = a.targetLevel, L = s.isDefined(k), h = a.factor, l = a.mapAnchor, t = a.screenAnchor, n = a.mapCenter, v = a.levelOrFactor, m = a.targetScale, q = s.isDefined(m) && 0 < m);
            b && (u = b.dx, y = b.dy, n = b.mapCenter);
            G.isArray(n) && (n = new M(n));
            var z = this._panAnim;
            b = (a = this._stopAnim()) ? a.divExtent : this.extent;
            var x = this.__tileInfo,
                E = this._params;
            if (!this.loaded) {
                if (c) b && (c = this._convertGeometry(b, c)), c && (this.extent = c, E.zoom = E.scale = -1, E.center = null);
                else if (n || L || q) {
                    if (n)
                        if (b) {
                            if (n = this._convertGeometry(b, n)) this.extent = b.centerAt(n), E.center = null
                        } else E.center = n;
                    L && -1 < k ? (E.zoom = k, E.scale = -1) : q && (E.scale = m, E.zoom = -1)
                }
                f.resolve();
                return f
            }
            if (n && (n = this._convertGeometry(this, n), !n) || l && (l = this._convertGeometry(this,
                    l), !l) || c && (c = this._convertGeometry(this, c), !c)) return f.reject(), f;
            z && (l && t) && (l = T(this.extent, r, p, t));
            a && (l && t) && (l = T(a.divExtent, r, p, t));
            L && (x ? (g = this.getMinZoom(), L = this.getMaxZoom(), k < g ? k = g : k > L && (k = L), g = k - (a ? a.level : this.getLevel())) : (g = 0 < k ? -1 : 1, w = v ? k : null));
            if (!c)
                if (s.isDefined(g)) x ? (r = a ? a.level : this.getLevel(), p = this.__getExtentForLevel(r + g, n, b).extent) : (p = (a ? a.end : this.extent).expand(w || (0 < g ? 0.5 * g : 2 * -g)), w && n && (p = p.centerAt(n))), p && (n ? c = p : (r = l || b.getCenter(), u = b.ymax - (p.getHeight() - b.getHeight()) *
                    (r.y - b.ymax) / b.getHeight(), r = b.xmin - (p.getWidth() - b.getWidth()) * (r.x - b.xmin) / b.getWidth(), c = new A(r, u - p.getHeight(), r + p.getWidth(), u, this.spatialReference)));
                else if (q) c = I.getExtentForScale(this, m, b);
            else if (s.isDefined(h)) c = b.expand(h);
            else if (u || y) a ? (c = a.end, l = c.getCenter(), w = aa(c, r, p, l), w.x += u, w.y += y, w = T(c, r, p, w), c = c.offset(w.x - l.x, w.y - l.y)) : (u = new C(r / 2 + u, p / 2 + y), y = T(b, r, p, u), p = b.getWidth(), u = b.getHeight(), r = y.x - p / 2, y = y.y - u / 2, c = new A(r, y, r + p, y + u, this.spatialReference));
            c || (n ? (b = a ? a.end : b, p = b.getWidth(),
                u = b.getHeight(), r = n.x - p / 2, y = n.y - u / 2, c = new A(r, y, r + p, y + u, this.spatialReference)) : a && (c = a.end));
            c ? (this._extentDfd && -1 === this._extentDfd.fired && (this._extentDfd.then(null, Ea), this._extentDfd.reject()), this._extentDfd = f, this.__setExtent(c, null, t, d, a, e)) : f.reject();
            return f
        },
        __setExtent: function(a, b, c, d, e, f) {
            try {
                if (this._firstLayerId) this.extent = a;
                else {
                    var g = !0,
                        k = this.spatialReference,
                        h = e ? e.divExtent : this.extent,
                        l = this._fixExtent(a, d || !1);
                    a = l.extent;
                    var t = a.getWidth(),
                        n = a.getHeight(),
                        m = Math.round;
                    if (h) var q =
                        m(1E6 * h.getWidth()),
                        u = m(1E6 * t),
                        y = m(1E6 * h.getHeight()),
                        r = m(1E6 * n),
                        g = q !== u || y !== r;
                    var p, s, v = e && e.rect,
                        w = e && e.divExtent;
                    if (J.zoomDuration && g && h) {
                        w = w || new A(h);
                        v = v || {
                            left: h.xmin,
                            top: h.ymax,
                            width: h.getWidth(),
                            height: h.getHeight()
                        };
                        s = {
                            left: a.xmin,
                            top: a.ymax,
                            width: t,
                            height: n
                        };
                        var x = new M(a.xmin, a.ymax, k),
                            z = new M(a.xmin, a.ymin, k),
                            E = new M(this.extent.xmin, this.extent.ymax, k),
                            D = new M(this.extent.xmin, this.extent.ymin, k);
                        p = wa.getLineIntersection(E, x, D, z, k);
                        !p && !e && (g = !1)
                    }
                    this._ratioW = this.width / t;
                    this._ratioH =
                        this.height / n;
                    var K = this._zoomAnimDiv;
                    if (g) F(this._layersDiv, {
                        left: "0px",
                        top: "0px"
                    }), b = new C(0, 0), this.__visibleRect.x = this.__visibleRect.y = 0, v && s ? (this._delta = b, K.id = "_zAD", K.startingExtent = w, K.extent = a, K.levelChange = g, K.newLod = l.lod, K.anchor = c ? c : !p && e ? e.anchor : aa(this.extent, this.width, this.height, p), this._zoomAnim = ca.resize({
                            node: K,
                            start: v,
                            end: s,
                            duration: J.zoomDuration,
                            rate: J.zoomRate,
                            beforeBegin: !e ? this._zoomStartHandler : null,
                            onAnimate: this._zoomingHandler,
                            onEnd: this._zoomEndHandler
                        }).play(),
                        this._fireOnScale(this.extent.getWidth() / a.getWidth(), K.anchor)) : (this._updateExtent(a, g), this._fireExtChg([this.extent, b, g, this.__LOD = l.lod]));
                    else if (!this.__panning)
                        if (!1 === this.loaded || f) this._updateExtent(a, g), this._fireExtChg([this.extent, b, g, this.__LOD = l.lod]);
                        else {
                            this.__panning = !0;
                            v = (new N(0, 0, this.width, this.height, this.spatialReference)).getCenter();
                            v.x = m(v.x);
                            v.y = m(v.y);
                            var B = this._delta = this.toScreen(a.getCenter()),
                                H = Math.abs(v.x - B.x),
                                I = Math.abs(v.y - B.y);
                            this.optimizePanAnimation && (H >
                                2 * this.width || I > 2 * this.height) ? (this.__panStart(0, 0), this.__pan(0, 0), this.__visibleRect.x = this.__visibleRect.y = this.__visibleDelta.x = this.__visibleDelta.y = 0, this.__panning = !1, this._delta = null, this._updateExtent(a, !1), this.onPanEnd(this.extent, new C(0, 0)), this._fireExtChg([this.extent, new C(0, 0), !0, this.__LOD])) : (this.onPanStart(this.extent, new C(0, 0)), this._panAnim = ca.slideTo({
                                    node: K,
                                    left: v.x - B.x,
                                    top: v.y - B.y,
                                    duration: J.panDuration,
                                    rate: J.panRate,
                                    onAnimate: this._panningHandler,
                                    onEnd: this._panEndHandler
                                }),
                                this._panAnim.play())
                        }
                }
            } catch (G) {
                console.log(G.stack), console.error(G)
            }
        },
        _fireOnScale: function(a, b, c) {
            if ("css-transforms" === this.navigationMode) {
                var d = this.__visibleDelta;
                this.onScale(ra.scaleAt(a, {
                    x: -1 * (this.width / 2 - (b.x - d.x)),
                    y: -1 * (this.height / 2 - (b.y - d.y))
                }), c)
            }
        },
        _stopAnim: function() {
            var a = this._zoomAnim,
                b = this._panAnim;
            if (a && a._active) {
                a.stop();
                var b = a.curve.getValue(a._getStep()),
                    c = parseFloat(b.left),
                    d = parseFloat(b.top),
                    a = a.node;
                return {
                    anchor: a.anchor,
                    start: a.startingExtent,
                    end: a.extent,
                    level: a.newLod &&
                        a.newLod.level,
                    rect: b,
                    divExtent: new A(c, d - parseFloat(b.height), c + parseFloat(b.width), d, this.spatialReference)
                }
            }
            b && b._active && (b.stop(), b._fire("onEnd", [b.node]))
        },
        __getExtentForLevel: function(a, b, c) {
            var d = this.__tileInfo,
                d = d && d.lods;
            a = s.isDefined(a) ? a : 0;
            c = c || this.extent;
            b = b || c && c.getCenter();
            if (d) {
                if (b) {
                    c = this.getMinZoom();
                    var e = this.getMaxZoom();
                    a > e && (a = e);
                    a < c && (a = c);
                    a = d[a];
                    d = this.width * a.resolution / 2;
                    c = this.height * a.resolution / 2;
                    return {
                        extent: new A(b.x - d, b.y - c, b.x + d, b.y + c, b.spatialReference),
                        lod: a
                    }
                }
            } else if (c) return {
                extent: c.expand(!a ||
                    1 > a ? 1 : a).centerAt(b)
            };
            console.log("Map: " + this.invalidExtent)
        },
        _jobs: 0,
        _incr: function() {
            1 === ++this._jobs && (this.updating = !0, this.attr("data-updating", ""), this.onUpdateStart())
        },
        _decr: function() {
            var a = --this._jobs;
            a ? 0 > a && (this._jobs = 0) : (this.updating = !1, this.attr("data-updating"), this.onUpdateEnd())
        },
        _fireEvent: function(a, b) {
            this[a] && this[a].apply(this, b)
        },
        _updateExtent: function(a, b) {
            this.extent = a;
            b && this._setClipRect();
            var c = this.spatialReference;
            c && (c.isWebMercator() ? this.geographicExtent = Z.webMercatorToGeographic(this._getAvailExtent(), !0) : 4326 === c.wkid && (this.geographicExtent = new A(this._getAvailExtent().toJson())))
        },
        _fireExtChg: function(a) {
            this.attr("data-zoom", this.getZoom());
            this.attr("data-scale", this.getScale());
            this._fireEvent("onExtentChange", a);
            if (a = this._extentDfd) delete this._extentDfd, a.resolve()
        },
        attr: function(a, b) {
            var c = this.container;
            c && (null == b ? c.removeAttribute(a) : c.setAttribute(a, b));
            return this
        },
        onUpdateStart: function() {},
        onUpdateEnd: function() {},
        onLoad: function() {
            this._setClipRect()
        },
        onBeforeUnload: function() {},
        onUnload: function() {},
        onExtentChange: function(a, b, c) {},
        onTimeExtentChange: function() {},
        onLayerAdd: function() {},
        onLayerAddResult: function() {},
        onLayersAddResult: function() {},
        onLayerRemove: function() {},
        onLayersRemoved: function() {},
        onLayerReorder: function() {},
        onLayersReordered: function() {},
        onLayerSuspend: function() {},
        onLayerResume: function() {},
        onPanStart: function() {},
        onPan: function() {},
        onPanEnd: function() {},
        onScale: function() {},
        onZoomStart: function() {},
        onZoom: function() {},
        onZoomEnd: function() {},
        onResize: function() {
            this._setClipRect()
        },
        onReposition: function() {},
        destroy: function() {
            this._destroyed || (this.onBeforeUnload(this), this.removeAllLayers(), this._cleanUp(), this._gc && this._gc._cleanUp(), this._destroyed = !0, this.onUnload(this))
        },
        setCursor: function(a) {
            F(this.__container, "cursor", this.cursor = a)
        },
        setMapCursor: function(a) {
            this.setCursor(this._cursor = a)
        },
        resetMapCursor: function() {
            this.setCursor(this._cursor)
        },
        setInfoWindow: function(a) {
            var b = this.infoWindow;
            b && b.unsetMap(this);
            this.infoWindow = a;
            this.loaded && a && a.setMap(this)
        },
        setInfoWindowOnClick: function(a) {
            this._params.showInfoWindowOnClick =
                a;
            this.popupManager && this.popupManager.set("enabled", a)
        },
        getInfoWindowAnchor: function(a) {
            return this.infoWindow && this.infoWindow._getAnchor && this.infoWindow._getAnchor(a) || "upperright"
        },
        toScreen: function(a, b) {
            return aa(this.extent, this.width, this.height, a, b)
        },
        toMap: function(a) {
            return T(this.extent, this.width, this.height, a)
        },
        addLayer: function(a, b) {
            a && !this.getLayer(a.id) && this._addLayer(a, a instanceof x ? this.graphicsLayerIds : this.layerIds, b);
            return a
        },
        addLayers: function(a) {
            var b = [],
                c = a.length,
                d, e,
                f = a.length;
            d = z.connect(this, "onLayerAddResult", function(e, f) {
                -1 !== m.indexOf(a, e) && (c--, b.push({
                    layer: e,
                    success: !f,
                    error: f
                }), c || (z.disconnect(d), this.onLayersAddResult(b)))
            });
            for (e = 0; e < f; e++) this.addLayer(a[e]);
            return this
        },
        removeLayer: function(a, b) {
            var c = a.id,
                d = a instanceof x ? this.graphicsLayerIds : this.layerIds,
                e = O(d, c);
            0 <= e && (d.splice(e, 1), a instanceof x ? (P(this["_gl_" + a.id + "_click_connect"]), a.loaded && a._unsetMap(this, this._gc._surface)) : a.loaded && (a._unsetMap(this, this._layersDiv), -1 !== a.declaredClass.indexOf("VETiledLayer") &&
                this._onBingLayerRemove(a)), delete this._layers[c], delete this._layerDivs[c], b || this._reorderLayers(d), this.onLayerRemove(a))
        },
        removeAllLayers: function() {
            var a = this.layerIds,
                b;
            for (b = a.length - 1; 0 <= b; b--) this.removeLayer(this._layers[a[b]], 1);
            a = this.graphicsLayerIds;
            for (b = a.length - 1; 0 <= b; b--) this.removeLayer(this._layers[a[b]], 1);
            this.onLayersRemoved()
        },
        reorderLayer: function(a, b) {
            G.isString(a) && (la.deprecated(this.declaredClass + ": Map.reorderLayer(/*String*/ id, /*Number*/ index) deprecated. Use Map.reorderLayer(/*Layer*/ layer, /*Number*/ index).",
                null, "v2.0"), a = this.getLayer(a));
            var c = a.id,
                d, e = a instanceof x ? this.graphicsLayerIds : this.layerIds;
            0 > b ? b = 0 : b >= e.length && (b = e.length - 1);
            d = O(e, c); - 1 === d || d === b || (e.splice(d, 1), e.splice(b, 0, c), this._reorderLayers(e))
        },
        getLayer: function(a) {
            return this._layers[a]
        },
        setExtent: function(a, b) {
            a = new A(a.toJson());
            var c = a.getWidth(),
                d = a.getHeight();
            return 0 === c && 0 === d ? this.centerAt(new M({
                x: a.xmin,
                y: a.ymin,
                spatialReference: a.spatialReference && a.spatialReference.toJson()
            })) : this._extentUtil(null, null, a, b)
        },
        centerAt: function(a) {
            return this._extentUtil(null, {
                mapCenter: a
            })
        },
        centerAndZoom: function(a, b) {
            return this._extentUtil({
                targetLevel: b,
                mapCenter: a,
                levelOrFactor: !0
            })
        },
        getScale: function() {
            return this.__LOD ? this.__LOD.scale : I.getScale(this)
        },
        getResolution: function() {
            return this.__LOD ? this.__LOD.resolution : this.extent ? this.extent.getWidth() / this.width : 0
        },
        getResolutionInMeters: function() {
            return this.getResolution() * I.getUnitValueForSR(this.spatialReference)
        },
        getMinScale: function() {
            return this._params.minScale
        },
        getMaxScale: function() {
            return this._params.maxScale
        },
        setScale: function(a) {
            return this._extentUtil({
                targetScale: a
            })
        },
        getLayersVisibleAtScale: function(a) {
            var b = [];
            (a = a || this.getScale()) && m.forEach(this.layerIds.concat(this.graphicsLayerIds), function(c) {
                c = this.getLayer(c);
                c.isVisibleAtScale(a) && b.push(c)
            }, this);
            return b
        },
        getNumLevels: function() {
            var a = this.getMinZoom(),
                b = this.getMaxZoom();
            return a === b && 0 > a ? 0 : b - a + 1
        },
        getLevel: function() {
            return this.__LOD ? this.__LOD.level : -1
        },
        setLevel: function(a) {
            if (-1 < a) return this._extentUtil({
                targetLevel: a
            })
        },
        getZoom: function() {
            return this.getLevel()
        },
        setZoom: function(a) {
            return this.setLevel(a)
        },
        getMinZoom: function() {
            return this._params.minZoom
        },
        getMaxZoom: function() {
            return this._params.maxZoom
        },
        setBasemap: function(a) {
            var b;
            G.isObject(a) ? (b = a, a = b.title) : b = D && D[a];
            if (b) {
                this._basemapDfd && -1 === this._basemapDfd.fired && this._basemapDfd.cancel();
                var c = [],
                    d = [],
                    e = 0;
                m.forEach(b.baseMapLayers || b.layers, function(b) {
                    var f, g = {
                        id: b.id,
                        displayLevels: b.displayLevels,
                        opacity: s.isDefined(b.opacity) ? b.opacity : null,
                        visible: s.isDefined(b.visibility) ? b.visibility : null
                    };
                    if (b.type) switch (b.type) {
                        case "OpenStreetMap":
                            f = new fa(g);
                            break;
                        default:
                            console.log("Map.setBasemap: " + s.substitute({
                                basemapName: a,
                                type: b.type
                            }, this.unknownLayerType))
                    } else {
                        f = b.url;
                        if ("https:" === window.location.protocol && (-1 !== f.search(/^http\:\/\/server\.arcgisonline\.com/i) || -1 !== f.search(/^http\:\/\/services\.arcgisonline\.com/i) || -1 !== f.search(/^http\:\/\/.+\.arcgis\.com/i))) f = f.replace(/http:/i, "https:");
                        f = new za(f, g)
                    }
                    f && (c.push(f), d.push(b), b.isReference || e++)
                }, this);
                if (!c.length || !e) console.log("Map.setBasemap: " +
                    s.substitute({
                        basemapName: a
                    }, this.invalidBasemap));
                else {
                    var f = {
                        basemapName: a,
                        infos: d,
                        layers: c
                    };
                    if (this.loaded) {
                        var g = this,
                            k = new ba(ua._dfdCanceller),
                            h = function(a) {
                                k._pendingLayers--;
                                a = m.indexOf(f.layers, this);
                                if (-1 < a && (a = k._layerEvents[a])) z.disconnect(a[0]), z.disconnect(a[1]);
                                0 >= k._pendingLayers && (delete k._layerEvents, delete g._basemapDfd, 0 > k.fired && k.callback(f))
                            };
                        this._basemapDfd = k;
                        k._pendingLayers = 0;
                        k._layerEvents = {};
                        m.forEach(c, function(a, b) {
                            a && (k._pendingLayers++, a.loaded ? h(a) : k._layerEvents[b] = [z.connect(a, "onLoad", a, h), z.connect(a, "onError", a, h)])
                        });
                        k.addCallback(B(this, this._basemapLoaded))
                    } else this._basemapLoaded(f)
                }
            } else {
                b = [];
                for (var l in D) b.push(l);
                console.log("Map.setBasemap: " + s.substitute({
                    basemapName: a,
                    list: b.join(",")
                }, this.unknownBasemap))
            }
        },
        _basemapLoaded: function(a) {
            var b = a.layers,
                c = a.infos,
                d = 0,
                e = !0,
                f;
            this.loaded && (m.forEach(b, function(a, b) {
                a.loaded && (c[b].isReference || d++)
            }), e = d);
            e && (this.basemapLayerIds && (f = {
                    basemapName: this._basemap,
                    infos: D && D[this._basemap] && D[this._basemap].baseMapLayers
                },
                f.basemapName || (m.forEach(this.basemapLayerIds, function(a) {
                    if (this.getLayer(a) instanceof fa) return f.basemapName = "osm", f.infos = D && D.osm && D.osm.baseMapLayers, !1
                }, this), f.basemapName || (f = null))), this._removeBasemap(), this._basemap = a.basemapName, this.basemapLayerIds = this._addBasemap(b, c), this.attr("data-basemap", this.getBasemap()), this.emit("basemap-change", {
                current: a,
                previous: f
            }))
        },
        _addBasemap: function(a, b) {
            var c = [],
                d = [],
                e = 0;
            m.forEach(a, function(a, g) {
                b[g].isReference ? c.push(a) : (this.addLayer(a, e++),
                    d.push(a.id))
            }, this);
            c.length && m.forEach(c, function(a) {
                this.addLayer(a, "top");
                d.push(a.id)
            }, this);
            return d
        },
        _removeBasemap: function() {
            var a = this.basemapLayerIds,
                b;
            a && a.length && m.forEach(a, function(a) {
                (b = this.getLayer(a)) && this.removeLayer(b)
            }, this)
        },
        getBasemap: function() {
            return this._basemap || ""
        },
        translate: function(a, b) {
            a = a || 0;
            b = b || 0;
            if (!this._txTimer) {
                this._tx = this._ty = 0;
                var c = this.toScreen(this.extent.getCenter());
                this.__panStart(c.x, c.y)
            }
            this._tx += a;
            this._ty += b;
            this.__pan(this._tx, this._ty);
            clearTimeout(this._txTimer);
            this._txTimer = setTimeout(this._endTranslate, 150)
        },
        _endTranslate: function() {
            clearTimeout(this._txTimer);
            this._txTimer = null;
            var a = this._tx,
                b = this._ty;
            this._tx = this._ty = 0;
            this.__panEnd(a, b)
        },
        setTimeExtent: function(a) {
            a = (this.timeExtent = a) ? new a.constructor(a.toJson()) : null;
            this.onTimeExtentChange(a)
        },
        setTimeSlider: function(a) {
            this.timeSlider && (P(this._tsTimeExtentChange_connect), this.timeSlider = this._tsTimeExtentChange_connect = null);
            a && (this.timeSlider = a, this.setTimeExtent(a.getCurrentTimeExtent()),
                this._tsTimeExtentChange_connect = W(a, "onTimeExtentChange", this, "setTimeExtent"))
        },
        setVisibility: function(a) {
            if (this.visible !== a) {
                this.visible = a;
                a || (this._display = this.container.style.display);
                this.container.style.display = a ? this._display : "none";
                if (this.autoResize) {
                    var b = a ? "resume" : "pause";
                    this._rszSignal[b]();
                    this._oriSignal[b]()
                }
                a && this.resize()
            }
            return this
        },
        resize: function(a) {
            var b = this,
                c = function() {
                    clearTimeout(b._resizeT);
                    b.reposition();
                    b._resize()
                };
            clearTimeout(b._resizeT);
            !0 === a ? c() : b._resizeT =
                setTimeout(c, b.resizeDelay)
        },
        _resize: function() {
            var a = this.width,
                b = this.height,
                c = U.getContentBox(this.container);
            if (!(a === c.w && b === c.h)) {
                var d = this._zoomAnim || this._panAnim;
                d && (d.stop(), d._fire("onEnd", [d.node]));
                F(this.root, {
                    width: (this.width = c.w) + "px",
                    height: (this.height = c.h) + "px"
                });
                c = this.width;
                d = this.height;
                this.attribution && this.attribution.domNode && V.set(this.attribution.domNode, "maxWidth", Math.floor(c * this._mapParams.attributionWidth) + "px");
                this.__visibleRect.update(this.__visibleRect.x, this.__visibleRect.y,
                    c, d);
                this.__visibleDelta.update(this.__visibleDelta.x, this.__visibleDelta.y, c, d);
                var e = new N(this.extent),
                    a = (new N(e.x, e.y, e.width * (c / a), e.height * (d / b), this.spatialReference)).getExtent();
                this.onResize(a, c, d);
                this._extentUtil(null, null, a, null, !0)
            }
        },
        reposition: function() {
            this._reposition();
            this.onReposition(this.position.x, this.position.y)
        },
        _reposition: function() {
            var a = U.position(this.container, !0),
                b = U.getPadBorderExtents(this.container);
            this.position.update(a.x + b.l, a.y + b.t)
        },
        _setClipRect: function() {
            delete this._clip;
            var a = 7 >= R("ie") || void 0 === R("ie") && 7 <= R("trident") ? "rect(auto,auto,auto,auto)" : "auto";
            if (this.wrapAround180) {
                var b = this.width,
                    c = this.height,
                    d = this._getFrameWidth(),
                    e = b - d;
                0 < e && (a = e / 2, a = "rect(0px," + (a + d) + "px," + c + "px," + a + "px)", c = this.extent.getWidth(), b = c * (d / b), this._clip = [(c - b) / 2, b])
            }
            F(this.__container, "clip", a)
        },
        _getAvailExtent: function() {
            var a = this.extent,
                b = this._clip;
            if (b) {
                if (!a._clip) {
                    var c = new N(a);
                    c.width = b[1];
                    c.x += b[0];
                    a._clip = c.getExtent()
                }
                return a._clip
            }
            return a
        },
        _fixedPan: function(a, b) {
            return this._extentUtil(null, {
                dx: a,
                dy: b
            })
        },
        panUp: function() {
            return this._fixedPan(0, -0.75 * this.height)
        },
        panUpperRight: function() {
            return this._fixedPan(0.75 * this.width, -0.75 * this.height)
        },
        panRight: function() {
            return this._fixedPan(0.75 * this.width, 0)
        },
        panLowerRight: function() {
            return this._fixedPan(0.75 * this.width, 0.75 * this.height)
        },
        panDown: function() {
            return this._fixedPan(0, 0.75 * this.height)
        },
        panLowerLeft: function() {
            return this._fixedPan(-0.75 * this.width, 0.75 * this.height)
        },
        panLeft: function() {
            return this._fixedPan(-0.75 * this.width,
                0)
        },
        panUpperLeft: function() {
            return this._fixedPan(-0.75 * this.width, -0.75 * this.height)
        },
        enableSnapping: function(a) {
            a = a || {};
            if ("esri.SnappingManager" === a.declaredClass) this.snappingManager = a;
            else {
                var b = X++,
                    c = this;
                this._rids && this._rids.push(b);
                Q(["./SnappingManager"], function(d) {
                    var e = c._rids ? m.indexOf(c._rids, b) : -1; - 1 !== e && (c._rids.splice(e, 1), c.snappingManager = new d(G.mixin({
                        map: c
                    }, a)))
                })
            }
            return this.snappingManager
        },
        disableSnapping: function() {
            this.snappingManager && this.snappingManager.destroy();
            this.snappingManager = null
        },
        _createLabelLayer: function() {
            function a() {
                b._labels.removeAllFeatureLayers();
                m.forEach(b.graphicsLayerIds, function(a) {
                    a = b.getLayer(a);
                    "function" === typeof a.applyEdits && b._labels.addFeatureLayer(a)
                })
            }
            var b = this;
            !this._labels && ($ && this.loaded) && (this._labels = new $({
                id: "_internal_LabelLayer"
            }), this._labels._setMap(this, this._gc._surface), a(), this.on("layers-reordered", a))
        },
        _getMapImageLyr: function() {
            this.loaded && !this._mapImageLyr && (this._mapImageLyr = new Aa, this._mapImageLyr._setMap(this,
                this._layersDiv), this._placeMapImageLyr());
            return this._mapImageLyr
        },
        _placeMapImageLyr: function() {
            for (var a = this.layerIds, b = this._layerDivs, c = !1, d, e, f = a.length - 1; 0 <= f; f--)
                if (d = a[f], e = this.getLayer(d), d = b[d], e && d && !e._isReference) {
                    H.place(this._mapImageLyr._div, d, "after");
                    c = !0;
                    break
                }
            c || H.place(this._mapImageLyr._div, this._layersDiv, "first")
        }
    })
});
},
'dojo/_base/unload':function(){
define(["./kernel", "./lang", "../on"], function(dojo, lang, on){

// module:
//		dojo/unload

var win = window;

var unload = {
	// summary:
	//		This module contains the document and window unload detection API.
	//		This module is deprecated.  Use on(window, "unload", func)
	//		and on(window, "beforeunload", func) instead.

	addOnWindowUnload: function(/*Object|Function?*/ obj, /*String|Function?*/ functionName){
		// summary:
		//		Registers a function to be triggered when window.onunload fires.
		//		Deprecated, use on(window, "unload", lang.hitch(obj, functionName)) instead.
		// description:
		//		The first time that addOnWindowUnload is called Dojo
		//		will register a page listener to trigger your unload
		//		handler with. Note that registering these handlers may
		//		destroy "fastback" page caching in browsers that support
		//		it. Be careful trying to modify the DOM or access
		//		JavaScript properties during this phase of page unloading:
		//		they may not always be available. Consider
		//		addOnUnload() if you need to modify the DOM or do
		//		heavy JavaScript work since it fires at the equivalent of
		//		the page's "onbeforeunload" event.
		// example:
		//	|	var afunc = function() {console.log("global function");};
		//	|	require(["dojo/_base/unload"], function(unload) {
		//	|		var foo = {bar: function(){ console.log("bar unloading...");}, 
		//	|		           data: "mydata"};
		//	|		unload.addOnWindowUnload(afunc);
		//	|		unload.addOnWindowUnload(foo, "bar");
		//	|		unload.addOnWindowUnload(foo, function(){console.log("", this.data);});
		//	|	});

		if (!dojo.windowUnloaded){
			on(win, "unload", (dojo.windowUnloaded = function(){
				// summary:
				//		signal fired by impending window destruction. You may use
				//		dojo.addOnWindowUnload() to register a listener for this
				//		event. NOTE: if you wish to dojo.connect() to this method
				//		to perform page/application cleanup, be aware that this
				//		event WILL NOT fire if no handler has been registered with
				//		addOnWindowUnload(). This behavior started in Dojo 1.3.
				//		Previous versions always triggered windowUnloaded(). See
				//		addOnWindowUnload for more info.
			}));
		}
		on(win, "unload", lang.hitch(obj, functionName));
	},

	addOnUnload: function(/*Object?|Function?*/ obj, /*String|Function?*/ functionName){
		// summary:
		//		Registers a function to be triggered when the page unloads.
		//		Deprecated, use on(window, "beforeunload", lang.hitch(obj, functionName)) instead.
		// description:
		//		The first time that addOnUnload is called Dojo will
		//		register a page listener to trigger your unload handler
		//		with.
		//
		//		In a browser environment, the functions will be triggered
		//		during the window.onbeforeunload event. Be careful of doing
		//		too much work in an unload handler. onbeforeunload can be
		//		triggered if a link to download a file is clicked, or if
		//		the link is a javascript: link. In these cases, the
		//		onbeforeunload event fires, but the document is not
		//		actually destroyed. So be careful about doing destructive
		//		operations in a dojo.addOnUnload callback.
		//
		//		Further note that calling dojo.addOnUnload will prevent
		//		browsers from using a "fast back" cache to make page
		//		loading via back button instantaneous.
		// example:
		//	|	var afunc = function() {console.log("global function");};
		//	|	require(["dojo/_base/unload"], function(unload) {
		//	|		var foo = {bar: function(){ console.log("bar unloading...");}, 
		//	|		           data: "mydata"};
		//	|		unload.addOnUnload(afunc);
		//	|		unload.addOnUnload(foo, "bar");
		//	|		unload.addOnUnload(foo, function(){console.log("", this.data);});
		//	|	});

		on(win, "beforeunload", lang.hitch(obj, functionName));
	}
};

dojo.addOnWindowUnload = unload.addOnWindowUnload;
dojo.addOnUnload = unload.addOnUnload;

return unload;

});

},
'esri/basemaps':function(){
//>>built
define(["require", "dojo/has", "./kernel", "dojo/i18n!./nls/jsapi"], function(a, c, d, b) {
    a = a.toUrl(".");
    return {
        streets: {
            title: b.basemaps.streets,
            thumbnailUrl: a + "/images/basemap/streets.jpg",
            itemId: "d8855ee4d3d74413babfb0f41203b168",
            baseMapLayers: [{
                url: "http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer"
            }]
        },
        satellite: {
            title: b.basemaps.satellite,
            thumbnailUrl: a + "/images/basemap/satellite.jpg",
            itemId: "86de95d4e0244cba80f0fa2c9403a7b2",
            baseMapLayers: [{
                url: "http://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer"
            }]
        },
        hybrid: {
            title: b.basemaps.hybrid,
            thumbnailUrl: a + "/images/basemap/hybrid.jpg",
            itemId: "413fd05bbd7342f5991d5ec96f4f8b18",
            baseMapLayers: [{
                url: "http://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer"
            }, {
                url: "http://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/MapServer",
                isReference: !0
            }]
        },
        terrain: {
            title: b.basemaps.terrain,
            thumbnailUrl: a + "/images/basemap/terrain.jpg",
            itemId: "aab054ab883c4a4094c72e949566ad40",
            baseMapLayers: [{
                url: "http://services.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer"
            }, {
                url: "http://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Reference_Overlay/MapServer",
                isReference: !0
            }]
        },
        topo: {
            title: b.basemaps.topo,
            thumbnailUrl: a + "/images/basemap/topo.jpg",
            itemId: "6e03e8c26aad4b9c92a87c1063ddb0e3",
            baseMapLayers: [{
                url: "http://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer"
            }]
        },
        gray: {
            title: b.basemaps.gray,
            thumbnailUrl: a + "/images/basemap/gray.jpg",
            itemId: "8b3b470883a744aeb60e5fff0a319ce7",
            baseMapLayers: [{
                url: "http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer"
            }, {
                url: "http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Reference/MapServer",
                isReference: !0
            }]
        },
        "dark-gray": {
            title: b.basemaps["dark-gray"],
            thumbnailUrl: a + "/images/basemap/dark-gray.jpg",
            itemId: "da65bacab5bd4defb576f839b6b28098",
            baseMapLayers: [{
                url: "http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Dark_Gray_Base/MapServer"
            }, {
                url: "http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Dark_Gray_Reference/MapServer",
                isReference: !0
            }]
        },
        oceans: {
            title: b.basemaps.oceans,
            thumbnailUrl: a + "/images/basemap/oceans.jpg",
            itemId: "48b8cec7ebf04b5fbdcaf70d09daff21",
            baseMapLayers: [{
                url: "http://services.arcgisonline.com/arcgis/rest/services/Ocean/World_Ocean_Base/MapServer"
            }, {
                url: "http://services.arcgisonline.com/arcgis/rest/services/Ocean/World_Ocean_Reference/MapServer",
                isReference: !0
            }]
        },
        "national-geographic": {
            title: b.basemaps["national-geographic"],
            thumbnailUrl: a + "/images/basemap/national-geographic.jpg",
            itemId: "509e2d6b034246d692a461724ae2d62c",
            baseMapLayers: [{
                url: "http://services.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer"
            }]
        },
        osm: {
            title: b.basemaps.osm,
            thumbnailUrl: a + "/images/basemap/osm.jpg",
            itemId: "5d2bfa736f8448b3a1708e1f6be23eed",
            baseMapLayers: [{
                type: "OpenStreetMap"
            }]
        }
    }
});
},
'esri/nls/jsapi':function(){
//>>built
define({
    root: {
        io: {
            proxyNotSet: "esri.config.defaults.io.proxyUrl is not set. If making a request to a CORS enabled server, please push the domain into esri.config.defaults.io.corsEnabledServers."
        },
        map: {
            deprecateReorderLayerString: "Map.reorderLayer(/*String*/ id, /*Number*/ index) deprecated. Use Map.reorderLayer(/*Layer*/ layer, /*Number*/ index).",
            deprecateShiftDblClickZoom: "Map.(enable/disable)ShiftDoubleClickZoom deprecated. Shift-Double-Click zoom behavior will not be supported."
        },
        basemaps: {
            streets: "Streets",
            satellite: "Imagery",
            hybrid: "Imagery with Labels",
            terrain: "Terrain with Labels",
            topo: "Topographic",
            gray: "Light Gray Canvas",
            "dark-gray": "Dark Gray Canvas",
            oceans: "Oceans",
            "national-geographic": "National Geographic",
            osm: "OpenStreetMap"
        },
        geometry: {
            deprecateToScreenPoint: "esri.geometry.toScreenPoint deprecated. Use esri.geometry.toScreenGeometry.",
            deprecateToMapPoint: "esri.geometry.toMapPoint deprecated. Use esri.geometry.toMapGeometry."
        },
        layers: {
            tiled: {
                tileError: "Unable to load tile"
            },
            dynamic: {
                imageError: "Unable to load image"
            },
            graphics: {
                drawingError: "Unable to draw graphic "
            },
            agstiled: {
                deprecateRoundrobin: "Constructor option 'roundrobin' deprecated. Use option 'tileServers'."
            },
            imageParameters: {
                deprecateBBox: "Property 'bbox' deprecated. Use property 'extent'."
            },
            FeatureLayer: {
                noOIDField: "objectIdField is not set [url: ${url}]",
                fieldNotFound: "unable to find '${field}' field in the layer 'fields' information [url: ${url}]",
                noGeometryField: "unable to find a field of type 'esriFieldTypeGeometry' in the layer 'fields' information. If you are using a map service layer, features will not have geometry [url: ${url}]",
                invalidParams: "query contains one or more unsupported parameters",
                updateError: "an error occurred while updating the layer",
                createUserSeconds: "Created by ${userId} seconds ago",
                createUserMinute: "Created by ${userId} a minute ago",
                editUserSeconds: "Edited by ${userId} seconds ago",
                editUserMinute: "Edited by ${userId} a minute ago",
                createSeconds: "Created seconds ago",
                createMinute: "Created a minute ago",
                editSeconds: "Edited seconds ago",
                editMinute: "Edited a minute ago",
                createUserMinutes: "Created by ${userId} ${minutes} minutes ago",
                createUserHour: "Created by ${userId} an hour ago",
                createUserHours: "Created by ${userId} ${hours} hours ago",
                createUserWeekDay: "Created by ${userId} on ${weekDay} at ${formattedTime}",
                createUserFull: "Created by ${userId} on ${formattedDate} at ${formattedTime}",
                editUserMinutes: "Edited by ${userId} ${minutes} minutes ago",
                editUserHour: "Edited by ${userId} an hour ago",
                editUserHours: "Edited by ${userId} ${hours} hours ago",
                editUserWeekDay: "Edited by ${userId} on ${weekDay} at ${formattedTime}",
                editUserFull: "Edited by ${userId} on ${formattedDate} at ${formattedTime}",
                createUser: "Created by ${userId}",
                editUser: "Edited by ${userId}",
                createMinutes: "Created ${minutes} minutes ago",
                createHour: "Created an hour ago",
                createHours: "Created ${hours} hours ago",
                createWeekDay: "Created on ${weekDay} at ${formattedTime}",
                createFull: "Created on ${formattedDate} at ${formattedTime}",
                editMinutes: "Edited ${minutes} minutes ago",
                editHour: "Edited an hour ago",
                editHours: "Edited ${hours} hours ago",
                editWeekDay: "Edited on ${weekDay} at ${formattedTime}",
                editFull: "Edited on ${formattedDate} at ${formattedTime}"
            }
        },
        tasks: {
            gp: {
                gpDataTypeNotHandled: "GP Data type not handled."
            },
            na: {
                route: {
                    routeNameNotSpecified: "'RouteName' not specified for at least 1 stop in stops FeatureSet."
                }
            },
            query: {
                invalid: "Unable to perform query. Please check your parameters."
            }
        },
        toolbars: {
            draw: {
                convertAntiClockwisePolygon: "Polygons drawn in anti-clockwise direction will be reversed to be clockwise.",
                addPoint: "Click to add a point",
                addShape: "Click to add a shape, or press down to start and let go to finish",
                addMultipoint: "Click to start adding points",
                freehand: "Press down to start and let go to finish",
                start: "Click to start drawing",
                resume: "Click to continue drawing",
                complete: "Double-click to complete",
                finish: "Double-click to finish",
                invalidType: "Unsupported geometry type"
            },
            edit: {
                invalidType: "Unable to activate the tool. Check if the tool is valid for the given geometry type.",
                deleteLabel: "Delete"
            }
        },
        virtualearth: {
            vetiledlayer: {
                bingMapsKeyNotSpecified: "BingMapsKey must be provided."
            },
            vegeocode: {
                bingMapsKeyNotSpecified: "BingMapsKey must be provided.",
                requestQueued: "Server token not retrieved. Queing request to be executed after server token retrieved."
            }
        },
        widgets: {
            attributeInspector: {
                NLS_first: "First",
                NLS_previous: "Previous",
                NLS_next: "Next",
                NLS_last: "Last",
                NLS_deleteFeature: "Delete",
                NLS_title: "Edit Attributes",
                NLS_errorInvalid: "Invalid",
                NLS_validationInt: "Value must be an integer.",
                NLS_validationFlt: "Value must be a float.",
                NLS_of: "of",
                NLS_noFeaturesSelected: "No features selected"
            },
            basemapToggle: {
                toggle: "Toggle basemap"
            },
            homeButton: {
                home: {
                    button: "Home",
                    title: "Default extent"
                }
            },
            layerSwipe: {
                title: "Drag to see underlying layer"
            },
            locateButton: {
                locate: {
                    button: "My Location",
                    title: "Find my location",
                    tracking: "Track location",
                    stopTracking: "Stop tracking location"
                }
            },
            overviewMap: {
                NLS_drag: "Drag To Change The Map Extent",
                NLS_show: "Show Map Overview",
                NLS_hide: "Hide Map Overview",
                NLS_maximize: "Maximize",
                NLS_restore: "Restore",
                NLS_noMap: "'map' not found in input parameters",
                NLS_noLayer: "main map does not have a base layer",
                NLS_invalidSR: "spatial reference of the given layer is not compatible with the main map",
                NLS_invalidType: "unsupported layer type. Valid types are 'TiledMapServiceLayer' and 'DynamicMapServiceLayer'"
            },
            timeSlider: {
                NLS_first: "First",
                NLS_previous: "Previous",
                NLS_next: "Next",
                NLS_play: "Play/Pause",
                NLS_invalidTimeExtent: "TimeExtent not specified, or in incorrect format."
            },
            mdSlider: {
                NLS_play: "Play/Pause"
            },
            attachmentEditor: {
                NLS_attachments: "Attachments:",
                NLS_add: "Add",
                NLS_none: "None",
                NLS_error: "There was an error.",
                NLS_fileNotSupported: "This file type is not supported."
            },
            directions: {
                error: {
                    notEnoughStops: "Enter an origin and a destination.",
                    unknownStop: "Location '\x3cname\x3e' could not be found.",
                    routeTask: "Unable to route to these addresses.",
                    locator: "Location could not be found.",
                    invalidStopType: "Invalid stop type",
                    locatorUndefined: "Unable to reverse geocode. Locator URL is undefined.",
                    noAddresses: "No addresses were returned.",
                    noStops: "No stops were given to be added.",
                    maximumStops: "The maximum number of stops has been reached",
                    cantFindRouteServiceDescription: "Route service description was not reached or recognized. Please check service URL and/or user credentials, if specified.",
                    maxWalkingDistance: "The distance between any inputs must be less than 50 miles (80 kilometers) when walking.",
                    nonNAmTruckingMode: "Calculating trucking routes outside of North and Central America is not currently supported.",
                    cantRemoveStop: "Failed to remove stop."
                },
                time: {
                    minute: "minute",
                    minutes: "minutes",
                    hour: "hour",
                    hours: "hours"
                },
                units: {
                    KILOMETERS: {
                        name: "kilometers",
                        abbr: "km"
                    },
                    METERS: {
                        name: "meters",
                        abbr: "m"
                    },
                    MILES: {
                        name: "miles",
                        abbr: "mi"
                    },
                    NAUTICAL_MILES: {
                        name: "nautical miles",
                        abbr: "nm"
                    }
                },
                travelMode: {
                    car: "By Car",
                    truck: "By Truck",
                    walking: "Walking"
                },
                impedance: {
                    fastest: "Fastest",
                    shortest: "Shortest"
                },
                unlocatedStop: "\x3cunknown location\x3e",
                showOptions: "Show more options",
                hideOptions: "Hide options",
                findOptimalOrder: "Optimize order",
                useTraffic: "Use traffic",
                returnToStart: "Return to start",
                addDestination: "Add destination",
                viewFullRoute: "Zoom to full route",
                getDirections: "Get Directions",
                clearDirections: "Clear",
                reverseDirections: "Reverse directions",
                activate: "Add destinations by clicking on the map",
                print: "Print",
                printNotes: "Enter notes here",
                printDisclaimer: "Directions are provided for planning purposes only and are subject to \x3ca href\x3d'http://www.esri.com/legal/software-license' target\x3d'_blank'\x3eEsri's terms of use\x3c/a\x3e. Dynamic road conditions can exist that cause accuracy to differ from your directions and must be taken into account along with signs and legal restrictions. You assume all risk of use.",
                retrievingMyLocation: "Retrieving location...",
                myLocationError: "Cannot retrieve location",
                setToMyLocation: "Use my current location",
                setToMyLocationTitle: "Depart from my current location",
                stopNoTitle: "Stop #"
            },
            editor: {
                tools: {
                    NLS_attributesLbl: "Attributes",
                    NLS_cutLbl: "Cut",
                    NLS_deleteLbl: "Delete",
                    NLS_extentLbl: "Extent",
                    NLS_freehandPolygonLbl: "Freehand Polygon",
                    NLS_freehandPolylineLbl: "Freehand Polyline",
                    NLS_pointLbl: "Point",
                    NLS_polygonLbl: "Polygon",
                    NLS_polylineLbl: "Polyline",
                    NLS_reshapeLbl: "Reshape",
                    NLS_selectionNewLbl: "New selection",
                    NLS_selectionAddLbl: "Add to selection",
                    NLS_selectionClearLbl: "Clear selection",
                    NLS_selectionRemoveLbl: "Subtract from selection",
                    NLS_selectionUnionLbl: "Union",
                    NLS_autoCompleteLbl: "Auto Complete",
                    NLS_unionLbl: "Union",
                    NLS_rectangleLbl: "Rectangle",
                    NLS_circleLbl: "Circle",
                    NLS_ellipseLbl: "Ellipse",
                    NLS_triangleLbl: "Triangle",
                    NLS_arrowLbl: "Arrow",
                    NLS_arrowLeftLbl: "Left Arrow",
                    NLS_arrowUpLbl: "Up Arrow",
                    NLS_arrowDownLbl: "Down Arrow",
                    NLS_arrowRightLbl: "Right Arrow",
                    NLS_undoLbl: "Undo",
                    NLS_redoLbl: "Redo"
                }
            },
            Search: {
                main: {
                    searchButtonTitle: "Search",
                    clearButtonTitle: "Clear search",
                    placeholder: "Find address or place",
                    searchIn: "Search in",
                    all: "All",
                    emptyValue: "Please enter a search term.",
                    untitledResult: "Untitled",
                    untitledSource: "Untitled source",
                    noResults: "No results",
                    noResultsFound: "There were no results found for ${value}.",
                    showMoreResults: "Show more results",
                    hideMoreResults: "Hide more results",
                    searchResult: "Search result",
                    moreResultsHeader: "More results",
                    esriLocatorName: "Esri World Geocoder"
                }
            },
            Geocoder: {
                main: {
                    clearButtonTitle: "Clear Search",
                    searchButtonTitle: "Search",
                    geocoderMenuButtonTitle: "Change Geocoder",
                    geocoderMenuHeader: "Search in",
                    geocoderMenuCloseTitle: "Close Menu",
                    untitledGeocoder: "Untitled geocoder"
                },
                esriGeocoderName: "Esri World Geocoder"
            },
            geocodeMatch: {
                match: {
                    mapAllCandidatesLabel: "Map All Suggestions",
                    defaultSortOrderLabel: "Default Sort Order",
                    tableOptionsLabel: "Options",
                    columnLabelAddress: "Address",
                    columnLabelType: "Type",
                    columnLabelScore: "Score",
                    noDataMsg: "No Results.",
                    userCreatedLabel: "User Created",
                    defaultMatchType: "DefaultMatch"
                },
                popup: {
                    noAddress: "No Address Found.",
                    matchButtonLabel: "Match",
                    discardButtonLabel: "Discard",
                    checkBoxLocation: "Location (X, Y)",
                    checkBoxAddress: "Suggested Address",
                    addressTitle: "Suggested Address",
                    optionsTitle: "Match Options:",
                    loadingPH: "Searching...",
                    locationTitle: "Location",
                    xTitle: "X: ",
                    yTitle: "Y: "
                },
                customLabel: "Custom",
                idProperty: "id",
                gridTitle: "Suggestions",
                matchedLC: "matched",
                matchedUC: "Matched",
                unmatchedLC: "unmatched",
                unmatchedUC: "Unmatched"
            },
            geocodeReview: {
                review: {
                    noDataMsg1: "No Unmatched Features",
                    noDataMsg2: "No Matched Features",
                    noDataMsg3: "No Reviewed Features",
                    columnOriginalLocation: "Original Location",
                    columnSelectedLocation: "Selected Location",
                    columnOriginalAddress: "Original Address",
                    columnSelectedAddress: "Selected Address"
                },
                customLabel: "Custom",
                unmatchedLC: "unmatched",
                matchedLC: "matched",
                unmatchedUC: "Unmatched",
                matchedUC: "Matched",
                totalUC: "Total",
                remainingUC: "Remaining",
                idProperty: "id",
                reviewedUC: "Reviewed",
                columnLabelAddress: "Address",
                of: "of",
                unmatchedTotal: "Unmatched (${count} Total)",
                unmatchedRemaining: "Unmatched (${count1} of ${count2} Remaining)",
                matchedTotal: "Matched (${count} Total)",
                reviewedTotal: "Reviewed (${count} Total)"
            },
            FeatureTable: {
                sortAsc: "Sort Ascending",
                sortDesc: "Sort Descending",
                defaultSort: "Default Sort Order",
                showSelected: "Show Selected Records",
                clearSelection: "Clear Selection",
                toggleColumns: "Show/Hide Columns"
            },
            HistogramTimeSlider: {
                count: "Count: ${count}",
                dateRange: "Date Range: ${start} - ${end}"
            },
            legend: {
                NLS_points: "Points",
                NLS_lines: "Lines",
                NLS_polygons: "Polygons",
                NLS_creatingLegend: "Creating legend",
                NLS_noLegend: "No legend",
                NLS_dotValue: "1 Dot \x3d ${value} ${unit}",
                NLS_currentObservations: "Current observations",
                NLS_previousObservations: "Previous observations",
                high: "High",
                low: "Low",
                NLS_esriMetersPerSecond: "m/s",
                NLS_esriKilometersPerHour: "km/h",
                NLS_esriKnots: "knots",
                NLS_esriFeetPerSecond: "ft/sec",
                NLS_esriMilesPerHour: "mph",
                showField: "Showing ${field}.",
                showNormField: "Showing ${field} divided by ${normField}.",
                showNormPct: "Showing ${field} as a percent of the total.",
                showOpField: "Showing ${field} with ${opField}.",
                showOpNormField: "Showing ${field} with ${opField} divided by ${opNormField}."
            },
            popup: {
                NLS_moreInfo: "More info",
                NLS_searching: "Searching",
                NLS_prevFeature: "Previous feature",
                NLS_nextFeature: "Next feature",
                NLS_close: "Close",
                NLS_prevMedia: "Previous media",
                NLS_nextMedia: "Next media",
                NLS_noInfo: "No information available",
                NLS_noAttach: "No attachments found",
                NLS_maximize: "Maximize",
                NLS_restore: "Restore",
                NLS_zoomTo: "Zoom to",
                NLS_pagingInfo: "(${index} of ${total})",
                NLS_attach: "Attachments"
            },
            measurement: {
                NLS_distance: "Distance",
                NLS_area: "Area",
                NLS_location: "Location",
                NLS_resultLabel: "Measurement Result",
                NLS_length_miles: "Miles",
                NLS_length_kilometers: "Kilometers",
                NLS_length_feet: "Feet",
                NLS_length_meters: "Meters",
                NLS_length_yards: "Yards",
                NLS_length_nautical_miles: "Nautical Miles",
                NLS_area_acres: "Acres",
                NLS_area_sq_miles: "Sq Miles",
                NLS_area_sq_kilometers: "Sq Kilometers",
                NLS_area_hectares: "Hectares",
                NLS_area_sq_yards: "Sq Yards",
                NLS_area_sq_feet: "Sq Feet",
                NLS_area_sq_meters: "Sq Meters",
                NLS_area_sq_nautical_miles: "Sq Nautical Miles",
                NLS_deg_min_sec: "DMS",
                NLS_decimal_degrees: "Degrees",
                NLS_map_coordinate: "Map Coordinate",
                NLS_longitude: "Longitude",
                NLS_latitude: "Latitude",
                NLS_MGRS: "MGRS",
                NLS_USNG: "USNG",
                NLS_UTM: "UTM",
                NLS_GeoRef: "GeoRef",
                NLS_GARS: "GARS",
                NLS_geometry_service_error: "Geometry Service Error",
                NLS_calculating: "Calculating..."
            },
            bookmarks: {
                NLS_add_bookmark: "Add Bookmark",
                NLS_new_bookmark: "Untitled",
                NLS_bookmark_edit: "Edit",
                NLS_bookmark_remove: "Remove"
            },
            print: {
                NLS_print: "Print",
                NLS_printing: "Printing",
                NLS_printout: "Printout"
            },
            textSymbolEditor: {
                symbolConfiguration: "Symbol Configuration",
                alignment: "Alignment",
                color: "Color"
            },
            scalebar: {
                km: "km",
                mi: "mi",
                ft: "ft",
                m: "m"
            },
            templatePicker: {
                creationDisabled: "Feature creation is disabled for all layers.",
                loading: "Loading.."
            },
            renderingRule: {
                rendererLabelTitle: "Renderer",
                bandCombinationLabelTitle: "RGB composite",
                userDefinedRendererTitle: "User Defined Renderer",
                userDefinedRendererDesc: "A user defined renderer. Use different bands for inputs to the Red, Green, and Blue channels (multi-band services only). Apply different radiometric enhancement algorithms to make image look better.",
                imageEnhancementLabelTitle: "Image Enhancement",
                stretchDescLabel: "Apply contrast enhancements to improve the image display.",
                stretchMethodLabel: "Stretch Type:",
                stretchMethodNoneDesc: "No additional enhancements applied.",
                stretchMethodMinMaxDesc: "Stretch to the entire range of pixel values.",
                numStdDevLabelTitle: "Trim extreme pixel values beyond",
                numStdDevEndLabelTitle: "standard deviations.",
                draLabelTitle: "Dynamic range adjustment",
                minMaxDescLabelTitle: "Trim extreme pixel values",
                minPercentLabelTitle: "Exclude bottom:",
                maxPercentLabelTitle: "Exclude top:",
                percentLabelTitle: "%",
                gammaLabelTitle: "Gamma:",
                bandNamesRequestMsg: "Requesting band information...",
                noneStretchAlias: "None",
                minMaxStretchAlias: "Minimum and Maximum",
                stdDevStretchAlias: "Standard Deviation",
                percentClipStretchAlias: "Percent Clip",
                minGammaLabel: "0.1",
                maxGammaLabel: "10"
            },
            vectorFieldRenderer: {
                symbolTypeLabelTitle: "Symbol:",
                simpleScalarLabelTitle: "Simple Scalar",
                simpleScalarDesc: "Symbolizes the magnitude of the data using graduated symbol sizes.",
                singleArrowLabelTitle: "Single Arrow",
                singleArrowDesc: "Symbolizes the magnitude and direction of flow with an arrow. The size of the arrow represents flow magnitude and the direction of the arrow indicates direction of flow.",
                windBarbsLabelTitle: "Wind Barbs",
                windBarbsDesc: "Symbolizes the magnitude and direction of wind using wind barbs. A long barb represents 10 knots, a short barb indicates 5 knots, and a black pennant represents 50 knots. The barb points to the direction where the wind originates.",
                beaufortLabelTitle: "Beaufort Wind Scale",
                beaufortDesc: "Symbolizes the magnitude and direction of wind using the Beaufort Wind Scale. The magnitude is categorized into levels 0 through 12, where 0 represents a calm wind (displayed in blue), and 12 represents a hurricane (red). The arrow points to the direction where the wind originates.",
                oceanCurrentKnotsLabelTitle: "Ocean Current (Nine classes)",
                oceanCurrentKnotsDesc: "Symbolizes the magnitude and direction of ocean current using nine predefined categories that range from 0 to 4 knots. The arrows point to the current direction of flow.",
                oceanCurrentMpsLabelTitle: "Ocean Current (Four classes)",
                oceanCurrentMpsDesc: "Symbolizes the magnitude and direction of ocean current using four predefined categories that range from 0 to 2 m/s. The arrows point to the current direction of flow.",
                classifiedArrowLabelTitle: "Classified Arrow",
                classifiedArrowDesc: "Symbolizes the magnitude and direction of flow, using categories calculated based on magnitude limits. Magnitude is represented using graduated symbol sizes and colors, ranging from green (low) to red (high).",
                dataTypeLabelTile: "Direction represents flow:",
                angleFromAlias: "From (Meteorological)",
                angleToAlias: "To (Oceanographic)",
                unitLabelTitle: "Convert magnitude ",
                outputUnitLabelTitle: "To: ",
                inputUnitLabelTitle: "From: ",
                symbolDensityLabelTitle: "Symbol density: ",
                sparseTileSizeAlias: "Sparse",
                denseTileSizeAlias: "Dense",
                symbolSizeLabelTitle: "Symbol scaling:",
                minSymbolSizeAlias: "Minimum",
                maxSymbolSizeAlias: "Maximum",
                advancedOptionsTitle: "Advanced Settings",
                magnitudeLabelTitle: "Magnitude",
                minAlias: "Minimum:",
                maxAlias: "Maximum:",
                invalidNumberMessage: "Please enter a numeric value.",
                dataValueRangeLabelTitle: "Symbol sizes represent magnitude range. Define magnitude range",
                applyLabelTitle: "Apply",
                esriMetersPerSecond: "m/s",
                esriKilometersPerHour: "km/h",
                esriKnots: "knots",
                esriFeetPerSecond: "ft/sec",
                esriMilesPerHour: "mph"
            },
            mosaicRule: {
                mosaicMethodLabel: "Prioritize imagery based on:",
                orderFieldLabel: "Attribute:",
                orderValueLabel: "Highest priority value:",
                lockRasterIdLabel: "Image IDs:",
                mosaicOperatorLabel: "Resolve overlapping pixels by:",
                descendingLabel: "Reverse the order",
                queryLabel: "Filter your images:",
                queryFieldLabel: "Field:",
                queryOperatorLabel: "Operator:",
                queryValueLabel: "Value:",
                selectAllLabel: "Select All",
                mosaicruleNotApplicable: "The image layer contains only one image and does not support changing image display order.",
                lockRasterRequestMsg: "Searching...",
                lockRasterRequestDoneMsg: "Done...",
                lockRasterRequestErrorMsg: "Error searching...",
                lockRasterRequestNoRasterMsg: "No rasters found...",
                refreshLockRasterIdsLabel: "Refresh",
                orderFieldNotFound: "Not Available",
                byAttributeAlias: "An attribute",
                centerAlias: "Image center closest to view center",
                lockRasterAlias: "A list of images",
                nadirAlias: "Sensor location closest to view center",
                northWestAlias: "Fixed order with most North West on top",
                seamlineAlias: "Defined Seamlines",
                viewPointAlias: "View point",
                noneAlias: "Only scale",
                firstAlias: "Only highest priority",
                lastAlias: "Only Lowest priority",
                minAlias: "Minimum of pixel values",
                maxAlias: "Maximum of pixel values",
                averageAlias: "Average of pixel values",
                blendAlias: "Blend pixel values"
            },
            multidimensionalFilter: {
                variableFilter: "Variable",
                filterByDimensionalValues: "Dimensions",
                fromTimeText: "Start Time:",
                toTimeText: "End Time:",
                fromNumericText: "From:",
                toNumericText: "To:",
                sliceTimeText: "Time:",
                sliceNumberText: "Value:",
                rangeText: "Define a range",
                defaultVariableText: "Default",
                dateSnapText: "Snapped to closest date",
                numSnapText: "Snapped to closest value",
                disabledNumericDimensionText: "*Disabled because dimension slider is active.",
                disabledTimeDimensionText: "*Disabled because time slider is active.",
                applyLabelTitle: "Apply"
            },
            tags: {
                addTags: "Add tag(s)",
                noTagsFound: "No existing tags match."
            },
            rendererSlider: {
                statsAvg: "Average : ${avg}",
                high: "High",
                low: "Low",
                color: {
                    changeMinMaxToolTIp: "Type in a value.",
                    handleToolTip: "Match data values to colors.",
                    maxValueToolTip: "Type in the largest expected data value.",
                    minValueToolTip: "Type in the smallest expected data value.",
                    changeSymbol: "Change symbol"
                },
                size: {
                    handleToolTip: "Match data values to symbol size.",
                    sizeInputBoxLines: "Set line thickness from 0 to 18 pixels.",
                    sizeInputBoxPoints: "Set symbol size from 1 to 120 pixels"
                }
            }
        },
        arcgis: {
            utils: {
                baseLayerError: "Unable to load the base map layer",
                geometryServiceError: "Provide a geometry service to open Web Map.",
                showing: "Showing ${fieldAlias}"
            }
        },
        identity: {
            lblItem: "item",
            title: "Sign In",
            info: "Please sign in to access the item on ${server} ${resource}",
            lblUser: "Username:",
            lblPwd: "Password:",
            lblOk: "OK",
            lblSigning: "Signing in...",
            lblCancel: "Cancel",
            errorMsg: "Invalid username/password. Please try again.",
            invalidUser: "The username or password you entered is incorrect.",
            forbidden: "The username and password are valid, but you don't have access to this resource.",
            noAuthService: "Unable to access the authentication service."
        },
        common: {
            cancel: "Cancel",
            ok: "OK",
            create: "Create",
            close: "Close",
            done: "Done",
            apply: "Apply",
            remove: "Remove",
            open: "Open",
            edit: "Edit",
            share: "Share",
            save: "Save",
            help: "Help",
            warning: "Warning",
            deleteLabel: "Delete",
            titleLabel: "Title:",
            newLabel: "New",
            arcgis: "ArcGIS",
            previous: "Previous",
            submit: "Submit",
            next: "Next",
            yesLabel: "Yes",
            noLabel: "No",
            errorTitle: "Error",
            upload: "Upload",
            sum: "Sum",
            minimum: "Minimum",
            maximum: "Maximum",
            average: "Average",
            standardDev: "Std Deviation",
            statistic: "Statistic",
            attribute: "Field",
            selectAttribute: "Select attribute",
            runAnalysis: "Run Analysis",
            oneLabel: "1.",
            twoLabel: "2.",
            threeLabel: "3.",
            fourLabel: "4.",
            fiveLabel: "5.",
            sixLabel: "6.",
            sevenLabel: "7.",
            eightLabel: "8.",
            outputnameMissingMsg: "Output name is required",
            miles: "Miles",
            kilometers: "Kilometers",
            meters: "Meters",
            feet: "Feet",
            degree: "Decimal Degree(s)",
            inches: "Inch(es)",
            nautMiles: "Nautical Miles",
            pointsUnit: "Point(s)",
            yards: "Yards",
            comingSoonLabel: "Coming Soon!",
            sqMiles: "Square Miles",
            sqFeet: "Square Feet",
            sqKm: "Square Kilometers",
            sqMeters: "Square Meters",
            hectares: "Hectares",
            acres: "Acres",
            seconds: "Seconds",
            minutes: "Minutes",
            hours: "Hours",
            today: "Today",
            monday: "Monday",
            tuesday: "Tuesday",
            wednesday: "Wednesday",
            thursday: "Thursday",
            friday: "Friday",
            saturday: "Saturday",
            sunday: "Sunday",
            chooseSummarizeLabel: "Choose layer to summarize",
            creditTitle: "Credit Usage Report",
            analysisLayers: "Analysis layers:",
            showCredits: "Show credits",
            learnMore: "Learn More",
            hoursSmall: "hr",
            minutesSmall: "min",
            secondsSmall: "sec",
            statsRequiredMsg: "At least one of the statistics parameters is required.",
            nowLabel: "Now",
            hrsLabel: "hrs",
            groupLabel: "Group",
            ungroupLabel: "Ungroup",
            and: "and",
            or: "or",
            add: "Add",
            polygons: "Polygons",
            points: "Points",
            lines: "Lines",
            input: "Input",
            areas: "Areas",
            validateRouteIdMsg: "Layers must have the same number of records, or one layer must have one record only.",
            straightLineDistance: "Line distance",
            outputLabel: "Output:",
            addPoint: "Click to add a point",
            movePoint: "Click to move the point",
            selectAll: "Select All",
            unselectAll: "Unselect All",
            selectLabel: "Select",
            queryLabel: "Query",
            drawnBoundary: "Drawn Boundary",
            basic: "Basic",
            intermediate: "Intermediate",
            advanced: "Advanced",
            majority: "Majority",
            minority: "Minority",
            addMinMajorityLable: "Add minority, majority",
            addPercentageLabel: "Add percentages",
            drivingMode: "Driving",
            truckingMode: "Trucking",
            walkingMode: "Walking",
            distanceMsg: "Only numeric values are allowed"
        },
        analysisTools: {
            performAnalysis: "Perform Analysis",
            summarizeData: "Summarize Data",
            findLocations: "Find Locations",
            aggregateTool: "Aggregate Points",
            bufferTool: "Buffer Data",
            dataEnrichment: "Data Enrichment",
            analyzePatterns: "Analyze Patterns",
            useProximity: "Use Proximity",
            manageData: "Manage Data",
            aggregateToolName: "Aggregate Points",
            bufferToolName: "Create Buffers",
            aggregatePoints: "Aggregate Points",
            summarizeWithin: "Summarize Within",
            summarizeNearby: "Summarize Nearby",
            enrichLayer: "Enrich Layer",
            findNearest: "Find Nearest",
            findHotSpots: "Find Hot Spots",
            createBuffers: "Create Buffers",
            dissolveBoundaries: "Dissolve Boundaries",
            mergeLayers: "Merge Layers",
            extractData: "Extract Data",
            overlayLayers: "Overlay Layers",
            fieldCalculator: "Field Calculator",
            createDriveTimeAreas: "Create Drive-Time Areas",
            deriveNewLocations: "Derive New Locations",
            findExistingLocations: "Find Existing Locations",
            findSimilarLocations: "Find Similar Locations",
            exploreCorrelations: "Explore Correlations",
            findRoute: "Find Route",
            generateFleetPlan: "Generate Fleet-routing plan",
            createDensitySurface: "Create density surface",
            interpolatePoints: "Interpolate Points",
            orgUsrMsg: "You must be a member of an organization to run this service.",
            pubRoleMsg: "Your online account has not been assigned to the Publisher role.",
            servNameExists: "A result layer already exists with this name. Result layers must be named uniquely across the organization. Please use a different name.",
            outputLayerLabel: "Result layer name",
            outputFileName: "Output file name",
            emptyResultInfoMsg: "The result of your analysis did not return any features. No layer will be created.",
            invalidServiceName: 'The result layer name contains one or more invalid characters (\x3c, \x3e, #, %, :, ", ?, \x26, +, /, or \\).',
            invalidServiceNameLength: "The result layer name length should be less than 98 characters.",
            requiredValue: "This value is required.",
            saveResultIn: "Save result in",
            useMapExtent: "Use current map extent",
            connectOriginsToDestinations: "Connect Origins to Destinations",
            planRoutes: "Plan Routes",
            calculateDensity: "Calculate Density",
            traceDownstream: "Trace Downstream",
            createWatershed: "Create Watersheds",
            createViewshed: "Create Viewshed"
        },
        aggregatePointsTool: {
            aggregateDefine: "Count \x3cb\x3e${layername}\x3c/b\x3e within",
            outputLayerName: "Aggregation of ${pointlayername} to ${polygonlayername}",
            groupByLabel: "Choose field to group by (optional)",
            itemDescription: "Feature Service generated from running the Aggregate Points solutions. Points from ${pointlayername} were aggregated to ${polygonlayername}",
            itemTags: "Analysis Result, Aggregate Points, ${pointlayername}, ${polygonlayername}",
            itemSnippet: "Analysis Feature Service generated from Aggregate Points",
            removeAttrStats: "Remove Attribute Statistics",
            keepPolygonLabel: "Keep areas with no points",
            addStatsLabel: "Add statistic (optional)",
            chooseAreaLabel: "Choose area"
        },
        findHotSpotsTool: {
            hotspotsPolyDefine: "Analyze \x3cb\x3e${layername}\x3c/b\x3e  to find statistically significant hot and cold spots of ",
            hotspotsPointDefine: "Analyze \x3cb\x3e${layername}\x3c/b\x3e  to find statistically significant hot and cold spots ",
            fieldLabel: "with or without an analysis field",
            noAnalysisField: "No Analysis Field",
            hotspots: "Hot Spots",
            outputLayerName: "Hot Spots ${layername}",
            Options: "Options",
            defineBoundingLabel: "Define where incidents are possible",
            provideAggLabel: "Provide aggregation areas for summing incidents",
            defaultBoundingOption: "Select bounding areas",
            defaultAggregationOption: "Select aggregation areas",
            itemDescription: "Feature Service generated from running the Find Hot Spots solution.",
            itemTags: "Analysis Result, Hot Spots, ${layername}, ${fieldname}",
            itemSnippet: "Analysis Feature Service generated from Find Hot Spots",
            chooseAttributeLabel: "Choose an analysis field",
            blayerName: "Drawn Boundaries"
        },
        overlayLayersTool: {
            overlayDefine: "Overlay \x3cb\x3e${layername}\x3c/b\x3e with",
            chooseOverlayLayer: "Choose overlay layer",
            chooseOverlayMethod: "Choose overlay method",
            chooseOutputType: "Choose output type",
            itemDescription: "Feature Service generated from running the Overlay layers solution.",
            itemTags: "Analysis Result, Overlay layers, ${layername}",
            itemSnippet: "Analysis Feature Service generated from Overlay layers",
            unionOutputLyrName: "Union of ${layername} and ${overlayname}",
            intersectOutputLyrName: "Intersect of ${layername} and ${overlayname}",
            eraseOutputLyrName: "Erase ${layername} with ${overlayname}",
            overlayLayerPolyMsg: "The Overlay layer should be a Polygon Layer for Union overlay",
            notSupportedEraseOverlayMsg: "This Overlay layer is not supported for Erase overlay. Defaults to Intersect overlay.",
            intersect: "Intersect",
            union: "Union",
            erase: "Erase"
        },
        bufferTool: {
            bufferDefine: "Create buffers from \x3cb\x3e${layername}\x3c/b\x3e",
            outputLayerName: "Buffer of ${layername}",
            sizeLabel: "Enter buffer size",
            sizeHelp: "To create multiple buffers, enter distances separated by spaces (2 3 5).",
            typeLabel: "Buffer type",
            resultLabel: "Result layer name",
            optionsLabel: "Options",
            itemDescription: "Feature Service generated from running the Buffer Features solution. Input from ${layername} were buffered by ${distance_field} ${units}",
            itemTags: "Analysis Result, Buffer, ${layername}",
            itemSnippet: "Analysis Feature Service generated from Buffer",
            overlap: "Overlap",
            dissolve: "Dissolve",
            include: "Include",
            exclude: "Exclude",
            around: "Around",
            sideType: "Side type",
            endType: "End type",
            left: "Left",
            right: "Right",
            round: "Round",
            flat: "Flat",
            multipleDistance: "Multiple distance buffers should be",
            rings: "Rings",
            disks: "Disks",
            areaofInputPoly: "Area of input polygons in buffer polygons",
            distance: "Distance",
            field: "Field"
        },
        driveTimes: {
            toolDefine: "Create areas around \x3cb\x3e${layername}\x3c/b\x3e",
            outputLayerName: "Drive from ${layername} (${breakValues} ${breakUnits})",
            outputModeLayerName: "${mode} from ${layername} (${breakValues} ${breakUnits})",
            driving: "Drive",
            trucking: "Truck",
            walking: "Walk",
            measureLabel: "Measure",
            measureHelp: "To output multiple areas for each point, type sizes separated by spaces (2 3.5 5).",
            areaLabel: "Areas from different points",
            trafficLabel: "Use traffic",
            typicalTraffCdtnLabel: "Traffic based on typical conditions for",
            resultLabel: "Result layer name",
            liveTrafficLabel: "Live traffic",
            itemDescription: "Feature Service generated from running the Create Drive Times solution.",
            itemTags: "Analysis Result, Drive Times, ${layername}",
            itemSnippet: "Analysis Feature Service generated from Create Drive Times",
            split: "Split",
            seeAvailability: "See availability.",
            timeOfDeparture: "Time of departure",
            drivingDistance: "Driving Distance",
            drivingTime: "Driving Time",
            truckingTime: "Trucking Time",
            truckingDistance: "Trucking Distance",
            walkingDistance: "Walking Distance",
            walkingTime: "Walking Time",
            liveSingularTimeLabel: "Live traffic +1 hr ${minute} min",
            liveSingularHourTimeLabel: "Live traffic +1 hr",
            liveTimeLabel: "Live traffic +${hour} hr ${minute} min",
            liveTimeHoursLabel: "Live traffic +${hour} hr",
            liveTimeMinutesLabel: "Live traffic +${minute} min"
        },
        routeOriginDestinationPairsTool: {
            toolDefine: "Route between pairs of points originating from \x3cb\x3e${layername}\x3c/b\x3e",
            labelOne: "Route to destinations in",
            pairPoints: "Points with matching IDs will connect:",
            originTripId: "ID field in origins",
            destnTripId: "Matching ID field in destinations",
            includeSegments: "Include individual road segments.",
            inValidNumberRecordsMsg: "Layers must have the same number of records, or one layer must have one record only.",
            outputLayerName: "${layername} to ${destnlayername}",
            itemDescription: "Feature Service generated from running the Connect Origins to Destinations solution.",
            itemTags: "Analysis Result, Connect Origins to Destinations, ${layername}, ${destnlayername}",
            itemSnippet: "Analysis Feature Service generated from Connect Origins to Destinations"
        },
        planRoutesTool: {
            toolDefine: "Route vehicles to stops in \x3cb\x3e${layername}\x3c/b\x3e",
            timeSpentLabel: "Time spent at each stop",
            defineRoutesLabel: "Define routes",
            startRoutesLabel: "Routes begin at",
            endRoutesLabel: "Routes end at",
            routes: "Routes",
            stops: "Stops",
            numRoutes: "Maximum number of vehicles to route",
            maxPtsRoute: "Maximum number of stops per vehicle",
            limitMaxTime: "Limit the total route time per vehicle",
            returnToStart: "Return to start",
            specifyStartTime: "Start time for all routes",
            createStartLoc: "Add point to map",
            createEndLoc: "Add point to map",
            selectStartLoc: "Select starting location",
            selectEndLoc: "Select ending location",
            vehicles: "Vehicles",
            routeId: "Route ID field",
            selectRouteId: "Select RouteID",
            stopsLabel: "Your layer has ${numStops} stops.",
            stopsLabelByExtent: "The current map extent shows ${numStops} stops.",
            outputLayerName: "Routes to ${layername}",
            itemDescription: "Feature Service generated from running the Plan Routes solution.",
            itemTags: "Analysis Result, Plan Routes, ${layername}",
            itemSnippet: "Analysis Feature Service generated from Plan Routes",
            startEndPtsValidMsg: "Start or end points not set",
            travelModeLabel: "Travel mode for routes"
        },
        extractDataTool: {
            layersToExtract: "Layers to extract",
            studyArea: "Study area",
            outputDataFormat: "Output data format",
            filegdb: "File Geodatabase (.zip)",
            shpFile: "Shapefile (.zip)",
            lyrpkg: "Layer Package (.lpk)",
            selectFtrs: "Select features",
            clipFtrs: "Clip features",
            sameAsDisplay: "Same as Display",
            sameAsLayer: "Same as ${layername}",
            outputfileName: "Extract Data ${datetime}",
            itemDescription: "File generated from running the Extract Data solution.",
            itemTags: "Analysis Result, Extract Data",
            itemSnippet: "Analysis File item generated from Extract Data",
            kml: "KML (.kmz or .zip)",
            csvPoints: "CSV (.csv or .zip)  ",
            linesCSVValidationMsg: "Line and area layers cannot be extracted to CSV.  Choose a different format or uncheck all line and area layers.",
            runAnalysisMsg: "Data is being extracted and will be available in My Content."
        },
        summarizeWithinTool: {
            summarizeDefine: "For Features within \x3cb\x3e${sumWithinLayerName}\x3c/b\x3e",
            outputLayerName: "Summarize ${summaryLayerName} within ${sumWithinLayerName}",
            groupByLabel: "Choose field to group by (optional)",
            itemDescription: "Feature Service generated from running the Summarize Within solution. ${summaryLayerName} were summarized within ${sumWithinLayerName}",
            itemTags: "Analysis Result, Summarize Within, ${sumWithinLayerName}, ${summaryLayerName}",
            itemSnippet: "Analysis Feature Service generated from Summarize Within",
            removeAttrStats: "Remove Attribute Statistics",
            summarizeMetricPoint: "Count of points",
            summarizeMetricLine: "Length of lines in",
            summarizeMetricPoly: "Sum Area in",
            addStatsLabel: "Attribute statistics",
            addStats: "Add statistics from \x3cb\x3e${summaryLayerName}\x3c/b\x3e",
            sumLabel: "Summarize"
        },
        summarizeNearbyTool: {
            summarizeDefine: "Summarize what is nearby \x3cb\x3e${sumNearbyLayerName}\x3c/b\x3e",
            findNearLabel: "Summarize nearest features using a",
            outputLayerName: "Summarize ${summaryLayerName} in ${sumNearbyLayerName}",
            groupByLabel: "Choose field to group by (optional)",
            itemDescription: "Feature Service generated from running the Summarize Nearby solution. ${sumNearbyLayerName} were summarized nearby ${summaryLayerName}",
            itemTags: "Analysis Result, Summarize Nearby, ${sumNearbyLayerName}, ${summaryLayerName}",
            itemSnippet: "Analysis Feature Service generated from Summarize Nearby",
            removeAttrStats: "Remove Attribute Statistics",
            summarizeMetricPoint: "Count of points",
            summarizeMetricLine: "Total Length",
            summarizeMetricPoly: "Total Area",
            addStatsLabel: "Attribute statistics",
            addStats: "Add statistics from \x3cb\x3e${summaryLayerName}\x3c/b\x3e",
            sumLabel: "Summarize",
            chooseLayer: "Choose layer to summarize",
            returnBdrycCheckLabel: "Return bounding areas"
        },
        creditEstimator: {
            analysisLayersLabel: "Analysis layers:",
            totalRecordsLabel: "Total records:",
            creditsAvailLabel: "Credits available:",
            creditsReqLabel: "Credits required:",
            ntwCreditsReqLabel: "Network credits required:",
            EnrichCreditsLabel: "Enrichment credits required"
        },
        enrichLayerTool: {
            selectCountryLabel: "Select country",
            enrichDefine: "Enrich \x3cb\x3e${inputLayerName}\x3c/b\x3e",
            chooseDataCollectionLabel: "Show available data for:",
            defAreasLabel: "Define areas to enrich",
            outputLayerName: "Enriched ${layername}",
            itemDescription: "Feature Service generated from running the Enrich layer solution. ${inputLayerName} were enriched",
            itemTags: "Analysis Result, Enrich Layer, ${inputLayerName}",
            itemSnippet: "Analysis Feature Service generated from Enrich layer",
            straightLineDistance: "Line distance",
            selectDataVar: "Select Variables",
            clickDataVar: "Click Select Variables to open Data Browser and browse for variables",
            selectedVars: "Selected Variables",
            usCountryCode: "United States",
            canadaCountryCode: "Canada",
            albaniaCountryCode: "Albania",
            australiaCountryCode: "Australia",
            austriaCountryCode: "Austria",
            bahrainCountryCode: "Bahrain",
            belarusCountryCode: "Belarus",
            bosniaCountryCode: "Bosnia and Herzegovina",
            botswanaCountryCode: "Botswana",
            belgiumCountryCode: "Belgium",
            brazilCountryCode: "Brazil",
            bulgariaCountryCode: "Bulgaria",
            chinaCountryCode: "China",
            colombiaCountryCode: "Colombia",
            croatiaCountryCode: "Croatia",
            cyprusCountryCode: "Cyprus",
            czechCountryCode: "Czech Republic",
            coteCountryCode: "Cote d'Ivoire",
            denmarkCountryCode: "Denmark",
            finlandCountryCode: "Finland",
            franceCountryCode: "France",
            germanyCountryCode: "Germany",
            ghanaCountryCode: "Ghana",
            greeceCountryCode: "Greece",
            hungaryCountryCode: "Hungary",
            icelandCountryCode: "Iceland",
            indiaCountryCode: "India",
            indonesiaCountryCode: "Indonesia",
            irelandCountryCode: "Ireland",
            israelCountryCode: "Israel",
            italyCountryCode: "Italy",
            japanCountryCode: "Japan",
            kazakhstanCountryCode: "Kazakhstan",
            kenyaCountryCode: "Kenya",
            latviaCountryCode: "Latvia",
            liechtensteinCountryCode: "Liechtenstein",
            lithuaniaCountryCode: "Lithuania",
            luxembourgCountryCode: "Luxembourg",
            malawiCountryCode: "Malawi",
            malaysiaCountryCode: "Malaysia",
            maltaCountryCode: "Malta",
            mauritiusCountryCode: "Mauritius",
            mexicoCountryCode: "Mexico",
            moldovaCountryCode: "Moldova",
            montenegroCountryCode: "Montenegro",
            mozambiqueCountryCode: "Mozambique",
            namibiaCountryCode: "Namibia",
            netherlandsCountryCode: "Netherlands",
            nzCountryCode: "New Zealand",
            nigeriaCountryCode: "Nigeria",
            norwayCountryCode: "Norway",
            peruCountryCode: "Peru",
            polandCountryCode: "Poland",
            portugalCountryCode: "Portugal",
            puertoCountryCode: "Puerto Rico",
            romaniaCountryCode: "Romania",
            reunionCountryCode: "Reunion",
            spainCountryCode: "Spain",
            switzerlandCountryCode: "Switzerland",
            swedenCountryCode: "Sweden",
            turkeyCountryCode: "Turkey",
            ukCountryCode: "United Kingdom",
            zmCountryCode: "Zambia",
            ugandaCountryCode: "Uganda",
            mkCountryCode: "The Former Yugoslav Republic of Macedonia",
            uaeCountryCode: "United Arab Emirates",
            thCountryCode: "Thailand",
            twCountryCode: "Taiwan",
            szCountryCode: "Swaziland",
            krCountryCode: "South Korea",
            siCountryCode: "Slovenia",
            sgCountryCode: "Singapore",
            rsCountryCode: "Serbia",
            saCountryCode: "Saudi Arabia",
            tzCountryCode: "Tanzania",
            ukrCountryCode: "Ukraine",
            globalCode: "Global",
            russiaCountryCode: "Russia",
            algCountryCode: "Algeria",
            andCountryCode: "Andorra",
            argCountryCode: "Argentina",
            azCountryCode: "Azerbaijan",
            baCountryCode: "Bangladesh",
            chCountryCode: "Chile",
            coCountryCode: "Costa Rica",
            egCountryCode: "Egypt",
            elCountryCode: "El Salvador",
            eeCountryCode: "Estonia",
            grCountryCode: "Georgia",
            gtCountryCode: "Guatemala",
            hoCountryCode: "Honduras",
            joCountryCode: "Jordan",
            kwCountryCode: "Kuwait",
            kzCountryCode: "Kyrgyzstan",
            lbCountryCode: "Lebanon",
            leCountryCode: "Lesotho",
            mgCountryCode: "Mongolia",
            moCountryCode: "Morocco",
            niCountryCode: "Nicaragua",
            omCountryCode: "Oman",
            pkCountryCode: "Pakistan",
            phCountryCode: "Philippines",
            qaCountryCode: "Qatar",
            slCountryCode: "Slovakia",
            safCountryCode: "South Africa",
            sriCountryCode: "Sri Lanka",
            sdCountryCode: "Sudan",
            tnCountryCode: "Tunisia",
            ugCountryCode: "Uruguay",
            syCountryCode: "Syria",
            vzCountryCode: "Venezuela",
            vtCountryCode: "Vietnam",
            keyGlobalFacts: "Key Global Facts",
            age: "Age",
            husByOccupancy: "Housing Units By Occupancy",
            householdsByIncome: "Households by Income",
            keyUSFacts: "Key US Facts",
            policy: "Policy Facts",
            raceAndEthnicity: "Race And Ethnicity",
            wealth: "Wealth Facts",
            keyCanFacts: "Key Canada Facts",
            aTSpend: "Austria Spending",
            aTFacts: "Austria Facts",
            bESpend: "Belgium Spending",
            bEFacts: "Belgium Facts",
            bRSpend: "Brazil Spending",
            bRFacts: "Brazil Facts",
            dKSpend: "Denmark Spending",
            dKFacts: "Denmark Facts",
            fISpend: "Finland Spending",
            fIFacts: "Finland Facts",
            fRSpend: "France Spending",
            fRFacts: "France Facts",
            dESpend: "Germany Spending",
            dEFacts: "Germany Facts",
            gRSpend: "Greece Spending",
            gRFacts: "Greece Facts",
            iEFacts: "Ireland Facts",
            iESpend: "Ireland Spending",
            iNFacts: "India Facts",
            iNSpend: "India Spending",
            iTFacts: "Italy Facts",
            iTSpend: "Italy Spending",
            keyWEFacts: "Key Western Europe Facts",
            keyWESpend: "Key Western Europe Spending",
            jPFacts: "Japan Facts",
            jPSpend: "Japan Spending",
            lIFacts: "Liechtenstein Facts",
            lISpend: "Liechtenstein Spending",
            lUFacts: "Luxembourg Facts",
            lUSpend: "Luxembourg Spending",
            nLFacts: "Netherlands Facts",
            nLSpend: "Netherlands Spending",
            nOFacts: "Norway Facts",
            nOSpend: "Norway Spending",
            pTFacts: "Portugal Facts",
            pTSpend: "Portugal Spending",
            eSSpend: "Spain Spending",
            eSFacts: "Spain Facts",
            sEFacts: "Sweden Facts",
            sESpend: "Sweden Spending",
            cHFacts: "Switzerland Facts",
            cHSpend: "Switzerland Spending",
            tRFacts: "Turkey Facts",
            tRSpend: "Turkey Spending",
            gBFacts: "United Kingdom Facts",
            gBSpend: "United Kigdom Spending",
            tapestry: "Tapestry",
            infrastructure: "Infrastructure",
            landCover: "Land Cover",
            landscapeFacts: "Landscape Facts",
            publicLands: "Public Lands",
            soils: "Soils",
            waterWetlands: "Water Wetlands",
            rUFacts: "Russia Facts",
            rUSpend: "Russia Spending"
        },
        dissolveBoundaries: {
            dissolveBoundariesDefine: "Dissolve \x3cb\x3e${layername}\x3c/b\x3e",
            chooseDissolveLabel: "Choose dissolve method",
            overlappingAreasLabel: "Areas that overlap or are adjacent",
            sameAttributeAreasLabel: "Areas with same field value",
            summarizeLabel: "Add statistic (optional)",
            itemDescription: "Feature Service generated from running the Dissolve Boundaries solution.",
            itemTags: "Analysis Result, Dissolve Boundaries, ${layername}",
            itemSnippet: "Analysis Feature Service generated from Dissolve Boundaries",
            resultLabel: "Result layer name",
            outputLayerName: "Dissolve ${layername}"
        },
        FindNearestTool: {
            summarizeDefine: "For each location in \x3cb\x3e${sumNearbyLayerName}\x3c/b\x3e, find its nearest locations.",
            findNearLabel: "Find the nearest locations by measuring",
            outputLayerName: "Nearest ${layer} to ${sumNearbyLayerName}",
            groupByLabel: "Choose field to group by (optional)",
            itemDescription: "Feature Service generated from running the Find Nearest solution. Nearest ${sumNearbyLayerName}",
            itemTags: "Analysis Result, Find Nearest, ${sumNearbyLayerName}, ${summaryLayerName}",
            itemSnippet: "Analysis Feature Service generated from Find Nearest",
            removeAttrStats: "Remove Attribute Statistics",
            forEachLocationLabel: "For each location in \x3cb\x3e${sumNearbyLayerName}\x3c/b\x3e",
            findNearestLabel: "Limit the number of nearest locations to:",
            limitSearchRangeCheck: "Limit the search range to",
            addStats: "For each location in \x3cb\x3e${summaryLayerName}\x3c/b\x3e",
            chooseLayer: "Choose a layer",
            findLocationsIn: "Find the nearest locations in:",
            outputLayersLabel: "Result layer names",
            straightLineDistance: "Line distance",
            resultLabel1: "Nearest locations layer",
            resultLabel2: "Connecting lines layer",
            outputConnectingLayerName: "Nearest ${layer} to ${sumNearbyLayerName} (Lines)",
            chooseLayerInfoLabel: "Both input layers must contain points to enable Driving distance and Driving time options"
        },
        mergeLayers: {
            mergeLayersDefine: "Merge \x3cb\x3e${layername}\x3c/b\x3e with",
            outputLayerName: "Merge ${layername} ${mergelayername}",
            chooseMergeLayer: "Choose layer",
            mergeFieldsLabel: "Modify merging fields (optional)",
            itemDescription: "Feature Service generated from running the Merge Layers solution.",
            itemTags: "Analysis Result, Merge Layers, ${layername}",
            itemSnippet: "Analysis Feature Service generated from Merge Layers",
            resultLabel: "Result layer name",
            rename: "Rename",
            remove: "Remove",
            match: "Match",
            operation: "Operation",
            fieldTypeMatchValidationMsg: "Fields to be matched must have the same type.  Transformation of types is supported (for example, double to integer, integer to string) except for string to numeric."
        },
        findExistingLocations: {
            findExpLabel: "Find the \x3cb\x3e${analysisLayerName}\x3c/b\x3e features that match the following expression(s)",
            outputLayerName: "Find Locations in ${analysisLayerName}",
            itemDescription: "Feature Service generated from running the Find Existing Locations solutions for  ${analysisLayerName}.",
            itemTags: "Analysis Result, Find Existing Locations, ${analysisLayerName}",
            itemSnippet: "Analysis Feature Service generated from Find Existing Locations"
        },
        deriveNewLocations: {
            findExpLabel: "Derive new locations that match the following expression(s)",
            outputLayerName: "New Locations",
            itemDescription: "Feature Service generated from running the Derive New Locations solutions.",
            itemTags: "Analysis Result, Derive New Locations, ${analysisLayerName}",
            itemSnippet: "Analysis Feature Service generated from Find Existing Locations"
        },
        findSimilarLocations: {
            toolDefine: "Find locations that are similar to: \x3cb\x3e${layername}\x3c/b\x3e",
            labelOneText: "You may use all locations or make a selection",
            labelTwoText: "Search for similar locations in",
            labelThreeText: "Base similarity on",
            labelFourText: "Show me:",
            outputLayerName: "Most Similar ${analysisLayerName}",
            selectTargetFtrs: "Select one or more target features",
            useAllFtrs: "Use all features",
            itemDescription: "Feature Service generated from running the Find Similar Locations solutions for  ${analysisLayerName}.",
            itemTags: "Analysis Result, Find Similar Locations, ${analysisLayerName}",
            itemSnippet: "Analysis Feature Service generated from Find Similar Locations",
            allResults: "all locations from most to least similar",
            justShowTop: "the top",
            selectSearchLayer: "Select the search layer",
            query: "Query",
            noFieldMatchMsg: "Search layer and input layer do not have any fields in common.",
            reqSelectionMsg: "You must select the feature(s) to match by making an interactive selection or by constructing a query.",
            selectedFeaturesLabel: "${total} feature(s) selected"
        },
        expressionGrid: {
            addExpr: "Add Expression",
            expression: "Expression",
            editExpr: "Edit Expression",
            viewText: "View Text",
            viewGrid: "View Grid",
            addExprDescription: "Click Add Expression to begin building your query.",
            duplicateExpression: "This Expression already exists"
        },
        expressionForm: {
            where: "where (attribute query)",
            whereLabel: "where",
            intersects: "intersects",
            notIntersects: "does not intersect",
            withinDistance: "within a distance of",
            notWithinDistance: "not within a distance of",
            contains: "completely contains",
            notContains: "does not completely contain",
            completelyContains: "completely contains",
            notCompletelyContains: "does not completely contain",
            within: "completely within",
            notWithin: "not completely within",
            completelyWithin: "completely within",
            notCompletelyWithin: "not completely within",
            identical: "are identical to",
            notIdentical: "are not identical to",
            touches: "touches",
            notTouches: "does not touch",
            crossesOutline: "crossed by the outline of",
            notCrossesOutline: "not crossed by the outline of",
            from: "from",
            inValidAttributeFilterMessage: "Layer ${layername} does not contain any attributes that can be used in an attribute query."
        },
        interpolatePointsTool: {
            toolDefine: "Interpolate values from \x3cb\x3e${layername}\x3c/b\x3e",
            outputLayerName: "${layername} Prediction",
            interpolationMethod: "Interpolation method",
            optimizeFor: "Optimize for",
            selectAttributesLabel: "Choose field to interpolate",
            classifyLabel: "Classify by",
            classesCountLabel: "Number of classes",
            equalInterval: "Equal Interval",
            manual: "Manual",
            quantile: "Equal Area",
            geometricInterval: "Geometric Interval",
            outputPredictionErrors: "Output prediction errors",
            interpolateWithin: "Clip output to",
            predictLocLabel: "Predict at these locations",
            choosePointLayer: "Choose point layer",
            pointlayerName: "Drawn Prediction Points",
            classBreakValues: "Class break values",
            defaultBoundingOption: "Choose study area",
            classBreaksHelp: "Enter break values spearated by spaces: (10 20 30)",
            itemDescription: "Feature Service generated from running the Interpolate Points solution.",
            itemTags: "Analysis Result, Interpolate Points, ${layername}, ${fieldname}",
            itemSnippet: "Analysis Feature Service generated from Interpolate Points",
            speed: "Speed",
            accuracy: "Accuracy"
        },
        calculateDensityTool: {
            toolDefine: "Calculate density values from \x3cb\x3e${layername}\x3c/b\x3e",
            selectAttributesLabel: "Use a count field (optional)",
            outputAerealUnits: "Output area units",
            itemDescription: "Feature Service generated from running the Calculate Density solution.",
            itemTags: "Analysis Result, Calculate Density, ${layername}, ${fieldname}",
            itemSnippet: "Analysis Feature Service generated from Calculate Density",
            outputLayerName: "${layername} Density",
            searchDistance: "Search Distance",
            naturalBreaks: "Natural Breaks",
            standardDeviation: "Standard Deviation",
            chooseCountField: "No count field"
        },
        traceDownstreamTool: {
            toolDefine: "Trace downstream from \x3cb\x3e${layername}\x3c/b\x3e",
            outputLayerName: "${layername} Trace",
            choosePointLayer: "Choose point layer",
            pointlayerName: "Drawn Prediction Points",
            defaultBoundingOption: "Choose study area",
            itemDescription: "Feature Service generated from running the Trace Downstream solution.",
            itemTags: "Analysis Result, Trace Downstream, ${layername}",
            itemSnippet: "Analysis Feature Service generated from Trace Downstream",
            clipOutputToLabel: "Clip output to",
            traceOptionsLabel: "Trace downstream settings (optional)",
            splitTraceLabel: "Split the trace into line segments",
            maxTraceLabel: "Maximum distance of the trace"
        },
        createWatershedTool: {
            toolDefine: "Create Watersheds from \x3cb\x3e${layername}\x3c/b\x3e",
            outputLayerName: "${layername} Watersheds",
            choosePointLayer: "Choose point layer",
            pointlayerName: "Drawn Prediction Points",
            defaultBoundingOption: "Choose study area",
            itemDescription: "Feature Service generated from running the Create Watershed solution.",
            itemTags: "Analysis Result, Create Watersheds, ${layername}",
            itemSnippet: "Analysis Feature Service generated from Create Watershed",
            searchDistanceLabel: "Search distance to nearest drainage (optional)"
        },
        createViewshedTool: {
            toolDefine: "Create areas that are visible from \x3cb\x3e${layername}\x3c/b\x3e",
            outputLayerName: "${layername} visible areas",
            itemDescription: "Feature Service generated from running the Create Viewshed solution.",
            itemTags: "Analysis Result, Create Viewshed, ${layername}",
            itemSnippet: "Analysis Feature Service generated from Create Viewshed",
            maxDistanceLabel: "Maximum viewing distance",
            observerHghtLabel: "Height of ${layername}",
            targetHghtLabel: "Height of other objects on the ground",
            viewshedOptionlabel: "Visibility settings (optional)",
            maxDistanceValidMsg: "The maximum viewing distance cannot be more than ${limit} ${units}.",
            maxdistanceInValidMsg: "Only integer values are allowed"
        },
        analysisMsgCodes: {
            SS_84493: "There was 1 outlier location; it was not used to compute ${AggregationType}.",
            SS_84492: "The total study area was ${Area}.",
            SS_84491: "There were ${NumFeatures} valid input aggregation areas.",
            SS_84490: "The aggregation process resulted in ${AggNumFeatures} weighted areas.",
            SS_84489: "Analysis was performed on all aggregation areas.",
            SS_84485: "There were ${NumFeatures} valid input features.",
            SS_84477: "Blue output features represent cold spots where low ${FieldName} cluster.",
            SS_84476: "Red output features represent hot spots where high ${FieldName} cluster.",
            SS_84471: "Output",
            SS_84470: "${NumSignificant} output features are statistically significant based on a FDR correction for multiple testing and spatial dependence.",
            SS_84466: "Hot Spot Analysis",
            SS_84465: "The optimal fixed distance band was based on one standard distance of the features from the geometric mean: ${DistanceInfo}.",
            SS_84464: "The optimal fixed distance band was based on the average distance to ${NumNeighs} nearest neighbors: ${DistanceInfo}.",
            SS_84461: "The optimal fixed distance band selected was based on peak clustering found at ${DistanceInfo}.",
            SS_84459: "Scale of Analysis",
            SS_84458: "Analysis was based on the number of points in each polygon cell.",
            SS_84457: "Points were aggregated to the fishnet polygon cells falling within the bounding areas provided.",
            SS_84453: "Analysis was performed on all fishnet polygon cells within the bounding area layer.",
            SS_84452: "Analysis was performed on all fishnet polygon cells containing at least one point.",
            SS_84451: "Analysis was based on the number of points in each fishnet polygon cell.",
            SS_84450: "The polygon cell size was ${SnapInfo}.",
            SS_84449: "A fishnet polygon mesh was created for aggregating points.",
            SS_84446: "${VarName} Properties:",
            SS_84444: "Incident Aggregation",
            SS_84437: "There were no locational outliers.",
            SS_84434: "There were ${NumOutliers} outlier locations; these were not used to compute ${AggregationType}.",
            SS_84428: "Initial Data Assessment.",
            SS_84271_0: "Min",
            SS_84272_0: "Max",
            SS_84261_0: "Mean",
            SS_84262_0: "Std. Dev.",
            SS_00002: "The following report outlines the workflow used to optimize your Find Hot Spots result:",
            AO_100001: "Aggregate Points failed.",
            AO_100002: "The geometry type of Point Layer must be points.",
            AO_100003: "The geometry type of  Polygon Layer must be polygons.",
            AO_100004: "The field  ${fieldName} provided for Summary Fields does not exist.",
            AO_100005: "The field  ${fieldName} provided for Summary Fields is not numeric.",
            AO_100006: "The summary type ${summary} provided for field ${fieldName} is invalid.",
            AO_100007: "Find Hot Spots failed.",
            AO_100008: "The geometry type for the boundingPolygonLayer must be polygon.",
            AO_100009: "The geometry type of Analysis Layer must be points or polygons.",
            AO_100010: "The geometry type of Aggregation Polygon Layer must be polygon.",
            AO_100011: "Must provide an Analysis Field for polygon Analysis Layer.",
            AO_100012: "Create Buffers failed.",
            AO_100013: "Overlay Layers failed.",
            AO_100014: "Summarize Within failed.",
            AO_100015: "The geometry type of Summarize Layer input must be point, line, or polygons.",
            AO_100016: "The geometry type of Summarize Layer input must be point or line.",
            AO_100017: "The geometry type of Summarize Layer input must be point.",
            AO_100018: "Sum Units ${sumUnits} is not applicable for ${shapeType} shape type.",
            AO_100019: "At least one of the parameters, Summarize Shape or  Summary Fields is required.",
            AO_468: "Input shape types are not equal.",
            AO_1156: "A field value was incompatible with the field type.",
            AO_800: "The value is not a member of SUM | MEAN | MIN | MAX | RANGE | STD | COUNT | FIRST | LAST.",
            AO_728: "The analysisField ${fieldName} you specified does not exist in the analysisLayer.",
            AO_12: "Field to add already exists.",
            AO_539: "Expression is invalid.",
            AO_1115: "Layer description property must be set for ${layerName}.",
            AO_366: "Invalid geometry type.",
            AO_641: "This tool requires at least ${numFeatures} feature(s) to compute results.",
            AO_906: "Zero variance: all of the values for your input field are likely the same.",
            AO_1533: "We were not able to compute hot and cold spots for the data provided.\u00a0 If appropriate, try specifying an Analysis Field.",
            AO_1534: "Hot and cold spots cannot be computed when the number of points in every polygon area is identical. Try different polygon areas or different analysis options.",
            AO_1535: "The analysis option you selected requires a minimum of ${minNumFeatures} aggregation areas.",
            AO_1536: "The analysis options you selected require a minimum of ${minNumIncidents} points to compute hot and cold spots.",
            AO_1570: "The analysis option you selected requires a minimum of ${minNumIncidents} points to be inside the bounding polygon area(s).",
            AO_1571: "The analysis options you selected require a minimum of ${minNumFeatures} features with valid data in the analysis field in order to compute hot and cold spots.\t",
            AO_1572: "There is not enough variation in point locations to compute hot and cold spots. Coincident points, for example, reduce spatial variation.\u00a0 You can try providing a bounding area, aggregation areas (a minimum of 30), or an Analysis Field.",
            AO_1573: "There is not enough variation among the points within the bounding polygon area(s). You can try providing larger boundaries.",
            AO_1574: "The analysis option you selected requires a minimum of ${minNumIncidents} points to be inside the aggregation polygons.",
            AO_1575: "All of the values for your analysis field are likely the same.\u00a0 Hot and cold spots cannot be computed when there is no variation in the field being analyzed.",
            AO_84426: "Must provide polygons for aggregating incidents into counts for this incident data aggregation method.",
            AO_26: "Buffer distance is zero.",
            AO_109: "The buffer distance cannot be negative for lines and points.",
            AO_385: "The LINE option is not valid with point features.",
            AO_438: "Overlay not polygon.",
            AO_100020: "Enrich Layer failed.",
            AO_100021: "The geometry type of Input Layer must be point, line or polygon.",
            AO_100022: "Units ${units} is not supported for Buffer type ${bufferType}.",
            AO_100023: "Unable to enrich layer for input spatial reference ${spref}.",
            AO_100024: "The number of features in ${inputLayer} is zero.",
            AO_100025: "Summarize Nearby failed.",
            AO_100026: "Extract Data failed.",
            AO_100027: "Dissolve Boundaries failed.",
            AO_100028: "Create Drive Time Areas failed.",
            AO_100029: "Merge Layers failed.",
            AO_100030: "Find Nearest failed.",
            AO_100031: "The number of nearest locations to find can not be greater than 100.",
            AO_100032: "The number of features in ${analysisLayer} is zero.",
            AO_100033: "The number of features in ${nearLayer} is zero.",
            AO_100034: "The number of features in ${analysisLayer} can not be greater than 1000.",
            AO_100035: "The number of features in ${nearLayer} can not be greater than 1000.",
            AO_100036: "The ${analysisLayer} layer must have a point geometry type when using ${measurementType} as the measurement type.",
            AO_100037: "The ${nearLayer} layer must have a point geometry type when using ${measurementType} as the measurement type.",
            AO_100038: "The search cutoff cannot be less than zero.",
            AO_100039: "The ${inputLayer} must have a point geometry type.",
            AO_100040: "The number of features in ${inputLayer} can not be greater than ${max}.",
            AO_100041: "Buffer type parameter is supported only for layers containing points or lines.",
            AO_100042: "The geometry type ${shapeType} of Nearby Layer is not supported for Near type ${nearType}",
            AO_100043: "Units ${units} is not supported for Near type ${nearType}.",
            AO_100044: "Distance value should be greater than 0",
            AO_100045: "Distance and units are required when Buffer type is specified",
            AO_100046: "Failed to access GeoEnrichment server.",
            AO_100047: "Enrichment may not be available for some features.",
            AO_100048: "The input layer ${inputLayer} contains multipoint geometry and has been converted to single point geometry.",
            AO_100049: "No features in the processing extent for any input layers.",
            AO_100050: "No fields exist in the input layer for data extraction.",
            AO_100051: "No features in the processing extent for any input layers and none of the input layers have fields for data extraction. ",
            AO_100052: "The field name ${fieldName} does not exist in the ${paramName}.",
            AO_100053: "Required keys ${missingKeys} are missing in attribute expression ${expression}.",
            AO_100054: "Required keys ${missingKeys} are missing in spatial relationship expression ${expression}.",
            AO_100055: "Invalid expression; malformed JSON.",
            AO_100056: "Invalid layer index in expression ${expression}.",
            AO_100057: "Layer index exceeds the number of input layers in expression ${expression}.",
            AO_100058: "${spatialRel} spatial relationship does not support ${lyrGeomType}/${selLyrGeomType} geometry types for layer/selectingLayer in expression ${expression}.",
            AO_100059: "Invalid spatial relationship {spatialRel} in expression ${expression}.",
            AO_100060: "Query expression failed in expression ${expression}.",
            AO_100061: "FindExistingLocations failed.",
            AO_100062: "Invalid distance and/or units in expression ${expression}",
            AO_100063: "PlanRoutes failed.",
            AO_100064: "The number of features in ${stopsLayer} is zero.",
            AO_100065: "The number of features in ${startLayer} is zero.",
            AO_100066: "The maximum number of vehicles to route cannot be less than zero and greater than ${max}.",
            AO_100067: "The maximum number of stops per vehicle cannot be less than zero and greater than ${max}.",
            AO_100068: "The number of features in ${stopsLayer} cannot be greater than ${max}.",
            AO_100069: "The number of features in ${startLayer} cannot be greater than ${max}.",
            AO_100070: "The number of features in ${endLayer} cannot be greater than ${max}.",
            AO_100071: "The ${stopsLayer} layer must have a point geometry type.",
            AO_100072: "The ${startLayer} layer must have a point geometry.",
            AO_100073: "The ${endLayer} layer must have a point geometry.",
            AO_100074: "The time spent at each stop cannot be less than zero.",
            AO_100075: "The total route time per vehicle should be greater than zero and less than one year (525600 minutes).",
            AO_100076: "The ${endLayer} should not be specified if return to start is true.",
            AO_100077: "Find Similar Locations failed.",
            AO_100078: "Invalid field name in expression ${expression}",
            AO_100079: "Derive New Locations failed.",
            AO_100080: "Connect Origins To Destinations failed.",
            AO_100081: "Field Calculator failed.",
            AO_735: "Please provide at least one valid analysis field to base similarity on.",
            AO_1589: "This tool requires a minimum of 2 locations to search.",
            AO_100082: "A field name and an expression are required.",
            AO_100083: "A field type is required for creating a new field.",
            AO_100084: "Field type is required to be String, Integer, Double or Date.",
            AO_1599: "Too few records for analysis. This tool requires at least 1 reference  location in the Input Layer to compute results.",
            AO_100088: "Field(s) ${attribute} must be in both the reference and candidate search layers.",
            AO_100089: "The following fields lack sufficient variation for use in this analysis: ${attribute}.",
            AO_100090: "This tool requires at least 2 candidate search locations that are not also reference locations.",
            AO_100094: "The maximum number of vehicles to route must be equal to the number of features in ${startLayer}.",
            AO_100104: "InterpolatePoints failed.",
            AO_40039: "Not enough data to compute method. At least 10 points are required.",
            AO_40040: "Data is distributed along a straight line and cannot be processed.",
            AO_40069: "The variance of the data is too small to be calculated.",
            AO_100091: "The geometry type of ${paramName} must be Points",
            AO_100092: "The geometry type of boundingPolygonLayer must be Polygons",
            AO_100093: "The classification type Manual requires classbreaks value.",
            AO_100095: "The number of features in ${endLayer} must be equal to the number of features in ${startLayer}.",
            AO_100096: "The ${startLayerRouteIDField} in ${startLayer} does not have unique values.",
            AO_100097: "The ${endLayerRouteIDField} in ${endLayer} does not have unique values.",
            AO_100098: "The values in ${startLayerRouteIDField} in ${startLayer} do not have a one-to-one match with the values in ${endLayerRouteIDField} in ${endLayer}.",
            AO_100099: "All break values must be greater than zero.",
            AO_100100: "The features in ${inputLayer} are not within the data coverage area. See availability at ${url}.",
            AO_100101: "No features in ${inputLayer} are within a distance of ${max} kilometers from streets.",
            AO_100102: "All features in ${inputLayer} must be in the same time zone when using traffic and creating areas with dissolve or split options.",
            AO_100103: "The ${measureType} value cannot be greater than ${max} ${breakUnits}.",
            AO_100105: "CalculateDensity failed",
            AO_100106: "Field ${fieldName} is not numeric.",
            AO_100107: "Field ${fieldName} does not have any positive values.",
            AO_100108: "Field ${fieldName} has negative values, only positive values will be considered for calculating density.",
            AO_100109: "The geometry type for the input layer must be points or lines.",
            AO_100110: "Your user role doesn\u2019t include the geoEnrichment privilege",
            AO_100111: "Your user role doesn\u2019t include the network analysis privilege",
            AO_100112: "Your user role doesn't include the publish hosted features privilege",
            AO_100113: "None of the stops were assigned to any routes. Check the Status and Violated Constraints fields in the output unassigned stops layer for more information.",
            AO_100114: "The time spent at each stop, ${stopServiceTime} minutes, must be less than the total route time per vehicle, ${maxRouteTime} minutes.",
            AO_100115: "Some stops were not assigned to any routes. Check the Violated Constraints field in the output unassigned stops layer for more information.",
            AO_100116: "Only ${routesUsed} out of ${routeCount} routes are needed to reach all stops. If you want to use more routes, run Plan Routes again but reduce the limits on the maximum number of stops or the total route time per vehicle.",
            AO_100117: "Driving a truck is currently not supported outside of North America and Central America.",
            AO_100118: "Your user role doesn't include the create, update and delete content privilege.",
            GPEXT_001: "Invalid parameter ${name} value",
            GPEXT_002: "Parameter missing ${name}",
            GPEXT_003: "Invalid parameter ${name}:property ${propname} is missing",
            GPEXT_004: "Invalid layer parameter property ${propname} is missing",
            GPEXT_005: "Failed to access url ${url}",
            GPEXT_006: "Accessing url ${url} returned error ${error}",
            GPEXT_007: "Invalid item ${id}",
            GPEXT_008: "Failed to create service ${name}",
            GPEXT_009: "Failed to add layer ${lname} to service ${name}",
            GPEXT_010: "Failed to parse layer JSON",
            GPEXT_011: "Layer ${url} does not have Extract capability",
            GPEXT_012: "Invalid External Operation",
            GPEXT_013: "This tool uses the Geoenrichment Service.  Please refer to ArcGIS Online Service Credit Estimator for more details.",
            GPEXT_014: "This tool uses Network Analysis Services.  Please refer to ArcGIS Online Service Credit Estimator for more details.",
            GPEXT_015: "Select appropriate helper services url from Portal for requested operation.",
            GPEXT_016: "Invalid layer object.",
            GPEXT_017: "Service ${name} already exists.",
            GPEXT_018: "The remote feature service ${url} exceeds the limit of 100,000 features. Create a hosted feature service to analyze large data.",
            SS_00003: "The following report outlines the summary of your Find Similar Locations result:",
            SS_84503: "Summary of Input Features to Match",
            SS_89997: '["Attribute", "Min", "Max", "SD", "Mean"]',
            SS_84504: "Summary of Attributes of Interest",
            SS_84512: '["Attribute", "Min", "Max", "SD", "Mean", "Input"]',
            SS_84505: "Top ${numResults} Most Similar Locations (Values)",
            SS_84506: " Top 10 of ${numResults} Most Similar Locations (Values)",
            SS_84510: '["OID", "SIMRANK", "SIMINDEX"]',
            SS_89998: ' ["", "Total", ${sumIndex}] ',
            AO_100119: "The geometry type of WithinLayer input must be polygons",
            AO_100120: "The features in the layer are beyond max request size limit and cannot be enriched",
            AO_100121: "CreateViewshed Failed",
            AO_100122: "TraceDownstream Failed",
            AO_100123: "CreateWatersheds Failed",
            AO_100124: "The geometry type of Input Layer must be point for buffer type ${bufferType}",
            AO_100125: "The groupby field ${fieldName} must be integers, text or date.",
            AO_100126: "The features in the input layer are beyond max request size and hence simplified",
            AO_100127: "All points fall outside the processing unit extent",
            AO_100128: "The point field provided must be string or integer",
            AO_100129: "The point falls outside the catchment extent",
            AO_100130: "The point falls outside the processing unit extent",
            AO_100131: "The maximum viewing distance parameter cannot be more than ${max}${units}",
            AO_100132: "The DEM source data is not available in the input points area.",
            AO_100133: "The input DEM resolution is not supported at the specified maximum distance value. Specify a smaller maximum distance value.",
            AO_100136: "The geometry type for Extent Layer must be polygon.",
            AO_100137: "A value for the  ${parameterName} is required.",
            AO_100138: "Some origins were not connected to their paired destinations. Check the Status field in output unassigned origins and unassigned destinations layers for more information.",
            AO_100139: "None of the origins could be connected to destinations.",
            AO_100140: "The features in the Extent Layer are beyond max request size and hence simplified.",
            AO_100141: "The features in the Extent Layer are beyond max request size limit and cannot be extracted."
        },
        geoenrichment: {
            task: {
                GeoenrichmentTask: {
                    noData: "There is no data for the selected area"
                }
            },
            dijit: {
                AgePyramid: {
                    maxLabel: "The largest group:",
                    minLabel: "The smallest group:",
                    compLabel: "Dots show comparison to",
                    menLabel: "Men",
                    womenLabel: "Women"
                },
                BufferOptions: {
                    studyArea: "Show data for:",
                    ring: "Ring",
                    driveTime: "Drive Times",
                    driveDistance: "Drive Distance",
                    radius: "Radius:",
                    time: "Time:",
                    distance: "Distance:",
                    buffer: "Buffer:",
                    units: {
                        esriDriveTimeUnitsMinutes: "minutes",
                        esriMiles: "miles",
                        esriKilometers: "kilometers",
                        esriFeet: "feet",
                        esriMeters: "meters"
                    }
                },
                bufferTitle: {
                    pointRing: {
                        esriFeet: "${radius}-feet ring",
                        esriKilometers: "${radius}-km ring",
                        esriMeters: "${radius}-meter ring",
                        esriMiles: "${radius}-mile ring"
                    },
                    pointDriveTime: {
                        esriFeet: "${radius}-feet drive distance",
                        esriKilometers: "${radius}-km drive distance",
                        esriMeters: "${radius}-meter drive distance",
                        esriMiles: "${radius}-mile drive distance",
                        esriDriveTimeUnitsMinutes: "${radius}-minute drive time"
                    },
                    lineBuffer: {
                        esriFeet: "${radius}-feet buffer",
                        esriKilometers: "${radius}-km buffer",
                        esriMeters: "${radius}-meter buffer",
                        esriMiles: "${radius}-mile buffer"
                    },
                    polygon: "This area",
                    stdGeo: "Intersecting ${level} feature"
                },
                DataCategoriesPage: {
                    loading: "Loading...",
                    global: "Global",
                    search: "search for a variable name",
                    noResults: "No results found for '${seachKey}'."
                },
                DataCollectionsPage: {
                    categoryName: "${categoryName} Variables",
                    mapPopVar: "Choose a Popular Variable",
                    keepBrowse: "Keep Browsing",
                    showAll: "Show all ${categoryName} Variables",
                    search: "search within the current category",
                    noResults: "No results found for '${seachKey}'.",
                    from: "from '${categoryName}'"
                },
                DataVariablesPage: {
                    vars: "variables"
                },
                ShoppingCart: {
                    selectedVars: "Selected Variables",
                    noVariables: "No variables have yet been selected"
                },
                VariableInfo: {
                    name: "Name",
                    variable: "Variable",
                    source: "Source",
                    vintage: "Vintage"
                },
                EnrichOptionsPage: {
                    bufferRing: "1 mile circle around locations",
                    bufferPolygon: "input polygons (buffer unavailable)",
                    selectedVariables: "Selected Variables:",
                    customize: "customize",
                    bufferOptions: "Show data for:",
                    edit: "edit",
                    totalVars: "Total Variables: ${varCount} (${credits})",
                    varsPerRow: "Variables per Row: ${varCount} (${credits})",
                    credits: "${credits} credits",
                    creditsCalc: "calculating...",
                    totalVarsTooltip: "This operation will enrich ${rowCount} rows with ${varCount} variables and will cost ${credits}.",
                    varsPerRowTooltip: "This operation will enrich each row with ${varCount} variables and will cost ${credits} per row.",
                    overwriteExisting: "Existing column values will be overwritten",
                    varName: "Variable Name",
                    column: "Column",
                    newColumn: "\x3cCreate New\x3e",
                    noColumn: "\x3cNone\x3e",
                    back: "Back",
                    finish: "Add data to system"
                },
                InfographicsMainPage: {
                    mainTitle: "Configure Infographics",
                    loading: "Loading...",
                    chooseCountry: "Show available data for: ",
                    chooseDataCollection: "Choose from popular data collections: ",
                    chooseTheme: "Select color theme:",
                    dark: "Dark",
                    light: "Light",
                    addVariables: "Add more variables...",
                    ok: "OK",
                    add: "Add",
                    cancel: "Cancel"
                },
                OneVar: {
                    subtitleSite2: "for this area ",
                    subtitleVar2: "${alias} is ",
                    lessThan: "which is less than the average for ${site}",
                    moreThan: "which is more than the average for ${site}",
                    same: "which is the same as the average for ${site}",
                    areaCol: "Area",
                    valueCol: "Value"
                },
                RelatedVariables: {
                    highLabel2: "The largest group: ${alias}",
                    lowLabel2: "The smallest group: ${alias}",
                    indicatorCol: "Indicator",
                    valueCol: "Value",
                    difCol: "Difference",
                    chartLabel: "Bars show deviation from"
                },
                Tapestry: {
                    hhTypeLabel: "Household Type:",
                    medianAgeLabel: "Median Age:",
                    incomeLabel: "Income:",
                    employmentLabel: "Employment:",
                    educationLabel: "Education:",
                    residentialLabel: "Residential:",
                    raceEthnicityLabel: "Race / Ethnicity:",
                    hhLabel: "households",
                    adultsLabel: "adults"
                },
                WizardButtons: {
                    back: "Back",
                    ok: "OK",
                    apply: "Apply",
                    cancel: "Cancel",
                    next: "Next"
                },
                EnrichConfig: {
                    title: "Enrich Layer"
                },
                DataBrowser: {
                    title: "Data Browser"
                }
            }
        },
        filterDlg: {
            expressionTemplate: "${field_dropdown} ${operator_dropdown} ${values_input}",
            filter: "Filter",
            applyFilter: "Apply Filter",
            applyFilterBtn: "Apply Filter",
            removeFilterBtn: "Remove Filter",
            view: "View",
            change: "Change",
            edit: "Edit",
            create: "Create",
            match1Msg: "Display features in the layer that match the following expression",
            matchMsg: "Display features in the layer that match ${any_or_all} of the following expressions",
            matchMsgSet: "${any_or_all} of the following expressions in this set are true",
            all: "All",
            any: "Any",
            andBetweenValues: "and",
            and: "and",
            or: "or",
            friendlyAnd: "All of these expressions must be true:",
            friendlyOr: "Any of these expressions must be true:",
            friendlyDatePattern: "MM/dd/yyyy",
            addAnotherExpression: "Add another expression",
            addSet: "Add a set",
            askForValues: "Ask for values",
            value: "Value",
            valueTooltip: "Enter value",
            field: "Field",
            fieldTooltip: "Pick from existing field",
            uniqueValues: "Unique",
            uniqueValueTooltip: "Pick from unique values in selected field",
            toThisLayer: "To this layer",
            toNewLayer: "To a new layer",
            newLayerName: "New layer name",
            showFilterExpression: "Show filter's expressions",
            deleteExpression: "Delete this expression",
            deleteSet: "Delete this set",
            addExpression: "Add an expression to this set",
            addSetTooltip: "Add a set to contain expressions",
            promptMsg: "Provide a prompt and some hint text to present this filter interactively to others",
            prompt: "Prompt",
            hint: "Hint",
            stringOperatorIs: "is",
            stringOperatorIsNot: "is not",
            stringOperatorStartsWith: "starts with",
            stringOperatorEndsWith: "ends with",
            stringOperatorContains: "contains",
            stringOperatorDoesNotContain: "does not contain",
            stringOperatorIsBlank: "is blank",
            stringOperatorIsNotBlank: "is not blank",
            dateOperatorIsOn: "is on",
            dateOperatorIsNotOn: "is not on",
            dateOperatorIsBefore: "is before",
            dateOperatorIsAfter: "is after",
            dateOperatorDays: "days",
            dateOperatorWeeks: "weeks",
            dateOperatorMonths: "months",
            dateOperatorInTheLast: "in the last",
            dateOperatorNotInTheLast: "not in the last",
            dateOperatorIsBetween: "is between",
            dateOperatorIsNotBetween: "is not between",
            dateOperatorIsBlank: "is blank",
            dateOperatorIsNotBlank: "is not blank",
            numberOperatorIs: "is",
            numberOperatorIsNot: "is not",
            numberOperatorIsAtLeast: "is at least",
            numberOperatorIsLessThan: "is less than",
            numberOperatorIsAtMost: "is at most",
            numberOperatorIsGreaterThan: "is greater than",
            numberOperatorIsBetween: "is between",
            numberOperatorIsNotBetween: "is not between",
            numberOperatorIsBlank: "is blank",
            numberOperatorIsNotBlank: "is not blank",
            emptyString: "empty string",
            error: {
                noUniqueValues: "The specified field has has no values.",
                generateRendererFailed: "Unique values could not be determined for the selected field.",
                missingValue: "there's a missing value in one of the expressions",
                cantParseExpression: "Filter cannot be shown because one or more of its expressions cannot be parsed. To edit the filter expressions, clear the filter and create a new filter interactively.",
                noFilterFields: "Layer ${name} has no fields that can be used for filtering."
            }
        },
        calculateFields: {
            addFieldTitle: "Add Field",
            nameLabel: "Name:",
            aliasLabel: "Alias:",
            typeLabel: "Type:",
            lengthLabel: "Length:",
            defaultValueLabel: "Default Value:",
            optional: "(Optional)",
            stringLabel: "String",
            integerLabel: "Integer",
            doubleLabel: "Double",
            dateLabel: "Date",
            expBuilderTitle: "Expression Builder",
            operators: "Operators",
            availableFields: "Available Fields",
            helpers: "Helpers",
            functions: "Functions",
            numeric: "Numeric",
            clear: "Clear",
            validate: "Validate",
            addNewField: "Add New Field",
            add: "Add",
            close: "Close",
            calculate: "Calculate",
            deleteLabel: "Delete",
            exprLabel: "${fieldName} \x3d",
            layerReqMsg: "A layer is required parameter for calculate field",
            fieldReqMsg: "A calculate field has not been provided",
            lyrSupportCalMsg: "This layer ${layername} does not support calculate fields",
            lyrUpdateCapMsg: "Either update capability is not enabled on the layer ${layername} or, you do not have access to update features on this layer",
            selectCalField: "Choose field to calculate:",
            firstOperatorMsg: "Operator '${operator}' cannot start an expression",
            completeHelperMsg: "Complete the helper method added previously",
            successMsg: "Successfully updated ${count} features ",
            deleteField: "Delete Field",
            deleteFieldConfirm: "Are you sure you want to delete '${field}' field from this layer?",
            fields: "Fields",
            exprFailedMsg: "Calculate for the expression '${expr}' failed.",
            inValidFielNameCharMsg: "The field name contains one or more invalid characters \x3cbr/\x3e(`~@#$%^\x26*()-+\x3d|\\\x3c\x3e?/{.!'[]:\n\r).",
            inValidFieldStartCharMsg: "The field name cannot start with one of these invalid characters \x3cbr/\x3e(`~@#$%^\x26*()-+\x3d|\\\x3c\x3e?/{}.!'[]:;\n\r_012356789).",
            invalidSqlkeywordsMsg: "The field name cannot be the same as an SQL keyword.",
            invalidExpression: "The calculate expression is not valid",
            sameFielNameMsg: "The field name cannot be same as an existing field name",
            errorCodes: {
                3001: "Sql expression is not supported.",
                3002: "Sql expression syntax error.",
                3004: "Sql expression semantic error.",
                3007: "Invalid table name ${tableName}.",
                3008: "Invalid field name ${fieldName}.",
                3009: "Unsafe sql expression is not allowed."
            },
            absFunc: "${functionName}: Returns the absolute (positive) value of ${num}.",
            castFunc: "${functionName}: Converts a ${num} to a different type. FLOAT converts ${num} to a double and INT converts to an integer.",
            ceilingFunc: "${functionName}: Returns the smallest integer greater than or equal to  ${num}.",
            cosFunc: "${functionName}: Returns the trigonometric cosine of ${num}. ${num} is assumed to be an angle in radians.",
            floorFunc: "${functionName}: Returns the largest integer that is less than or equal to ${num}.",
            logFunc: "${functionName}: The natural logarithm of ${num}.",
            log10Func: "${functionName}: The base-10 logarithm of ${num}.",
            modFunc: "${functionName}: Returns the remainder after the division of n is performed on ${num}. Both ${n} and ${num} must be integer.",
            powerFunc: "${functionName}: Returns the value of ${num} raised to the specified power ${y}.",
            roundFunc: "${functionName}: Rounds ${num} to the specified ${length}.",
            sinFunc: "${functionName}: Returns the trigonometric sine of ${num}. ${num} is assumed to be an angle in radians.",
            tanFunc: "${functionName}: Returns the tangent of ${num}. ${num} is assumed to be an angle in radians.",
            truncateFunc: "${functionName}: Truncates ${num} at the specified ${decimal_place}. A positive ${decimal_place} truncates while a negative ${decimal_place} rounds.",
            nullifFunc: "${functionName}: Returns null if ${num} equals ${value}. Commonly used to prevent divide-by-zero errors by setting ${value} to 0.",
            char_lengthFunc: "${functionName}: Returns the number of characters in ${str}. The result is an integer.",
            concatFunc: "${functionName}: Concatenates two strings.",
            positionFunc: "${functionName}: Returns the position of the first occurrence of substring in ${str}. If substring is not found, the result is 0.",
            lowerFunc: "${functionName}: Returns a string where all characters in ${str} are converted to lowercase.",
            substringFunc: "${functionName}: Returns a part of ${str}. ${start} is an integer index specifying where the returned characters start. ${length} is the number of characters to be returned.",
            trimFunc: "${functionName}: Returns a string where all leading or trailing spaces are removed from ${str}.",
            upperFunc: "${functionName}: Returns a string where all characters in ${str} are converted to uppercase.",
            current_dateFunc: "${functionName}: Returns the current date.",
            current_timeFunc: "${functionName}: Returns the current time (hours, minutes, seconds).",
            current_timestampFunc: "${functionName}: Returns the current time (hours, minutes, seconds, milliseconds)."
        },
        colorPicker: {
            transparency: "Transparency",
            suggested: "Suggested",
            recent: "Recent",
            more: "More",
            moreColorsTooltip: "See more colors.",
            paletteTooltip: "Select a color.",
            noColorTooltip: "No color",
            hexInputTooltip: "A custom color in hexadecimal notation (#FFFF00)."
        },
        visibleScaleRangeSlider: {
            noLimit: "No Limit",
            preview: "Preview",
            currentScaleTooltip: "Current map scale (${scaleLabel})",
            customScaleInputTooltip: "Type in a scale.",
            current: "Current",
            setTo: "Set to",
            selectOne: "(select one)",
            setToSelectOne: "${setTo} ${selectOne}",
            scaleRangeLabels: {
                world: "World",
                continent: "Continent",
                countries: "Countries",
                country: "Country",
                states: "States",
                state: "State",
                counties: "Counties",
                county: "County",
                metropolitanArea: "Metropolitan Area",
                cities: "Cities",
                city: "City",
                town: "Town",
                neighborhood: "Neighborhood",
                streets: "Streets",
                street: "Street",
                buildings: "Buildings",
                building: "Building",
                smallBuilding: "Small Building",
                rooms: "Rooms",
                room: "Room"
            },
            featuredScaleLabels: {
                current: "Current Map View (${scaleLabel})",
                world: "World (${scaleLabel})",
                continent: "Continent (${scaleLabel})",
                countriesBig: "Countries - Big (${scaleLabel})",
                countriesSmall: "Countries - Small (${scaleLabel})",
                statesProvinces: "States / Provinces (${scaleLabel})",
                stateProvince: "State/Province (${scaleLabel})",
                counties: "Counties (${scaleLabel})",
                county: "County (${scaleLabel})",
                metropolitanArea: "Metropolitan Area (${scaleLabel})",
                cities: "Cities (${scaleLabel})",
                city: "City (${scaleLabel})",
                town: "Town (${scaleLabel})",
                neighborhood: "Neighborhood (${scaleLabel})",
                streets: "Streets (${scaleLabel})",
                street: "Street (${scaleLabel})",
                buildings: "Buildings (${scaleLabel})",
                building: "Building (${scaleLabel})"
            }
        },
        symbolEditor: {
            preview: "Preview",
            shape: "Shape",
            fill: "Fill",
            outline: "Outline",
            px: "px",
            symbolSize: "Symbol Size",
            symbolSizeTooltip: "Set symbol size from ${min} to ${max} pixels.",
            useImage: "Use an Image",
            useImageTooltip: "Use a custom image.",
            imageUrlInputTooltip: "For best results, the image should be no greater than 120 pixels wide by 120 pixels high. Other sizes will be adjusted to fit. Acceptable image formats are: PNG, GIF and JPEG.",
            selectCategoryTooltip: "Select a category.",
            imageLoadError: "Unable to load image.",
            symbolLoadError: "Unable to load symbols.",
            noFillTooltip: "No fill",
            symbolTransparencyTooltip: "Symbol transparency",
            lineWidth: "Line Width",
            lineWidthTooltip: "Set a line width from ${min} to ${max} pixels.",
            pattern: "Pattern",
            patternTooltip: "Line type",
            flipColors: "Flip Colors",
            flipColorsTooltip: "Invert color ramp.",
            noOutlineTooltip: "No outline",
            saturation: "Saturation",
            saturationTooltip: "Adjust color intensity.",
            selectRampTooltip: "Select a color ramp."
        },
        smartMapping: {
            others: "Others",
            minToMax: "to"
        }
    },
    ar: 1,
    cs: 1,
    da: 1,
    de: 1,
    el: 1,
    es: 1,
    et: 1,
    fi: 1,
    fr: 1,
    he: 1,
    it: 1,
    ja: 1,
    ko: 1,
    lv: 1,
    lt: 1,
    nl: 1,
    nb: 1,
    pl: 1,
    "pt-br": 1,
    "pt-pt": 1,
    ro: 1,
    ru: 1,
    sv: 1,
    th: 1,
    tr: 1,
    vi: 1,
    "zh-cn": 1
});
},
'esri/Evented':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/aspect", "dojo/Evented", "dojo/has", "./kernel"], function(m, h, l, n, p, q) {
    return m([n], {
        declaredClass: "esri.Evented",
        registerConnectEvents: function() {
            var d = this.constructor,
                c = this.constructor._meta.parents,
                a = [{}],
                e = {},
                b, f, g = function(a, b) {
                    h.isArray(a) || (a = [a]);
                    for (var c = 0; c < a.length; c++) {
                        var d = a[c];
                        d._meta && d._meta.parents && g(d._meta.parents, b);
                        d.prototype._eventMap && b.push(h.mixin({}, d.prototype._eventMap))
                    }
                    return b
                };
            if (!d._onMap) {
                g(c, a);
                a.push(this._eventMap);
                c = h.mixin.apply(this, a);
                for (b in this) /^on\w/.test(b) && h.isFunction(this[b]) && (a = this._hyphenLower(b).toLowerCase(), c[a] || (e[a] = {
                    method: b
                }));
                for (f in c) b = this._onCamelCase(f), e[f] = {
                    method: b,
                    argKeys: c[f]
                };
                d._onMap = e;
                return d._onMap
            }
        },
        on: function(d, c) {
            if (-1 < d.indexOf(",")) {
                for (var a = d.split(/\s*,\s*/), e = a.length, b = []; e--;) b.push(this.on(a[e], c));
                b.remove = function() {
                    for (var a = 0; a < b.length; a++) b[a].remove()
                };
                return b
            }
            var a = this.constructor._onMap || this.registerConnectEvents(),
                e = "string" == typeof d && d.toLowerCase(),
                f = this._onCamelCase(e),
                g = a && a[e];
            return (f = g && g.method || this[f] && h.isFunction(this[f]) && f) ? g && h.isArray(g.argKeys) ? (a = this._onArr2Obj(c, a[e].argKeys), l.after(this, f, a, !0)) : l.after(this, f, function(a) {
                a = a || {};
                a.target || (a.target = this);
                c.call(this, a)
            }, !0) : this.inherited(arguments)
        },
        emit: function(d, c) {
            var a, e, b, f, g = d.toLowerCase();
            f = this._onCamelCase(d);
            var k = this.constructor._onMap || this.registerConnectEvents();
            f = (b = k && k[g] && k[g].method || h.isFunction(this[f]) && f) && this[b];
            b && (k && k[g]) && this._onObj2Arr(function() {
                e =
                    Array.prototype.slice.call(arguments)
            }, k[g].argKeys)(c);
            c = c || {};
            c.target || (c.target = this);
            f && (a = e && e.length ? e : [c], a = f.apply(this, a));
            this.inherited(arguments, [d, c]);
            return a
        },
        _onObj2Arr: function(d, c) {
            if (c) {
                var a = this;
                return function(e) {
                    var b, f = [],
                        g = c.length;
                    for (b = 0; b < g; b++) f[b] = e[c[b]];
                    d.apply(a, f)
                }
            }
            return d
        },
        _onArr2Obj: function(d, c) {
            if (c) {
                var a = this;
                return function() {
                    var e, b = {},
                        f = arguments.length;
                    for (e = 0; e < f; e++) b[c[e]] = arguments[e];
                    b.target || (b.target = a);
                    d.call(a, b)
                }
            }
            return d
        },
        _hyphenLower: function(d) {
            return d.replace(/^on/,
                "").replace(/[A-Z](?=[a-z])/g, function(c, a) {
                return (a ? "-" : "") + c.toLowerCase()
            })
        },
        _onCamelCase: function(d) {
            return "on" + d.substr(0, 1).toUpperCase() + d.substr(1).replace(/\-([a-z])/g, function(c, a) {
                return a.toUpperCase()
            })
        }
    })
});
},
'esri/fx':function(){
//>>built
define(["dojo/_base/connect", "dojo/_base/fx", "dojo/_base/lang", "dojo/dom", "dojo/dom-geometry", "dojo/dom-style", "dojo/fx", "dojo/has", "./kernel"], function(n, f, g, k, l, m, p, q, r) {
    return {
        animateRange: function(a) {
            var b = a.range;
            return new f.Animation(g.mixin({
                curve: new f._Line(b.start, b.end)
            }, a))
        },
        resize: function(a) {
            var b = a.node = k.byId(a.node),
                c = a.start,
                d = a.end;
            c || (c = l.getMarginBox(b), b = l.getPadBorderExtents(b), c = a.start = {
                left: c.l + b.l,
                top: c.t + b.t,
                width: c.w - b.w,
                height: c.h - b.h
            });
            d || (d = a.anchor ? a.anchor : {
                    x: c.left,
                    y: c.top
                },
                b = a.size, d = a.end = {
                    left: c.left - (b.width - c.width) * (d.x - c.left) / c.width,
                    top: c.top - (b.height - c.height) * (d.y - c.top) / c.height,
                    width: b.width,
                    height: b.height
                });
            return f.animateProperty(g.mixin({
                properties: {
                    left: {
                        start: c.left,
                        end: d.left
                    },
                    top: {
                        start: c.top,
                        end: d.top
                    },
                    width: {
                        start: c.width,
                        end: d.width
                    },
                    height: {
                        start: c.height,
                        end: d.height
                    }
                }
            }, a))
        },
        slideTo: function(a) {
            var b = a.node = k.byId(a.node),
                c = m.getComputedStyle,
                d = null,
                e = null,
                h = function() {
                    return function() {
                        var a = "absolute" == b.style.position ? "absolute" : "relative";
                        d = "absolute" == a ? b.offsetTop : parseInt(c(b).top) || 0;
                        e = "absolute" == a ? b.offsetLeft : parseInt(c(b).left) || 0;
                        "absolute" != a && "relative" != a && (a = l.position(b, !0), d = a.y, e = a.x, b.style.position = "absolute", b.style.top = d + "px", b.style.left = e + "px")
                    }
                }();
            h();
            a = f.animateProperty(g.mixin({
                properties: {
                    top: {
                        start: d,
                        end: a.top || 0
                    },
                    left: {
                        start: e,
                        end: a.left || 0
                    }
                }
            }, a));
            n.connect(a, "beforeBegin", a, h);
            return a
        },
        flash: function(a) {
            a = g.mixin({
                end: "#f00",
                duration: 500,
                count: 1
            }, a);
            a.duration /= 2 * a.count;
            var b = k.byId(a.node),
                c = a.start;
            c || (c = m.getComputedStyle(b).backgroundColor);
            var d = a.end,
                e = [],
                h = a.count,
                b = {
                    node: b,
                    duration: a.duration
                };
            for (a = 0; a < h; a++) e.push(f.animateProperty(g.mixin({
                properties: {
                    backgroundColor: {
                        start: c,
                        end: d
                    }
                }
            }, b))), e.push(f.animateProperty(g.mixin({
                properties: {
                    backgroundColor: {
                        start: d,
                        end: c
                    }
                }
            }, b)));
            return p.chain(e)
        }
    }
});
},
'dojo/_base/fx':function(){
define(["./kernel", "./config", /*===== "./declare", =====*/ "./lang", "../Evented", "./Color", "../aspect", "../sniff", "../dom", "../dom-style"],
	function(dojo, config, /*===== declare, =====*/ lang, Evented, Color, aspect, has, dom, style){
	// module:
	//		dojo/_base/fx
	// notes:
	//		Animation loosely package based on Dan Pupius' work, contributed under CLA; see
	//		http://pupius.co.uk/js/Toolkit.Drawing.js

	var _mixin = lang.mixin;

	// Module export
	var basefx = {
		// summary:
		//		This module defines the base dojo/_base/fx implementation.
	};

	var _Line = basefx._Line = function(/*int*/ start, /*int*/ end){
		// summary:
		//		Object used to generate values from a start value to an end value
		// start: int
		//		Beginning value for range
		// end: int
		//		Ending value for range
		this.start = start;
		this.end = end;
	};

	_Line.prototype.getValue = function(/*float*/ n){
		// summary:
		//		Returns the point on the line
		// n:
		//		a floating point number greater than 0 and less than 1
		return ((this.end - this.start) * n) + this.start; // Decimal
	};

	var Animation = basefx.Animation = function(args){
		// summary:
		//		A generic animation class that fires callbacks into its handlers
		//		object at various states.
		// description:
		//		A generic animation class that fires callbacks into its handlers
		//		object at various states. Nearly all dojo animation functions
		//		return an instance of this method, usually without calling the
		//		.play() method beforehand. Therefore, you will likely need to
		//		call .play() on instances of `Animation` when one is
		//		returned.
		// args: Object
		//		The 'magic argument', mixing all the properties into this
		//		animation instance.

		_mixin(this, args);
		if(lang.isArray(this.curve)){
			this.curve = new _Line(this.curve[0], this.curve[1]);
		}

	};
	Animation.prototype = new Evented();

	lang.extend(Animation, {
		// duration: Integer
		//		The time in milliseconds the animation will take to run
		duration: 350,

	/*=====
		// curve: _Line|Array
		//		A two element array of start and end values, or a `_Line` instance to be
		//		used in the Animation.
		curve: null,

		// easing: Function?
		//		A Function to adjust the acceleration (or deceleration) of the progress
		//		across a _Line
		easing: null,
	=====*/

		// repeat: Integer?
		//		The number of times to loop the animation
		repeat: 0,

		// rate: Integer?
		//		the time in milliseconds to wait before advancing to next frame
		//		(used as a fps timer: 1000/rate = fps)
		rate: 20 /* 50 fps */,

	/*=====
		// delay: Integer?
		//		The time in milliseconds to wait before starting animation after it
		//		has been .play()'ed
		delay: null,

		// beforeBegin: Event?
		//		Synthetic event fired before a Animation begins playing (synchronous)
		beforeBegin: null,

		// onBegin: Event?
		//		Synthetic event fired as a Animation begins playing (useful?)
		onBegin: null,

		// onAnimate: Event?
		//		Synthetic event fired at each interval of the Animation
		onAnimate: null,

		// onEnd: Event?
		//		Synthetic event fired after the final frame of the Animation
		onEnd: null,

		// onPlay: Event?
		//		Synthetic event fired any time the Animation is play()'ed
		onPlay: null,

		// onPause: Event?
		//		Synthetic event fired when the Animation is paused
		onPause: null,

		// onStop: Event
		//		Synthetic event fires when the Animation is stopped
		onStop: null,

	=====*/

		_percent: 0,
		_startRepeatCount: 0,

		_getStep: function(){
			var _p = this._percent,
				_e = this.easing
			;
			return _e ? _e(_p) : _p;
		},
		_fire: function(/*Event*/ evt, /*Array?*/ args){
			// summary:
			//		Convenience function.  Fire event "evt" and pass it the
			//		arguments specified in "args".
			// description:
			//		Convenience function.  Fire event "evt" and pass it the
			//		arguments specified in "args".
			//		Fires the callback in the scope of this Animation
			//		instance.
			// evt:
			//		The event to fire.
			// args:
			//		The arguments to pass to the event.
			var a = args||[];
			if(this[evt]){
				if(config.debugAtAllCosts){
					this[evt].apply(this, a);
				}else{
					try{
						this[evt].apply(this, a);
					}catch(e){
						// squelch and log because we shouldn't allow exceptions in
						// synthetic event handlers to cause the internal timer to run
						// amuck, potentially pegging the CPU. I'm not a fan of this
						// squelch, but hopefully logging will make it clear what's
						// going on
						console.error("exception in animation handler for:", evt);
						console.error(e);
					}
				}
			}
			return this; // Animation
		},

		play: function(/*int?*/ delay, /*Boolean?*/ gotoStart){
			// summary:
			//		Start the animation.
			// delay:
			//		How many milliseconds to delay before starting.
			// gotoStart:
			//		If true, starts the animation from the beginning; otherwise,
			//		starts it from its current position.
			// returns: Animation
			//		The instance to allow chaining.

			var _t = this;
			if(_t._delayTimer){ _t._clearTimer(); }
			if(gotoStart){
				_t._stopTimer();
				_t._active = _t._paused = false;
				_t._percent = 0;
			}else if(_t._active && !_t._paused){
				return _t;
			}

			_t._fire("beforeBegin", [_t.node]);

			var de = delay || _t.delay,
				_p = lang.hitch(_t, "_play", gotoStart);

			if(de > 0){
				_t._delayTimer = setTimeout(_p, de);
				return _t;
			}
			_p();
			return _t;	// Animation
		},

		_play: function(gotoStart){
			var _t = this;
			if(_t._delayTimer){ _t._clearTimer(); }
			_t._startTime = new Date().valueOf();
			if(_t._paused){
				_t._startTime -= _t.duration * _t._percent;
			}

			_t._active = true;
			_t._paused = false;
			var value = _t.curve.getValue(_t._getStep());
			if(!_t._percent){
				if(!_t._startRepeatCount){
					_t._startRepeatCount = _t.repeat;
				}
				_t._fire("onBegin", [value]);
			}

			_t._fire("onPlay", [value]);

			_t._cycle();
			return _t; // Animation
		},

		pause: function(){
			// summary:
			//		Pauses a running animation.
			var _t = this;
			if(_t._delayTimer){ _t._clearTimer(); }
			_t._stopTimer();
			if(!_t._active){ return _t; /*Animation*/ }
			_t._paused = true;
			_t._fire("onPause", [_t.curve.getValue(_t._getStep())]);
			return _t; // Animation
		},

		gotoPercent: function(/*Decimal*/ percent, /*Boolean?*/ andPlay){
			// summary:
			//		Sets the progress of the animation.
			// percent:
			//		A percentage in decimal notation (between and including 0.0 and 1.0).
			// andPlay:
			//		If true, play the animation after setting the progress.
			var _t = this;
			_t._stopTimer();
			_t._active = _t._paused = true;
			_t._percent = percent;
			if(andPlay){ _t.play(); }
			return _t; // Animation
		},

		stop: function(/*boolean?*/ gotoEnd){
			// summary:
			//		Stops a running animation.
			// gotoEnd:
			//		If true, the animation will end.
			var _t = this;
			if(_t._delayTimer){ _t._clearTimer(); }
			if(!_t._timer){ return _t; /* Animation */ }
			_t._stopTimer();
			if(gotoEnd){
				_t._percent = 1;
			}
			_t._fire("onStop", [_t.curve.getValue(_t._getStep())]);
			_t._active = _t._paused = false;
			return _t; // Animation
		},

		destroy: function(){
			// summary:
			//		cleanup the animation
			this.stop();
		},

		status: function(){
			// summary:
			//		Returns a string token representation of the status of
			//		the animation, one of: "paused", "playing", "stopped"
			if(this._active){
				return this._paused ? "paused" : "playing"; // String
			}
			return "stopped"; // String
		},

		_cycle: function(){
			var _t = this;
			if(_t._active){
				var curr = new Date().valueOf();
				// Allow durations of 0 (instant) by setting step to 1 - see #13798
				var step = _t.duration === 0 ? 1 : (curr - _t._startTime) / (_t.duration);

				if(step >= 1){
					step = 1;
				}
				_t._percent = step;

				// Perform easing
				if(_t.easing){
					step = _t.easing(step);
				}

				_t._fire("onAnimate", [_t.curve.getValue(step)]);

				if(_t._percent < 1){
					_t._startTimer();
				}else{
					_t._active = false;

					if(_t.repeat > 0){
						_t.repeat--;
						_t.play(null, true);
					}else if(_t.repeat == -1){
						_t.play(null, true);
					}else{
						if(_t._startRepeatCount){
							_t.repeat = _t._startRepeatCount;
							_t._startRepeatCount = 0;
						}
					}
					_t._percent = 0;
					_t._fire("onEnd", [_t.node]);
					!_t.repeat && _t._stopTimer();
				}
			}
			return _t; // Animation
		},

		_clearTimer: function(){
			// summary:
			//		Clear the play delay timer
			clearTimeout(this._delayTimer);
			delete this._delayTimer;
		}

	});

	// the local timer, stubbed into all Animation instances
	var ctr = 0,
		timer = null,
		runner = {
			run: function(){}
		};

	lang.extend(Animation, {

		_startTimer: function(){
			if(!this._timer){
				this._timer = aspect.after(runner, "run", lang.hitch(this, "_cycle"), true);
				ctr++;
			}
			if(!timer){
				timer = setInterval(lang.hitch(runner, "run"), this.rate);
			}
		},

		_stopTimer: function(){
			if(this._timer){
				this._timer.remove();
				this._timer = null;
				ctr--;
			}
			if(ctr <= 0){
				clearInterval(timer);
				timer = null;
				ctr = 0;
			}
		}

	});

	var _makeFadeable =
		has("ie") ? function(node){
			// only set the zoom if the "tickle" value would be the same as the
			// default
			var ns = node.style;
			// don't set the width to auto if it didn't already cascade that way.
			// We don't want to f anyones designs
			if(!ns.width.length && style.get(node, "width") == "auto"){
				ns.width = "auto";
			}
		} :
		function(){};

	basefx._fade = function(/*Object*/ args){
		// summary:
		//		Returns an animation that will fade the node defined by
		//		args.node from the start to end values passed (args.start
		//		args.end) (end is mandatory, start is optional)

		args.node = dom.byId(args.node);
		var fArgs = _mixin({ properties: {} }, args),
			props = (fArgs.properties.opacity = {});

		props.start = !("start" in fArgs) ?
			function(){
				return +style.get(fArgs.node, "opacity")||0;
			} : fArgs.start;
		props.end = fArgs.end;

		var anim = basefx.animateProperty(fArgs);
		aspect.after(anim, "beforeBegin", lang.partial(_makeFadeable, fArgs.node), true);

		return anim; // Animation
	};

	/*=====
	var __FadeArgs = declare(null, {
		// node: DOMNode|String
		//		The node referenced in the animation
		// duration: Integer?
		//		Duration of the animation in milliseconds.
		// easing: Function?
		//		An easing function.
	});
	=====*/

	basefx.fadeIn = function(/*__FadeArgs*/ args){
		// summary:
		//		Returns an animation that will fade node defined in 'args' from
		//		its current opacity to fully opaque.
		return basefx._fade(_mixin({ end: 1 }, args)); // Animation
	};

	basefx.fadeOut = function(/*__FadeArgs*/ args){
		// summary:
		//		Returns an animation that will fade node defined in 'args'
		//		from its current opacity to fully transparent.
		return basefx._fade(_mixin({ end: 0 }, args)); // Animation
	};

	basefx._defaultEasing = function(/*Decimal?*/ n){
		// summary:
		//		The default easing function for Animation(s)
		return 0.5 + ((Math.sin((n + 1.5) * Math.PI)) / 2);	// Decimal
	};

	var PropLine = function(properties){
		// PropLine is an internal class which is used to model the values of
		// an a group of CSS properties across an animation lifecycle. In
		// particular, the "getValue" function handles getting interpolated
		// values between start and end for a particular CSS value.
		this._properties = properties;
		for(var p in properties){
			var prop = properties[p];
			if(prop.start instanceof Color){
				// create a reusable temp color object to keep intermediate results
				prop.tempColor = new Color();
			}
		}
	};

	PropLine.prototype.getValue = function(r){
		var ret = {};
		for(var p in this._properties){
			var prop = this._properties[p],
				start = prop.start;
			if(start instanceof Color){
				ret[p] = Color.blendColors(start, prop.end, r, prop.tempColor).toCss();
			}else if(!lang.isArray(start)){
				ret[p] = ((prop.end - start) * r) + start + (p != "opacity" ? prop.units || "px" : 0);
			}
		}
		return ret;
	};

	/*=====
	var __AnimArgs = declare(__FadeArgs, {
		// properties: Object?
		//		A hash map of style properties to Objects describing the transition,
		//		such as the properties of _Line with an additional 'units' property
		properties: {}

		//TODOC: add event callbacks
	});
	=====*/

	basefx.animateProperty = function(/*__AnimArgs*/ args){
		// summary:
		//		Returns an animation that will transition the properties of
		//		node defined in `args` depending how they are defined in
		//		`args.properties`
		//
		// description:
		//		Foundation of most `dojo/_base/fx`
		//		animations. It takes an object of "properties" corresponding to
		//		style properties, and animates them in parallel over a set
		//		duration.
		//
		// example:
		//		A simple animation that changes the width of the specified node.
		//	|	basefx.animateProperty({
		//	|		node: "nodeId",
		//	|		properties: { width: 400 },
		//	|	}).play();
		//		Dojo figures out the start value for the width and converts the
		//		integer specified for the width to the more expressive but
		//		verbose form `{ width: { end: '400', units: 'px' } }` which you
		//		can also specify directly. Defaults to 'px' if omitted.
		//
		// example:
		//		Animate width, height, and padding over 2 seconds... the
		//		pedantic way:
		//	|	basefx.animateProperty({ node: node, duration:2000,
		//	|		properties: {
		//	|			width: { start: '200', end: '400', units:"px" },
		//	|			height: { start:'200', end: '400', units:"px" },
		//	|			paddingTop: { start:'5', end:'50', units:"px" }
		//	|		}
		//	|	}).play();
		//		Note 'paddingTop' is used over 'padding-top'. Multi-name CSS properties
		//		are written using "mixed case", as the hyphen is illegal as an object key.
		//
		// example:
		//		Plug in a different easing function and register a callback for
		//		when the animation ends. Easing functions accept values between
		//		zero and one and return a value on that basis. In this case, an
		//		exponential-in curve.
		//	|	basefx.animateProperty({
		//	|		node: "nodeId",
		//	|		// dojo figures out the start value
		//	|		properties: { width: { end: 400 } },
		//	|		easing: function(n){
		//	|			return (n==0) ? 0 : Math.pow(2, 10 * (n - 1));
		//	|		},
		//	|		onEnd: function(node){
		//	|			// called when the animation finishes. The animation
		//	|			// target is passed to this function
		//	|		}
		//	|	}).play(500); // delay playing half a second
		//
		// example:
		//		Like all `Animation`s, animateProperty returns a handle to the
		//		Animation instance, which fires the events common to Dojo FX. Use `aspect.after`
		//		to access these events outside of the Animation definition:
		//	|	var anim = basefx.animateProperty({
		//	|		node:"someId",
		//	|		properties:{
		//	|			width:400, height:500
		//	|		}
		//	|	});
		//	|	aspect.after(anim, "onEnd", function(){
		//	|		console.log("animation ended");
		//	|	}, true);
		//	|	// play the animation now:
		//	|	anim.play();
		//
		// example:
		//		Each property can be a function whose return value is substituted along.
		//		Additionally, each measurement (eg: start, end) can be a function. The node
		//		reference is passed directly to callbacks.
		//	|	basefx.animateProperty({
		//	|		node:"mine",
		//	|		properties:{
		//	|			height:function(node){
		//	|				// shrink this node by 50%
		//	|				return domGeom.position(node).h / 2
		//	|			},
		//	|			width:{
		//	|				start:function(node){ return 100; },
		//	|				end:function(node){ return 200; }
		//	|			}
		//	|		}
		//	|	}).play();
		//

		var n = args.node = dom.byId(args.node);
		if(!args.easing){ args.easing = dojo._defaultEasing; }

		var anim = new Animation(args);
		aspect.after(anim, "beforeBegin", lang.hitch(anim, function(){
			var pm = {};
			for(var p in this.properties){
				// Make shallow copy of properties into pm because we overwrite
				// some values below. In particular if start/end are functions
				// we don't want to overwrite them or the functions won't be
				// called if the animation is reused.
				if(p == "width" || p == "height"){
					this.node.display = "block";
				}
				var prop = this.properties[p];
				if(lang.isFunction(prop)){
					prop = prop(n);
				}
				prop = pm[p] = _mixin({}, (lang.isObject(prop) ? prop: { end: prop }));

				if(lang.isFunction(prop.start)){
					prop.start = prop.start(n);
				}
				if(lang.isFunction(prop.end)){
					prop.end = prop.end(n);
				}
				var isColor = (p.toLowerCase().indexOf("color") >= 0);
				function getStyle(node, p){
					// domStyle.get(node, "height") can return "auto" or "" on IE; this is more reliable:
					var v = { height: node.offsetHeight, width: node.offsetWidth }[p];
					if(v !== undefined){ return v; }
					v = style.get(node, p);
					return (p == "opacity") ? +v : (isColor ? v : parseFloat(v));
				}
				if(!("end" in prop)){
					prop.end = getStyle(n, p);
				}else if(!("start" in prop)){
					prop.start = getStyle(n, p);
				}

				if(isColor){
					prop.start = new Color(prop.start);
					prop.end = new Color(prop.end);
				}else{
					prop.start = (p == "opacity") ? +prop.start : parseFloat(prop.start);
				}
			}
			this.curve = new PropLine(pm);
		}), true);
		aspect.after(anim, "onAnimate", lang.hitch(style, "set", anim.node), true);
		return anim; // Animation
	};

	basefx.anim = function(	/*DOMNode|String*/	node,
							/*Object*/			properties,
							/*Integer?*/		duration,
							/*Function?*/		easing,
							/*Function?*/		onEnd,
							/*Integer?*/		delay){
		// summary:
		//		A simpler interface to `animateProperty()`, also returns
		//		an instance of `Animation` but begins the animation
		//		immediately, unlike nearly every other Dojo animation API.
		// description:
		//		Simpler (but somewhat less powerful) version
		//		of `animateProperty`.  It uses defaults for many basic properties
		//		and allows for positional parameters to be used in place of the
		//		packed "property bag" which is used for other Dojo animation
		//		methods.
		//
		//		The `Animation` object returned will be already playing, so
		//		calling play() on it again is (usually) a no-op.
		// node:
		//		a DOM node or the id of a node to animate CSS properties on
		// duration:
		//		The number of milliseconds over which the animation
		//		should run. Defaults to the global animation default duration
		//		(350ms).
		// easing:
		//		An easing function over which to calculate acceleration
		//		and deceleration of the animation through its duration.
		//		A default easing algorithm is provided, but you may
		//		plug in any you wish. A large selection of easing algorithms
		//		are available in `dojo/fx/easing`.
		// onEnd:
		//		A function to be called when the animation finishes
		//		running.
		// delay:
		//		The number of milliseconds to delay beginning the
		//		animation by. The default is 0.
		// example:
		//		Fade out a node
		//	|	basefx.anim("id", { opacity: 0 });
		// example:
		//		Fade out a node over a full second
		//	|	basefx.anim("id", { opacity: 0 }, 1000);
		return basefx.animateProperty({ // Animation
			node: node,
			duration: duration || Animation.prototype.duration,
			properties: properties,
			easing: easing,
			onEnd: onEnd
		}).play(delay || 0);
	};


	if( 1 ){
		_mixin(dojo, basefx);
		// Alias to drop come 2.0:
		dojo._Animation = Animation;
	}

	return basefx;
});

},
'dojo/fx':function(){
define([
	"./_base/lang",
	"./Evented",
	"./_base/kernel",
	"./_base/array",
	"./aspect",
	"./_base/fx",
	"./dom",
	"./dom-style",
	"./dom-geometry",
	"./ready",
	"require" // for context sensitive loading of Toggler
], function(lang, Evented, dojo, arrayUtil, aspect, baseFx, dom, domStyle, geom, ready, require){

	// module:
	//		dojo/fx
	
	// For back-compat, remove in 2.0.
	if(!dojo.isAsync){
		ready(0, function(){
			var requires = ["./fx/Toggler"];
			require(requires);	// use indirection so modules not rolled into a build
		});
	}

	var coreFx = dojo.fx = {
		// summary:
		//		Effects library on top of Base animations
	};

	var _baseObj = {
			_fire: function(evt, args){
				if(this[evt]){
					this[evt].apply(this, args||[]);
				}
				return this;
			}
		};

	var _chain = function(animations){
		this._index = -1;
		this._animations = animations||[];
		this._current = this._onAnimateCtx = this._onEndCtx = null;

		this.duration = 0;
		arrayUtil.forEach(this._animations, function(a){
			this.duration += a.duration;
			if(a.delay){ this.duration += a.delay; }
		}, this);
	};
	_chain.prototype = new Evented();
	lang.extend(_chain, {
		_onAnimate: function(){
			this._fire("onAnimate", arguments);
		},
		_onEnd: function(){
			this._onAnimateCtx.remove();
			this._onEndCtx.remove();
			this._onAnimateCtx = this._onEndCtx = null;
			if(this._index + 1 == this._animations.length){
				this._fire("onEnd");
			}else{
				// switch animations
				this._current = this._animations[++this._index];
				this._onAnimateCtx = aspect.after(this._current, "onAnimate", lang.hitch(this, "_onAnimate"), true);
				this._onEndCtx = aspect.after(this._current, "onEnd", lang.hitch(this, "_onEnd"), true);
				this._current.play(0, true);
			}
		},
		play: function(/*int?*/ delay, /*Boolean?*/ gotoStart){
			if(!this._current){ this._current = this._animations[this._index = 0]; }
			if(!gotoStart && this._current.status() == "playing"){ return this; }
			var beforeBegin = aspect.after(this._current, "beforeBegin", lang.hitch(this, function(){
					this._fire("beforeBegin");
				}), true),
				onBegin = aspect.after(this._current, "onBegin", lang.hitch(this, function(arg){
					this._fire("onBegin", arguments);
				}), true),
				onPlay = aspect.after(this._current, "onPlay", lang.hitch(this, function(arg){
					this._fire("onPlay", arguments);
					beforeBegin.remove();
					onBegin.remove();
					onPlay.remove();
				}));
			if(this._onAnimateCtx){
				this._onAnimateCtx.remove();
			}
			this._onAnimateCtx = aspect.after(this._current, "onAnimate", lang.hitch(this, "_onAnimate"), true);
			if(this._onEndCtx){
				this._onEndCtx.remove();
			}
			this._onEndCtx = aspect.after(this._current, "onEnd", lang.hitch(this, "_onEnd"), true);
			this._current.play.apply(this._current, arguments);
			return this;
		},
		pause: function(){
			if(this._current){
				var e = aspect.after(this._current, "onPause", lang.hitch(this, function(arg){
						this._fire("onPause", arguments);
						e.remove();
					}), true);
				this._current.pause();
			}
			return this;
		},
		gotoPercent: function(/*Decimal*/percent, /*Boolean?*/ andPlay){
			this.pause();
			var offset = this.duration * percent;
			this._current = null;

			arrayUtil.some(this._animations, function(a, index){
				if(offset <= a.duration){
					this._current = a;
					this._index = index;
					return true;
				}
				offset -= a.duration;
				return false;
			}, this);
			if(this._current){
				this._current.gotoPercent(offset / this._current.duration);
			}
			if (andPlay) { this.play(); }
			return this;
		},
		stop: function(/*boolean?*/ gotoEnd){
			if(this._current){
				if(gotoEnd){
					for(; this._index + 1 < this._animations.length; ++this._index){
						this._animations[this._index].stop(true);
					}
					this._current = this._animations[this._index];
				}
				var e = aspect.after(this._current, "onStop", lang.hitch(this, function(arg){
						this._fire("onStop", arguments);
						e.remove();
					}), true);
				this._current.stop();
			}
			return this;
		},
		status: function(){
			return this._current ? this._current.status() : "stopped";
		},
		destroy: function(){
			this.stop();
			if(this._onAnimateCtx){ this._onAnimateCtx.remove(); }
			if(this._onEndCtx){ this._onEndCtx.remove(); }
		}
	});
	lang.extend(_chain, _baseObj);

	coreFx.chain = function(/*dojo/_base/fx.Animation[]*/ animations){
		// summary:
		//		Chain a list of `dojo/_base/fx.Animation`s to run in sequence
		//
		// description:
		//		Return a `dojo/_base/fx.Animation` which will play all passed
		//		`dojo/_base/fx.Animation` instances in sequence, firing its own
		//		synthesized events simulating a single animation. (eg:
		//		onEnd of this animation means the end of the chain,
		//		not the individual animations within)
		//
		// example:
		//	Once `node` is faded out, fade in `otherNode`
		//	|	require(["dojo/fx"], function(fx){
		//	|		fx.chain([
		//	|			fx.fadeIn({ node:node }),
		//	|			fx.fadeOut({ node:otherNode })
		//	|		]).play();
		//	|	});
		//
		return new _chain(animations); // dojo/_base/fx.Animation
	};

	var _combine = function(animations){
		this._animations = animations||[];
		this._connects = [];
		this._finished = 0;

		this.duration = 0;
		arrayUtil.forEach(animations, function(a){
			var duration = a.duration;
			if(a.delay){ duration += a.delay; }
			if(this.duration < duration){ this.duration = duration; }
			this._connects.push(aspect.after(a, "onEnd", lang.hitch(this, "_onEnd"), true));
		}, this);

		this._pseudoAnimation = new baseFx.Animation({curve: [0, 1], duration: this.duration});
		var self = this;
		arrayUtil.forEach(["beforeBegin", "onBegin", "onPlay", "onAnimate", "onPause", "onStop", "onEnd"],
			function(evt){
				self._connects.push(aspect.after(self._pseudoAnimation, evt,
					function(){ self._fire(evt, arguments); },
				true));
			}
		);
	};
	lang.extend(_combine, {
		_doAction: function(action, args){
			arrayUtil.forEach(this._animations, function(a){
				a[action].apply(a, args);
			});
			return this;
		},
		_onEnd: function(){
			if(++this._finished > this._animations.length){
				this._fire("onEnd");
			}
		},
		_call: function(action, args){
			var t = this._pseudoAnimation;
			t[action].apply(t, args);
		},
		play: function(/*int?*/ delay, /*Boolean?*/ gotoStart){
			this._finished = 0;
			this._doAction("play", arguments);
			this._call("play", arguments);
			return this;
		},
		pause: function(){
			this._doAction("pause", arguments);
			this._call("pause", arguments);
			return this;
		},
		gotoPercent: function(/*Decimal*/percent, /*Boolean?*/ andPlay){
			var ms = this.duration * percent;
			arrayUtil.forEach(this._animations, function(a){
				a.gotoPercent(a.duration < ms ? 1 : (ms / a.duration), andPlay);
			});
			this._call("gotoPercent", arguments);
			return this;
		},
		stop: function(/*boolean?*/ gotoEnd){
			this._doAction("stop", arguments);
			this._call("stop", arguments);
			return this;
		},
		status: function(){
			return this._pseudoAnimation.status();
		},
		destroy: function(){
			this.stop();
			arrayUtil.forEach(this._connects, function(handle){
				handle.remove();
			});
		}
	});
	lang.extend(_combine, _baseObj);

	coreFx.combine = function(/*dojo/_base/fx.Animation[]*/ animations){
		// summary:
		//		Combine a list of `dojo/_base/fx.Animation`s to run in parallel
		//
		// description:
		//		Combine an array of `dojo/_base/fx.Animation`s to run in parallel,
		//		providing a new `dojo/_base/fx.Animation` instance encompasing each
		//		animation, firing standard animation events.
		//
		// example:
		//	Fade out `node` while fading in `otherNode` simultaneously
		//	|	require(["dojo/fx"], function(fx){
		//	|		fx.combine([
		//	|			fx.fadeIn({ node:node }),
		//	|			fx.fadeOut({ node:otherNode })
		//	|		]).play();
		//	|	});
		//
		// example:
		//	When the longest animation ends, execute a function:
		//	|	require(["dojo/fx"], function(fx){
		//	|		var anim = fx.combine([
		//	|			fx.fadeIn({ node: n, duration:700 }),
		//	|			fx.fadeOut({ node: otherNode, duration: 300 })
		//	|		]);
		//	|		aspect.after(anim, "onEnd", function(){
		//	|			// overall animation is done.
		//	|		}, true);
		//	|		anim.play(); // play the animation
		//	|	});
		//
		return new _combine(animations); // dojo/_base/fx.Animation
	};

	coreFx.wipeIn = function(/*Object*/ args){
		// summary:
		//		Expand a node to it's natural height.
		//
		// description:
		//		Returns an animation that will expand the
		//		node defined in 'args' object from it's current height to
		//		it's natural height (with no scrollbar).
		//		Node must have no margin/border/padding.
		//
		// args: Object
		//		A hash-map of standard `dojo/_base/fx.Animation` constructor properties
		//		(such as easing: node: duration: and so on)
		//
		// example:
		//	|	require(["dojo/fx"], function(fx){
		//	|		fx.wipeIn({
		//	|			node:"someId"
		//	|		}).play()
		//	|	});

		var node = args.node = dom.byId(args.node), s = node.style, o;

		var anim = baseFx.animateProperty(lang.mixin({
			properties: {
				height: {
					// wrapped in functions so we wait till the last second to query (in case value has changed)
					start: function(){
						// start at current [computed] height, but use 1px rather than 0
						// because 0 causes IE to display the whole panel
						o = s.overflow;
						s.overflow = "hidden";
						if(s.visibility == "hidden" || s.display == "none"){
							s.height = "1px";
							s.display = "";
							s.visibility = "";
							return 1;
						}else{
							var height = domStyle.get(node, "height");
							return Math.max(height, 1);
						}
					},
					end: function(){
						return node.scrollHeight;
					}
				}
			}
		}, args));

		var fini = function(){
			s.height = "auto";
			s.overflow = o;
		};
		aspect.after(anim, "onStop", fini, true);
		aspect.after(anim, "onEnd", fini, true);

		return anim; // dojo/_base/fx.Animation
	};

	coreFx.wipeOut = function(/*Object*/ args){
		// summary:
		//		Shrink a node to nothing and hide it.
		//
		// description:
		//		Returns an animation that will shrink node defined in "args"
		//		from it's current height to 1px, and then hide it.
		//
		// args: Object
		//		A hash-map of standard `dojo/_base/fx.Animation` constructor properties
		//		(such as easing: node: duration: and so on)
		//
		// example:
		//	|	require(["dojo/fx"], function(fx){
		//	|		fx.wipeOut({ node:"someId" }).play()
		//	|	});

		var node = args.node = dom.byId(args.node), s = node.style, o;

		var anim = baseFx.animateProperty(lang.mixin({
			properties: {
				height: {
					end: 1 // 0 causes IE to display the whole panel
				}
			}
		}, args));

		aspect.after(anim, "beforeBegin", function(){
			o = s.overflow;
			s.overflow = "hidden";
			s.display = "";
		}, true);
		var fini = function(){
			s.overflow = o;
			s.height = "auto";
			s.display = "none";
		};
		aspect.after(anim, "onStop", fini, true);
		aspect.after(anim, "onEnd", fini, true);

		return anim; // dojo/_base/fx.Animation
	};

	coreFx.slideTo = function(/*Object*/ args){
		// summary:
		//		Slide a node to a new top/left position
		//
		// description:
		//		Returns an animation that will slide "node"
		//		defined in args Object from its current position to
		//		the position defined by (args.left, args.top).
		//
		// args: Object
		//		A hash-map of standard `dojo/_base/fx.Animation` constructor properties
		//		(such as easing: node: duration: and so on). Special args members
		//		are `top` and `left`, which indicate the new position to slide to.
		//
		// example:
		//	|	.slideTo({ node: node, left:"40", top:"50", units:"px" }).play()

		var node = args.node = dom.byId(args.node),
			top = null, left = null;

		var init = (function(n){
			return function(){
				var cs = domStyle.getComputedStyle(n);
				var pos = cs.position;
				top = (pos == 'absolute' ? n.offsetTop : parseInt(cs.top) || 0);
				left = (pos == 'absolute' ? n.offsetLeft : parseInt(cs.left) || 0);
				if(pos != 'absolute' && pos != 'relative'){
					var ret = geom.position(n, true);
					top = ret.y;
					left = ret.x;
					n.style.position="absolute";
					n.style.top=top+"px";
					n.style.left=left+"px";
				}
			};
		})(node);
		init();

		var anim = baseFx.animateProperty(lang.mixin({
			properties: {
				top: args.top || 0,
				left: args.left || 0
			}
		}, args));
		aspect.after(anim, "beforeBegin", init, true);

		return anim; // dojo/_base/fx.Animation
	};

	return coreFx;
});

},
'dojo/ready':function(){
define(["./_base/kernel", "./has", "require", "./domReady", "./_base/lang"], function(dojo, has, require, domReady, lang){
	// module:
	//		dojo/ready
	// note:
	//		This module should be unnecessary in dojo 2.0

	var
		// truthy if DOMContentLoaded or better (e.g., window.onload fired) has been achieved
		isDomReady = 0,

		// The queue of functions waiting to execute as soon as dojo.ready conditions satisfied
		loadQ = [],

		// prevent recursion in onLoad
		onLoadRecursiveGuard = 0,

		handleDomReady = function(){
			isDomReady = 1;
			dojo._postLoad = dojo.config.afterOnLoad = true;
			onEvent();
		},

		onEvent = function(){
			// Called when some state changes:
			//		- dom ready
			//		- dojo/domReady has finished processing everything in its queue
			//		- task added to loadQ
			//		- require() has finished loading all currently requested modules
			//
			// Run the functions queued with dojo.ready if appropriate.


			//guard against recursions into this function
			if(onLoadRecursiveGuard){
				return;
			}
			onLoadRecursiveGuard = 1;

			// Run tasks in queue if require() is finished loading modules, the dom is ready, and there are no
			// pending tasks registered via domReady().
			// The last step is necessary so that a user defined dojo.ready() callback is delayed until after the
			// domReady() calls inside of dojo.	  Failure can be seen on dijit/tests/robot/Dialog_ally.html on IE8
			// because the dijit/focus.js domReady() callback doesn't execute until after the test starts running.
			while(isDomReady && (!domReady || domReady._Q.length == 0) && (require.idle ? require.idle() : true) && loadQ.length){
				var f = loadQ.shift();
				try{
					f();
				}catch(e){
					// force the dojo.js on("error") handler do display the message
					e.info = e.message;
					if(require.signal){
						require.signal("error", e);
					}else{
						throw e;
					}
				}
			}

			onLoadRecursiveGuard = 0;
		};

	// Check if we should run the next queue operation whenever require() finishes loading modules or domReady
	// finishes processing it's queue.
	require.on && require.on("idle", onEvent);
	if(domReady){
		domReady._onQEmpty = onEvent;
	}

	var ready = dojo.ready = dojo.addOnLoad = function(priority, context, callback){
		// summary:
		//		Add a function to execute on DOM content loaded and all requested modules have arrived and been evaluated.
		//		In most cases, the `domReady` plug-in should suffice and this method should not be needed.
		//
		//		When called in a non-browser environment, just checks that all requested modules have arrived and been
		//		evaluated.
		// priority: Integer?
		//		The order in which to exec this callback relative to other callbacks, defaults to 1000
		// context: Object?|Function
		//		The context in which to run execute callback, or a callback if not using context
		// callback: Function?
		//		The function to execute.
		//
		// example:
		//	Simple DOM and Modules ready syntax
		//	|	require(["dojo/ready"], function(ready){
		//	|		ready(function(){ alert("Dom ready!"); });
		//	|	});
		//
		// example:
		//	Using a priority
		//	|	require(["dojo/ready"], function(ready){
		//	|		ready(2, function(){ alert("low priority ready!"); })
		//	|	});
		//
		// example:
		//	Using context
		//	|	require(["dojo/ready"], function(ready){
		//	|		ready(foo, function(){
		//	|			// in here, this == foo
		//	|		});
		//	|	});
		//
		// example:
		//	Using dojo/hitch style args:
		//	|	require(["dojo/ready"], function(ready){
		//	|		var foo = { dojoReady: function(){ console.warn(this, "dojo dom and modules ready."); } };
		//	|		ready(foo, "dojoReady");
		//	|	});

		var hitchArgs = lang._toArray(arguments);
		if(typeof priority != "number"){
			callback = context;
			context = priority;
			priority = 1000;
		}else{
			hitchArgs.shift();
		}
		callback = callback ?
			lang.hitch.apply(dojo, hitchArgs) :
			function(){
				context();
			};
		callback.priority = priority;
		for(var i = 0; i < loadQ.length && priority >= loadQ[i].priority; i++){}
		loadQ.splice(i, 0, callback);
		onEvent();
	};

	 1 || has.add("dojo-config-addOnLoad", 1);
	if( 1 ){
		var dca = dojo.config.addOnLoad;
		if(dca){
			ready[(lang.isArray(dca) ? "apply" : "call")](dojo, dca);
		}
	}

	if( false  && dojo.config.parseOnLoad && !dojo.isAsync){
		ready(99, function(){
			if(!dojo.parser){
				dojo.deprecated("Add explicit require(['dojo/parser']);", "", "2.0");
				require(["dojo/parser"]);
			}
		});
	}

	if(domReady){
		domReady(handleDomReady);
	}else{
		handleDomReady();
	}

	return ready;
});

},
'dojo/domReady':function(){
define(['./has'], function(has){
	var global = (function () { return this; })(),
		doc = document,
		readyStates = { 'loaded': 1, 'complete': 1 },
		fixReadyState = typeof doc.readyState != "string",
		ready = !!readyStates[doc.readyState],
		readyQ = [],
		recursiveGuard;

	function domReady(callback){
		// summary:
		//		Plugin to delay require()/define() callback from firing until the DOM has finished loading.
		readyQ.push(callback);
		if(ready){ processQ(); }
	}
	domReady.load = function(id, req, load){
		domReady(load);
	};

	// Export queue so that ready() can check if it's empty or not.
	domReady._Q = readyQ;
	domReady._onQEmpty = function(){
		// summary:
		//		Private method overridden by dojo/ready, to notify when everything in the
		//		domReady queue has been processed.  Do not use directly.
		//		Will be removed in 2.0, along with domReady._Q.
	};

	// For FF <= 3.5
	if(fixReadyState){ doc.readyState = "loading"; }

	function processQ(){
		// Calls all functions in the queue in order, unless processQ() is already running, in which case just return

		if(recursiveGuard){ return; }
		recursiveGuard = true;

		while(readyQ.length){
			try{
				(readyQ.shift())(doc);
			}catch(err){
				console.error(err, "in domReady callback", err.stack);
			}
		}

		recursiveGuard = false;

		// Notification for dojo/ready.  Remove for 2.0.
		// Note that this could add more tasks to the ready queue.
		domReady._onQEmpty();
	}

	if(!ready){
		var tests = [],
			detectReady = function(evt){
				evt = evt || global.event;
				if(ready || (evt.type == "readystatechange" && !readyStates[doc.readyState])){ return; }

				// For FF <= 3.5
				if(fixReadyState){ doc.readyState = "complete"; }

				ready = 1;
				processQ();
			},
			on = function(node, event){
				node.addEventListener(event, detectReady, false);
				readyQ.push(function(){ node.removeEventListener(event, detectReady, false); });
			};

		if(!has("dom-addeventlistener")){
			on = function(node, event){
				event = "on" + event;
				node.attachEvent(event, detectReady);
				readyQ.push(function(){ node.detachEvent(event, detectReady); });
			};

			var div = doc.createElement("div");
			try{
				if(div.doScroll && global.frameElement === null){
					// the doScroll test is only useful if we're in the top-most frame
					tests.push(function(){
						// Derived with permission from Diego Perini's IEContentLoaded
						// http://javascript.nwbox.com/IEContentLoaded/
						try{
							div.doScroll("left");
							return 1;
						}catch(e){}
					});
				}
			}catch(e){}
		}

		on(doc, "DOMContentLoaded");
		on(global, "load");

		if("onreadystatechange" in doc){
			on(doc, "readystatechange");
		}else if(!fixReadyState){
			// if the ready state property exists and there's
			// no readystatechange event, poll for the state
			// to change
			tests.push(function(){
				return readyStates[doc.readyState];
			});
		}

		if(tests.length){
			var poller = function(){
				if(ready){ return; }
				var i = tests.length;
				while(i--){
					if(tests[i]()){
						detectReady("poller");
						return;
					}
				}
				setTimeout(poller, 30);
			};
			poller();
		}
	}

	return domReady;
});

},
'esri/deferredUtils':function(){
//>>built
define(["dojo/_base/lang", "dojo/has", "./kernel"], function(g, h, k) {
    return {
        _dfdCanceller: function(a) {
            a.canceled = !0;
            var b = a._pendingDfd; - 1 === a.fired && (b && -1 === b.fired) && b.cancel();
            a._pendingDfd = null
        },
        _fixDfd: function(a) {
            var b = a.then;
            a.then = function(a, c, f) {
                if (a) {
                    var d = a;
                    a = function(a) {
                        return a && a._argsArray ? d.apply(null, a) : d(a)
                    }
                }
                return b.call(this, a, c, f)
            };
            return a
        },
        _resDfd: function(a, b, e) {
            var c = b.length;
            1 === c ? e ? a.errback(b[0]) : a.callback(b[0]) : 1 < c ? (b._argsArray = !0, a.callback(b)) : a.callback()
        }
    }
});
},
'esri/tileUtils':function(){
//>>built
define(["dojo/_base/array", "dojo/has", "./kernel", "./geometry/Point", "./geometry/Extent"], function(t, v, w, u, s) {
    return {
        _addFrameInfo: function(a, c) {
            var b, d, f = 2 * c.origin[1],
                g = c.origin[0],
                h = a.origin.x,
                e = a.width,
                l;
            t.forEach(a.lods, function(a) {
                b = Math.round(f / a.resolution);
                d = Math.ceil(b / e);
                l = Math.floor((g - h) / (e * a.resolution));
                a._frameInfo || (a._frameInfo = [d, l, l + d - 1, b])
            })
        },
        getContainingTileCoords: function(a, c, b) {
            var d = a.origin;
            b = b.resolution;
            return {
                row: Math.floor((d.y - c.y) / (a.height * b)),
                col: Math.floor((c.x -
                    d.x) / (a.width * b))
            }
        },
        getCandidateTileInfo: function(a, c, b) {
            var d;
            d = a.width;
            for (var f = a.height, g = b.xmax - b.xmin, h = b.ymax - b.ymin, e = a.__tileInfo === c, l = e ? a.getMinZoom() : -1, e = e ? a.getMaxZoom() : -1, m = -1, n = c.lods, p = Math.abs, k, q, r, e = -1 < e ? e : n.length - 1, l = -1 < l ? l : 0; l <= e; l++)
                if (q = n[l])
                    if (r = g > h ? p(h - f * q.resolution) : p(g - d * q.resolution), 0 > m || r <= m) k = q, m = r;
                    else break;
            d = k;
            k = d.resolution;
            f = (b.xmin + b.xmax) / 2;
            g = (b.ymin + b.ymax) / 2;
            h = a.width / 2 * k;
            k *= a.height / 2;
            f = new s(f - h, g - k, f + h, g + k, b.spatialReference);
            b = new u(f.xmin, f.ymax, b.spatialReference);
            e = d.resolution;
            h = c.width;
            g = c.height;
            c = c.origin;
            a = a.__visibleDelta;
            k = Math.floor;
            n = h * e;
            p = g * e;
            e = k((c.y - b.y) / p);
            m = k((b.x - c.x) / n);
            l = c.y - e * p;
            c = k(Math.abs((b.x - (c.x + m * n)) * h / n)) + a.x;
            a = k(Math.abs((b.y - l) * g / p)) + a.y;
            return {
                tile: {
                    point: b,
                    coords: {
                        row: e,
                        col: m
                    },
                    offsets: {
                        x: c,
                        y: a
                    }
                },
                lod: d,
                extent: f
            }
        },
        getTileExtent: function(a, c, b, d) {
            var f = a.origin;
            c = a.lods[c].resolution;
            var g = a.width,
                h = a.height;
            return new s(d * c * g + f.x, f.y - (b + 1) * c * h, (d + 1) * c * g + f.x, f.y - b * c * h, a.spatialReference)
        }
    }
});
},
'esri/PluginTarget':function(){
//>>built
define(["require", "dojo/aspect", "dojo/_base/array", "dojo/_base/lang", "dojo/Deferred", "dojo/when"], function(g, h, k, n, l, m) {
    function b() {
        h.after(this.constructor._meta, "ctor", this._pluginsHandler, !0);
        this._plugins = {}
    }
    b.prototype = {
        addPlugin: function(c, a) {
            var f = this,
                e = this._plugins,
                d = new l;
            try {
                g([c], function(b) {
                    c in e ? d.resolve({
                        id: e[c].declaredId || c.replace(/\//g, ".")
                    }) : (e[c] = b, m(b.add(f, a), function() {
                        var a = {
                            id: b.declaredId || c.replace(/\//g, ".")
                        };
                        f.emit("plugin-add", a);
                        d.resolve(a)
                    }, function(a) {
                        d.reject(a)
                    }))
                })
            } catch (b) {
                d.reject(b)
            }
            return d.promise
        },
        removePlugin: function(c) {
            if (c in this._plugins) {
                var a = this._plugins[c];
                a.remove(this);
                delete this._plugins[c];
                this.emit("plugin-remove", {
                    id: a.declaredId || c.replace(/\//g, ".")
                })
            }
        },
        _pluginsHandler: function() {
            var c = this;
            k.some(arguments, function(a) {
                if (a && a.plugins && a.plugins instanceof Array) {
                    a = a.plugins;
                    var b, e, d;
                    for (d = 0; d < a.length; d++) b = a[d], e = b instanceof Object ? b.id : b, c.addPlugin(e, b.options);
                    return !0
                }
            })
        }
    };
    return b
});
},
'esri/geometry/ScreenPoint':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "./Point"], function(a, c, d, e, b) {
    return a(b, {
        declaredClass: "esri.geometry.ScreenPoint",
        verifySR: function() {}
    })
});
},
'esri/geometry/Rect':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "dojox/gfx/_base", "../kernel", "../SpatialReference", "./Geometry", "./Point", "./Extent"], function(h, b, q, k, r, l, m, n, p) {
    var g = h(m, {
        declaredClass: "esri.geometry.Rect",
        constructor: function(a, c, f, d, e) {
            b.mixin(this, k.defaultRect);
            b.isObject(a) && "extent" === a.type && (c = a.ymax, f = a.getWidth(), d = a.getHeight(), e = a.spatialReference, a = a.xmin);
            b.isObject(a) ? (b.mixin(this, a), this.spatialReference && (this.spatialReference = new l(this.spatialReference))) : (this.x = a, this.y =
                c, this.width = f, this.height = d, this.spatialReference = e);
            this.verifySR()
        },
        getCenter: function() {
            return new n(this.x + this.width / 2, this.y + this.height / 2, this.spatialReference)
        },
        offset: function(a, c) {
            return new g(this.x + a, this.y + c, this.width, this.height, this.spatialReference)
        },
        intersects: function(a) {
            return a.x + a.width <= this.x || a.y + a.height <= this.y || a.y >= this.y + this.height || a.x >= this.x + this.width ? !1 : !0
        },
        getExtent: function() {
            return new p(parseFloat(this.x), parseFloat(this.y) - parseFloat(this.height), parseFloat(this.x) +
                parseFloat(this.width), parseFloat(this.y), this.spatialReference)
        },
        update: function(a, c, b, d, e) {
            this.x = a;
            this.y = c;
            this.width = b;
            this.height = d;
            this.spatialReference = e;
            this.clearCache();
            return this
        }
    });
    return g
});
},
'esri/geometry/scaleUtils':function(){
//>>built
define(["dojo/_base/lang", "dojo/has", "../kernel", "../config", "../lang", "../WKIDUnitConversion"], function(p, q, r, m, n, k) {
    var g = 20015077 / 180,
        l = m.defaults,
        f = {
            getUnitValueForSR: function(a) {
                return this.getUnitValue(a) || g
            },
            getUnitValue: function(a) {
                var b, c, d;
                a && ("object" === typeof a ? (b = a.wkid, c = a.wkt) : "number" === typeof a ? b = a : "string" === typeof a && (c = a));
                b ? d = k.values[k[b]] : c && -1 !== c.search(/^PROJCS/i) && (a = /UNIT\[([^\]]+)\]\]$/i.exec(c)) && a[1] && (d = parseFloat(a[1].split(",")[1]));
                return d
            },
            getScale: function(a, b,
                c) {
                var d, e, h;
                1 < arguments.length && n.isDefined(b) && !b.declaredClass ? (d = a, e = b, b = null, h = f.getUnitValue(c)) : (d = b || a.extent, e = a.width, h = f.getUnitValue(d && d.spatialReference));
                return d && e ? 39.37 * (d.getWidth() / e * (h || g)) * l.screenDPI : 0
            },
            getExtentForScale: function(a, b, c) {
                c = c || a.extent;
                var d = f.getUnitValue(a.spatialReference);
                return c.expand(b * a.width / (39.37 * (d || g) * l.screenDPI) / c.getWidth())
            }
        };
    return f
});
},
'esri/WKIDUnitConversion':function(){
//>>built
define(["dojo/has", "./kernel"], function(c, d) {
    var a, b = {
        values: [1, 0.3048, 0.3048006096012192, 0.3047972654, 0.9143917962, 0.201166195164, 0.9143984146160287, 0.3047994715386762, 20.11676512155263, 20.11678249437587, 0.9143985307444408, 0.91439523, 0.3047997101815088, 20.116756, 5E4, 15E4],
        2066: 5,
        2136: 12,
        2155: 2,
        2157: 0,
        2158: 0,
        2159: 12,
        2160: 12,
        2204: 2,
        2219: 0,
        2220: 0,
        2254: 2,
        2255: 2,
        2256: 1,
        2265: 1,
        2266: 1,
        2267: 2,
        2268: 2,
        2269: 1,
        2270: 1,
        2271: 2,
        2272: 2,
        2273: 1,
        2294: 0,
        2295: 0,
        2314: 3,
        2899: 2,
        2900: 2,
        2901: 1,
        2909: 1,
        2910: 1,
        2911: 2,
        2912: 2,
        2913: 1,
        2914: 1,
        2992: 1,
        2993: 0,
        2994: 1,
        3080: 1,
        3089: 2,
        3090: 0,
        3091: 2,
        3102: 2,
        3141: 0,
        3142: 0,
        3167: 13,
        3359: 2,
        3360: 0,
        3361: 1,
        3362: 0,
        3363: 2,
        3364: 0,
        3365: 2,
        3366: 3,
        3404: 2,
        3405: 0,
        3406: 0,
        3407: 3,
        3439: 0,
        3440: 0,
        3479: 1,
        3480: 0,
        3481: 1,
        3482: 0,
        3483: 1,
        3484: 0,
        3485: 2,
        3486: 0,
        3487: 2,
        3488: 0,
        3489: 0,
        3490: 2,
        3491: 0,
        3492: 2,
        3493: 0,
        3494: 2,
        3495: 0,
        3496: 2,
        3497: 0,
        3498: 2,
        3499: 0,
        3500: 2,
        3501: 0,
        3502: 2,
        3503: 0,
        3504: 2,
        3505: 0,
        3506: 2,
        3507: 0,
        3508: 2,
        3509: 0,
        3510: 2,
        3511: 0,
        3512: 2,
        3513: 0,
        3514: 0,
        3515: 2,
        3516: 0,
        3517: 2,
        3518: 0,
        3519: 2,
        3520: 0,
        3521: 2,
        3522: 0,
        3523: 2,
        3524: 0,
        3525: 2,
        3526: 0,
        3527: 2,
        3528: 0,
        3529: 2,
        3530: 0,
        3531: 2,
        3532: 0,
        3533: 2,
        3534: 0,
        3535: 2,
        3536: 0,
        3537: 2,
        3538: 0,
        3539: 2,
        3540: 0,
        3541: 2,
        3542: 0,
        3543: 2,
        3544: 0,
        3545: 2,
        3546: 0,
        3547: 2,
        3548: 0,
        3549: 2,
        3550: 0,
        3551: 2,
        3552: 0,
        3553: 2,
        3582: 2,
        3583: 0,
        3584: 2,
        3585: 0,
        3586: 2,
        3587: 0,
        3588: 1,
        3589: 0,
        3590: 1,
        3591: 0,
        3592: 0,
        3593: 1,
        3598: 2,
        3599: 0,
        3600: 2,
        3605: 1,
        3606: 0,
        3607: 0,
        3608: 2,
        3609: 0,
        3610: 2,
        3611: 0,
        3612: 2,
        3613: 0,
        3614: 2,
        3615: 0,
        3616: 2,
        3617: 0,
        3618: 2,
        3619: 0,
        3620: 2,
        3621: 0,
        3622: 2,
        3623: 0,
        3624: 2,
        3625: 0,
        3626: 2,
        3627: 0,
        3628: 2,
        3629: 0,
        3630: 2,
        3631: 0,
        3632: 2,
        3633: 0,
        3634: 1,
        3635: 0,
        3636: 1,
        3640: 2,
        3641: 0,
        3642: 2,
        3643: 0,
        3644: 1,
        3645: 0,
        3646: 1,
        3647: 0,
        3648: 1,
        3649: 0,
        3650: 2,
        3651: 0,
        3652: 2,
        3653: 0,
        3654: 2,
        3655: 0,
        3656: 1,
        3657: 0,
        3658: 2,
        3659: 0,
        3660: 2,
        3661: 0,
        3662: 2,
        3663: 0,
        3664: 2,
        3668: 2,
        3669: 0,
        3670: 2,
        3671: 0,
        3672: 2,
        3673: 0,
        3674: 2,
        3675: 0,
        3676: 1,
        3677: 2,
        3678: 0,
        3679: 1,
        3680: 2,
        3681: 0,
        3682: 1,
        3683: 2,
        3684: 0,
        3685: 0,
        3686: 2,
        3687: 0,
        3688: 2,
        3689: 0,
        3690: 2,
        3691: 0,
        3692: 2,
        3696: 2,
        3697: 0,
        3698: 2,
        3699: 0,
        3700: 2,
        3793: 0,
        3794: 0,
        3812: 0,
        3854: 0,
        3857: 0,
        3920: 0,
        3978: 0,
        3979: 0,
        3991: 2,
        3992: 2,
        4026: 0,
        4037: 0,
        4038: 0,
        4071: 0,
        4082: 0,
        4083: 0,
        4217: 2,
        4414: 0,
        4415: 0,
        4417: 0,
        4434: 0,
        4437: 0,
        4438: 2,
        4439: 2,
        4462: 0,
        4467: 0,
        4471: 0,
        4474: 0,
        4559: 0,
        4647: 0,
        4822: 0,
        4826: 0,
        4839: 0,
        5018: 0,
        5048: 0,
        5167: 0,
        5168: 0,
        5221: 0,
        5223: 0,
        5234: 0,
        5235: 0,
        5243: 0,
        5247: 0,
        5266: 0,
        5316: 0,
        5320: 0,
        5321: 0,
        5325: 0,
        5337: 0,
        5361: 0,
        5362: 0,
        5367: 0,
        5382: 0,
        5383: 0,
        5396: 0,
        5456: 0,
        5457: 0,
        5469: 0,
        5472: 4,
        5490: 0,
        5513: 0,
        5514: 0,
        5523: 0,
        5559: 0,
        5588: 1,
        5589: 3,
        5596: 0,
        5627: 0,
        5629: 0,
        5641: 0,
        5643: 0,
        5644: 0,
        5646: 2,
        5654: 2,
        5655: 2,
        5659: 0,
        5700: 0,
        5825: 0,
        5836: 0,
        5837: 0,
        5839: 0,
        5842: 0,
        5844: 0,
        5858: 0,
        5879: 0,
        5880: 0,
        5887: 0,
        5890: 0,
        6128: 1,
        6129: 1,
        6141: 1,
        6210: 0,
        6211: 0,
        6316: 0,
        6391: 1,
        20499: 0,
        20538: 0,
        20539: 0,
        20790: 0,
        20791: 0,
        21291: 0,
        21292: 0,
        21500: 0,
        21817: 0,
        21818: 0,
        22032: 0,
        22033: 0,
        22091: 0,
        22092: 0,
        22332: 0,
        22391: 0,
        22392: 0,
        22700: 0,
        22770: 0,
        22780: 0,
        22832: 0,
        23090: 0,
        23095: 0,
        23239: 0,
        23240: 0,
        23433: 0,
        23700: 0,
        24047: 0,
        24048: 0,
        24100: 3,
        24200: 0,
        24305: 0,
        24306: 0,
        24382: 10,
        24383: 0,
        24500: 0,
        24547: 0,
        24548: 0,
        24571: 9,
        24600: 0,
        25E3: 0,
        25231: 0,
        25884: 0,
        25932: 0,
        26237: 0,
        26331: 0,
        26332: 0,
        26432: 0,
        26591: 0,
        26592: 0,
        26632: 0,
        26692: 0,
        27120: 0,
        27200: 0,
        27291: 6,
        27292: 6,
        27429: 0,
        27492: 0,
        27493: 0,
        27500: 0,
        27700: 0,
        28232: 0,
        28600: 0,
        28991: 0,
        28992: 0,
        29100: 0,
        29101: 0,
        29220: 0,
        29221: 0,
        29333: 0,
        29635: 0,
        29636: 0,
        29701: 0,
        29738: 0,
        29739: 0,
        29849: 0,
        29850: 0,
        29871: 8,
        29872: 7,
        29873: 0,
        30200: 5,
        30339: 0,
        30340: 0,
        30591: 0,
        30592: 0,
        30791: 0,
        30792: 0,
        30800: 0,
        31028: 0,
        31121: 0,
        31154: 0,
        31170: 0,
        31171: 0,
        31370: 0,
        31528: 0,
        31529: 0,
        31600: 0,
        31700: 0,
        31838: 0,
        31839: 0,
        31900: 0,
        31901: 0,
        32061: 0,
        32062: 0,
        32098: 0,
        32099: 2,
        32100: 0,
        32104: 0,
        32161: 0,
        32766: 0,
        53034: 0,
        53048: 0,
        53049: 0,
        54034: 0,
        65061: 2,
        65062: 2,
        65161: 0,
        65163: 0,
        102041: 2,
        102064: 11,
        102068: 14,
        102069: 15,
        102118: 2,
        102119: 1,
        102120: 2,
        102121: 2,
        102217: 2,
        102218: 0,
        102219: 2,
        102220: 2,
        102378: 1,
        102379: 1,
        102380: 0,
        102381: 1,
        102589: 2,
        102599: 2,
        102600: 2,
        102604: 2,
        102647: 0,
        102704: 2,
        102705: 2,
        102761: 2,
        102762: 0,
        102763: 2,
        102764: 0,
        102765: 0,
        102766: 2,
        102970: 1,
        102974: 2,
        102993: 0,
        102994: 0,
        102995: 2,
        102996: 2,
        103015: 0,
        103016: 2,
        103017: 0,
        103018: 2,
        103025: 0,
        103026: 0,
        103027: 2,
        103028: 2,
        103035: 0,
        103036: 0,
        103037: 2,
        103038: 2,
        103039: 0,
        103040: 0,
        103041: 2,
        103042: 2,
        103043: 0,
        103044: 0,
        103045: 2,
        103046: 2,
        103047: 0,
        103048: 0,
        103049: 2,
        103050: 2,
        103051: 0,
        103052: 2,
        103053: 0,
        103054: 2,
        103055: 0,
        103056: 2,
        103057: 0,
        103058: 0,
        103059: 2,
        103060: 2,
        103061: 0,
        103062: 0,
        103063: 2,
        103064: 2,
        103069: 2,
        103070: 0,
        103071: 0,
        103072: 2,
        103073: 2,
        103086: 0,
        103087: 0,
        103088: 2,
        103089: 2,
        103094: 1,
        103095: 0,
        103096: 2,
        103103: 0,
        103104: 2,
        103105: 0,
        103106: 2,
        103121: 0,
        103122: 2,
        103123: 0,
        103124: 0,
        103125: 1,
        103126: 1,
        103127: 0,
        103128: 0,
        103129: 2,
        103130: 2,
        103131: 0,
        103132: 0,
        103133: 2,
        103134: 2,
        103135: 0,
        103136: 0,
        103137: 1,
        103138: 1,
        103139: 0,
        103140: 2,
        103141: 0,
        103142: 2,
        103143: 0,
        103144: 2,
        103145: 0,
        103146: 1,
        103147: 0,
        103148: 0,
        103149: 2,
        103150: 2,
        103151: 0,
        103152: 2,
        103172: 0,
        103173: 2,
        103174: 0,
        103175: 0,
        103176: 2,
        103177: 2,
        103178: 0,
        103179: 0,
        103180: 2,
        103181: 2,
        103182: 0,
        103183: 0,
        103184: 2,
        103185: 2,
        103228: 0,
        103229: 0,
        103230: 2,
        103231: 2,
        103250: 0,
        103251: 2,
        103252: 0,
        103253: 2,
        103260: 0,
        103261: 0,
        103262: 2,
        103263: 2,
        103270: 0,
        103271: 0,
        103272: 2,
        103273: 2,
        103274: 0,
        103275: 0,
        103276: 2,
        103277: 2,
        103278: 0,
        103279: 0,
        103280: 2,
        103281: 2,
        103282: 0,
        103283: 0,
        103284: 2,
        103285: 2,
        103286: 0,
        103287: 2,
        103288: 0,
        103289: 2,
        103290: 0,
        103291: 2,
        103292: 0,
        103293: 0,
        103294: 2,
        103295: 2,
        103296: 0,
        103297: 0,
        103298: 2,
        103299: 2,
        103376: 2,
        103377: 0,
        103378: 0,
        103379: 2,
        103380: 2,
        103393: 0,
        103394: 0,
        103395: 2,
        103396: 2,
        103472: 0,
        103473: 1,
        103474: 0,
        103475: 2,
        103482: 0,
        103483: 2,
        103484: 0,
        103485: 2,
        103500: 0,
        103501: 2,
        103502: 0,
        103503: 0,
        103504: 1,
        103505: 1,
        103506: 0,
        103507: 0,
        103508: 2,
        103509: 2,
        103510: 0,
        103511: 0,
        103512: 2,
        103513: 2,
        103514: 0,
        103515: 2,
        103516: 0,
        103517: 2,
        103518: 0,
        103519: 2,
        103520: 0,
        103521: 1,
        103522: 0,
        103523: 0,
        103524: 2,
        103525: 2,
        103526: 0,
        103527: 2,
        103561: 2,
        103562: 2,
        103563: 0,
        103564: 0,
        103565: 2,
        103566: 2,
        103567: 0,
        103568: 0,
        103569: 2,
        103570: 2,
        103584: 0,
        103585: 2,
        103695: 2
    };
    for (a = 2E3; 2046 > a; a++) b[a] = 0;
    for (a = 2056; 2066 > a; a++) b[a] = 0;
    for (a = 2067; 2136 > a; a++) b[a] = 0;
    for (a = 2137; 2155 > a; a++) b[a] = 0;
    for (a = 2161; 2171 > a; a++) b[a] = 0;
    for (a = 2172; 2194 > a; a++) b[a] = 0;
    for (a = 2195; 2199 > a; a++) b[a] = 0;
    for (a = 2200; 2204 > a; a++) b[a] = 0;
    for (a = 2205; 2218 > a; a++) b[a] = 0;
    for (a = 2222; 2225 > a; a++) b[a] = 1;
    for (a = 2225; 2251 > a; a++) b[a] = 2;
    for (a = 2251; 2254 > a; a++) b[a] = 1;
    for (a = 2257; 2265 > a; a++) b[a] = 2;
    for (a = 2274; 2280 >
        a; a++) b[a] = 2;
    for (a = 2280; 2283 > a; a++) b[a] = 1;
    for (a = 2283; 2290 > a; a++) b[a] = 2;
    for (a = 2290; 2293 > a; a++) b[a] = 0;
    for (a = 2308; 2314 > a; a++) b[a] = 0;
    for (a = 2315; 2463 > a; a++) b[a] = 0;
    for (a = 2523; 2867 > a; a++) b[a] = 0;
    for (a = 2867; 2870 > a; a++) b[a] = 1;
    for (a = 2870; 2889 > a; a++) b[a] = 2;
    for (a = 2891; 2896 > a; a++) b[a] = 2;
    for (a = 2896; 2899 > a; a++) b[a] = 1;
    for (a = 2902; 2909 > a; a++) b[a] = 2;
    for (a = 2915; 2921 > a; a++) b[a] = 2;
    for (a = 2921; 2924 > a; a++) b[a] = 1;
    for (a = 2924; 2931 > a; a++) b[a] = 2;
    for (a = 2931; 2963 > a; a++) b[a] = 0;
    for (a = 2964; 2969 > a; a++) b[a] = 2;
    for (a = 2969; 2974 > a; a++) b[a] =
        0;
    for (a = 2975; 2992 > a; a++) b[a] = 0;
    for (a = 2995; 3052 > a; a++) b[a] = 0;
    for (a = 3054; 3080 > a; a++) b[a] = 0;
    for (a = 3081; 3089 > a; a++) b[a] = 0;
    for (a = 3092; 3102 > a; a++) b[a] = 0;
    for (a = 3106; 3139 > a; a++) b[a] = 0;
    for (a = 3146; 3152 > a; a++) b[a] = 0;
    for (a = 3153; 3167 > a; a++) b[a] = 0;
    for (a = 3168; 3173 > a; a++) b[a] = 0;
    for (a = 3174; 3204 > a; a++) b[a] = 0;
    for (a = 3294; 3359 > a; a++) b[a] = 0;
    for (a = 3367; 3404 > a; a++) b[a] = 0;
    for (a = 3408; 3417 > a; a++) b[a] = 0;
    for (a = 3417; 3439 > a; a++) b[a] = 2;
    for (a = 3441; 3447 > a; a++) b[a] = 2;
    for (a = 3447; 3451 > a; a++) b[a] = 0;
    for (a = 3451; 3460 > a; a++) b[a] = 2;
    for (a =
        3460; 3479 > a; a++) b[a] = 0;
    for (a = 3554; 3560 > a; a++) b[a] = 0;
    for (a = 3560; 3571 > a; a++) b[a] = 2;
    for (a = 3571; 3582 > a; a++) b[a] = 0;
    for (a = 3594; 3598 > a; a++) b[a] = 0;
    for (a = 3601; 3605 > a; a++) b[a] = 0;
    for (a = 3637; 3640 > a; a++) b[a] = 0;
    for (a = 3665; 3668 > a; a++) b[a] = 0;
    for (a = 3693; 3696 > a; a++) b[a] = 0;
    for (a = 3701; 3728 > a; a++) b[a] = 0;
    for (a = 3728; 3740 > a; a++) b[a] = 2;
    for (a = 3740; 3752 > a; a++) b[a] = 0;
    for (a = 3753; 3761 > a; a++) b[a] = 2;
    for (a = 3761; 3774 > a; a++) b[a] = 0;
    for (a = 3775; 3778 > a; a++) b[a] = 0;
    for (a = 3779; 3782 > a; a++) b[a] = 0;
    for (a = 3783; 3786 > a; a++) b[a] = 0;
    for (a = 3788; 3792 >
        a; a++) b[a] = 0;
    for (a = 3797; 3803 > a; a++) b[a] = 0;
    for (a = 3814; 3817 > a; a++) b[a] = 0;
    for (a = 3825; 3830 > a; a++) b[a] = 0;
    for (a = 3832; 3842 > a; a++) b[a] = 0;
    for (a = 3844; 3853 > a; a++) b[a] = 0;
    for (a = 3873; 3886 > a; a++) b[a] = 0;
    for (a = 3890; 3894 > a; a++) b[a] = 0;
    for (a = 3907; 3913 > a; a++) b[a] = 0;
    for (a = 3942; 3951 > a; a++) b[a] = 0;
    for (a = 3968; 3971 > a; a++) b[a] = 0;
    for (a = 3973; 3977 > a; a++) b[a] = 0;
    for (a = 3986; 3990 > a; a++) b[a] = 0;
    for (a = 3994; 3998 > a; a++) b[a] = 0;
    for (a = 4048; 4052 > a; a++) b[a] = 0;
    for (a = 4056; 4064 > a; a++) b[a] = 0;
    for (a = 4093; 4097 > a; a++) b[a] = 0;
    for (a = 4399; 4414 > a; a++) b[a] =
        2;
    for (a = 4418; 4434 > a; a++) b[a] = 2;
    for (a = 4455; 4458 > a; a++) b[a] = 2;
    for (a = 4484; 4490 > a; a++) b[a] = 0;
    for (a = 4491; 4555 > a; a++) b[a] = 0;
    for (a = 4568; 4590 > a; a++) b[a] = 0;
    for (a = 4652; 4657 > a; a++) b[a] = 0;
    for (a = 4766; 4801 > a; a++) b[a] = 0;
    for (a = 5014; 5017 > a; a++) b[a] = 0;
    for (a = 5069; 5073 > a; a++) b[a] = 0;
    for (a = 5105; 5131 > a; a++) b[a] = 0;
    for (a = 5173; 5189 > a; a++) b[a] = 0;
    for (a = 5253; 5260 > a; a++) b[a] = 0;
    for (a = 5269; 5276 > a; a++) b[a] = 0;
    for (a = 5292; 5312 > a; a++) b[a] = 0;
    for (a = 5329; 5332 > a; a++) b[a] = 0;
    for (a = 5343; 5350 > a; a++) b[a] = 0;
    for (a = 5355; 5358 > a; a++) b[a] = 0;
    for (a =
        5387; 5390 > a; a++) b[a] = 0;
    for (a = 5459; 5464 > a; a++) b[a] = 0;
    for (a = 5479; 5483 > a; a++) b[a] = 0;
    for (a = 5518; 5521 > a; a++) b[a] = 0;
    for (a = 5530; 5540 > a; a++) b[a] = 0;
    for (a = 5550; 5553 > a; a++) b[a] = 0;
    for (a = 5562; 5584 > a; a++) b[a] = 0;
    for (a = 5623; 5626 > a; a++) b[a] = 2;
    for (a = 5631; 5640 > a; a++) b[a] = 0;
    for (a = 5649; 5654 > a; a++) b[a] = 0;
    for (a = 5663; 5681 > a; a++) b[a] = 0;
    for (a = 5682; 5686 > a; a++) b[a] = 0;
    for (a = 5875; 5878 > a; a++) b[a] = 0;
    for (a = 5921; 5941 > a; a++) b[a] = 0;
    for (a = 6050; 6126 > a; a++) b[a] = 0;
    for (a = 6244; 6276 > a; a++) b[a] = 0;
    for (a = 6328; 6349 > a; a++) b[a] = 0;
    for (a = 6350; 6355 >
        a; a++) b[a] = 0;
    for (a = 20002; 20033 > a; a++) b[a] = 0;
    for (a = 20062; 20093 > a; a++) b[a] = 0;
    for (a = 20135; 20139 > a; a++) b[a] = 0;
    for (a = 20248; 20259 > a; a++) b[a] = 0;
    for (a = 20348; 20359 > a; a++) b[a] = 0;
    for (a = 20436; 20441 > a; a++) b[a] = 0;
    for (a = 20822; 20825 > a; a++) b[a] = 0;
    for (a = 20934; 20937 > a; a++) b[a] = 0;
    for (a = 21035; 21038 > a; a++) b[a] = 0;
    for (a = 21095; 21098 > a; a++) b[a] = 0;
    for (a = 21148; 21151 > a; a++) b[a] = 0;
    for (a = 21413; 21424 > a; a++) b[a] = 0;
    for (a = 21473; 21484 > a; a++) b[a] = 0;
    for (a = 21780; 21783 > a; a++) b[a] = 0;
    for (a = 21891; 21895 > a; a++) b[a] = 0;
    for (a = 21896; 21900 > a; a++) b[a] =
        0;
    for (a = 22171; 22178 > a; a++) b[a] = 0;
    for (a = 22181; 22188 > a; a++) b[a] = 0;
    for (a = 22191; 22198 > a; a++) b[a] = 0;
    for (a = 22234; 22237 > a; a++) b[a] = 0;
    for (a = 22521; 22526 > a; a++) b[a] = 0;
    for (a = 22991; 22995 > a; a++) b[a] = 0;
    for (a = 23028; 23039 > a; a++) b[a] = 0;
    for (a = 23830; 23854 > a; a++) b[a] = 0;
    for (a = 23866; 23873 > a; a++) b[a] = 0;
    for (a = 23877; 23885 > a; a++) b[a] = 0;
    for (a = 23886; 23895 > a; a++) b[a] = 0;
    for (a = 23946; 23949 > a; a++) b[a] = 0;
    for (a = 24311; 24314 > a; a++) b[a] = 0;
    for (a = 24342; 24348 > a; a++) b[a] = 0;
    for (a = 24370; 24375 > a; a++) b[a] = 10;
    for (a = 24375; 24382 > a; a++) b[a] = 0;
    for (a =
        24718; 24722 > a; a++) b[a] = 0;
    for (a = 24817; 24822 > a; a++) b[a] = 0;
    for (a = 24877; 24883 > a; a++) b[a] = 0;
    for (a = 24891; 24894 > a; a++) b[a] = 0;
    for (a = 25391; 25396 > a; a++) b[a] = 0;
    for (a = 25828; 25839 > a; a++) b[a] = 0;
    for (a = 26191; 26196 > a; a++) b[a] = 0;
    for (a = 26391; 26394 > a; a++) b[a] = 0;
    for (a = 26701; 26723 > a; a++) b[a] = 0;
    for (a = 26729; 26800 > a; a++) b[a] = 2;
    for (a = 26801; 26804 > a; a++) b[a] = 2;
    for (a = 26811; 26814 > a; a++) b[a] = 2;
    for (a = 26847; 26871 > a; a++) b[a] = 2;
    for (a = 26891; 26900 > a; a++) b[a] = 0;
    for (a = 26901; 26924 > a; a++) b[a] = 0;
    for (a = 26929; 26947 > a; a++) b[a] = 0;
    for (a = 26948; 26999 >
        a; a++) b[a] = 0;
    for (a = 27037; 27041 > a; a++) b[a] = 0;
    for (a = 27205; 27233 > a; a++) b[a] = 0;
    for (a = 27258; 27261 > a; a++) b[a] = 0;
    for (a = 27391; 27399 > a; a++) b[a] = 0;
    for (a = 27561; 27565 > a; a++) b[a] = 0;
    for (a = 27571; 27575 > a; a++) b[a] = 0;
    for (a = 27581; 27585 > a; a++) b[a] = 0;
    for (a = 27591; 27595 > a; a++) b[a] = 0;
    for (a = 28191; 28194 > a; a++) b[a] = 0;
    for (a = 28348; 28359 > a; a++) b[a] = 0;
    for (a = 28402; 28433 > a; a++) b[a] = 0;
    for (a = 28462; 28493 > a; a++) b[a] = 0;
    for (a = 29118; 29123 > a; a++) b[a] = 0;
    for (a = 29168; 29173 > a; a++) b[a] = 0;
    for (a = 29177; 29186 > a; a++) b[a] = 0;
    for (a = 29187; 29196 > a; a++) b[a] =
        0;
    for (a = 29900; 29904 > a; a++) b[a] = 0;
    for (a = 30161; 30180 > a; a++) b[a] = 0;
    for (a = 30491; 30495 > a; a++) b[a] = 0;
    for (a = 30729; 30733 > a; a++) b[a] = 0;
    for (a = 31251; 31260 > a; a++) b[a] = 0;
    for (a = 31265; 31269 > a; a++) b[a] = 0;
    for (a = 31275; 31280 > a; a++) b[a] = 0;
    for (a = 31281; 31298 > a; a++) b[a] = 0;
    for (a = 31461; 31470 > a; a++) b[a] = 0;
    for (a = 31491; 31496 > a; a++) b[a] = 0;
    for (a = 31917; 31923 > a; a++) b[a] = 0;
    for (a = 31965; 32001 > a; a++) b[a] = 0;
    for (a = 32001; 32004 > a; a++) b[a] = 2;
    for (a = 32005; 32032 > a; a++) b[a] = 2;
    for (a = 32033; 32061 > a; a++) b[a] = 2;
    for (a = 32064; 32068 > a; a++) b[a] = 2;
    for (a =
        32074; 32078 > a; a++) b[a] = 2;
    for (a = 32081; 32087 > a; a++) b[a] = 0;
    for (a = 32107; 32131 > a; a++) b[a] = 0;
    for (a = 32133; 32159 > a; a++) b[a] = 0;
    for (a = 32164; 32168 > a; a++) b[a] = 2;
    for (a = 32180; 32200 > a; a++) b[a] = 0;
    for (a = 32201; 32261 > a; a++) b[a] = 0;
    for (a = 32301; 32361 > a; a++) b[a] = 0;
    for (a = 32601; 32663 > a; a++) b[a] = 0;
    for (a = 32664; 32668 > a; a++) b[a] = 2;
    for (a = 32701; 32762 > a; a++) b[a] = 0;
    for (a = 53001; 53005 > a; a++) b[a] = 0;
    for (a = 53008; 53020 > a; a++) b[a] = 0;
    for (a = 53021; 53033 > a; a++) b[a] = 0;
    for (a = 53042; 53047 > a; a++) b[a] = 0;
    for (a = 54001; 54005 > a; a++) b[a] = 0;
    for (a = 54008; 54020 >
        a; a++) b[a] = 0;
    for (a = 54021; 54033 > a; a++) b[a] = 0;
    for (a = 54042; 54047 > a; a++) b[a] = 0;
    for (a = 54048; 54054 > a; a++) b[a] = 0;
    for (a = 102001; 102041 > a; a++) b[a] = 0;
    for (a = 102042; 102064 > a; a++) b[a] = 0;
    for (a = 102065; 102068 > a; a++) b[a] = 0;
    for (a = 102070; 102118 > a; a++) b[a] = 0;
    for (a = 102122; 102217 > a; a++) b[a] = 0;
    for (a = 102221; 102378 > a; a++) b[a] = 0;
    for (a = 102382; 102389 > a; a++) b[a] = 0;
    for (a = 102389; 102399 > a; a++) b[a] = 2;
    for (a = 102401; 102445 > a; a++) b[a] = 0;
    for (a = 102445; 102448 > a; a++) b[a] = 2;
    for (a = 102450; 102453 > a; a++) b[a] = 0;
    for (a = 102461; 102469 > a; a++) b[a] = 2;
    for (a = 102469; 102497 > a; a++) b[a] = 0;
    for (a = 102500; 102520 > a; a++) b[a] = 1;
    for (a = 102520; 102525 > a; a++) b[a] = 0;
    for (a = 102525; 102530 > a; a++) b[a] = 2;
    for (a = 102530; 102550 > a; a++) b[a] = 0;
    for (a = 102570; 102589 > a; a++) b[a] = 0;
    for (a = 102590; 102599 > a; a++) b[a] = 0;
    for (a = 102601; 102604 > a; a++) b[a] = 0;
    for (a = 102605; 102629 > a; a++) b[a] = 0;
    for (a = 102629; 102647 > a; a++) b[a] = 2;
    for (a = 102648; 102701 > a; a++) b[a] = 2;
    for (a = 102701; 102704 > a; a++) b[a] = 0;
    for (a = 102707; 102731 > a; a++) b[a] = 2;
    for (a = 102733; 102759 > a; a++) b[a] = 2;
    for (a = 102767; 102799 > a; a++) b[a] = 0;
    for (a =
        102962; 102970 > a; a++) b[a] = 0;
    for (a = 102971; 102974 > a; a++) b[a] = 0;
    for (a = 102975; 102990 > a; a++) b[a] = 0;
    for (a = 102990; 102993 > a; a++) b[a] = 1;
    for (a = 102997; 103003 > a; a++) b[a] = 0;
    for (a = 103003; 103009 > a; a++) b[a] = 2;
    for (a = 103009; 103012 > a; a++) b[a] = 0;
    for (a = 103012; 103015 > a; a++) b[a] = 2;
    for (a = 103019; 103022 > a; a++) b[a] = 0;
    for (a = 103022; 103025 > a; a++) b[a] = 2;
    for (a = 103029; 103032 > a; a++) b[a] = 0;
    for (a = 103032; 103035 > a; a++) b[a] = 2;
    for (a = 103065; 103069 > a; a++) b[a] = 0;
    for (a = 103074; 103077 > a; a++) b[a] = 0;
    for (a = 103077; 103080 > a; a++) b[a] = 1;
    for (a = 103080; 103083 >
        a; a++) b[a] = 0;
    for (a = 103083; 103086 > a; a++) b[a] = 2;
    for (a = 103090; 103094 > a; a++) b[a] = 0;
    for (a = 103097; 103100 > a; a++) b[a] = 0;
    for (a = 103100; 103103 > a; a++) b[a] = 2;
    for (a = 103107; 103110 > a; a++) b[a] = 0;
    for (a = 103110; 103113 > a; a++) b[a] = 2;
    for (a = 103113; 103117 > a; a++) b[a] = 0;
    for (a = 103117; 103121 > a; a++) b[a] = 2;
    for (a = 103153; 103158 > a; a++) b[a] = 0;
    for (a = 103158; 103163 > a; a++) b[a] = 2;
    for (a = 103163; 103166 > a; a++) b[a] = 0;
    for (a = 103166; 103169 > a; a++) b[a] = 1;
    for (a = 103169; 103172 > a; a++) b[a] = 2;
    for (a = 103186; 103189 > a; a++) b[a] = 0;
    for (a = 103189; 103192 > a; a++) b[a] =
        2;
    for (a = 103192; 103196 > a; a++) b[a] = 0;
    for (a = 103196; 103200 > a; a++) b[a] = 2;
    for (a = 103200; 103225 > a; a++) b[a] = 0;
    for (a = 103225; 103228 > a; a++) b[a] = 1;
    for (a = 103232; 103238 > a; a++) b[a] = 0;
    for (a = 103238; 103244 > a; a++) b[a] = 2;
    for (a = 103244; 103247 > a; a++) b[a] = 0;
    for (a = 103247; 103250 > a; a++) b[a] = 2;
    for (a = 103254; 103257 > a; a++) b[a] = 0;
    for (a = 103257; 103260 > a; a++) b[a] = 2;
    for (a = 103264; 103267 > a; a++) b[a] = 0;
    for (a = 103267; 103270 > a; a++) b[a] = 2;
    for (a = 103300; 103376 > a; a++) b[a] = 0;
    for (a = 103381; 103384 > a; a++) b[a] = 0;
    for (a = 103384; 103387 > a; a++) b[a] = 1;
    for (a =
        103387; 103390 > a; a++) b[a] = 0;
    for (a = 103390; 103393 > a; a++) b[a] = 2;
    for (a = 103397; 103400 > a; a++) b[a] = 0;
    for (a = 103400; 103472 > a; a++) b[a] = 2;
    for (a = 103476; 103479 > a; a++) b[a] = 0;
    for (a = 103479; 103482 > a; a++) b[a] = 2;
    for (a = 103486; 103489 > a; a++) b[a] = 0;
    for (a = 103489; 103492 > a; a++) b[a] = 2;
    for (a = 103492; 103496 > a; a++) b[a] = 0;
    for (a = 103496; 103500 > a; a++) b[a] = 2;
    for (a = 103528; 103544 > a; a++) b[a] = 0;
    for (a = 103544; 103549 > a; a++) b[a] = 2;
    for (a = 103549; 103552 > a; a++) b[a] = 0;
    for (a = 103552; 103555 > a; a++) b[a] = 1;
    for (a = 103555; 103558 > a; a++) b[a] = 2;
    for (a = 103558; 103561 >
        a; a++) b[a] = 0;
    for (a = 103571; 103574 > a; a++) b[a] = 0;
    for (a = 103574; 103577 > a; a++) b[a] = 2;
    for (a = 103577; 103581 > a; a++) b[a] = 0;
    for (a = 103581; 103584 > a; a++) b[a] = 2;
    for (a = 103600; 103695 > a; a++) b[a] = 0;
    for (a = 103700; 103794 > a; a++) b[a] = 2;
    for (a = 103794; 103872 > a; a++) b[a] = 0;
    for (a = 103900; 103972 > a; a++) b[a] = 2;
    return b
});
},
'esri/geometry/screenUtils':function(){
//>>built
define(["dojo/_base/array", "dojo/_base/lang", "dojo/sniff", "../kernel", "./Point", "./ScreenPoint", "./Polyline", "./Polygon", "./Multipoint", "./Extent"], function(B, F, C, G, t, D, x, y, z, A) {
    var E = function() {
        return 9 > C("ie") ? function(b, n, p, a, g, e, f, c, h) {
            var d = [],
                l = Math.round,
                r, s = f.length,
                m, k, u, q, v, w;
            for (r = 0; r < s; r++)
                if (m = f[r], q = c ? c(m[0][0], m[0][1], h) : m[0], 1 < (u = m.length)) {
                    v = l((q[0] - b) * p + g);
                    w = l((n - q[1]) * a + e);
                    q = c ? c(m[1][0], m[1][1], h) : m[1];
                    k = l((q[0] - b) * p + g);
                    q = l((n - q[1]) * a + e);
                    d.push("M", v + "," + w, "L", k + "," + q);
                    for (k = 2; k < u; k++) q =
                        c ? c(m[k][0], m[k][1], h) : m[k], v = l((q[0] - b) * p + g), w = l((n - q[1]) * a + e), d.push(v + "," + w)
                } else v = l((q[0] - b) * p + g), w = l((n - q[1]) * a + e), d.push("M", v + "," + w);
            return d
        } : function(b, n, p, a, g, e, f, c, h) {
            var d = [],
                l, r, s, m, k, u, q = Math.round;
            l = 0;
            for (s = f ? f.length : 0; l < s; l++) {
                k = f[l];
                d.push("M");
                r = 0;
                for (m = k ? k.length : 0; r < m; r++) u = c ? c(k[r][0], k[r][1], h) : k[r], d.push(q((u[0] - b) * p + g) + "," + q((n - u[1]) * a + e))
            }
            return d
        }
    }();
    return {
        toScreenPoint: function(b, n, p, a, g) {
            var e = b.spatialReference,
                f = a.spatialReference,
                c = a.x;
            a = a.y;
            e && (f && !e.equals(f) &&
                e._canProject(f)) && (e = e.isWebMercator() ? t.lngLatToXY(c, a) : t.xyToLngLat(c, a, !0), c = e[0], a = e[1]);
            c = (c - b.xmin) * (n / b.getWidth());
            a = (b.ymax - a) * (p / b.getHeight());
            g || (c = Math.round(c), a = Math.round(a));
            return new D(c, a)
        },
        toScreenGeometry: function(b, n, p, a) {
            var g = b.xmin,
                e = b.ymax,
                f = n / b.getWidth(),
                c = p / b.getHeight(),
                h = B.forEach,
                d = Math.round;
            if (a instanceof t) return new t(d((a.x - g) * f), d((e - a.y) * c));
            if (a instanceof z) {
                b = new z;
                var l = b.points;
                h(a.points, function(a, b) {
                    l[b] = [d((a[0] - g) * f), d((e - a[1]) * c)]
                });
                return b
            }
            if (a instanceof A) return new A(d((a.xmin - g) * f), d((e - a.ymin) * c), d((a.xmax - g) * f), d((e - a.ymax) * f));
            if (a instanceof x) {
                b = new x;
                var r = b.paths,
                    s;
                h(a.paths, function(a, b) {
                    s = r[b] = [];
                    h(a, function(a, b) {
                        s[b] = [d((a[0] - g) * f), d((e - a[1]) * c)]
                    })
                });
                return b
            }
            if (a instanceof y) {
                b = new y;
                var m = b.rings,
                    k;
                h(a.rings, function(a, b) {
                    k = m[b] = [];
                    h(a, function(a, b) {
                        k[b] = [d((a[0] - g) * f), d((e - a[1]) * c)]
                    })
                });
                return b
            }
        },
        _toScreenPath: function(b, n, p, a, g, e) {
            var f = a instanceof x,
                c = b.spatialReference,
                h = a.spatialReference,
                d, l;
            c && (h && !c.equals(h) && c._canProject(h)) &&
                (c.isWebMercator() ? d = t.lngLatToXY : (d = t.xyToLngLat, l = !0));
            return E(b.xmin, b.ymax, n / b.getWidth(), p / b.getHeight(), g, e, f ? a.paths : a.rings, d, l)
        },
        toMapPoint: function(b, n, p, a) {
            return new t(b.xmin + a.x / (n / b.getWidth()), b.ymax - a.y / (p / b.getHeight()), b.spatialReference)
        },
        toMapGeometry: function(b, n, p, a) {
            var g = b.xmin,
                e = b.ymax,
                f = b.spatialReference,
                c = n / b.getWidth(),
                h = p / b.getHeight(),
                d = B.forEach;
            if (a instanceof t) return new t(g + a.x / c, e - a.y / h, f);
            if (a instanceof z) {
                b = new z(f);
                var l = b.points;
                d(a.points, function(a, b) {
                    l[b] = [g + a[0] / c, e - a[1] / h]
                });
                return b
            }
            if (a instanceof A) return new A(g + a.xmin / c, e - a.ymin / h, g + a.xmax / c, e - a.ymax / h, f);
            if (a instanceof x) {
                b = new x(f);
                var r = b.paths,
                    s;
                d(a.paths, function(a, b) {
                    s = r[b] = [];
                    d(a, function(a, b) {
                        s[b] = [g + a[0] / c, e - a[1] / h]
                    })
                });
                return b
            }
            if (a instanceof y) {
                b = new y(f);
                var m = b.rings,
                    k;
                d(a.rings, function(a, b) {
                    k = m[b] = [];
                    d(a, function(a, b) {
                        k[b] = [g + a[0] / c, e - a[1] / h]
                    })
                });
                return b
            }
        }
    }
});
},
'esri/geometry/Polyline':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/has", "../kernel", "../lang", "../SpatialReference", "./Geometry", "./Point", "./Extent"], function(e, k, c, C, D, z, A, B, h, w) {
    var y = {
        type: "polyline",
        paths: null
    };
    e = e(B, {
        declaredClass: "esri.geometry.Polyline",
        constructor: function(a) {
            c.mixin(this, y);
            this.paths = [];
            this._path = 0;
            a && (c.isArray(a) ? this.paths = c.isArray(a[0][0]) ? a : [a] : a.paths ? c.mixin(this, a) : this.spatialReference = a, this.spatialReference && (this.spatialReference = new A(this.spatialReference)));
            this.verifySR()
        },
        addPath: function(a) {
            this.clearCache();
            this._path = this.paths.length;
            this.paths[this._path] = [];
            c.isArray(a[0]) ? k.forEach(a, this._addPointArr, this) : k.forEach(a, this._addPoint, this);
            return this
        },
        _addPointArr: function(a) {
            this.paths[this._path].push(a)
        },
        _addPoint: function(a) {
            this.paths[this._path].push([a.x, a.y])
        },
        _insertPoints: function(a, b) {
            this.clearCache();
            this._path = b;
            this.paths[this._path] || (this.paths[this._path] = []);
            k.forEach(a, this._addPoint, this)
        },
        _validateInputs: function(a, b) {
            return null !==
                a && void 0 !== a && (0 > a || a >= this.paths.length) || null !== b && void 0 !== a && (0 > b || b >= this.paths[a].length) ? !1 : !0
        },
        getPoint: function(a, b) {
            if (this._validateInputs(a, b)) return new h(this.paths[a][b], this.spatialReference)
        },
        setPoint: function(a, b, d) {
            if (this._validateInputs(a, b)) return this.clearCache(), this.paths[a][b] = [d.x, d.y], this
        },
        insertPoint: function(a, b, d) {
            if (this._validateInputs(a) && z.isDefined(b) && 0 <= b && b <= this.paths[a].length) return this.clearCache(), this.paths[a].splice(b, 0, [d.x, d.y]), this
        },
        removePath: function(a) {
            if (this._validateInputs(a,
                    null)) {
                this.clearCache();
                a = this.paths.splice(a, 1)[0];
                var b, d = a.length,
                    f = this.spatialReference;
                for (b = 0; b < d; b++) a[b] = new h(a[b], f);
                return a
            }
        },
        removePoint: function(a, b) {
            if (this._validateInputs(a, b)) return this.clearCache(), new h(this.paths[a].splice(b, 1)[0], this.spatialReference)
        },
        getExtent: function() {
            var a;
            a = this.getCacheValue("_extent");
            var b = this.getCacheValue("_partwise");
            if (a) return a = new w(a), a._partwise = b, a;
            a = this.paths;
            var d = a.length;
            if (d && a[0].length) {
                var f, g, c, e, l, m, n, k, h = e = a[0][0][0],
                    x = l =
                    a[0][0][1],
                    p = Math.min,
                    q = Math.max,
                    r = this.spatialReference,
                    b = [],
                    s, t, u, v;
                for (m = 0; m < d; m++) {
                    f = a[m];
                    s = t = f[0] && f[0][0];
                    u = v = f[0] && f[0][1];
                    k = f.length;
                    for (n = 0; n < k; n++) g = f[n], c = g[0], g = g[1], h = p(h, c), x = p(x, g), e = q(e, c), l = q(l, g), s = p(s, c), u = p(u, g), t = q(t, c), v = q(v, g);
                    b.push(new w({
                        xmin: s,
                        ymin: u,
                        xmax: t,
                        ymax: v,
                        spatialReference: r ? r.toJson() : null
                    }))
                }
                a = {
                    xmin: h,
                    ymin: x,
                    xmax: e,
                    ymax: l,
                    spatialReference: r ? r.toJson() : null
                };
                b = 1 < b.length ? b : null;
                this.setCacheValue("_extent", a);
                this.setCacheValue("_partwise", b);
                a = new w(a);
                a._partwise =
                    b;
                return a
            }
        },
        toJson: function() {
            var a = {
                    paths: c.clone(this.paths)
                },
                b = this.spatialReference;
            b && (a.spatialReference = b.toJson());
            return a
        }
    });
    e.defaultProps = y;
    return e
});
},
'esri/geometry/Polygon':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/has", "../kernel", "../lang", "../SpatialReference", "./Geometry", "./Point", "./Extent", "./mathUtils"], function(z, p, m, D, E, A, B, C, q, v, r) {
    var x = {
            type: "polygon",
            rings: null
        },
        n = z(C, {
            declaredClass: "esri.geometry.Polygon",
            constructor: function(a) {
                m.mixin(this, x);
                this.rings = [];
                this._ring = 0;
                a && (m.isArray(a) ? this.rings = m.isArray(a[0][0]) ? a : [a] : a.rings ? m.mixin(this, a) : this.spatialReference = a, this.spatialReference && (this.spatialReference = new B(this.spatialReference)));
                this.verifySR()
            },
            addRing: function(a) {
                this.clearCache();
                this._ring = this.rings.length;
                this.rings[this._ring] = [];
                m.isArray(a[0]) ? p.forEach(a, this._addPointArr, this) : p.forEach(a, this._addPoint, this);
                return this
            },
            _addPointArr: function(a) {
                this.rings[this._ring].push(a)
            },
            _addPoint: function(a) {
                this.rings[this._ring].push([a.x, a.y])
            },
            _insertPoints: function(a, b) {
                this.clearCache();
                this._ring = b;
                this.rings[this._ring] || (this.rings[this._ring] = []);
                p.forEach(a, this._addPoint, this)
            },
            _validateInputs: function(a, b) {
                return null !==
                    a && void 0 !== a && (0 > a || a >= this.rings.length) || null !== b && void 0 !== a && (0 > b || b >= this.rings[a].length) ? !1 : !0
            },
            getPoint: function(a, b) {
                if (this._validateInputs(a, b)) return new q(this.rings[a][b], this.spatialReference)
            },
            setPoint: function(a, b, c) {
                if (this._validateInputs(a, b)) return this.clearCache(), this.rings[a][b] = [c.x, c.y], this
            },
            insertPoint: function(a, b, c) {
                if (this._validateInputs(a) && A.isDefined(b) && 0 <= b && b <= this.rings[a].length) return this.clearCache(), this.rings[a].splice(b, 0, [c.x, c.y]), this
            },
            removeRing: function(a) {
                if (this._validateInputs(a,
                        null)) {
                    this.clearCache();
                    a = this.rings.splice(a, 1)[0];
                    var b, c = a.length,
                        e = this.spatialReference;
                    for (b = 0; b < c; b++) a[b] = new q(a[b], e);
                    return a
                }
            },
            removePoint: function(a, b) {
                if (this._validateInputs(a, b)) return this.clearCache(), new q(this.rings[a].splice(b, 1)[0], this.spatialReference)
            },
            getExtent: function() {
                var a;
                a = this.getCacheValue("_extent");
                var b = this.getCacheValue("_partwise");
                if (a) return a = new v(a), a._partwise = b, a;
                a = this.rings;
                var c = a.length;
                if (c && a[0].length) {
                    var e, d, f, h, g, l, k, y, w = h = a[0][0][0],
                        n = g =
                        a[0][0][1],
                        m = Math.min,
                        p = Math.max,
                        q = this.spatialReference,
                        b = [],
                        r, s, t, u;
                    for (l = 0; l < c; l++) {
                        e = a[l];
                        r = s = e[0] && e[0][0];
                        t = u = e[0] && e[0][1];
                        y = e.length;
                        for (k = 0; k < y; k++) d = e[k], f = d[0], d = d[1], w = m(w, f), n = m(n, d), h = p(h, f), g = p(g, d), r = m(r, f), t = m(t, d), s = p(s, f), u = p(u, d);
                        b.push(new v({
                            xmin: r,
                            ymin: t,
                            xmax: s,
                            ymax: u,
                            spatialReference: q ? q.toJson() : null
                        }))
                    }
                    a = {
                        xmin: w,
                        ymin: n,
                        xmax: h,
                        ymax: g,
                        spatialReference: q ? q.toJson() : null
                    };
                    b = 1 < b.length ? b : null;
                    this.setCacheValue("_extent", a);
                    this.setCacheValue("_partwise", b);
                    a = new v(a);
                    a._partwise =
                        b;
                    return a
                }
            },
            contains: function(a) {
                var b = this.rings,
                    c, e = !1,
                    d, f, h, g, l, k, m = b.length;
                c = this.spatialReference;
                d = a.spatialReference;
                var n = a.x;
                a = a.y;
                c && (d && !c.equals(d) && c._canProject(d)) && (a = c.isWebMercator() ? q.lngLatToXY(n, a) : q.xyToLngLat(n, a, !0), n = a[0], a = a[1]);
                for (k = 0; k < m; k++) {
                    c = b[k];
                    h = c.length;
                    for (l = g = 0; l < h; l++)
                        if (g++, g === h && (g = 0), d = c[l], f = c[g], (d[1] < a && f[1] >= a || f[1] < a && d[1] >= a) && d[0] + (a - d[1]) / (f[1] - d[1]) * (f[0] - d[0]) < n) e = !e
                }
                return e
            },
            getCentroid: function() {
                var a = this.getCacheValue("_centroid");
                if (void 0 !==
                    a) return a;
                var a = this.rings,
                    b, c, e, d = [],
                    f, h;
                p.forEach(a, function(a) {
                    b = c = e = 0;
                    p.forEach(a, function(d, k) {
                        k < a.length - 1 && (f = a[k + 1], h = d[0] * f[1] - f[0] * d[1], b += (d[0] + f[0]) * h, c += (d[1] + f[1]) * h, e += h)
                    });
                    0 < e && (e *= -1);
                    e && d.push([b, c, e / 2])
                });
                d.sort(function(a, b) {
                    return a[2] - b[2]
                });
                b = c = void 0;
                if (d[0]) a = 6 * d[0][2], b = d[0][0] / a, c = d[0][1] / a;
                else if (a = a[0] && a[0].length ? this._getLineCentroid(a[0]) : null) b = a.x, c = a.y;
                a = isNaN(b) || isNaN(c) ? null : new q(b, c, this.spatialReference);
                this.setCacheValue("_centroid", a);
                return a
            },
            _getLineCentroid: function(a) {
                var b,
                    c = 0,
                    e = 0,
                    d = 0,
                    f, h, g = {
                        x: 0,
                        y: 0
                    },
                    l = {
                        x: 0,
                        y: 0
                    },
                    k, n = a.length,
                    m;
                for (k = 0; k < n - 1; k++) f = a[k], h = a[k + 1], f && h && (g.x = f[0], g.y = f[1], l.x = h[0], l.y = h[1], b = r.getLength(g, l), 0 < b && (c += b, f = r.getMidpoint(f, h), e += b * f[0], d += b * f[1]));
                0 < c ? m = {
                    x: e / c,
                    y: d / c
                } : a[0] && (m = {
                    x: a[0][0],
                    y: a[0][1]
                });
                return m
            },
            isClockwise: function(a) {
                var b = 0,
                    c, e = a.length,
                    d = m.isArray(a[0]) ? function(a, b) {
                        return a[0] * b[1] - b[0] * a[1]
                    } : function(a, b) {
                        return a.x * b.y - b.x * a.y
                    };
                for (c = 0; c < e; c++) b += d(a[c], a[(c + 1) % e]);
                return 0 >= b / 2
            },
            isSelfIntersecting: function(a) {
                a = a || this;
                var b, c, e, d, f, h, g, l = a.rings.length,
                    k;
                for (e = 0; e < l; e++) {
                    for (b = 0; b < a.rings[e].length - 1; b++) {
                        f = [
                            [a.rings[e][b][0], a.rings[e][b][1]],
                            [a.rings[e][b + 1][0], a.rings[e][b + 1][1]]
                        ];
                        for (c = e + 1; c < l; c++)
                            for (d = 0; d < a.rings[c].length - 1; d++)
                                if (h = [
                                        [a.rings[c][d][0], a.rings[c][d][1]],
                                        [a.rings[c][d + 1][0], a.rings[c][d + 1][1]]
                                    ], (g = r._getLineIntersection2(f, h)) && !(g[0] === f[0][0] && g[1] === f[0][1] || g[0] === h[0][0] && g[1] === h[0][1] || g[0] === f[1][0] && g[1] === f[1][1] || g[0] === h[1][0] && g[1] === h[1][1])) return !0
                    }
                    d = a.rings[e].length;
                    if (!(4 >=
                            d))
                        for (b = 0; b < d - 3; b++) {
                            k = d - 1;
                            0 === b && (k = d - 2);
                            f = [
                                [a.rings[e][b][0], a.rings[e][b][1]],
                                [a.rings[e][b + 1][0], a.rings[e][b + 1][1]]
                            ];
                            for (c = b + 2; c < k; c++)
                                if (h = [
                                        [a.rings[e][c][0], a.rings[e][c][1]],
                                        [a.rings[e][c + 1][0], a.rings[e][c + 1][1]]
                                    ], (g = r._getLineIntersection2(f, h)) && !(g[0] === f[0][0] && g[1] === f[0][1] || g[0] === h[0][0] && g[1] === h[0][1] || g[0] === f[1][0] && g[1] === f[1][1] || g[0] === h[1][0] && g[1] === h[1][1])) return !0
                        }
                }
                return !1
            },
            toJson: function() {
                var a = {
                        rings: m.clone(this.rings)
                    },
                    b = this.spatialReference;
                b && (a.spatialReference =
                    b.toJson());
                return a
            }
        });
    n.defaultProps = x;
    n.createEllipse = function(a) {
        var b = a.center.x,
            c = a.center.y,
            e = a.longAxis,
            d = a.shortAxis,
            f = a.numberOfPoints,
            h = a.map,
            g, l, k;
        a = [];
        var m = 2 * Math.PI / f;
        for (l = 0; l < f; l++) g = Math.cos(l * m), k = Math.sin(l * m), g = h.toMap({
            x: e * g + b,
            y: d * k + c
        }), a.push(g);
        a.push(a[0]);
        b = new n(h.spatialReference);
        b.addRing(a);
        return b
    };
    n.createCircle = function(a) {
        return n.createEllipse({
            center: a.center,
            longAxis: a.r,
            shortAxis: a.r,
            numberOfPoints: a.numberOfPoints,
            map: a.map
        })
    };
    n.fromExtent = function(a) {
        var b =
            a.normalize();
        a = a.spatialReference;
        return new n({
            rings: p.map(b, function(a) {
                return [
                    [a.xmin, a.ymin],
                    [a.xmin, a.ymax],
                    [a.xmax, a.ymax],
                    [a.xmax, a.ymin],
                    [a.xmin, a.ymin]
                ]
            }),
            spatialReference: a ? a.toJson() : null
        })
    };
    return n
});
},
'esri/geometry/Multipoint':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../SpatialReference", "./Geometry", "./Point", "./Extent"], function(b, c, s, t, q, r, e, m) {
    var f = {
        type: "multipoint",
        points: null
    };
    b = b(r, {
        declaredClass: "esri.geometry.Multipoint",
        constructor: function(a) {
            c.mixin(this, f);
            this.points = [];
            a && (a.points ? c.mixin(this, a) : this.spatialReference = a, this.spatialReference && (this.spatialReference = new q(this.spatialReference)));
            this.verifySR()
        },
        addPoint: function(a) {
            this.clearCache();
            c.isArray(a) ? this.points.push(a) :
                this.points.push([a.x, a.y]);
            return this
        },
        removePoint: function(a) {
            if (this._validateInputs(a)) return this.clearCache(), new e(this.points.splice(a, 1)[0], this.spatialReference)
        },
        getExtent: function() {
            var a = this.getCacheValue("_extent");
            if (a) return new m(a);
            var a = this.points,
                n = a.length;
            if (n) {
                var d = a[0],
                    b, c, h = b = d[0],
                    k = c = d[1],
                    e = Math.min,
                    f = Math.max,
                    p = this.spatialReference,
                    l, g;
                for (g = 0; g < n; g++) d = a[g], l = d[0], d = d[1], h = e(h, l), k = e(k, d), b = f(b, l), c = f(c, d);
                a = {
                    xmin: h,
                    ymin: k,
                    xmax: b,
                    ymax: c,
                    spatialReference: p ? p.toJson() : null
                };
                this.setCacheValue("_extent", a);
                return new m(a)
            }
        },
        _validateInputs: function(a) {
            return null === a || 0 > a || a >= this.points.length ? !1 : !0
        },
        getPoint: function(a) {
            if (this._validateInputs(a)) return a = this.points[a], new e(a[0], a[1], this.spatialReference)
        },
        setPoint: function(a, b) {
            if (this._validateInputs(a)) return this.clearCache(), this.points[a] = [b.x, b.y], this
        },
        toJson: function() {
            var a = {
                    points: c.clone(this.points)
                },
                b = this.spatialReference;
            b && (a.spatialReference = b.toJson());
            return a
        }
    });
    b.defaultProps = f;
    return b
});
},
'esri/layers/GraphicsLayer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/connect", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-attr", "dojo/dom-construct", "dojo/dom-style", "dojox/gfx", "dojox/gfx/matrix", "./layer", "../kernel", "../lang", "../sniff", "../Color", "../domUtils", "../symbols/MarkerSymbol", "../symbols/SimpleMarkerSymbol", "../geometry/Point", "../geometry/ScreenPoint", "../geometry/Extent", "../geometry/mathUtils", "../geometry/screenUtils", "../PluginTarget"], function(x, v, y, m, J, N, G, A, u, V, W, O, H, X, E, P, w, Q, K, B, R, L, Y) {
    var M, I = -1 !== A.renderer.toLowerCase().indexOf("svg"),
        F = -1 !== A.renderer.toLowerCase().indexOf("canvas"),
        t = 9 > H("ie"),
        S = H("esri-touch");
    P = x(null, {
        declaredClass: "esri.layers._GraphicsContainer",
        _setMap: function(a, c) {
            var b, e = this._connects = [];
            this._map = a;
            F ? (b = N.create("div", {
                    style: "overflow: visible; position: absolute;"
                }, c), this._surface = {
                    getEventSource: function() {
                        return b
                    }
                }, e.push(v.connect(b, "onmousedown", this, this._canvasDownHandler)), e.push(v.connect(b, "onmouseup", this, this._canvasUpHandler)), e.push(v.connect(b, "onclick", this, this._canvasClickHandler)),
                M.prototype._canvas = !0) : (b = (this._surface = A.createSurface(c, a.width, a.height)).getEventSource(), G.set(b = t ? b.parentNode : b, {
                overflow: "visible",
                position: "absolute"
            }));
            e.push(v.connect(a, "onResize", this, "_onResizeHandler"));
            return b
        },
        _onResizeHandler: function(a, c, b) {
            a = this._surface.getEventSource();
            var e = this._map,
                d;
            t && G.set(a = a.parentNode, {
                width: c + "px",
                height: b + "px",
                clip: "rect(0px " + c + "px " + b + "px 0px)"
            });
            J.set(a, "width", c);
            J.set(a, "height", b);
            this._surface.declaredClass || m.forEach(a.childNodes, function(a) {
                J.set(a,
                    "width", c);
                J.set(a, "height", b)
            });
            e.loaded && (e.graphics.suspended || (e.graphics._resized = !0), m.forEach(e.graphicsLayerIds, function(a) {
                d = e.getLayer(a);
                d.suspended || (d._resized = !0)
            }))
        },
        _cleanUp: function() {
            m.forEach(this._connects, v.disconnect, v);
            this._map = this._surface = null
        },
        _processEvent: function(a) {
            var c = this._map;
            a.screenPoint = new K(a.pageX - c.position.x, a.pageY - c.position.y);
            a.mapPoint = c.toMap(a.screenPoint)
        },
        _canvasDownHandler: function(a) {
            this._processEvent(a);
            this._downPt = a.screenPoint.x + "," + a.screenPoint.y
        },
        _canvasUpHandler: function(a) {
            this._processEvent(a);
            this._upPt = a.screenPoint.x + "," + a.screenPoint.y
        },
        _tolerance: 15,
        _isPrimaryMatch: function(a, c, b, e) {
            if (!a.visible || !c) return !1;
            var d = c.getTransformedBoundingBox(),
                g;
            return d ? (g = new B(d[0].x, d[0].y, d[2].x, d[2].y), delete g.spatialReference, S ? g.intersects(b) : g.contains(e)) : m.some(c.children || [], function(a) {
                d = a.getTransformedBoundingBox();
                g = new B(d[0].x, d[0].y, d[2].x, d[2].y);
                delete g.spatialReference;
                return S ? g.intersects(b) : g.contains(e)
            })
        },
        _canvasClickHandler: function(a) {
            if (this._downPt &&
                this._upPt && this._downPt === this._upPt) {
                this._processEvent(a);
                var c = this._map,
                    b = m.map(c.graphicsLayerIds, function(a) {
                        return c.getLayer(a)
                    });
                b.push(c.graphics);
                b.reverse();
                var b = m.filter(b, function(a) {
                        return a.loaded && a._mouseEvents && !a.suspended && (!O.isDefined(a.opacity) || 0 < a.opacity)
                    }),
                    e = a.screenPoint,
                    d = this._tolerance,
                    g = e.x - d,
                    f = e.y + d,
                    h = e.x + d,
                    d = e.y - d,
                    k = new B(g, d, h, f),
                    g = c.toMap(new K(g, f)),
                    h = c.toMap(new K(h, d)),
                    f = g.spatialReference._getInfo(),
                    l = new B(B.prototype._normalizeX(g.x, f).x, g.y, B.prototype._normalizeX(h.x,
                        f).x, h.y, g.spatialReference),
                    n;
                delete k.spatialReference;
                m.some(b, function(a) {
                    a = m.filter(a.graphics, function(a) {
                        return this._isPrimaryMatch(a, a.getDojoShape(), k, e) || !(!a._bgShape || !this._isPrimaryMatch(a, a._bgShape, k, e))
                    }, this);
                    a.reverse();
                    if (0 < a.length) {
                        var b;
                        m.some(a, function(a) {
                            return a.geometry && l.intersects(a.geometry) ? (b = a, !0) : !1
                        });
                        if (b) return n = b, !0
                    }
                    return !1
                }, this);
                if (n && (b = n.getLayer())) a.graphic = n, b.onClick(a)
            }
        }
    });
    M = x(V, {
        declaredClass: "esri.layers._GraphicsLayer",
        managedSuspension: !0,
        surfaceType: F ?
            "canvas-2d" : A.renderer,
        _eventMap: {
            "graphic-add": ["graphic"],
            "graphic-remove": ["graphic"],
            "renderer-change": ["renderer"]
        },
        constructor: function(a, c) {
            if (a && (y.isString(a) || y.isObject(a) && (a.layerDefinition || a.query))) a = c;
            this._params = y.mixin({
                displayOnPan: !0,
                drawMode: !0,
                styling: !0
            }, a || {});
            var b = this._params.dataAttributes;
            "string" === typeof b && (b = [b]);
            this.styling = I ? this._params.styling : !0;
            this.dataAttributes = b;
            this.infoTemplate = a && a.infoTemplate;
            this.graphics = [];
            this._draw = y.hitch(this, this._draw);
            this._refresh =
                y.hitch(this, this._refresh);
            this.registerConnectEvents()
        },
        getNode: function() {
            return this._div && this._div.getEventSource()
        },
        setDrawMode: function(a) {
            this._params.drawMode = a
        },
        renderer: null,
        _setMap: function(a, c) {
            this.inherited(arguments);
            this._map = a;
            this._wrap = a.wrapAround180;
            this._srInfo = a.spatialReference._getInfo();
            this._canvas ? (c = A.createSurface(c.getEventSource(), a.width, a.height), G.set(c.rawNode, "position", "absolute"), this._div = c.createGroup(), this._renderProto = this._div.constructor.prototype._render,
                this._div._render = y.hitch(this, this._canvasRender)) : this._div = c.createGroup();
            this._bgGroup = this._div.createGroup();
            this._div.getEventSource().id = this.id + "_layer";
            var b = this.opacity;
            O.isDefined(b) && 1 > b && this.setOpacity(b, !0);
            return this._div
        },
        _unsetMap: function(a, c) {
            m.forEach(this.graphics, function(a) {
                a._shape = null
            });
            this._canvas ? (c = this._div.getParent(), c._parent = {}, N.destroy(c.rawNode), c.destroy()) : (this._div.clear(), c.remove(this._div), N.destroy(this._div.getEventSource()));
            this._map = this._div =
                null;
            clearTimeout(this._wakeTimer);
            this._wakeTimer = null;
            this._disableDrawConnectors();
            this.inherited(arguments)
        },
        _onZoomStartHandler: function() {
            E.hide(this._div.getEventSource())
        },
        _onExtentChangeHandler: function(a, c, b, e) {
            clearTimeout(this._wakeTimer);
            this._wakeTimer = null;
            b ? (a = this._map.__visibleRect, c = this._div, this._evalSDRenderer(), this._refresh(!0), c.setTransform(u.translate({
                    x: a.x,
                    y: a.y
                })), this._renderProto && c.surface.pendingRender ? this._dirty = !0 : this.suspended || E.show(c.getEventSource())) : this._resized &&
                (this._refresh(!1), this._resized = !1);
            if (0 < this.graphics.length) this.onUpdate()
        },
        _canvasRender: function() {
            var a = this._div;
            this._dirty && (delete this._dirty, this.suspended || E.show(a.getEventSource()));
            return this._renderProto.apply(a, arguments)
        },
        _refresh: function(a) {
            var c = this.graphics,
                b = c.length,
                e, d = this._draw;
            for (e = 0; e < b; e++) d(c[e], a)
        },
        refresh: function() {
            this._refresh(!0)
        },
        redraw: function() {
            this._refresh(!0)
        },
        _onPanHandler: function(a, c) {
            this._panDx = c.x;
            this._panDy = c.y;
            var b = this._map.__visibleRect;
            this._div.setTransform(u.translate({
                x: b.x + c.x,
                y: b.y + c.y
            }))
        },
        _onPanEndUpdateHandler: function(a, c) {
            if (!this._params._child && (c.x !== this._panDx || c.y !== this._panDy)) {
                var b = this._map.__visibleRect;
                this._div.setTransform(u.translate({
                    x: b.x,
                    y: b.y
                }))
            }
            this._refresh(!1);
            if (this.graphics.length) this.onUpdate()
        },
        _onPanStartHandler: function() {
            E.hide(this._div.getEventSource())
        },
        _onPanEndHandler: function() {
            var a = this._map.__visibleRect,
                c = this._div;
            c.setTransform(u.translate({
                x: a.x,
                y: a.y
            }));
            this._refresh(!1);
            this._renderProto &&
                c.surface.pendingRender ? this._dirty = !0 : E.show(c.getEventSource());
            if (this.graphics.length) this.onUpdate()
        },
        onSuspend: function() {
            this.inherited(arguments);
            E.hide(this._div.getEventSource());
            clearTimeout(this._wakeTimer);
            this._wakeTimer = null;
            this._disableDrawConnectors()
        },
        onResume: function(a) {
            this.inherited(arguments);
            a.firstOccurrence && this._evalSDRenderer();
            this._enableDrawConnectors();
            this._wakeTimer = this._wakeTimer || setTimeout(y.hitch(this, function() {
                this.suspended || this._onExtentChangeHandler(null,
                    null, !0)
            }), 0)
        },
        _enableDrawConnectors: function() {
            var a = this._map,
                c = v.connect;
            this._disableDrawConnectors();
            this._params.displayOnPan ? (this._params._child || (this._onPanHandler_connect = c(a, "onPan", this, "_onPanHandler")), this._onPanEndHandler_connect = c(a, "onPanEnd", this, "_onPanEndUpdateHandler")) : (this._onPanStartHandler_connect = c(a, "onPanStart", this, "_onPanStartHandler"), this._onPanEndHandler_connect = c(a, "onPanEnd", this, "_onPanEndHandler"));
            this._onZoomStartHandler_connect = c(a, "onZoomStart", this, "_onZoomStartHandler");
            this._onExtentChangeHandler_connect = c(a, "onExtentChange", this, "_onExtentChangeHandler")
        },
        _disableDrawConnectors: function() {
            var a = v.disconnect;
            a(this._onExtentChangeHandler_connect);
            a(this._onZoomStartHandler_connect);
            a(this._onPanHandler_connect);
            a(this._onPanStartHandler_connect);
            a(this._onPanEndHandler_connect);
            this._onExtentChangeHandler_connect = this._onZoomStartHandler_connect = this._onPanHandler_connect = this._onPanStartHandler_connect = this._onPanEndHandler_connect = null
        },
        _updateExtent: function(a) {
            var c =
                a.geometry;
            if (c) {
                if (!(a._extent = c.getExtent())) {
                    var b, e;
                    if ("esri.geometry.Point" === c.declaredClass) b = c.x, e = c.y;
                    else if ("esri.geometry.Multipoint" === c.declaredClass) b = c.points[0][0], e = c.points[0][1];
                    else {
                        a._extent = null;
                        return
                    }
                    a._extent = new B(b, e, b, e, c.spatialReference)
                }
            } else a._extent = null
        },
        _intersects: function(a, c, b) {
            var e = a.spatialReference,
                d = c.spatialReference,
                g = e && d && !e.equals(d) && e._canProject(d) && 4326 === d.wkid;
            if (this._wrap && !b) {
                b = [];
                var e = a._getFrameWidth(),
                    f = this._srInfo,
                    h = a._clip ? a._getAvailExtent() :
                    a.extent,
                    k, l, n, q, p = [];
                k = c._partwise;
                g && (h = a.geographicExtent, f = d._getInfo());
                a = h._getParts(f);
                if (k && k.length) {
                    c = [];
                    d = 0;
                    for (g = k.length; d < g; d++) c = c.concat(k[d]._getParts(f))
                } else c = c._getParts(f);
                d = 0;
                for (g = c.length; d < g; d++) {
                    n = c[d];
                    f = 0;
                    for (h = a.length; f < h; f++)
                        if (q = a[f], q.extent.intersects(n.extent)) {
                            k = 0;
                            for (l = n.frameIds.length; k < l; k++) b.push((q.frameIds[0] - n.frameIds[k]) * e)
                        }
                }
                d = 0;
                for (g = b.length; d < g; d++) k = b[d], m.indexOf(b, k) === d && p.push(k);
                return p.length ? p : null
            }
            return (g ? a.geographicExtent : a.extent).intersects(c) ? [0] : null
        },
        _defaultMarker: {
            type: "simplemarkersymbol",
            style: "square",
            size: 1,
            xoffset: 0,
            yoffset: 0,
            angle: 0
        },
        _draw: function(a, c) {
            if (this._params.drawMode && this._map && !this.suspended) try {
                var b = a._extent,
                    e, d, g = !I || this.styling,
                    f = I && this.dataAttributes,
                    h = a.getDojoShape(),
                    k;
                if (a.visible && b && (e = this._intersects(this._map, b, a.geometry._originOnly)) && (d = g ? this._getSymbol(a) : this._defaultMarker)) {
                    if (!a._offsets || a._offsets.join(",") !== e.join(",") ? a._offsets = e : k = !0, !h || c || !k) {
                        var l = a.geometry.type,
                            b = {
                                graphic: a
                            },
                            n = a._bgShape,
                            q = g && !a.symbol ? this._getRenderer(a) : null,
                            p = q && q.backgroundFillSymbol;
                        if ("point" === l) this._isInvalidShape(d, h) && this._removeShape(a), a._shape = this._drawPoint(this._div, a.geometry, d, a.getDojoShape(), e, q, a), g && this._symbolizePoint(a.getDojoShape(), d, q, a);
                        else if ("multipoint" === l) this._drawMarkers(a, d, e, q), g && this._symbolizeMarkers(a, d, q);
                        else {
                            var D, l = d,
                                m, C;
                            g && (l = (D = "simplemarkersymbol" === d.type || "picturemarkersymbol" === d.type || "textsymbol" === d.type ? d : null) ? p : d);
                            l && l === p && (m = this._bgGroup);
                            n && !m && this._removeBgShape(a);
                            l && (!m && this._isInvalidShape(l, a._shape) && this._removeShape(a, !1), C = this._drawShape(a, e, m || this._div, m ? n : a.getDojoShape()), g && this._symbolizeShape(C, l, !p && q, a), a[m ? "_bgShape" : "_shape"] = C);
                            if (D) {
                                this._isInvalidShape(D, a._shape) && this._removeShape(a, !1);
                                var U = a.geometry.getCentroid();
                                (C = U && this._drawPoint(this._div, U, D, a._shape, e, q, a)) && this._symbolizePoint(C, D, q, a);
                                a._shape = C
                            }
                        }
                        F || (a._bgShape && this._initNode(a, a._bgShape, a._bgShape !== n, b, f), a._shape && this._initNode(a, a._shape,
                            a._shape !== h, b, f));
                        b.node = a.getNode();
                        this.onGraphicDraw(b)
                    }
                } else h && this._removeShape(a)
            } catch (Z) {
                this._errorHandler(Z, a)
            }
        },
        _initNode: function(a, c, b, e, d) {
            if (c = c && c.getNode()) c.e_graphic = a, this._addDataAttrs(a, d, c), b && (e.node = c, this.onGraphicNodeAdd(e))
        },
        _removeShape: function(a, c) {
            var b = a.getDojoShape(),
                e = b && b.getNode();
            b && (b.removeShape(), b.destroy());
            a._shape = a._offsets = null;
            !1 !== c && this._removeBgShape(a);
            if (e && (e.e_graphic = null, !F)) this.onGraphicNodeRemove({
                graphic: a,
                node: e
            })
        },
        _removeBgShape: function(a) {
            var c =
                a._bgShape,
                b = c && c.getNode();
            c && (c.removeShape(), c.destroy(), a._bgShape = null);
            if (b && (b.e_graphic = null, !F)) this.onGraphicNodeRemove({
                graphic: a,
                node: b
            })
        },
        _addDataAttrs: function(a, c, b) {
            var e = a.attributes,
                d, g = c ? c.length : 0,
                f = this._getRenderer(a);
            if (b && e) {
                for (d = 0; d < g; d++)(b = c[d]) && a.attr("data-" + b, e[b]);
                !this.styling && f && (f.getBreakIndex ? (c = f.getBreakIndex(a), a.attr("data-class-break", -1 !== c ? c : null)) : f.getUniqueValueInfo && (c = f.getUniqueValueInfo(a), a.attr("data-unique-value", c ? c.value : null)))
            }
        },
        _drawShape: function(a,
            c, b, e) {
            a = a.geometry;
            var d = a.type,
                g = this._map,
                f = g.extent,
                h = g.width,
                k = g.height,
                g = g.__visibleRect,
                l = [],
                n, q;
            n = "extent" === d;
            if ("rect" === d || n) l = {
                x: 0,
                y: 0,
                spatialReference: a.spatialReference
            }, l.x = n ? a.xmin : a.x, l.y = n ? a.ymax : a.y, d = L.toScreenPoint(f, h, k, l), l.x = n ? a.xmax : a.x + a.width, l.y = n ? a.ymin : a.y + a.height, a = L.toScreenPoint(f, h, k, l), c = {
                x: d.x - g.x + c[0],
                y: d.y - g.y,
                width: Math.abs(a.x - d.x),
                height: Math.abs(a.y - d.y)
            }, 0 === c.width && (c.width = 1), 0 === c.height && (c.height = 1), e = this._drawRect(b, e, c);
            else if ("polyline" === d ||
                "polygon" === d) {
                n = 0;
                for (q = c.length; n < q; n++) l = l.concat(L._toScreenPath(f, h, k, a, -g.x + c[n], -g.y));
                e = this._drawPath(b, e, l);
                this._rendererLimits && ("polyline" === d ? this._clipPolyline(e, a) : this._clipPolygon(e, a))
            }
            return e
        },
        _drawRect: function(a, c, b) {
            return c ? c.setShape(b) : a.createRect(b)
        },
        _drawImage: function(a, c, b) {
            return c ? c.setShape(b) : a.createImage(b)
        },
        _drawCircle: function(a, c, b) {
            return c ? c.setShape(b) : a.createCircle(b)
        },
        _drawPath: function() {
            return t ? function(a, c, b, e) {
                b = e ? b : b.join(" ");
                if (c) return c.setShape(b);
                c = a.createObject(e ? A.Path : A.EsriPath, b);
                a._overrideSize(c.getEventSource());
                return c
            } : function(a, c, b, e) {
                b = e ? b : b.join(" ");
                return c ? c.setShape(b) : a.createPath(b)
            }
        }(),
        _drawText: function(a, c, b) {
            return c ? c.setShape(b) : a.createText(b)
        },
        _evalSDRenderer: function(a) {
            var c = this._map,
                b = this.renderer,
                e, d = this._rndForScale;
            c && (c.loaded && b && b.getRendererInfo) && (e = "zoom" === b.rangeType ? b.getRendererInfoByZoom(c.getZoom()) : b.getRendererInfoByScale(c.getScale()));
            this._rndForScale = e && e.renderer;
            !a && this._rndForScale !=
                d && this.emit("renderer-change", {
                    renderer: this._rndForScale
                })
        },
        _getRenderer: function(a) {
            var c = this._rndForScale || this.renderer;
            a && (c && c.getObservationRenderer) && (c = c.getObservationRenderer(a));
            return c
        },
        _getSymbol: function(a) {
            var c = this._getRenderer();
            return a.symbol || c && c.getSymbol(a)
        },
        _getVariable: function(a, c) {
            var b;
            a && (b = (b = a.getVisualVariablesForType(c)) && b[0]);
            return b
        },
        _applyOpacity: function(a, c, b, e) {
            c = c.getOpacity(e, {
                opacityInfo: b
            });
            null != c && (a = new X(a), a.a = c);
            return a
        },
        _symbolizeShape: function(a,
            c, b, e) {
            var d = c.getStroke(),
                g = c.getFill();
            c = c.type;
            var f, h, k = this._getVariable(b, "sizeInfo"),
                l = this._getVariable(b, "colorInfo"),
                n = this._getVariable(b, "opacityInfo"),
                k = k ? b.getSize(e, {
                    sizeInfo: k,
                    resolution: this._map.getResolutionInMeters()
                }) : null;
            if (b && (l || n) && "picturefillsymbol" !== c) - 1 !== c.indexOf("linesymbol") ? (f = d && d.color, l && (f = b.getColor(e, {
                colorInfo: l
            }) || f), f && n && (f = this._applyOpacity(f, b, n, e))) : g && g.toCss && (h = g, l && (h = b.getColor(e, {
                colorInfo: l
            }) || h), h && n && (h = this._applyOpacity(h, b, n, e)));
            a.setStroke(null ==
                k && !f ? d : y.mixin({}, d, null != k ? {
                    width: k
                } : null, f && {
                    color: f
                })).setFill(h || g)
        },
        _smsToPath: function() {
            return t ? function(a, c, b, e, d, g, f, h, k) {
                switch (c) {
                    case a.STYLE_SQUARE:
                        return ["M", d + "," + f, "L", g + "," + f, g + "," + h, d + "," + h, "X", "E"];
                    case a.STYLE_CROSS:
                        return ["M", b + "," + f, "L", b + "," + h, "M", d + "," + e, "L", g + "," + e, "E"];
                    case a.STYLE_X:
                        return ["M", d + "," + f, "L", g + "," + h, "M", d + "," + h, "L", g + "," + f, "E"];
                    case a.STYLE_DIAMOND:
                        return ["M", b + "," + f, "L", g + "," + e, b + "," + h, d + "," + e, "X", "E"];
                    case a.STYLE_TARGET:
                        return ["M", d + "," + f, "L", g + "," + f,
                            g + "," + h, d + "," + h, d + "," + f, "M", d - k + "," + e, "L", d + "," + e, "M", b + "," + (f - k), "L", b + "," + f, "M", g + k + "," + e, "L", g + "," + e, "M", b + "," + (h + k), "L", b + "," + h, "E"
                        ]
                }
            } : function(a, c, b, e, d, g, f, h, k) {
                switch (c) {
                    case a.STYLE_SQUARE:
                        return ["M", d + "," + f, g + "," + f, g + "," + h, d + "," + h, "Z"];
                    case a.STYLE_CROSS:
                        return ["M", b + "," + f, b + "," + h, "M", d + "," + e, g + "," + e];
                    case a.STYLE_X:
                        return ["M", d + "," + f, g + "," + h, "M", d + "," + h, g + "," + f];
                    case a.STYLE_DIAMOND:
                        return ["M", b + "," + f, g + "," + e, b + "," + h, d + "," + e, "Z"];
                    case a.STYLE_TARGET:
                        return ["M", d + "," + f, g + "," + f, g + "," + h, d +
                            "," + h, d + "," + f, "M", d - k + "," + e, d + "," + e, "M", b + "," + (f - k), b + "," + f, "M", g + k + "," + e, g + "," + e, "M", b + "," + (h + k), b + "," + h
                        ]
                }
            }
        }(),
        _pathStyles: {
            square: 1,
            cross: 1,
            x: 1,
            diamond: 1,
            target: 1
        },
        _typeMaps: {
            picturemarkersymbol: "image",
            picturefillsymbol: "path",
            simplefillsymbol: "path",
            simplelinesymbol: "path",
            cartographiclinesymbol: "path",
            textsymbol: "text"
        },
        _isInvalidShape: function(a, c) {
            var b = c && c.shape && c.shape.type,
                e = a && a.type,
                d = a && a.style;
            "rect" === b && (b = "path");
            e && (d = this._typeMaps[e] || d);
            this._pathStyles[d] && (d = "path");
            return "shieldlabelsymbol" ===
                e ? !0 : !(!b || !(d && b !== d))
        },
        _drawPoint: function(a, c, b, e, d, g, f) {
            var h = b.type,
                k = this._map,
                l = k.__visibleRect,
                n = L.toScreenPoint(k.extent, k.width, k.height, c).offset(-l.x + d[0], -l.y),
                l = n.x,
                q = n.y,
                p;
            c = [];
            var m, T = g && g.rotationInfo ? g.getRotationAngle(f) : null,
                C = this._getVariable(g, "sizeInfo"),
                k = C ? g.getSize(f, {
                    sizeInfo: C,
                    shape: b.style,
                    resolution: k.getResolutionInMeters()
                }) : null;
            T && c.push(u.rotategAt(T, n));
            if (0 !== b.xoffset || 0 !== b.yoffset) m = u.translate(b.xoffset, -b.yoffset), c.push(m);
            0 !== b.angle && c.push(u.rotategAt(b.angle,
                n));
            if ("simplemarkersymbol" === h) switch (p = b.style, g = Math.round, k = null != k ? k : b.size, p) {
                    case w.STYLE_SQUARE:
                    case w.STYLE_CROSS:
                    case w.STYLE_X:
                    case w.STYLE_DIAMOND:
                        b = isNaN(k) ? 16 : k / 2;
                        p = this._drawPath(a, e, this._smsToPath(w, p, l, q, g(l - b), g(l + b), g(q - b), g(q + b)));
                        break;
                    case w.STYLE_TARGET:
                        f = b._targetWidth / 2;
                        n = b._targetHeight / 2;
                        p = this._drawPath(a, e, this._smsToPath(w, p, l, q, g(l - f), g(l + f), g(q - n), g(q + n), b._spikeSize));
                        break;
                    case w.STYLE_PATH:
                        p = this._drawPath(a, e, b.path, !0);
                        b = p.getBoundingBox();
                        a = this._getScaleMatrix(b,
                            k);
                        (1 !== a.xx || 1 !== a.yy) && c.push(u.scaleAt(a.xx, a.yy, n));
                        c.push(u.translate(-(b.x + b.width / 2) + l, -(b.y + b.height / 2) + q));
                        break;
                    default:
                        b = isNaN(k) ? 16 : k / 2, p = this._drawCircle(a, e, {
                            cx: l,
                            cy: q,
                            r: b
                        })
                } else if ("shieldlabelsymbol" === h) p = b.width, n = b.height, e = a.createGroup(), p = a.createImage({
                    x: l - p / 2,
                    y: q - n / 2,
                    width: p,
                    height: n,
                    src: b.url
                }), e.add(p), null != b.font && (q += 0.2 * b.getHeight(), a = a.createText({
                        type: "text",
                        text: b.text,
                        x: l,
                        y: q,
                        align: "middle",
                        decoration: b.decoration,
                        rotated: b.rotated,
                        kerning: b.kerning
                    }), a.setFont(b.font),
                    a.setFill(b.color), e.add(a)), p = e;
                else if ("picturemarkersymbol" === h) {
                if (null == k ? (p = b.width, n = b.height) : (n = k, p = n * (b.width / b.height), m && (null != m.dx && (m.dx = p * (m.dx / b.width)), null != m.dy && (m.dy = n * (m.dy / b.height)))), p = this._drawImage(a, e, {
                        x: l - p / 2,
                        y: q - n / 2,
                        width: p,
                        height: n,
                        src: b.url
                    }), I && (a = p.getNode())) b = (b = this._getVariable(g, "opacityInfo")) ? g.getOpacity(f, {
                    opacityInfo: b
                }) : null, null != b ? a.setAttribute("opacity", b) : a.setAttribute("opacity", 1)
            } else "textsymbol" === h && (g = b.font, null != k && g && (g = new g.constructor(g.toJson()),
                g.setSize(k)), p = this._drawText(a, e, {
                type: "text",
                text: b.text,
                x: l,
                y: q,
                align: b.getSVGAlign(),
                decoration: b.decoration || g && g.decoration,
                rotated: b.rotated,
                kerning: b.kerning
            }), g && p.setFont(g), I && (a = p.getNode(), l = b.getSVGBaseline(), b = b.getSVGBaselineShift(), a && (a.setAttribute("dominant-baseline", l), b && a.setAttribute("baseline-shift", b))));
            p.setTransform(u.multiply(c));
            p._wrapOffsets = d;
            return p
        },
        _getScaleMatrix: function(a, c) {
            var b = a.width / a.height,
                e = 1,
                d = 1;
            isNaN(c) || (1 < b ? (e = c / a.width, d = c / b / a.height) : (d = c / a.height,
                e = c * b / a.width));
            return {
                xx: e,
                yy: d
            }
        },
        _symbolizePoint: function(a, c, b, e) {
            var d = c.type,
                g = c.style;
            if (!("shieldlabelsymbol" === d || "picturemarkersymbol" === d)) {
                var f = c.getStroke();
                c = c.getFill();
                var g = g === w.STYLE_X || g === w.STYLE_CROSS,
                    h = f && f.color,
                    k = g ? h : c;
                if (b) {
                    var l = this._getVariable(b, "colorInfo"),
                        n = this._getVariable(b, "opacityInfo");
                    l && (k = b.getColor(e, {
                        colorInfo: l
                    }) || k);
                    k && n && (k = this._applyOpacity(k, b, n, e));
                    k && (g ? k !== h && (f = f ? y.mixin({}, f) : {}, f.color = k) : k !== c && (c = k))
                }
                "textsymbol" === d ? a.setFill(c) : "simplemarkersymbol" ===
                    d && a.setFill(c).setStroke(f)
            }
        },
        _drawMarkers: function(a, c, b, e) {
            var d = a.geometry,
                g = d.points,
                f = a.getDojoShape() || this._div.createGroup(),
                h, k, l = g.length,
                n = [],
                m = 0,
                p, D = b ? b.length : 0;
            f.children[0] && this._isInvalidShape(c, f.children[0]) && f.clear();
            for (k = 0; k < l; k++) {
                h = g[k];
                for (p = 0; p < D; p++) n[0] = b[p], this._drawPoint(f, {
                    x: h[0],
                    y: h[1],
                    spatialReference: d.spatialReference
                }, c, f.children[m++], n, e, a)
            }
            c = f.children.length;
            if (l * b.length < c)
                for (k = c - 1; k >= l * b.length; k--) f.children[k].removeShape();
            a._shape = f
        },
        _symbolizeMarkers: function(a,
            c, b) {
            var e = a.getDojoShape().children,
                d, g = e.length;
            for (d = 0; d < g; d++) this._symbolizePoint(e[d], c, b, a)
        },
        _errorHandler: function(a, c) {
            a.message = c ? "Unable to draw graphic (geometry:" + (c.geometry ? c.geometry.declaredClass : null) + ", symbol:" + (c.symbol ? c.symbol.declaredClass : null) + "): " + a.message : "Unable to draw graphic (null): " + a.message;
            this.inherited(arguments)
        },
        _rendererLimits: function() {
            var a, c, b;
            H("ff") ? (a = 16125, c = -32250, b = 32250) : t ? (a = 1E5, c = -1E5, b = 1E5) : H("chrome") && 6 > H("chrome") && (a = 8150, c = -1E4, b = 1E4);
            if (a) return {
                clipLimit: a,
                rangeMin: c,
                rangeMax: b,
                clipBBox: [-a, -a, a, a],
                clipSegments: [
                    [
                        [-a, -a],
                        [a, -a]
                    ],
                    [
                        [a, -a],
                        [a, a]
                    ],
                    [
                        [a, a],
                        [-a, a]
                    ],
                    [
                        [-a, a],
                        [-a, -a]
                    ]
                ]
            }
        }(),
        _clipPolyline: function(a, c) {
            var b = this._getCorners(a, c),
                e = b.br,
                d = this._rendererLimits,
                g = d.rangeMin,
                f = d.rangeMax,
                h = d.clipBBox,
                k = d.clipSegments,
                d = this._isPointWithinRange,
                l = this._isPointWithinBBox,
                n = this._getClipperIntersection,
                q = this._getPlaneIndex;
            if (!d(b.tl, g, f) || !d(e, g, f)) {
                t && this._createSegments(a);
                var p = [];
                m.forEach(a.segments, function(a) {
                    a = a.args;
                    var b = a.length,
                        c = [],
                        e;
                    for (e = 0; e < b; e += 2) {
                        var d = [a[e], a[e + 1]],
                            g = [a[e + 2], a[e + 3]],
                            f = l(d, h),
                            m = l(g, h);
                        if (f ^ m) {
                            if (m = n([d, g], k)) f ? (e ? c.push(m[1]) : c.push(d, m[1]), p.push(c), c = []) : c.push(m[1], g)
                        } else f ? e ? c.push(g) : c.push(d, g) : (m = q(d, h), f = q(g, h), -1 === m || (-1 === f || m === f) || (d = n([d, g], k, !0), 0 < d.length && (d[m] || (m = d[m[0]] ? m[0] : m[1]), d[f] || (f = d[f[0]] ? f[0] : f[1]), g = d[m], d = d[f], g && c.push(g), d && (c.push(d), p.push(c), c = []))))
                    }
                    p.push(c)
                });
                a.setShape(this._getPathStringFromPaths(p))
            }
        },
        _clipPolygon: function(a, c) {
            var b = this._getCorners(a,
                    c),
                e = b.br,
                d = this._rendererLimits,
                g = d.clipLimit,
                f = d.rangeMin,
                h = d.rangeMax,
                k = d.clipBBox,
                l = d.clipSegments,
                d = this._isPointWithinRange,
                n = this._isPointWithinBBox,
                q = this._getClipperIntersection,
                p = this._getPlaneIndex,
                v = R._pointLineDistance;
            if (!d(b.tl, f, h) || !d(e, f, h)) t && this._createSegments(a), b = m.map(a.segments, function(a) {
                var b = a.args,
                    c = b.length,
                    d = [];
                a = [];
                var e;
                for (e = 0; e < c; e += 2) {
                    var f = [b[e], b[e + 1]],
                        h = [b[e + 2], b[e + 3]];
                    if (e === c - 2) {
                        d.push(f);
                        break
                    }
                    var s = n(f, k),
                        r = n(h, k);
                    d.push(f);
                    if (s ^ r) {
                        if (r = q([f, h], l)) f = r[1],
                            f[s ? "inOut" : "outIn"] = !0, d.push(f), a.push([s ? "INOUT" : "OUTIN", d.length - 1, r[0]])
                    } else if (!s) {
                        var s = p(f, k),
                            z = p(h, k); - 1 === s || (-1 === z || s === z) || (r = q([f, h], l, !0), 0 < r.length ? (r[s] || (s = r[s[0]] ? s[0] : s[1]), r[z] || (z = r[z[0]] ? z[0] : z[1]), f = r[s], h = r[z], f && (f.outIn = !0, d.push(f), a.push(["OUTIN", d.length - 1, s])), h && (h.inOut = !0, d.push(h), a.push(["INOUT", d.length - 1, z]))) : y.isArray(s) && y.isArray(z) && (r = s.concat(z), r.sort(), "0123" === r.join("") && (r = [], 3 === s[0] + s[1] ? r.push([g, -g], [-g, g]) : r.push([-g, -g], [g, g]), s = v(r[0], [f, h]),
                            f = v(r[1], [f, h]), d.push(s < f ? r[0] : r[1]))))
                    }
                }
                var t = k[0],
                    u = k[1],
                    w = k[2],
                    x = k[3];
                m.forEach(d, function(a) {
                    a[0] < t && (a[1] >= u && a[1] <= x ? a[0] = t : (a[0] = t, a[1] = a[1] < u ? u : x))
                });
                m.forEach(d, function(a) {
                    a[1] < u && (a[0] >= t && a[0] <= w ? a[1] = u : (a[1] = u, a[0] = a[0] < t ? t : w))
                });
                m.forEach(d, function(a) {
                    a[0] > w && (a[1] >= u && a[1] <= x ? a[0] = w : (a[0] = w, a[1] = a[1] < u ? u : x))
                });
                m.forEach(d, function(a) {
                    a[1] > x && (a[0] >= t && a[0] <= w ? a[1] = x : (a[1] = x, a[0] = a[0] < t ? t : w))
                });
                b = 0;
                c = a.length;
                if (0 < c) {
                    do {
                        h = a[b];
                        e = a[(b + 1) % c];
                        if (h[2] === e[2] && "INOUT" === h[0] && "OUTIN" ===
                            e[0])
                            if (f = h[1], e = e[1], f < e)
                                for (f += 1; f < e; f++) d[f][2] = !0;
                            else if (f > e) {
                            for (f += 1; f < d.length; f++) d[f][2] = !0;
                            for (f = 0; f < e; f++) d[f][2] = !0
                        }
                        b = (b + 1) % c
                    } while (0 !== b)
                }
                c = d[0];
                b = d[d.length - 1];
                c[2] && (b[2] = !0, m.some(a, function(a) {
                    return 1 === a[1] ? (d.splice(d.length - 1, 0, y.clone(d[1])), !0) : !1
                }));
                d = m.filter(d, function(a) {
                    return a[2] ? !1 : !0
                });
                for (b = 0; b < d.length - 1; b++)
                    if (c = d[b], (e = d[b + 1]) && !(c[0] !== e[0] || c[1] !== e[1])) e.outIn ? c.outIn = !0 : e.inOut && (c.inOut = !0), d.splice(b + 1, 1);
                c = Math.abs;
                a = [];
                for (b = 0; b < d.length - 1; b++) {
                    h = d[b];
                    f = h[0];
                    h = h[1];
                    s = c(f) === g;
                    r = c(h) === g;
                    e = d[b + 1];
                    z = e[0];
                    e = e[1];
                    var A = c(z) === g,
                        B = c(e) === g;
                    s && B ? a.push([b + 1, [f, e]]) : r && A && a.push([b + 1, [z, h]])
                }
                for (b = a.length - 1; 0 <= b; b--) e = a[b], f = d[e[0] - 1], c = d[e[0]], !f.outIn && (!f.inOut && !c.outIn && !c.inOut) && d.splice(e[0], 0, e[1]);
                c = d[0];
                b = d[d.length - 1];
                (c[0] !== b[0] || c[1] !== b[1]) && d.push(c);
                return d
            }), a.setShape(this._getPathStringFromPaths(b))
        },
        _getCorners: function(a, c) {
            if (t) {
                var b = this._map,
                    e = c.getExtent(),
                    d = e.spatialReference,
                    g = b.toScreen(new Q(e.xmin, e.ymax, d)),
                    b = b.toScreen(new Q(e.xmax,
                        e.ymin, d));
                return {
                    tl: g,
                    br: b
                }
            }
            g = a.getTransformedBoundingBox();
            return {
                tl: g[0],
                br: g[2]
            }
        },
        _createSegments: function(a) {
            a.shape.path = a.vmlPath;
            a.segmented = !1;
            a._confirmSegmented();
            var c = a.segments;
            1 < c.length && (a.segments = m.filter(c, function(a, c, d) {
                c = d[c + 1];
                return "M" === a.action && c && "L" === c.action ? (a.args = a.args.concat(c.args), !0) : !1
            }))
        },
        _getPathStringFromPaths: function(a) {
            t ? (a = m.map(a, function(a) {
                return "m " + m.map(a, function(a, c) {
                    return (1 === c ? "l " : "") + a.join(",")
                }).join(" ")
            }), a.push("e")) : a = m.map(a, function(a) {
                return "M " +
                    m.map(a, function(a) {
                        return a.join(",")
                    }).join(" ")
            });
            return a.join(" ")
        },
        _isPointWithinBBox: function(a, c) {
            var b = c[1],
                e = c[2],
                d = c[3],
                g = a[0],
                f = a[1];
            return g > c[0] && g < e && f > b && f < d ? !0 : !1
        },
        _isPointWithinRange: function(a, c, b) {
            var e = a.x;
            a = a.y;
            return e < c || a < c || e > b || a > b ? !1 : !0
        },
        _getClipperIntersection: function(a, c, b) {
            var e, d = R._getLineIntersection2,
                g = Math.round,
                f = {
                    length: 0
                };
            for (e = 0; 4 > e; e++) {
                var h = d(a, c[e]);
                if (h)
                    if (h[0] = g(h[0]), h[1] = g(h[1]), b) f[e] = h, f.length++;
                    else return [e, h]
            }
            return b ? f : null
        },
        _getPlaneIndex: function(a,
            c) {
            var b = a[0],
                e = a[1],
                d = c[0],
                g = c[1],
                f = c[2],
                h = c[3];
            return b <= d ? e >= g && e <= h ? 3 : e < g ? [0, 3] : [2, 3] : e <= g ? b >= d && b <= f ? 0 : b < d ? [3, 0] : [1, 0] : b >= f ? e >= g && e <= h ? 1 : e < g ? [0, 1] : [2, 1] : e >= h ? b >= d && b <= f ? 2 : b < d ? [3, 2] : [1, 2] : -1
        },
        onGraphicAdd: function() {},
        onGraphicRemove: function() {},
        onGraphicNodeAdd: function() {},
        onGraphicNodeRemove: function() {},
        onGraphicDraw: function() {},
        onGraphicsClear: function() {},
        onRendererChange: function() {},
        onOpacityChange: function() {},
        setInfoTemplate: function(a) {
            this.infoTemplate = a
        },
        add: function(a, c) {
            if (a._graphicsLayer ===
                this) return a;
            c || this.graphics.push(a);
            a._graphicsLayer = this;
            a._layer = this;
            this._updateExtent(a);
            this._draw(a);
            if (!c) this.onGraphicAdd(a);
            return a
        },
        remove: function(a, c) {
            if (!c) {
                var b;
                if (-1 === (b = m.indexOf(this.graphics, a))) return null;
                a = this.graphics.splice(b, 1)[0]
            }
            a.getDojoShape() && this._removeShape(a);
            a._shape = a._graphicsLayer = null;
            this.onGraphicRemove(a);
            return a
        },
        clear: function(a, c) {
            for (var b = this.graphics; 0 < b.length;) this.remove(b[0]);
            if (!c) this.onGraphicsClear()
        },
        _setIEOpacity: function(a, c) {
            var b =
                a && a.getNode();
            if (b) {
                var e = a.strokeStyle,
                    d = b.stroke;
                e && d && (d.opacity = e.color.a * c);
                e = a.fillStyle;
                d = b.fill;
                e && d && ("tile" === d.type ? G.set(b, "opacity", c) : d.opacity = e.a * c)
            }
        },
        setOpacity: function(a, c) {
            if (c || this.opacity != a) {
                var b = this._div;
                b && (t ? (m.forEach(this.graphics, function(b) {
                    this._setIEOpacity(b._shape, a);
                    this._setIEOpacity(b._bgShape, a)
                }, this), b._esriIeOpacity = a, this._bgGroup._esriIeOpacity = a) : this._canvas ? G.set(b.getEventSource(), "opacity", a) : b.getEventSource().setAttribute("opacity", a));
                this.opacity =
                    a;
                if (!c) this.onOpacityChange(a)
            }
        },
        setRenderer: function(a) {
            this.renderer = a;
            this._evalSDRenderer(!0);
            this.emit("renderer-change", {
                renderer: this._rndForScale || a
            })
        }
    });
    x = x([M, Y], {
        declaredClass: "esri.layers.GraphicsLayer",
        constructor: function() {
            this.enableMouseEvents = y.hitch(this, this.enableMouseEvents);
            this.disableMouseEvents = y.hitch(this, this.disableMouseEvents);
            this._processEvent = y.hitch(this, this._processEvent);
            this._initLayer()
        },
        _initLayer: function() {
            this.loaded = !0;
            this.onLoad(this)
        },
        _setMap: function() {
            var a =
                this.inherited("_setMap", arguments);
            this.enableMouseEvents();
            return a
        },
        _unsetMap: function() {
            this.disableMouseEvents();
            this.inherited("_unsetMap", arguments)
        },
        _processEvent: function(a) {
            var c = this._map,
                b = a.target,
                e;
            a.screenPoint = new K(a.pageX - c.position.x, a.pageY - c.position.y);
            for (a.mapPoint = c.toMap(a.screenPoint); b && !(e = b.e_graphic);) b = b.parentNode;
            if (e) return a.graphic = e, a
        },
        _onMouseOverHandler: function(a) {
            if (this._processEvent(a)) this.onMouseOver(a)
        },
        _onMouseMoveHandler: function(a) {
            if (this._processEvent(a)) this.onMouseMove(a)
        },
        _onMouseDragHandler: function(a) {
            if (this._processEvent(a)) this.onMouseDrag(a)
        },
        _onMouseOutHandler: function(a) {
            if (this._processEvent(a)) this.onMouseOut(a)
        },
        _onMouseDownHandler: function(a) {
            this._downGr = this._downPt = null;
            this._processEvent(a) && (v.disconnect(this._onmousemove_connect), v.disconnect(this._onmousedrag_connect), this._onmousedrag_connect = v.connect(this._div.getEventSource(), "onmousemove", this, "_onMouseDragHandler"), this._downGr = a.graphic, this._downPt = a.screenPoint.x + "," + a.screenPoint.y, this.onMouseDown(a))
        },
        _onMouseUpHandler: function(a) {
            this._upGr = this._upPt = null;
            this._processEvent(a) && (v.disconnect(this._onmousedrag_connect), v.disconnect(this._onmousemove_connect), this._onmousemove_connect = v.connect(this._div.getEventSource(), "onmousemove", this, "_onMouseMoveHandler"), this._upGr = a.graphic, this._upPt = a.screenPoint.x + "," + a.screenPoint.y, this.onMouseUp(a))
        },
        _onClickHandler: function(a) {
            if (this._processEvent(a)) {
                var c = this._downGr,
                    b = this._upGr;
                c && (b && c === b && this._downPt === this._upPt) && (t && (W._ieGraphic = a.graphic),
                    this.onClick(a))
            }
        },
        _onDblClickHandler: function(a) {
            if (this._processEvent(a)) this.onDblClick(a)
        },
        onMouseOver: function() {},
        onMouseMove: function() {},
        onMouseDrag: function() {},
        onMouseOut: function() {},
        onMouseDown: function() {},
        onMouseUp: function() {},
        onClick: function() {},
        onDblClick: function() {},
        enableMouseEvents: function() {
            if (!this._mouseEvents) {
                var a = v.connect,
                    c = this._div.getEventSource();
                F || (this._onmouseover_connect = a(c, "onmouseover", this, "_onMouseOverHandler"), this._onmousemove_connect = a(c, "onmousemove",
                    this, "_onMouseMoveHandler"), this._onmouseout_connect = a(c, "onmouseout", this, "_onMouseOutHandler"), this._onmousedown_connect = a(c, "onmousedown", this, "_onMouseDownHandler"), this._onmouseup_connect = a(c, "onmouseup", this, "_onMouseUpHandler"), this._onclick_connect = a(c, "onclick", this, "_onClickHandler"), this._ondblclick_connect = a(c, "ondblclick", this, "_onDblClickHandler"));
                this._mouseEvents = !0
            }
        },
        disableMouseEvents: function() {
            if (this._mouseEvents) {
                var a = v.disconnect;
                a(this._onmouseover_connect);
                a(this._onmousemove_connect);
                a(this._onmousedrag_connect);
                a(this._onmouseout_connect);
                a(this._onmousedown_connect);
                a(this._onmouseup_connect);
                a(this._onclick_connect);
                a(this._ondblclick_connect);
                this._mouseEvents = !1
            }
        }
    });
    x._GraphicsContainer = P;
    x._GraphicsLayer = M;
    return x
});
},
'dojox/gfx':function(){
define(["dojo/_base/lang", "./gfx/_base", "./gfx/renderer!"], 
  function(lang, gfxBase, renderer){
	// module:
	//		dojox/gfx
	// summary:
	//		This the root of the Dojo Graphics package
	gfxBase.switchTo(renderer);
	return gfxBase;
});

},
'dojox/gfx/renderer':function(){
define(["./_base","dojo/_base/lang", "dojo/_base/sniff", "dojo/_base/window", "dojo/_base/config"],
  function(g, lang, has, win, config){
  //>> noBuildResolver
	var currentRenderer = null;

	has.add("vml", function(global, document, element){
		element.innerHTML = "<v:shape adj=\"1\"/>";
		var supported = ("adj" in element.firstChild);
		element.innerHTML = "";
		return supported;
	});

	return {
		// summary:
		//		This module is an AMD loader plugin that loads the appropriate graphics renderer
		//		implementation based on detected environment and current configuration settings.
		
		load: function(id, require, load){
			// tags:
			//      private
			if(currentRenderer && id != "force"){
				load(currentRenderer);
				return;
			}
			var renderer = config.forceGfxRenderer,
				renderers = !renderer && (lang.isString(config.gfxRenderer) ?
					config.gfxRenderer : "svg,vml,canvas,silverlight").split(","),
				silverlightObject, silverlightFlag;

			while(!renderer && renderers.length){
				switch(renderers.shift()){
					case "svg":
						// the next test is from https://github.com/phiggins42/has.js
						if("SVGAngle" in win.global){
							renderer = "svg";
						}
						break;
					case "vml":
						if(has("vml")){
							renderer = "vml";
						}
						break;
					case "silverlight":
						try{
							if(has("ie")){
								silverlightObject = new ActiveXObject("AgControl.AgControl");
								if(silverlightObject && silverlightObject.IsVersionSupported("1.0")){
									silverlightFlag = true;
								}
							}else{
								if(navigator.plugins["Silverlight Plug-In"]){
									silverlightFlag = true;
								}
							}
						}catch(e){
							silverlightFlag = false;
						}finally{
							silverlightObject = null;
						}
						if(silverlightFlag){
							renderer = "silverlight";
						}
						break;
					case "canvas":
						if(win.global.CanvasRenderingContext2D){
							renderer = "canvas";
						}
						break;
				}
			}

			if (renderer === 'canvas' && config.canvasEvents !== false) {
				renderer = "canvasWithEvents";
			}

			if(config.isDebug){
				console.log("gfx renderer = " + renderer);
			}

			function loadRenderer(){
				require(["dojox/gfx/" + renderer], function(module){
					g.renderer = renderer;
					// memorize the renderer module
					currentRenderer = module;
					// now load it
					load(module);
				});
			}
			if(renderer == "svg" && typeof window.svgweb != "undefined"){
				window.svgweb.addOnLoad(loadRenderer);
			}else{
				loadRenderer();
			}
		}
	};
});

},
'esri/layers/layer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/config", "dojo/_base/connect", "dojo/_base/lang", "dojo/_base/Deferred", "dojo/_base/json", "dojo/has", "../Evented", "../kernel", "../lang", "../request", "../deferredUtils", "../urlUtils", "../SpatialReference", "../geometry/Extent"], function(m, n, d, f, p, q, w, r, h, c, s, t, u, k, v) {
    var l = m([r], {
        declaredClass: "esri.layers.Layer",
        _eventMap: {
            error: ["error"],
            load: ["layer"],
            "opacity-change": ["opacity"],
            "update-end": ["error"],
            "visibility-change": ["visible"]
        },
        constructor: function(a, b) {
            if (a && f.isString(a)) this._url =
                u.urlToObject(this.url = a);
            else if (this.url = this._url = null, (b = b || a) && (b.layerDefinition || b.query)) b = null;
            this.spatialReference = new k(4326);
            this.initialExtent = new v(-180, -90, 180, 90, new k(4326));
            this._map = this._div = null;
            this.normalization = !0;
            b && (b.id && (this.id = b.id), !1 === b.visible && (this.visible = !1), c.isDefined(b.opacity) && (this.opacity = b.opacity), c.isDefined(b.minScale) && this.setMinScale(b.minScale), c.isDefined(b.maxScale) && this.setMaxScale(b.maxScale), this.attributionDataUrl = b.attributionDataUrl ||
                "", this.hasAttributionData = !!this.attributionDataUrl, c.isDefined(b.showAttribution) && (this.showAttribution = b.showAttribution), this.className = b.className, this.refreshInterval = b.refreshInterval || 0);
            this._errorHandler = f.hitch(this, this._errorHandler);
            this.refresh = f.hitch(this, this.refresh);
            if (this.managedSuspension) {
                var e = this._setMap;
                this._setMap = function(a) {
                    var b = e.apply(this, arguments);
                    this.evaluateSuspension();
                    if (this.suspended && !a.loaded) var c = d.connect(a, "onLoad", this, function() {
                        d.disconnect(c);
                        c = null;
                        this.evaluateSuspension()
                    });
                    return b
                }
            }
            this.registerConnectEvents()
        },
        id: null,
        visible: !0,
        opacity: 1,
        loaded: !1,
        loadError: null,
        minScale: 0,
        maxScale: 0,
        visibleAtMapScale: !1,
        suspended: !0,
        attributionDataUrl: "",
        hasAttributionData: !1,
        showAttribution: !0,
        refreshInterval: 0,
        _errorHandler: function(a) {
            this.loaded || (this.loadError = a);
            this.onError(a)
        },
        _setMap: function(a, b, e, g) {
            this._map = a;
            this._lyrZEHandle = d.connect(a, "onZoomEnd", this, this._processMapScale);
            if (a.loaded) this.visibleAtMapScale = this._isMapAtVisibleScale();
            else var c = d.connect(a, "onLoad", this, function() {
                d.disconnect(c);
                c = null;
                this._processMapScale()
            })
        },
        _unsetMap: function(a, b) {
            d.disconnect(this._lyrZEHandle);
            this._toggleRT();
            this._map = this._lyrZEHandle = null;
            this.suspended = !0
        },
        _cleanUp: function() {
            this._map = this._div = null
        },
        _fireUpdateStart: function() {
            this.updating || (this.updating = !0, this.attr("data-updating", ""), this._toggleRT(), this.onUpdateStart(), this._map && this._map._incr())
        },
        _fireUpdateEnd: function(a, b) {
            this.updating && (this.updating = !1, this.attr("data-updating"),
                this._toggleRT(!0), this.onUpdateEnd(a, b), this._map && this._map._decr())
        },
        _getToken: function() {
            var a = this._url,
                b = this.credential;
            return a && a.query && a.query.token || b && b.token || void 0
        },
        _findCredential: function() {
            this.credential = h.id && this._url && h.id.findCredential(this._url.path)
        },
        _useSSL: function() {
            var a = this._url,
                b = /^http:/i;
            this.url && (this.url = this.url.replace(b, "https:"));
            a && a.path && (a.path = a.path.replace(b, "https:"))
        },
        refresh: function() {},
        show: function() {
            this.setVisibility(!0)
        },
        hide: function() {
            this.setVisibility(!1)
        },
        setMinScale: function(a) {
            this.setScaleRange(a)
        },
        setMaxScale: function(a) {
            this.setScaleRange(null, a)
        },
        setScaleRange: function(a, b) {
            var e = c.isDefined(a),
                g = c.isDefined(b);
            this.loaded || (this._hasMin = this._hasMin || e, this._hasMax = this._hasMax || g);
            var d = this.minScale,
                f = this.maxScale;
            this.minScale = (e ? a : this.minScale) || 0;
            this.maxScale = (g ? b : this.maxScale) || 0;
            if (d !== this.minScale || f !== this.maxScale) this.onScaleRangeChange(), this._processMapScale()
        },
        suspend: function() {
            this._suspended = !0;
            this.evaluateSuspension()
        },
        resume: function() {
            this._suspended = !1;
            this.evaluateSuspension()
        },
        canResume: function() {
            return this.loaded && this._map && this._map.loaded && this.visible && this.visibleAtMapScale && !this._suspended
        },
        evaluateSuspension: function() {
            this.canResume() ? this.suspended && this._resume() : this.suspended || this._suspend()
        },
        _suspend: function() {
            this.suspended = !0;
            this.attr("data-suspended", "");
            this._toggleRT();
            this.onSuspend();
            if (this._map) this._map.onLayerSuspend(this)
        },
        _resume: function() {
            this.suspended = !1;
            this.attr("data-suspended");
            var a = void 0 === this._resumedOnce,
                b = this.className,
                e = this.getNode();
            if (a && (this._resumedOnce = !0, b && e)) {
                var c = e.getAttribute("class") || "";
                RegExp("(^|\\s)" + b + "(\\s|$)", "i").test(c) || e.setAttribute("class", c + ((c ? " " : "") + b))
            }
            this._toggleRT(!0);
            this.onResume({
                firstOccurrence: a
            });
            if (this._map) this._map.onLayerResume(this)
        },
        _processMapScale: function() {
            var a = this.visibleAtMapScale;
            this.visibleAtMapScale = this._isMapAtVisibleScale();
            a !== this.visibleAtMapScale && (this.onScaleVisibilityChange(), this.evaluateSuspension())
        },
        isVisibleAtScale: function(a) {
            return a ? l.prototype._isMapAtVisibleScale.apply(this, arguments) : !1
        },
        _isMapAtVisibleScale: function(a) {
            if (!a && (!this._map || !this._map.loaded)) return !1;
            a = a || this._map.getScale();
            var b = this.minScale,
                e = this.maxScale,
                c = !b,
                d = !e;
            !c && a <= b && (c = !0);
            !d && a >= e && (d = !0);
            return c && d
        },
        getAttributionData: function() {
            var a = this.attributionDataUrl,
                b = new p(t._dfdCanceller);
            this.hasAttributionData && a ? (b._pendingDfd = s({
                url: a,
                content: {
                    f: "json"
                },
                handleAs: "json",
                callbackParamName: "callback"
            }), b._pendingDfd.then(function(a) {
                    b.callback(a)
                },
                function(a) {
                    b.errback(a)
                })) : (a = Error("Layer does not have attribution data"), a.log = n.isDebug, b.errback(a));
            return b
        },
        getResourceInfo: function() {
            var a = this.resourceInfo;
            return f.isString(a) ? q.fromJson(a) : f.clone(a)
        },
        getMap: function() {
            return this._map
        },
        getNode: function() {
            return this._div
        },
        attr: function(a, b) {
            var c = this.getNode();
            c && (null == b ? c.removeAttribute(a) : c.setAttribute(a, b));
            return this
        },
        setRefreshInterval: function(a) {
            var b = this.refreshInterval;
            this.refreshInterval = a;
            this._toggleRT();
            a && !this.updating &&
                !this.suspended && this._toggleRT(!0);
            if (b !== a) this.onRefreshIntervalChange();
            return this
        },
        _toggleRT: function(a) {
            a && this.refreshInterval ? (clearTimeout(this._refreshT), this._refreshT = setTimeout(this.refresh, 6E4 * this.refreshInterval)) : this._refreshT && (clearTimeout(this._refreshT), this._refreshT = null)
        },
        setNormalization: function(a) {
            this.normalization = a
        },
        setVisibility: function(a) {
            this.visible !== a && (this.visible = a, this.onVisibilityChange(this.visible), this.evaluateSuspension());
            this.attr("data-hidden", a ?
                null : "")
        },
        onLoad: function() {},
        onVisibilityChange: function() {},
        onScaleRangeChange: function() {},
        onScaleVisibilityChange: function() {},
        onSuspend: function() {},
        onResume: function() {},
        onUpdate: function() {},
        onUpdateStart: function() {},
        onUpdateEnd: function() {},
        onRefreshIntervalChange: function() {},
        onError: function() {}
    });
    return l
});
},
'esri/request':function(){
//>>built
define(["require", "dojo/_base/array", "dojo/_base/config", "dojo/_base/Deferred", "dojo/_base/lang", "dojo/_base/url", "dojo/_base/xhr", "dojo/io/script", "dojo/io/iframe", "dojo/dom-construct", "dojo/io-query", "./kernel", "./config", "./sniff", "./lang", "./urlUtils", "./deferredUtils"], function(P, w, J, R, p, W, z, X, Y, S, T, l, Z, q, x, r, $) {
    function K(a) {
        a = new W(a);
        return (a.host + (a.port ? ":" + a.port : "")).toLowerCase()
    }

    function D(a, d, e, f) {
        var k = !1,
            n = !1,
            t;
        x.isDefined(d) && (p.isObject(d) ? (k = !!d.useProxy, n = !!d.usePost, t = d.crossOrigin) : k = !!d);
        a = p.mixin({},
            a);
        a._ssl && (a.url = a.url.replace(/^http:/i, "https:"));
        d = a.content;
        var h = a.url,
            g = e && a.form,
            s = m;
        t = x.isDefined(t) ? t : s.useCors;
        a.load = function(a) {
            var b;
            a && (a.error ? (b = p.mixin(Error(), a.error), b.log = J.isDebug) : "error" === a.status && (b = p.mixin(Error(), a), b.log = J.isDebug), b && !x.isDefined(b.httpCode) && (b.httpCode = b.code));
            return b || a
        };
        a.error = function(a, b) {
            b && b.xhr && b.xhr.abort();
            a instanceof Error || (a = p.mixin(Error(), a));
            a.log = J.isDebug;
            s.errorHandler(a, b);
            return a
        };
        a._token && (a.content = a.content || {}, a.content.token =
            a._token);
        var y = 0,
            A;
        d && h && (A = T.objectToQuery(d), y = A.length + h.length + 1, q("esri-url-encodes-apostrophe") && (y = A.replace(/'/g, "%27").length + h.length + 1));
        a.timeout = x.isDefined(a.timeout) ? a.timeout : s.timeout;
        a.handleAs = a.handleAs || "json";
        try {
            var u, v, b = t && r.canUseXhr(a.url) && !/https?:\/\/[^\/]+\/[^\/]+\/admin\/?(\/.*)?$/i.test(a.url),
                c = r.hasSameOrigin(a.url, window.location.href) || b,
                B = n || e || y > s.postLength ? !0 : !1,
                U = !c && -1 !== a.handleAs.indexOf("json") && a.callbackParamName && !e ? !0 : !1,
                C = r.getProxyRule(a.url) ||
                s.alwaysUseProxy || k || (!U || B) && !c ? !0 : !1;
            e && (!q("esri-file-upload") && !C && b) && (C = !0);
            if (C)
                if (u = r.getProxyUrl(h, t), v = u.path, u._xo && (b = !0), !B && v.length + 1 + y > s.postLength && (B = !0), a.url = v + "?" + h, B) a.content = p.mixin(u.query || {}, d);
                else {
                    var V = T.objectToQuery(p.mixin(u.query || {}, d));
                    V && (a.url += "?" + V);
                    a.content = null
                }
            if (U && !B) return !x.isDefined(a.isAsync) && 4 > q("ff") && (a.isAsync = !0), X.get(E ? E(a) : a);
            var F = a.headers;
            if (b && (!F || !F.hasOwnProperty("X-Requested-With"))) F = a.headers = F || {}, F["X-Requested-With"] = null;
            if (e) {
                var L =
                    a.callbackParamName || "callback.html",
                    D = a.callbackElementName || "textarea",
                    G, M, H, N, O = g.elements ? g.elements.length : 0,
                    Q;
                if (d = a.content)
                    for (G in d)
                        if (H = d[G], x.isDefined(H)) {
                            M = null;
                            for (N = 0; N < O; N++)
                                if (Q = g.elements[N], Q.name === G) {
                                    M = Q;
                                    break
                                }
                            M ? M.value = H : f ? g.append(G, H) : g.appendChild(S.create("input", {
                                type: "hidden",
                                name: G,
                                value: H
                            }))
                        }
                if (q("esri-file-upload")) w.forEach(g.elements, function(a) {
                    a.name === L && g.removeChild(a)
                }), a.contentType = !1, a.postData = f ? g : new FormData(g), delete a.form;
                else {
                    g.enctype = "multipart/form-data";
                    9 > q("ie") && (g.encoding = "multipart/form-data");
                    g.method = "post";
                    w.some(g.elements, function(a) {
                        return a.name === L
                    }) || g.appendChild(S.create("input", {
                        type: "hidden",
                        name: L,
                        value: D
                    }));
                    if (-1 !== h.toLowerCase().indexOf("addattachment") || -1 !== h.toLowerCase().indexOf("updateattachment")) a.url = h + (-1 === h.indexOf("?") ? "?" : "\x26") + L + "\x3d" + D, C && (a.url = v + "?" + a.url);
                    delete a.content
                }
            }
            if (b && !a.hasOwnProperty("withCredentials"))
                if (f = C ? v : h, -1 !== w.indexOf(m.webTierAuthServers, K(f))) a.withCredentials = !0;
                else if (l.id) {
                var I =
                    l.id.findServerInfo(f);
                I && I.webTierAuth && (a.withCredentials = !0)
            }
            a = E ? E(a) : a;
            if (B) {
                if (e && !q("esri-file-upload")) return Y.send(a);
                !C && q("safari") && (a.url += (-1 === a.url.indexOf("?") ? "?" : "\x26") + "_ts\x3d" + (new Date).getTime() + aa++);
                return z.post(a)
            }
            return z.get(a)
        } catch (P) {
            return e = new R, e.errback(a.error(P)), e
        }
    }

    function O(a) {
        var d = m.corsStatus,
            e = r.canUseXhr(a, !0); - 1 < e && m.corsEnabledServers.splice(e, 1);
        d[K(a)] = 1;
        return e
    }

    function I(a) {
        var d = m.corsStatus;
        if (m.corsDetection && m.useCors) try {
            var e = K(a);
            q("esri-cors") &&
                (a && -1 !== a.toLowerCase().indexOf("/rest/services") && !r.hasSameOrigin(a, window.location.href) && !r.canUseXhr(a) && !d[e]) && (d[e] = -1, z.get({
                    url: a.substring(0, a.toLowerCase().indexOf("/rest/") + 6) + "info",
                    content: {
                        f: "json"
                    },
                    failOk: !0,
                    handleAs: "json",
                    headers: {
                        "X-Requested-With": null
                    }
                }).then(function(f) {
                    f ? (d[e] = 2, r.canUseXhr(a) || m.corsEnabledServers.push(e)) : d[e] = 1
                }, function(a) {
                    d[e] = 1
                }))
        } catch (f) {
            console.log("esri._detectCors: an unknown error occurred while detecting CORS support")
        }
    }

    function n(a, d) {
        function e(b) {
            b._pendingDfd =
                D(a, d, y, s);
            if (!b._pendingDfd) {
                b.ioArgs = b._pendingDfd && b._pendingDfd.ioArgs;
                var c = Error("Deferred object is missing");
                c.log = J.isDebug;
                a._usrDfd = null;
                b.errback(c);
                b._pendingDfd = null;
                return b
            }
            b._pendingDfd.addCallback(function(d) {
                b.ioArgs = b._pendingDfd && b._pendingDfd.ioArgs;
                a._usrDfd = null;
                b.callback(d);
                b._pendingDfd = null
            }).addErrback(function(c) {
                var e, f, g;
                c && (e = c.code, f = c.subcode, g = (g = c.messageCode) && g.toUpperCase());
                if (c && 403 == e && (4 == f || c.message && -1 < c.message.toLowerCase().indexOf("ssl") && -1 === c.message.toLowerCase().indexOf("permission"))) {
                    if (!a._ssl) {
                        a._ssl =
                            a._sslFromServer = !0;
                        a._usrDfd = b;
                        n(a, d);
                        return
                    }
                } else if (c && 415 == c.status) {
                    if (O(a.url), !a._err415) {
                        a._err415 = 1;
                        a._usrDfd = b;
                        n(a, d);
                        return
                    }
                } else if (l.id && -1 !== w.indexOf(l.id._errorCodes, e) && !l.id._isPublic(a.url) && !p && (403 != e || -1 === w.indexOf(ba, g) && (!x.isDefined(f) || 2 == f))) {
                    b._pendingDfd = l.id.getCredential(a.url, {
                        token: a._token,
                        error: c
                    });
                    b._pendingDfd.addCallback(function(c) {
                        a._token = c.token;
                        a._usrDfd = b;
                        a._credential = c;
                        a._ssl = a._sslFromServer || c.ssl;
                        n(a, d)
                    }).addErrback(function(c) {
                        a._usrDfd = null;
                        b.errback(c);
                        b._pendingDfd = null
                    });
                    return
                }
                b.ioArgs = b._pendingDfd && b._pendingDfd.ioArgs;
                a._usrDfd = null;
                b.errback(c);
                b._pendingDfd = null
            })
        }
        a.url = r.fixUrl(a.url);
        "file:" !== window.location.protocol && (a.url = r.getAbsoluteUrl(a.url));
        d = d || {};
        var f, k = a.form,
            p = d.disableIdentityLookup,
            t = d._preLookup,
            h = !1;
        if (q("esri-workers") && !1 !== m.useWorkers)
            if (!0 === d.useWorkers || !0 === m.useWorkers) h = !0;
            else if (d.workerOptions) {
            var g = d.workerOptions;
            if (g.callback || g.worker && g.worker.worker instanceof Worker) h = !0
        }
        var s = k && k.append,
            y = k && (k.elements ?
                w.some(k.elements, function(a) {
                    return "file" === a.type
                }) : s),
            A = -1 !== a.url.toLowerCase().indexOf("token\x3d") || a.content && a.content.token || y && w.some(k.elements, function(a) {
                return "token" === a.name
            }) ? 1 : 0;
        I(a.url);
        if (a._usrDfd) f = a._usrDfd;
        else {
            f = new R($._dfdCanceller);
            f.addCallback(function(b) {
                /\/sharing\/rest\/accounts\/self/i.test(a.url) && (!A && !a._token && b.user && b.user.username) && m.webTierAuthServers.push(K(a.url));
                if (b = a._credential) {
                    var c = l.id.findServerInfo(b.server);
                    if (c = c && c.owningSystemUrl) c = c.replace(/\/?$/,
                        "/sharing"), (b = l.id.findCredential(c, b.userId)) && -1 === l.id._getIdenticalSvcIdx(c, b) && b.resources.splice(0, 0, c)
                }
            });
            f.addBoth(function(b) {
                delete a._credential;
                if (b && (!q("ie") || !b.nodeType)) b._ssl = a._ssl
            });
            var u = a.load,
                v = a.error;
            u && f.addCallback(function(a) {
                var c = f._pendingDfd,
                    c = c && c.ioArgs;
                return u.call(c && c.args, a, c)
            });
            v && f.addErrback(function(a) {
                var c = f._pendingDfd,
                    c = c && c.ioArgs;
                return v.call(c && c.args, a, c)
            })
        }
        if (l.id && !A && !a._token && !l.id._isPublic(a.url) && (!p || t))
            if (k = l.id.findCredential(a.url)) a._token =
                k.token, a._ssl = k.ssl;
        h ? d.workerOptions && d.workerOptions.worker ? (z = d.workerOptions.worker, e(f)) : P(["./workers/RequestClient"], function(a) {
            if (d.workerOptions) {
                var c = d.workerOptions;
                z = a.getClient(c.callback, c.cbFunction)
            } else z = a.getClient();
            e(f)
        }) : e(f);
        return f
    }
    var E, m = Z.defaults.io,
        ba = ["COM_0056", "COM_0057"],
        aa = 0;
    n._request = D;
    n._disableCors = O;
    n._detectCors = I;
    n.setRequestPreCallback = function(a) {
        E = a
    };
    return n
});
},
'dojo/_base/url':function(){
define(["./kernel"], function(dojo){
	// module:
	//		dojo/url

	var
		ore = new RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$"),
		ire = new RegExp("^((([^\\[:]+):)?([^@]+)@)?(\\[([^\\]]+)\\]|([^\\[:]*))(:([0-9]+))?$"),
		_Url = function(){
			var n = null,
				_a = arguments,
				uri = [_a[0]];
			// resolve uri components relative to each other
			for(var i = 1; i<_a.length; i++){
				if(!_a[i]){ continue; }

				// Safari doesn't support this.constructor so we have to be explicit
				// FIXME: Tracked (and fixed) in Webkit bug 3537.
				//		http://bugs.webkit.org/show_bug.cgi?id=3537
				var relobj = new _Url(_a[i]+""),
					uriobj = new _Url(uri[0]+"");

				if(
					relobj.path == "" &&
					!relobj.scheme &&
					!relobj.authority &&
					!relobj.query
				){
					if(relobj.fragment != n){
						uriobj.fragment = relobj.fragment;
					}
					relobj = uriobj;
				}else if(!relobj.scheme){
					relobj.scheme = uriobj.scheme;

					if(!relobj.authority){
						relobj.authority = uriobj.authority;

						if(relobj.path.charAt(0) != "/"){
							var path = uriobj.path.substring(0,
								uriobj.path.lastIndexOf("/") + 1) + relobj.path;

							var segs = path.split("/");
							for(var j = 0; j < segs.length; j++){
								if(segs[j] == "."){
									// flatten "./" references
									if(j == segs.length - 1){
										segs[j] = "";
									}else{
										segs.splice(j, 1);
										j--;
									}
								}else if(j > 0 && !(j == 1 && segs[0] == "") &&
									segs[j] == ".." && segs[j-1] != ".."){
									// flatten "../" references
									if(j == (segs.length - 1)){
										segs.splice(j, 1);
										segs[j - 1] = "";
									}else{
										segs.splice(j - 1, 2);
										j -= 2;
									}
								}
							}
							relobj.path = segs.join("/");
						}
					}
				}

				uri = [];
				if(relobj.scheme){
					uri.push(relobj.scheme, ":");
				}
				if(relobj.authority){
					uri.push("//", relobj.authority);
				}
				uri.push(relobj.path);
				if(relobj.query){
					uri.push("?", relobj.query);
				}
				if(relobj.fragment){
					uri.push("#", relobj.fragment);
				}
			}

			this.uri = uri.join("");

			// break the uri into its main components
			var r = this.uri.match(ore);

			this.scheme = r[2] || (r[1] ? "" : n);
			this.authority = r[4] || (r[3] ? "" : n);
			this.path = r[5]; // can never be undefined
			this.query = r[7] || (r[6] ? "" : n);
			this.fragment	 = r[9] || (r[8] ? "" : n);

			if(this.authority != n){
				// server based naming authority
				r = this.authority.match(ire);

				this.user = r[3] || n;
				this.password = r[4] || n;
				this.host = r[6] || r[7]; // ipv6 || ipv4
				this.port = r[9] || n;
			}
		};
	_Url.prototype.toString = function(){ return this.uri; };

	return dojo._Url = _Url;
});

},
'dojo/io/script':function(){
define([
	"../_base/connect", /*===== "../_base/declare", =====*/ "../_base/kernel", "../_base/lang",
	"../sniff", "../_base/window","../_base/xhr",
	"../dom", "../dom-construct", "../request/script", "../aspect"
], function(connect, /*===== declare, =====*/ kernel, lang, has, win, xhr, dom, domConstruct, _script, aspect){

	// module:
	//		dojo/io/script

	kernel.deprecated("dojo/io/script", "Use dojo/request/script.", "2.0");

	/*=====
	var __ioArgs = declare(kernel.__IoArgs, {
		// summary:
		//		All the properties described in the dojo.__ioArgs type, apply to this
		//		type as well, EXCEPT "handleAs". It is not applicable to
		//		dojo/io/script.get() calls, since it is implied by the usage of
		//		"jsonp" (response will be a JSONP call returning JSON)
		//		or the response is pure JavaScript defined in
		//		the body of the script that was attached.
		// callbackParamName: String
		//		Deprecated as of Dojo 1.4 in favor of "jsonp", but still supported for
		//		legacy code. See notes for jsonp property.
		// jsonp: String
		//		The URL parameter name that indicates the JSONP callback string.
		//		For instance, when using Yahoo JSONP calls it is normally,
		//		jsonp: "callback". For AOL JSONP calls it is normally
		//		jsonp: "c".
		// checkString: String
		//		A string of JavaScript that when evaluated like so:
		//		"typeof(" + checkString + ") != 'undefined'"
		//		being true means that the script fetched has been loaded.
		//		Do not use this if doing a JSONP type of call (use callbackParamName instead).
		// frameDoc: Document
		//		The Document object for a child iframe. If this is passed in, the script
		//		will be attached to that document. This can be helpful in some comet long-polling
		//		scenarios with Firefox and Opera.
	});
	=====*/

	var script = {
		// summary:
		//		TODOC

		get: function(/*__ioArgs*/ args){
			// summary:
			//		sends a get request using a dynamically created script tag.
			var rDfd;
			var dfd = this._makeScriptDeferred(args, function(dfd){
				rDfd && rDfd.cancel();
			});
			var ioArgs = dfd.ioArgs;
			xhr._ioAddQueryToUrl(ioArgs);

			xhr._ioNotifyStart(dfd);

			rDfd = _script.get(ioArgs.url, {
				timeout: args.timeout,
				jsonp: ioArgs.jsonp,
				checkString: args.checkString,
				ioArgs: ioArgs,
				frameDoc: args.frameDoc,
				canAttach: function(rDfd){
					// sync values
					ioArgs.requestId = rDfd.id;
					ioArgs.scriptId = rDfd.scriptId;
					ioArgs.canDelete = rDfd.canDelete;

					return script._canAttach(ioArgs);
				}
			}, true);

			// Run _validCheck at the same time dojo/request/watch runs the
			// rDfd.isValid function
			aspect.around(rDfd, "isValid", function(isValid){
				return function(response){
					script._validCheck(dfd);
					return isValid.call(this, response);
				};
			});

			rDfd.then(function(){
				dfd.resolve(dfd);
			}).otherwise(function(error){
				dfd.ioArgs.error = error;
				dfd.reject(error);
			});

			return dfd;
		},

		attach: _script._attach,
		remove: _script._remove,

		_makeScriptDeferred: function(/*Object*/ args, /*Function?*/ cancel){
			// summary:
			//		sets up a Deferred object for an IO request.
			var dfd = xhr._ioSetArgs(args, cancel || this._deferredCancel, this._deferredOk, this._deferredError);

			var ioArgs = dfd.ioArgs;
			ioArgs.id = kernel._scopeName + "IoScript" + (this._counter++);
			ioArgs.canDelete = false;

			//Special setup for jsonp case
			ioArgs.jsonp = args.callbackParamName || args.jsonp;
			if(ioArgs.jsonp){
				//Add the jsonp parameter.
				ioArgs.query = ioArgs.query || "";
				if(ioArgs.query.length > 0){
					ioArgs.query += "&";
				}
				ioArgs.query += ioArgs.jsonp +
					"=" + (args.frameDoc ? "parent." : "") +
					kernel._scopeName + ".io.script.jsonp_" + ioArgs.id + "._jsonpCallback";

				ioArgs.frameDoc = args.frameDoc;

				//Setup the Deferred to have the jsonp callback.
				ioArgs.canDelete = true;
				dfd._jsonpCallback = this._jsonpCallback;
				this["jsonp_" + ioArgs.id] = dfd;
			}
			// Make sure this runs no matter what happens to clean things up if need be
			dfd.addBoth(function(value){
				if(ioArgs.canDelete){
					if(value instanceof Error){
						// Set up a callback that will clean things up for timeouts and cancels
						script["jsonp_" + ioArgs.id]._jsonpCallback = function(){
							// Delete the cached deferred
							delete script["jsonp_" + ioArgs.id];
							if(ioArgs.requestId){
								// Call the dojo/request/script callback to clean itself up as well
								kernel.global[_script._callbacksProperty][ioArgs.requestId]();
							}
						};
					}else{
						script._addDeadScript(ioArgs);
					}
				}
			});
			return dfd; // dojo/_base/Deferred
		},

		_deferredCancel: function(/*Deferred*/ dfd){
			// summary:
			//		canceller function for xhr._ioSetArgs call.

			//DO NOT use "this" and expect it to be script.
			dfd.canceled = true;
		},

		_deferredOk: function(/*Deferred*/ dfd){
			// summary:
			//		okHandler function for xhr._ioSetArgs call.

			//DO NOT use "this" and expect it to be script.
			var ioArgs = dfd.ioArgs;

			//Favor JSONP responses, script load events then lastly ioArgs.
			//The ioArgs are goofy, but cannot return the dfd since that stops
			//the callback chain in Deferred. The return value is not that important
			//in that case, probably a checkString case.
			return ioArgs.json || ioArgs.scriptLoaded || ioArgs;
		},

		_deferredError: function(/*Error*/ error, /*Deferred*/ dfd){
			// summary:
			//		errHandler function for xhr._ioSetArgs call.

			console.log("dojo.io.script error", error);
			return error;
		},

		_deadScripts: [],
		_counter: 1,

		_addDeadScript: function(/*Object*/ ioArgs){
			// summary:
			//		sets up an entry in the deadScripts array.
			script._deadScripts.push({id: ioArgs.id, frameDoc: ioArgs.frameDoc});
			//Being extra paranoid about leaks:
			ioArgs.frameDoc = null;
		},

		_validCheck: function(/*Deferred*/ dfd){
			// summary:
			//		inflight check function to see if dfd is still valid.

			// TODO: why isn't dfd accessed?

			//Do script cleanup here. We wait for one inflight pass
			//to make sure we don't get any weird things by trying to remove a script
			//tag that is part of the call chain (IE 6 has been known to
			//crash in that case).
			var deadScripts = script._deadScripts;
			if(deadScripts && deadScripts.length > 0){
				for(var i = 0; i < deadScripts.length; i++){
					//Remove the script tag
					script.remove(deadScripts[i].id, deadScripts[i].frameDoc);
					//Clean up the deferreds
					delete script["jsonp_" + deadScripts[i].id];
					deadScripts[i].frameDoc = null;
				}
				script._deadScripts = [];
			}

			return true;
		},

		_ioCheck: function(dfd){
			// summary:
			//		inflight check function to see if IO finished.
			// dfd: Deferred
			var ioArgs = dfd.ioArgs;
			//Check for finished jsonp
			if(ioArgs.json || (ioArgs.scriptLoaded && !ioArgs.args.checkString)){
				return true;
			}

			//Check for finished "checkString" case.
			var checkString = ioArgs.args.checkString;
			return checkString && eval("typeof(" + checkString + ") != 'undefined'");


		},

		_resHandle: function(/*Deferred*/ dfd){
			// summary:
			//		inflight function to handle a completed response.
			if(script._ioCheck(dfd)){
				dfd.callback(dfd);
			}else{
				//This path should never happen since the only way we can get
				//to _resHandle is if _ioCheck is true.
				dfd.errback(new Error("inconceivable dojo.io.script._resHandle error"));
			}
		},

		_canAttach: function(/*===== ioArgs =====*/ ){
			// summary:
			//		A method that can be overridden by other modules
			//		to control when the script attachment occurs.
			// ioArgs: Object
			return true;
		},

		_jsonpCallback: function(/*JSON Object*/ json){
			// summary:
			//		generic handler for jsonp callback. A pointer to this function
			//		is used for all jsonp callbacks.  NOTE: the "this" in this
			//		function will be the Deferred object that represents the script
			//		request.
			this.ioArgs.json = json;
			if(this.ioArgs.requestId){
				kernel.global[_script._callbacksProperty][this.ioArgs.requestId](json);
			}
		}
	};

	lang.setObject("dojo.io.script", script);

	/*=====
	script.attach = function(id, url, frameDocument){
		// summary:
		//		creates a new `<script>` tag pointing to the specified URL and
		//		adds it to the document.
		// description:
		//		Attaches the script element to the DOM. Use this method if you
		//		just want to attach a script to the DOM and do not care when or
		//		if it loads.
	};
	script.remove = function(id, frameDocument){
		// summary:
		//		removes the script element with the given id, from the given frameDocument.
		//		If no frameDocument is passed, the current document is used.
	};
	=====*/

	return script;
});

},
'dojo/request/script':function(){
define([
	'module',
	'./watch',
	'./util',
	'../_base/kernel',
	'../_base/array',
	'../_base/lang',
	'../on',
	'../dom',
	'../dom-construct',
	'../has',
	'../_base/window'/*=====,
	'../request',
	'../_base/declare' =====*/
], function(module, watch, util, kernel, array, lang, on, dom, domConstruct, has, win/*=====, request, declare =====*/){
	has.add('script-readystatechange', function(global, document){
		var script = document.createElement('script');
		return typeof script['onreadystatechange'] !== 'undefined' &&
			(typeof global['opera'] === 'undefined' || global['opera'].toString() !== '[object Opera]');
	});

	var mid = module.id.replace(/[\/\.\-]/g, '_'),
		counter = 0,
		loadEvent = has('script-readystatechange') ? 'readystatechange' : 'load',
		readyRegExp = /complete|loaded/,
		callbacks = kernel.global[mid + '_callbacks'] = {},
		deadScripts = [];

	function attach(id, url, frameDoc){
		var doc = (frameDoc || win.doc),
			element = doc.createElement('script');

		element.type = 'text/javascript';
		element.src = url;
		element.id = id;
		element.async = true;
		element.charset = 'utf-8';

		return doc.getElementsByTagName('head')[0].appendChild(element);
	}

	function remove(id, frameDoc, cleanup){
		domConstruct.destroy(dom.byId(id, frameDoc));

		if(callbacks[id]){
			if(cleanup){
				// set callback to a function that deletes itself so requests that
				// are in-flight don't error out when returning and also
				// clean up after themselves
				callbacks[id] = function(){
					delete callbacks[id];
				};
			}else{
				delete callbacks[id];
			}
		}
	}

	function _addDeadScript(dfd){
		// Be sure to check ioArgs because it can dynamically change in the dojox/io plugins.
		// See http://bugs.dojotoolkit.org/ticket/15890.
		var options = dfd.response.options,
			frameDoc = options.ioArgs ? options.ioArgs.frameDoc : options.frameDoc;

		deadScripts.push({ id: dfd.id, frameDoc: frameDoc });

		if(options.ioArgs){
			options.ioArgs.frameDoc = null;
		}
		options.frameDoc = null;
	}

	function canceler(dfd, response){
		if(dfd.canDelete){
			//For timeouts and cancels, remove the script element immediately to
			//avoid a response from it coming back later and causing trouble.
			script._remove(dfd.id, response.options.frameDoc, true);
		}
	}
	function isValid(response){
		//Do script cleanup here. We wait for one inflight pass
		//to make sure we don't get any weird things by trying to remove a script
		//tag that is part of the call chain (IE 6 has been known to
		//crash in that case).
		if(deadScripts && deadScripts.length){
			array.forEach(deadScripts, function(_script){
				script._remove(_script.id, _script.frameDoc);
				_script.frameDoc = null;
			});
			deadScripts = [];
		}

		return response.options.jsonp ? !response.data : true;
	}
	function isReadyScript(response){
		return !!this.scriptLoaded;
	}
	function isReadyCheckString(response){
		var checkString = response.options.checkString;

		return checkString && eval('typeof(' + checkString + ') !== "undefined"');
	}
	function handleResponse(response, error){
		if(this.canDelete){
			_addDeadScript(this);
		}
		if(error){
			this.reject(error);
		}else{
			this.resolve(response);
		}
	}

	function script(url, options, returnDeferred){
		var response = util.parseArgs(url, util.deepCopy({}, options));
		url = response.url;
		options = response.options;

		var dfd = util.deferred(
			response,
			canceler,
			isValid,
			options.jsonp ? null : (options.checkString ? isReadyCheckString : isReadyScript),
			handleResponse
		);

		lang.mixin(dfd, {
			id: mid + (counter++),
			canDelete: false
		});

		if(options.jsonp){
			var queryParameter = new RegExp('[?&]' + options.jsonp + '=');
			if(!queryParameter.test(url)){
				url += (~url.indexOf('?') ? '&' : '?') +
					options.jsonp + '=' +
					(options.frameDoc ? 'parent.' : '') +
					mid + '_callbacks.' + dfd.id;
			}

			dfd.canDelete = true;
			callbacks[dfd.id] = function(json){
				response.data = json;
				dfd.handleResponse(response);
			};
		}

		if(util.notify){
			util.notify.emit('send', response, dfd.promise.cancel);
		}

		if(!options.canAttach || options.canAttach(dfd)){
			var node = script._attach(dfd.id, url, options.frameDoc);

			if(!options.jsonp && !options.checkString){
				var handle = on(node, loadEvent, function(evt){
					if(evt.type === 'load' || readyRegExp.test(node.readyState)){
						handle.remove();
						dfd.scriptLoaded = evt;
					}
				});
			}
		}

		watch(dfd);

		return returnDeferred ? dfd : dfd.promise;
	}
	script.get = script;
	/*=====
	script = function(url, options){
		// summary:
		//		Sends a request using a script element with the given URL and options.
		// url: String
		//		URL to request
		// options: dojo/request/script.__Options?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	script.__BaseOptions = declare(request.__BaseOptions, {
		// jsonp: String?
		//		The URL parameter name that indicates the JSONP callback string.
		//		For instance, when using Yahoo JSONP calls it is normally,
		//		jsonp: "callback". For AOL JSONP calls it is normally
		//		jsonp: "c".
		// checkString: String?
		//		A string of JavaScript that when evaluated like so:
		//		"typeof(" + checkString + ") != 'undefined'"
		//		being true means that the script fetched has been loaded.
		//		Do not use this if doing a JSONP type of call (use `jsonp` instead).
		// frameDoc: Document?
		//		The Document object of a child iframe. If this is passed in, the script
		//		will be attached to that document. This can be helpful in some comet long-polling
		//		scenarios with Firefox and Opera.
	});
	script.__MethodOptions = declare(null, {
		// method: String?
		//		This option is ignored. All requests using this transport are
		//		GET requests.
	});
	script.__Options = declare([script.__BaseOptions, script.__MethodOptions]);

	script.get = function(url, options){
		// summary:
		//		Send an HTTP GET request using a script element with the given URL and options.
		// url: String
		//		URL to request
		// options: dojo/request/script.__BaseOptions?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	=====*/

	// TODO: Remove in 2.0
	script._attach = attach;
	script._remove = remove;
	script._callbacksProperty = mid + '_callbacks';

	return script;
});

},
'dojo/io/iframe':function(){
define([
	"../_base/config", "../_base/json", "../_base/kernel", /*===== "../_base/declare", =====*/ "../_base/lang",
	"../_base/xhr", "../sniff", "../_base/window",
	"../dom", "../dom-construct", "../query", "require", "../aspect", "../request/iframe"
], function(config, json, kernel, /*===== declare, =====*/ lang, xhr, has, win, dom, domConstruct, query, require, aspect, _iframe){

// module:
//		dojo/io/iframe

kernel.deprecated("dojo/io/iframe", "Use dojo/request/iframe.", "2.0");

/*=====
var __ioArgs = declare(kernel.__IoArgs, {
	// method: String?
	//		The HTTP method to use. "GET" or "POST" are the only supported
	//		values.  It will try to read the value from the form node's
	//		method, then try this argument. If neither one exists, then it
	//		defaults to POST.
	// handleAs: String?
	//		Specifies what format the result data should be given to the
	//		load/handle callback. Valid values are: text, html, xml, json,
	//		javascript. IMPORTANT: For all values EXCEPT html and xml, The
	//		server response should be an HTML file with a textarea element.
	//		The response data should be inside the textarea element. Using an
	//		HTML document the only reliable, cross-browser way this
	//		transport can know when the response has loaded. For the html
	//		handleAs value, just return a normal HTML document.  NOTE: xml
	//		is now supported with this transport (as of 1.1+); a known issue
	//		is if the XML document in question is malformed, Internet Explorer
	//		will throw an uncatchable error.
	// content: Object?
	//		If "form" is one of the other args properties, then the content
	//		object properties become hidden form form elements. For
	//		instance, a content object of {name1 : "value1"} is converted
	//		to a hidden form element with a name of "name1" and a value of
	//		"value1". If there is not a "form" property, then the content
	//		object is converted into a name=value&name=value string, by
	//		using xhr.objectToQuery().
});
=====*/

/*=====
return kernel.io.iframe = {
	// summary:
	//		Deprecated, use dojo/request/iframe instead.
	//		Sends an Ajax I/O call using and Iframe (for instance, to upload files)

	create: function(fname, onloadstr, uri){
		// summary:
		//		Creates a hidden iframe in the page. Used mostly for IO
		//		transports.  You do not need to call this to start a
		//		dojo/io/iframe request. Just call send().
		// fname: String
		//		The name of the iframe. Used for the name attribute on the
		//		iframe.
		// onloadstr: String
		//		A string of JavaScript that will be executed when the content
		//		in the iframe loads.
		// uri: String
		//		The value of the src attribute on the iframe element. If a
		//		value is not given, then dojo/resources/blank.html will be
		//		used.
	},
	setSrc: function(iframe, src, replace){
		// summary:
		//		Sets the URL that is loaded in an IFrame. The replace parameter
		//		indicates whether location.replace() should be used when
		//		changing the location of the iframe.
	},
	doc: function(iframeNode){
		// summary:
		//		Returns the document object associated with the iframe DOM Node argument.
	}
};
=====*/


var mid = _iframe._iframeName;
mid = mid.substring(0, mid.lastIndexOf('_'));

var iframe = lang.delegate(_iframe, {
	// summary:
	//		Deprecated, use dojo/request/iframe instead.
	//		Sends an Ajax I/O call using and Iframe (for instance, to upload files)

	create: function(){
		return iframe._frame = _iframe.create.apply(_iframe, arguments);
	},

	// cover up delegated methods
	get: null,
	post: null,

	send: function(/*__ioArgs*/args){
		// summary:
		//		Function that sends the request to the server.
		//		This transport can only process one send() request at a time, so if send() is called
		//		multiple times, it will queue up the calls and only process one at a time.
		var rDfd;

		//Set up the deferred.
		var dfd = xhr._ioSetArgs(args,
			function(/*Deferred*/dfd){
				// summary:
				//		canceller function for xhr._ioSetArgs call.
				rDfd && rDfd.cancel();
			},
			function(/*Deferred*/dfd){
				// summary:
				//		okHandler function for xhr._ioSetArgs call.
				var value = null,
					ioArgs = dfd.ioArgs;
				try{
					var handleAs = ioArgs.handleAs;

					//Assign correct value based on handleAs value.
					if(handleAs === "xml" || handleAs === "html"){
						value = rDfd.response.data;
					}else{
						value = rDfd.response.text;
						if(handleAs === "json"){
							value = json.fromJson(value);
						}else if(handleAs === "javascript"){
							value = kernel.eval(value);
						}
					}
				}catch(e){
					value = e;
				}
				return value;
			},
			function(/*Error*/error, /*Deferred*/dfd){
				// summary:
				//		errHandler function for xhr._ioSetArgs call.
				dfd.ioArgs._hasError = true;
				return error;
			}
		);

		var ioArgs = dfd.ioArgs;

		var method = "GET",
			form = dom.byId(args.form);
		if(args.method && args.method.toUpperCase() === "POST" && form){
			method = "POST";
		}

		var options = {
			method: method,
			handleAs: args.handleAs === "json" || args.handleAs === "javascript" ? "text" : args.handleAs,
			form: args.form,
			query: form ? null : args.content,
			data: form ? args.content : null,
			timeout: args.timeout,
			ioArgs: ioArgs
		};

		if(options.method){
			options.method = options.method.toUpperCase();
		}

		if(config.ioPublish && kernel.publish && ioArgs.args.ioPublish !== false){
			var start = aspect.after(_iframe, "_notifyStart", function(data){
				if(data.options.ioArgs === ioArgs){
					start.remove();
					xhr._ioNotifyStart(dfd);
				}
			}, true);
		}
		rDfd = _iframe(ioArgs.url, options, true);

		ioArgs._callNext = rDfd._callNext;

		rDfd.then(function(){
			dfd.resolve(dfd);
		}).otherwise(function(error){
			dfd.ioArgs.error = error;
			dfd.reject(error);
		});

		return dfd;
	},

	_iframeOnload: win.global[mid + '_onload']
});

lang.setObject("dojo.io.iframe", iframe);

return iframe;
});

},
'dojo/request/iframe':function(){
define([
	'module',
	'require',
	'./watch',
	'./util',
	'./handlers',
	'../_base/lang',
	'../io-query',
	'../query',
	'../has',
	'../dom',
	'../dom-construct',
	'../_base/window',
	'../NodeList-dom'/*=====,
	'../request',
	'../_base/declare' =====*/
], function(module, require, watch, util, handlers, lang, ioQuery, query, has, dom, domConstruct, win/*=====, NodeList, request, declare =====*/){
	var mid = module.id.replace(/[\/\.\-]/g, '_'),
		onload = mid + '_onload';

	if(!win.global[onload]){
		win.global[onload] = function(){
			var dfd = iframe._currentDfd;
			if(!dfd){
				iframe._fireNextRequest();
				return;
			}

			var response = dfd.response,
				options = response.options,
				formNode = dom.byId(options.form) || dfd._tmpForm;

			if(formNode){
				// remove all the hidden content inputs
				var toClean = dfd._contentToClean;
				for(var i=0; i<toClean.length; i++){
					var key = toClean[i];
					//Need to cycle over all nodes since we may have added
					//an array value which means that more than one node could
					//have the same .name value.
					for(var j=0; j<formNode.childNodes.length; j++){
						var childNode = formNode.childNodes[j];
						if(childNode.name === key){
							domConstruct.destroy(childNode);
							break;
						}
					}
				}

				// restore original action + target
				dfd._originalAction && formNode.setAttribute('action', dfd._originalAction);
				if(dfd._originalMethod){
					formNode.setAttribute('method', dfd._originalMethod);
					formNode.method = dfd._originalMethod;
				}
				if(dfd._originalTarget){
					formNode.setAttribute('target', dfd._originalTarget);
					formNode.target = dfd._originalTarget;
				}
			}

			if(dfd._tmpForm){
				domConstruct.destroy(dfd._tmpForm);
				delete dfd._tmpForm;
			}

			dfd._finished = true;
		};
	}

	function create(name, onloadstr, uri){
		if(win.global[name]){
			return win.global[name];
		}

		if(win.global.frames[name]){
			return win.global.frames[name];
		}

		if(!uri){
			if(has('config-useXDomain') && !has('config-dojoBlankHtmlUrl')){
				console.warn('dojo/request/iframe: When using cross-domain Dojo builds,' +
					' please save dojo/resources/blank.html to your domain and set dojoConfig.dojoBlankHtmlUrl' +
					' to the path on your domain to blank.html');
			}
			uri = (has('config-dojoBlankHtmlUrl')||require.toUrl('dojo/resources/blank.html'));
		}

		var frame = domConstruct.place(
			'<iframe id="'+name+'" name="'+name+'" src="'+uri+'" onload="'+onloadstr+
			'" style="position: absolute; left: 1px; top: 1px; height: 1px; width: 1px; visibility: hidden">',
			win.body());

		win.global[name] = frame;

		return frame;
	}

	function setSrc(_iframe, src, replace){
		var frame = win.global.frames[_iframe.name];

		if(frame.contentWindow){
			// We have an iframe node instead of the window
			frame = frame.contentWindow;
		}

		try{
			if(!replace){
				frame.location = src;
			}else{
				frame.location.replace(src);
			}
		}catch(e){
			console.log('dojo/request/iframe.setSrc: ', e);
		}
	}

	function doc(iframeNode){
		if(iframeNode.contentDocument){
			return iframeNode.contentDocument;
		}
		var name = iframeNode.name;
		if(name){
			var iframes = win.doc.getElementsByTagName('iframe');
			if(iframeNode.document && iframes[name].contentWindow && iframes[name].contentWindow.document){
				return iframes[name].contentWindow.document;
			}else if(win.doc.frames[name] && win.doc.frames[name].document){
				return win.doc.frames[name].document;
			}
		}
		return null;
	}

	function createForm(){
		return domConstruct.create('form', {
			name: mid + '_form',
			style: {
				position: 'absolute',
				top: '-1000px',
				left: '-1000px'
			}
		}, win.body());
	}

	function fireNextRequest(){
		// summary:
		//		Internal method used to fire the next request in the queue.
		var dfd;
		try{
			if(iframe._currentDfd || !iframe._dfdQueue.length){
				return;
			}
			do{
				dfd = iframe._currentDfd = iframe._dfdQueue.shift();
			}while(dfd && (dfd.canceled || (dfd.isCanceled && dfd.isCanceled())) && iframe._dfdQueue.length);

			if(!dfd || dfd.canceled || (dfd.isCanceled && dfd.isCanceled())){
				iframe._currentDfd = null;
				return;
			}

			var response = dfd.response,
				options = response.options,
				c2c = dfd._contentToClean = [],
				formNode = dom.byId(options.form),
				notify = util.notify,
				data = options.data || null,
				queryStr;

			if(!dfd._legacy && options.method === 'POST' && !formNode){
				formNode = dfd._tmpForm = createForm();
			}else if(options.method === 'GET' && formNode && response.url.indexOf('?') > -1){
				queryStr = response.url.slice(response.url.indexOf('?') + 1);
				data = lang.mixin(ioQuery.queryToObject(queryStr), data);
			}

			if(formNode){
				if(!dfd._legacy){
					var parentNode = formNode;
					do{
						parentNode = parentNode.parentNode;
					}while(parentNode && parentNode !== win.doc.documentElement);

					// Append the form node or some browsers won't work
					if(!parentNode){
						formNode.style.position = 'absolute';
						formNode.style.left = '-1000px';
						formNode.style.top = '-1000px';
						win.body().appendChild(formNode);
					}

					if(!formNode.name){
						formNode.name = mid + '_form';
					}
				}

				// if we have things in data, we need to add them to the form
				// before submission
				if(data){
					var createInput = function(name, value){
						domConstruct.create('input', {
							type: 'hidden',
							name: name,
							value: value
						}, formNode);
						c2c.push(name);
					};
					for(var x in data){
						var val = data[x];
						if(lang.isArray(val) && val.length > 1){
							for(var i=0; i<val.length; i++){
								createInput(x, val[i]);
							}
						}else{
							if(!formNode[x]){
								createInput(x, val);
							}else{
								formNode[x].value = val;
							}
						}
					}
				}

				//IE requires going through getAttributeNode instead of just getAttribute in some form cases,
				//so use it for all.  See #2844
				var actionNode = formNode.getAttributeNode('action'),
					methodNode = formNode.getAttributeNode('method'),
					targetNode = formNode.getAttributeNode('target');

				if(response.url){
					dfd._originalAction = actionNode ? actionNode.value : null;
					if(actionNode){
						actionNode.value = response.url;
					}else{
						formNode.setAttribute('action', response.url);
					}
				}

				if(!dfd._legacy){
					dfd._originalMethod = methodNode ? methodNode.value : null;
					if(methodNode){
						methodNode.value = options.method;
					}else{
						formNode.setAttribute('method', options.method);
					}
				}else{
					if(!methodNode || !methodNode.value){
						if(methodNode){
							methodNode.value = options.method;
						}else{
							formNode.setAttribute('method', options.method);
						}
					}
				}

				dfd._originalTarget = targetNode ? targetNode.value : null;
				if(targetNode){
					targetNode.value = iframe._iframeName;
				}else{
					formNode.setAttribute('target', iframe._iframeName);
				}
				formNode.target = iframe._iframeName;

				notify && notify.emit('send', response, dfd.promise.cancel);
				iframe._notifyStart(response);
				formNode.submit();
			}else{
				// otherwise we post a GET string by changing URL location for the
				// iframe

				var extra = '';
				if(response.options.data){
					extra = response.options.data;
					if(typeof extra !== 'string'){
						extra = ioQuery.objectToQuery(extra);
					}
				}
				var tmpUrl = response.url + (response.url.indexOf('?') > -1 ? '&' : '?') + extra;
				notify && notify.emit('send', response, dfd.promise.cancel);
				iframe._notifyStart(response);
				iframe.setSrc(iframe._frame, tmpUrl, true);
			}
		}catch(e){
			dfd.reject(e);
		}
	}

	// dojo/request/watch handlers
	function isValid(response){
		return !this.isFulfilled();
	}
	function isReady(response){
		return !!this._finished;
	}
	function handleResponse(response, error){
		if(!error){
			try{
				var options = response.options,
					doc = iframe.doc(iframe._frame),
					handleAs = options.handleAs;

				if(handleAs !== 'html'){
					if(handleAs === 'xml'){
						// IE6-8 have to parse the XML manually. See http://bugs.dojotoolkit.org/ticket/6334
						if(doc.documentElement.tagName.toLowerCase() === 'html'){
							query('a', doc.documentElement).orphan();
							var xmlText = doc.documentElement.innerText;
							xmlText = xmlText.replace(/>\s+</g, '><');
							response.text = lang.trim(xmlText);
						}else{
							response.data = doc;
						}
					}else{
						// 'json' and 'javascript' and 'text'
						response.text = doc.getElementsByTagName('textarea')[0].value; // text
					}
					handlers(response);
				}else{
					response.data = doc;
				}
			}catch(e){
				error = e;
			}
		}

		if(error){
			this.reject(error);
		}else if(this._finished){
			this.resolve(response);
		}else{
			this.reject(new Error('Invalid dojo/request/iframe request state'));
		}
	}
	function last(response){
		this._callNext();
	}

	var defaultOptions = {
		method: 'POST'
	};
	function iframe(url, options, returnDeferred){
		var response = util.parseArgs(url, util.deepCreate(defaultOptions, options), true);
		url = response.url;
		options = response.options;

		if(options.method !== 'GET' && options.method !== 'POST'){
			throw new Error(options.method + ' not supported by dojo/request/iframe');
		}

		if(!iframe._frame){
			iframe._frame = iframe.create(iframe._iframeName, onload + '();');
		}

		var dfd = util.deferred(response, null, isValid, isReady, handleResponse, last);
		dfd._callNext = function(){
			if(!this._calledNext){
				this._calledNext = true;
				iframe._currentDfd = null;
				iframe._fireNextRequest();
			}
		};
		dfd._legacy = returnDeferred;

		iframe._dfdQueue.push(dfd);
		iframe._fireNextRequest();

		watch(dfd);

		return returnDeferred ? dfd : dfd.promise;
	}

	/*=====
	iframe = function(url, options){
		// summary:
		//		Sends a request using an iframe element with the given URL and options.
		// url: String
		//		URL to request
		// options: dojo/request/iframe.__Options?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	iframe.__BaseOptions = declare(request.__BaseOptions, {
		// form: DOMNode?
		//		A form node to use to submit data to the server.
		// data: String|Object?
		//		Data to transfer. When making a GET request, this will
		//		be converted to key=value parameters and appended to the
		//		URL.
	});
	iframe.__MethodOptions = declare(null, {
		// method: String?
		//		The HTTP method to use to make the request. Must be
		//		uppercase. Only `"GET"` and `"POST"` are accepted.
		//		Default is `"POST"`.
	});
	iframe.__Options = declare([iframe.__BaseOptions, iframe.__MethodOptions]);

	iframe.get = function(url, options){
		// summary:
		//		Send an HTTP GET request using an iframe element with the given URL and options.
		// url: String
		//		URL to request
		// options: dojo/request/iframe.__BaseOptions?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	iframe.post = function(url, options){
		// summary:
		//		Send an HTTP POST request using an iframe element with the given URL and options.
		// url: String
		//		URL to request
		// options: dojo/request/iframe.__BaseOptions?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	=====*/
	iframe.create = create;
	iframe.doc = doc;
	iframe.setSrc = setSrc;

	// TODO: Make these truly private in 2.0
	iframe._iframeName = mid + '_IoIframe';
	iframe._notifyStart = function(){};
	iframe._dfdQueue = [];
	iframe._currentDfd = null;
	iframe._fireNextRequest = fireNextRequest;

	util.addCommonMethods(iframe, ['GET', 'POST']);

	return iframe;
});

},
'dojo/NodeList-dom':function(){
define(["./_base/kernel", "./query", "./_base/array", "./_base/lang", "./dom-class", "./dom-construct", "./dom-geometry", "./dom-attr", "./dom-style"], function(dojo, query, array, lang, domCls, domCtr, domGeom, domAttr, domStyle){

	// module:
	//		dojo/NodeList-dom.js

	/*=====
	 return function(){
		 // summary:
		 //		Adds DOM related methods to NodeList, and returns NodeList constructor.
	 };
	 =====*/

	var magicGuard = function(a){
		// summary:
		//		the guard function for dojo/dom-attr() and dojo/dom-style()
		return a.length == 1 && (typeof a[0] == "string"); // inline'd type check
	};

	var orphan = function(node){
		// summary:
		//		function to orphan nodes
		var p = node.parentNode;
		if(p){
			p.removeChild(node);
		}
	};
	// FIXME: should we move orphan() to dojo/_base/html?

	var NodeList = query.NodeList,
		awc = NodeList._adaptWithCondition,
		aafe = NodeList._adaptAsForEach,
		aam = NodeList._adaptAsMap;

	function getSet(module){
		return function(node, name, value){
			if(arguments.length == 2){
				return module[typeof name == "string" ? "get" : "set"](node, name);
			}
			// setter
			return module.set(node, name, value);
		};
	}

	lang.extend(NodeList, {
		_normalize: function(/*String||Element||Object||NodeList*/content, /*DOMNode?*/refNode){
			// summary:
			//		normalizes data to an array of items to insert.
			// description:
			//		If content is an object, it can have special properties "template" and
			//		"parse". If "template" is defined, then the template value is run through
			//		dojo/string.substitute (if dojo/string.substitute() has been required elsewhere),
			//		or if templateFunc is a function on the content, that function will be used to
			//		transform the template into a final string to be used for for passing to dojo/dom-construct.toDom().
			//		If content.parse is true, then it is remembered for later, for when the content
			//		nodes are inserted into the DOM. At that point, the nodes will be parsed for widgets
			//		(if dojo/parser has been required elsewhere).

			//Wanted to just use a DocumentFragment, but for the array/NodeList
			//case that meant using cloneNode, but we may not want that.
			//Cloning should only happen if the node operations span
			//multiple refNodes. Also, need a real array, not a NodeList from the
			//DOM since the node movements could change those NodeLists.

			var parse = content.parse === true;

			//Do we have an object that needs to be run through a template?
			if(typeof content.template == "string"){
				var templateFunc = content.templateFunc || (dojo.string && dojo.string.substitute);
				content = templateFunc ? templateFunc(content.template, content) : content;
			}

			var type = (typeof content);
			if(type == "string" || type == "number"){
				content = domCtr.toDom(content, (refNode && refNode.ownerDocument));
				if(content.nodeType == 11){
					//DocumentFragment. It cannot handle cloneNode calls, so pull out the children.
					content = lang._toArray(content.childNodes);
				}else{
					content = [content];
				}
			}else if(!lang.isArrayLike(content)){
				content = [content];
			}else if(!lang.isArray(content)){
				//To get to this point, content is array-like, but
				//not an array, which likely means a DOM NodeList. Convert it now.
				content = lang._toArray(content);
			}

			//Pass around the parse info
			if(parse){
				content._runParse = true;
			}
			return content; //Array
		},

		_cloneNode: function(/*DOMNode*/ node){
			// summary:
			//		private utility to clone a node. Not very interesting in the vanilla
			//		dojo/NodeList case, but delegates could do interesting things like
			//		clone event handlers if that is derivable from the node.
			return node.cloneNode(true);
		},

		_place: function(/*Array*/ary, /*DOMNode*/refNode, /*String*/position, /*Boolean*/useClone){
			// summary:
			//		private utility to handle placing an array of nodes relative to another node.
			// description:
			//		Allows for cloning the nodes in the array, and for
			//		optionally parsing widgets, if ary._runParse is true.

			//Avoid a disallowed operation if trying to do an innerHTML on a non-element node.
			if(refNode.nodeType != 1 && position == "only"){
				return;
			}
			var rNode = refNode, tempNode;

			//Always cycle backwards in case the array is really a
			//DOM NodeList and the DOM operations take it out of the live collection.
			var length = ary.length;
			for(var i = length - 1; i >= 0; i--){
				var node = (useClone ? this._cloneNode(ary[i]) : ary[i]);

				//If need widget parsing, use a temp node, instead of waiting after inserting into
				//real DOM because we need to start widget parsing at one node up from current node,
				//which could cause some already parsed widgets to be parsed again.
				if(ary._runParse && dojo.parser && dojo.parser.parse){
					if(!tempNode){
						tempNode = rNode.ownerDocument.createElement("div");
					}
					tempNode.appendChild(node);
					dojo.parser.parse(tempNode);
					node = tempNode.firstChild;
					while(tempNode.firstChild){
						tempNode.removeChild(tempNode.firstChild);
					}
				}

				if(i == length - 1){
					domCtr.place(node, rNode, position);
				}else{
					rNode.parentNode.insertBefore(node, rNode);
				}
				rNode = node;
			}
		},


		position: aam(domGeom.position),
		/*=====
		position: function(){
			// summary:
			//		Returns border-box objects (x/y/w/h) of all elements in a node list
			//		as an Array (*not* a NodeList). Acts like `dojo/dom-geometry-position`, though
			//		assumes the node passed is each node in this list.

			return dojo.map(this, dojo.position); // Array
		},
		=====*/

		attr: awc(getSet(domAttr), magicGuard),
		/*=====
		attr: function(property, value){
			// summary:
			//		gets or sets the DOM attribute for every element in the
			//		NodeList. See also `dojo/dom-attr`
			// property: String
			//		the attribute to get/set
			// value: String?
			//		optional. The value to set the property to
			// returns:
			//		if no value is passed, the result is an array of attribute values
			//		If a value is passed, the return is this NodeList
			// example:
			//		Make all nodes with a particular class focusable:
			//	|	require(["dojo/query", "dojo/NodeList-dom"], function(query){
			//	|		query(".focusable").attr("tabIndex", -1);
			//	|	});
			// example:
			//		Disable a group of buttons:
			//	|	require(["dojo/query", "dojo/NodeList-dom"], function(query){
			//	|		query("button.group").attr("disabled", true);
			//	|	});
			// example:
			//		innerHTML can be assigned or retrieved as well:
			//	|	// get the innerHTML (as an array) for each list item
			//	|	require(["dojo/query", "dojo/NodeList-dom"], function(query){
			//	|		var ih = query("li.replaceable").attr("innerHTML");
			//	|	});
			return; // dojo/NodeList|Array
		},
		=====*/

		style: awc(getSet(domStyle), magicGuard),
		/*=====
		style: function(property, value){
			// summary:
			//		gets or sets the CSS property for every element in the NodeList
			// property: String
			//		the CSS property to get/set, in JavaScript notation
			//		("lineHieght" instead of "line-height")
			// value: String?
			//		optional. The value to set the property to
			// returns:
			//		if no value is passed, the result is an array of strings.
			//		If a value is passed, the return is this NodeList
			return; // dojo/NodeList
			return; // Array
		},
		=====*/

		addClass: aafe(domCls.add),
		/*=====
		addClass: function(className){
			// summary:
			//		adds the specified class to every node in the list
			// className: String|Array
			//		A String class name to add, or several space-separated class names,
			//		or an array of class names.
			return; // dojo/NodeList
		},
		=====*/

		removeClass: aafe(domCls.remove),
		/*=====
		removeClass: function(className){
			// summary:
			//		removes the specified class from every node in the list
			// className: String|Array?
			//		An optional String class name to remove, or several space-separated
			//		class names, or an array of class names. If omitted, all class names
			//		will be deleted.
			// returns:
			//		this list
			return; // dojo/NodeList
		},
		=====*/

		toggleClass: aafe(domCls.toggle),
		/*=====
		toggleClass: function(className, condition){
			// summary:
			//		Adds a class to node if not present, or removes if present.
			//		Pass a boolean condition if you want to explicitly add or remove.
			// condition: Boolean?
			//		If passed, true means to add the class, false means to remove.
			// className: String
			//		the CSS class to add
			return; // dojo/NodeList
		},
		=====*/

		replaceClass: aafe(domCls.replace),
		/*=====
		replaceClass: function(addClassStr, removeClassStr){
			// summary:
			//		Replaces one or more classes on a node if not present.
			//		Operates more quickly than calling `removeClass()` and `addClass()`
			// addClassStr: String|Array
			//		A String class name to add, or several space-separated class names,
			//		or an array of class names.
			// removeClassStr: String|Array?
			//		A String class name to remove, or several space-separated class names,
			//		or an array of class names.
			return; // dojo/NodeList
		 },
		 =====*/

		empty: aafe(domCtr.empty),
		/*=====
		empty: function(){
			// summary:
			//		clears all content from each node in the list. Effectively
			//		equivalent to removing all child nodes from every item in
			//		the list.
			return this.forEach("item.innerHTML='';"); // dojo/NodeList
			// FIXME: should we be checking for and/or disposing of widgets below these nodes?
		},
		=====*/

		removeAttr: aafe(domAttr.remove),
		/*=====
		 removeAttr: function(name){
			// summary:
			//		Removes an attribute from each node in the list.
			// name: String
			//		the name of the attribute to remove
			return;		// dojo/NodeList
		},
		=====*/

		marginBox: aam(domGeom.getMarginBox),
		/*=====
		marginBox: function(){
			// summary:
			//		Returns margin-box size of nodes
		 	return; // dojo/NodeList
		 },
		 =====*/

		// FIXME: connectPublisher()? connectRunOnce()?

		/*
		destroy: function(){
			// summary:
			//		destroys every item in the list.
			this.forEach(d.destroy);
			// FIXME: should we be checking for and/or disposing of widgets below these nodes?
		},
		*/

		place: function(/*String||Node*/ queryOrNode, /*String*/ position){
			// summary:
			//		places elements of this node list relative to the first element matched
			//		by queryOrNode. Returns the original NodeList. See: `dojo/dom-construct.place`
			// queryOrNode:
			//		may be a string representing any valid CSS3 selector or a DOM node.
			//		In the selector case, only the first matching element will be used
			//		for relative positioning.
			// position:
			//		can be one of:
			//
			//		-	"last" (default)
			//		-	"first"
			//		-	"before"
			//		-	"after"
			//		-	"only"
			//		-	"replace"
			//
			//		or an offset in the childNodes property
			var item = query(queryOrNode)[0];
			return this.forEach(function(node){ domCtr.place(node, item, position); }); // dojo/NodeList
		},

		orphan: function(/*String?*/ filter){
			// summary:
			//		removes elements in this list that match the filter
			//		from their parents and returns them as a new NodeList.
			// filter:
			//		CSS selector like ".foo" or "div > span"
			// returns:
			//		NodeList containing the orphaned elements
			return (filter ? query._filterResult(this, filter) : this).forEach(orphan); // dojo/NodeList
		},

		adopt: function(/*String||Array||DomNode*/ queryOrListOrNode, /*String?*/ position){
			// summary:
			//		places any/all elements in queryOrListOrNode at a
			//		position relative to the first element in this list.
			//		Returns a dojo/NodeList of the adopted elements.
			// queryOrListOrNode:
			//		a DOM node or a query string or a query result.
			//		Represents the nodes to be adopted relative to the
			//		first element of this NodeList.
			// position:
			//		can be one of:
			//
			//		-	"last" (default)
			//		-	"first"
			//		-	"before"
			//		-	"after"
			//		-	"only"
			//		-	"replace"
			//
			//		or an offset in the childNodes property
			return query(queryOrListOrNode).place(this[0], position)._stash(this);	// dojo/NodeList
		},

		// FIXME: do we need this?
		query: function(/*String*/ queryStr){
			// summary:
			//		Returns a new list whose members match the passed query,
			//		assuming elements of the current NodeList as the root for
			//		each search.
			// example:
			//		assume a DOM created by this markup:
			//	|	<div id="foo">
			//	|		<p>
			//	|			bacon is tasty, <span>dontcha think?</span>
			//	|		</p>
			//	|	</div>
			//	|	<div id="bar">
			//	|		<p>great comedians may not be funny <span>in person</span></p>
			//	|	</div>
			//		If we are presented with the following definition for a NodeList:
			//	|	require(["dojo/dom", "dojo/query", "dojo/NodeList-dom"
			//	|	], function(dom, query){
			//	|		var l = new NodeList(dom.byId("foo"), dom.byId("bar"));
			//		it's possible to find all span elements under paragraphs
			//		contained by these elements with this sub-query:
			//	|		var spans = l.query("p span");
			//	|	});

			// FIXME: probably slow
			if(!queryStr){ return this; }
			var ret = new NodeList;
			this.map(function(node){
				// FIXME: why would we ever get undefined here?
				query(queryStr, node).forEach(function(subNode){
					if(subNode !== undefined){
						ret.push(subNode);
					}
				});
			});
			return ret._stash(this);	// dojo/NodeList
		},

		filter: function(/*String|Function*/ filter){
			// summary:
			//		"masks" the built-in javascript filter() method (supported
			//		in Dojo via `dojo.filter`) to support passing a simple
			//		string filter in addition to supporting filtering function
			//		objects.
			// filter:
			//		If a string, a CSS rule like ".thinger" or "div > span".
			// example:
			//		"regular" JS filter syntax as exposed in dojo.filter:
			//	|	require(["dojo/query", "dojo/NodeList-dom"
			//	|	], function(query){
			//	|		query("*").filter(function(item){
			//	|			// highlight every paragraph
			//	|			return (item.nodeName == "p");
			//	|		}).style("backgroundColor", "yellow");
			//	|	});
			// example:
			//	the same filtering using a CSS selector
			//	|	require(["dojo/query", "dojo/NodeList-dom"
			//	|	], function(query){
			//	|		query("*").filter("p").styles("backgroundColor", "yellow");
			//	|	});
			var a = arguments, items = this, start = 0;
			if(typeof filter == "string"){ // inline'd type check
				items = query._filterResult(this, a[0]);
				if(a.length == 1){
					// if we only got a string query, pass back the filtered results
					return items._stash(this); // dojo/NodeList
				}
				// if we got a callback, run it over the filtered items
				start = 1;
			}
			return this._wrap(array.filter(items, a[start], a[start + 1]), this);	// dojo/NodeList
		},

		/*
		// FIXME: should this be "copyTo" and include parenting info?
		clone: function(){
			// summary:
			//		creates node clones of each element of this list
			//		and returns a new list containing the clones
		},
		*/

		addContent: function(/*String||DomNode||Object||dojo/NodeList*/ content, /*String||Integer?*/ position){
			// summary:
			//		add a node, NodeList or some HTML as a string to every item in the
			//		list.  Returns the original list.
			// description:
			//		a copy of the HTML content is added to each item in the
			//		list, with an optional position argument. If no position
			//		argument is provided, the content is appended to the end of
			//		each item.
			// content:
			//		DOM node, HTML in string format, a NodeList or an Object. If a DOM node or
			//		NodeList, the content will be cloned if the current NodeList has more than one
			//		element. Only the DOM nodes are cloned, no event handlers. If it is an Object,
			//		it should be an object with at "template" String property that has the HTML string
			//		to insert. If dojo.string has already been dojo.required, then dojo.string.substitute
			//		will be used on the "template" to generate the final HTML string. Other allowed
			//		properties on the object are: "parse" if the HTML
			//		string should be parsed for widgets (dojo.require("dojo.parser") to get that
			//		option to work), and "templateFunc" if a template function besides dojo.string.substitute
			//		should be used to transform the "template".
			// position:
			//		can be one of:
			//
			//		-	"last"||"end" (default)
			//		-	"first||"start"
			//		-	"before"
			//		-	"after"
			//		-	"replace" (replaces nodes in this NodeList with new content)
			//		-	"only" (removes other children of the nodes so new content is the only child)
			//
			//		or an offset in the childNodes property
			// example:
			//		appends content to the end if the position is omitted
			//	|	require(["dojo/query", "dojo/NodeList-dom"
			//	|	], function(query){
			//	|		query("h3 > p").addContent("hey there!");
			//	|	});
			// example:
			//		add something to the front of each element that has a
			//		"thinger" property:
			//	|	require(["dojo/query", "dojo/NodeList-dom"
			//	|	], function(query){
			//	|		query("[thinger]").addContent("...", "first");
			//	|	});
			// example:
			//		adds a header before each element of the list
			//	|	require(["dojo/query", "dojo/NodeList-dom"
			//	|	], function(query){
			//	|		query(".note").addContent("<h4>NOTE:</h4>", "before");
			//	|	});
			// example:
			//		add a clone of a DOM node to the end of every element in
			//		the list, removing it from its existing parent.
			//	|	require(["dojo/dom", "dojo/query", "dojo/NodeList-dom"
			//	|	], function(dom, query){
			//	|		query(".note").addContent(dom.byId("foo"));
			//	|	});
			// example:
			//		Append nodes from a templatized string.
			//	|	require(["dojo/string", "dojo/query", "dojo/NodeList-dom"
			//	|	], function(string, query){
			//	|		query(".note").addContent({
			//	|			template: '<b>${id}: </b><span>${name}</span>',
			//	|			id: "user332",
			//	|			name: "Mr. Anderson"
			//	|		});
			//	|	});
			// example:
			//		Append nodes from a templatized string that also has widgets parsed.
			//	|	require(["dojo/string", "dojo/parser", "dojo/query", "dojo/NodeList-dom"
			//	|	], function(string, parser, query){
			//	|		var notes = query(".note").addContent({
			//	|			template: '<button dojoType="dijit/form/Button">${text}</button>',
			//	|			parse: true,
			//	|			text: "Send"
			//	|		});
			//	|	});
			content = this._normalize(content, this[0]);
			for(var i = 0, node; (node = this[i]); i++){
				if(content.length){
					this._place(content, node, position, i > 0);
				}else{
					// if it is an empty array, we empty the target node
					domCtr.empty(node);
				}
			}
			return this; // dojo/NodeList
		}
	});

	return NodeList;
});

},
'esri/urlUtils':function(){
//>>built
define(["dojo/_base/lang", "dojo/_base/array", "dojo/_base/url", "dojo/io-query", "./kernel", "./config", "./sniff", "dojo/i18n!./nls/jsapi"], function(k, r, l, p, s, t, q, u) {
    var e = {},
        m = t.defaults.io,
        n = window.location.protocol;
    "file:" === n && (n = "http:");
    e.urlToObject = function(a) {
        var c = {},
            b = new l(a),
            d = a.indexOf("?");
        null === b.query ? c = {
            path: a,
            query: null
        } : (c.path = a.substring(0, d), c.query = p.queryToObject(b.query));
        b.fragment && (c.hash = b.fragment, null === b.query && (c.path = c.path.substring(0, c.path.length - (b.fragment.length + 1))));
        return c
    };
    e.getProxyUrl = function(a, c) {
        var b = k.isString(a) ? 0 === k.trim(a).toLowerCase().indexOf("https:") : a,
            d = m.proxyUrl,
            f, g, h = u.io.proxyNotSet;
        if (k.isString(a) && (g = e.getProxyRule(a))) d = g.proxyUrl;
        if (!d) throw console.log(h), Error(h);
        b && (!1 !== c && 0 !== window.location.href.toLowerCase().indexOf("https:")) && (b = d, 0 !== b.toLowerCase().indexOf("http") && (b = e.getAbsoluteUrl(b)), b = b.replace(/^http:/i, "https:"), e.canUseXhr(b) && (d = b, f = 1));
        d = e.urlToObject(d);
        d._xo = f;
        return d
    };
    e.addProxy = function(a) {
        var c = e.getProxyRule(a),
            b;
        c ? b = e.urlToObject(c.proxyUrl) : m.alwaysUseProxy && (b = e.getProxyUrl());
        b && (c = e.urlToObject(a), a = b.path + "?" + c.path, (b = p.objectToQuery(k.mixin(b.query || {}, c.query))) && (a += "?" + b));
        return a
    };
    e.addProxyRule = function(a) {
        var c = a.urlPrefix = e.urlToObject(a.urlPrefix).path.replace(/([^\/])$/, "$1/").replace(/^https?:\/\//ig, "").toLowerCase(),
            b = m.proxyRules,
            d, f = b.length,
            g, h = f;
        for (d = 0; d < f; d++)
            if (g = b[d].urlPrefix, 0 === c.indexOf(g)) {
                if (c.length === g) return -1;
                h = d;
                break
            } else 0 === g.indexOf(c) && (h = d + 1);
        b.splice(h, 0, a);
        return h
    };
    e.getProxyRule = function(a) {
        var c = m.proxyRules,
            b = c.length,
            d = e.urlToObject(a).path.replace(/([^\/])$/, "$1/").replace(/^https?:\/\//ig, "").toLowerCase(),
            f;
        for (a = 0; a < b; a++)
            if (0 === d.indexOf(c[a].urlPrefix)) {
                f = c[a];
                break
            }
        return f
    };
    e.hasSameOrigin = function(a, c, b) {
        a = a.toLowerCase();
        c = c.toLowerCase();
        var d = window.location.href.toLowerCase();
        a = 0 === a.indexOf("http") ? new l(a) : d = new l(d);
        c = 0 === c.indexOf("http") ? new l(c) : k.isString(d) ? new l(d) : d;
        return (b || a.scheme === c.scheme) && a.host === c.host && a.port ===
            c.port
    };
    e.canUseXhr = function(a, c) {
        var b = q("esri-phonegap") ? !0 : !1,
            d = e.hasSameOrigin,
            f = m.corsEnabledServers,
            g, h = -1;
        !b && (q("esri-cors") && f && f.length) && (b = r.some(f, function(b, c) {
            g = 0 !== k.trim(b).toLowerCase().indexOf("http");
            return d(a, g ? "http://" + b : b) || g && d(a, "https://" + b) ? (h = c, !0) : !1
        }));
        return c ? h : b
    };
    e.getAbsoluteUrl = function(a) {
        return k.isString(a) && !/^https?:\/\//i.test(a) ? 0 === a.indexOf("//") ? n + a : 0 === a.indexOf("/") ? n + "//" + window.location.host + a : s._appBaseUrl + a : a
    };
    e.fixUrl = function(a) {
        /^\/\//i.test(a) &&
            (a = n + a);
        return a = a.replace(/^(https?:\/\/)(arcgis\.com)/i, "$1www.$2")
    };
    return e
});
},
'esri/Color':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/Color", "dojo/has", "./kernel"], function(b, e, c, d) {
    b = b([e], {
        declaredClass: "esri.Color"
    });
    b.toJsonColor = function(a) {
        return a && [a.r, a.g, a.b, 1 < a.a ? a.a : Math.round(255 * a.a)]
    };
    b.toDojoColor = function(a) {
        return a && new e([a[0], a[1], a[2], a[3] / 255])
    };
    d = "named blendColors fromRgb fromHex fromArray fromString".split(" ");
    for (c = 0; c < d.length; c++) b[d[c]] = e[d[c]];
    return b
});
},
'esri/domUtils':function(){
//>>built
define(["./kernel", "dojo/_base/connect", "dojo/_base/lang", "dojo/dom-style", "dojo/has"], function(r, n, s, p, q) {
    var d = {
        show: function(a) {
            if (a = d.getNode(a)) a.style.display = "block"
        },
        getNode: function(a) {
            return a && a.domNode || a
        },
        hide: function(a) {
            if (a = d.getNode(a)) a.style.display = "none"
        },
        toggle: function(a) {
            if (a = d.getNode(a)) a.style.display = "none" === a.style.display ? "block" : "none"
        },
        documentBox: 8 >= q("ie") ? {
            w: document.documentElement.clientWidth,
            h: document.documentElement.clientHeight
        } : {
            w: window.innerWidth,
            h: window.innerHeight
        },
        setScrollable: function(a) {
            if (a = this.getNode(a)) {
                var d = 0,
                    g = 0,
                    h = 0,
                    k = 0,
                    l = 0,
                    m = 0;
                return [n.connect(a, "ontouchstart", function(e) {
                    d = e.touches[0].screenX;
                    g = e.touches[0].screenY;
                    h = a.scrollWidth;
                    k = a.scrollHeight;
                    l = a.clientWidth;
                    m = a.clientHeight
                }), n.connect(a, "ontouchmove", function(e) {
                    e.preventDefault();
                    var f = a.firstChild;
                    f instanceof Text && (f = a.childNodes[1]);
                    var b = f._currentX || 0,
                        c = f._currentY || 0,
                        b = b + (e.touches[0].screenX - d);
                    0 < b ? b = 0 : 0 > b && Math.abs(b) + l > h && (b = -1 * (h - l));
                    f._currentX = b;
                    c += e.touches[0].screenY - g;
                    0 < c ? c = 0 : 0 > c && Math.abs(c) + m > k && (c = -1 * (k - m));
                    f._currentY = c;
                    p.set(f, {
                        "-webkit-transition-property": "-webkit-transform",
                        "-webkit-transform": "translate(" + b + "px, " + c + "px)"
                    });
                    d = e.touches[0].screenX;
                    g = e.touches[0].screenY
                })]
            }
        }
    };
    return d
});
},
'esri/symbols/MarkerSymbol':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "dojox/gfx/_base", "../kernel", "./Symbol"], function(f, e, h, b, k, g) {
    return f(g, {
        declaredClass: "esri.symbol.MarkerSymbol",
        angle: 0,
        xoffset: 0,
        yoffset: 0,
        size: 12,
        constructor: function(a) {
            a && e.isObject(a) && (this.size = "auto" === this.size ? this.size : b.pt2px(this.size), this.xoffset = b.pt2px(this.xoffset), this.yoffset = b.pt2px(this.yoffset), this.angle && (this.angle *= -1))
        },
        setAngle: function(a) {
            this.angle = a;
            return this
        },
        setSize: function(a) {
            this.size = a;
            return this
        },
        setOffset: function(a, b) {
            this.xoffset = a;
            this.yoffset = b;
            return this
        },
        toJson: function() {
            var a = b.px2pt(this.size),
                a = isNaN(a) ? void 0 : a,
                c = b.px2pt(this.xoffset),
                c = isNaN(c) ? void 0 : c,
                d = b.px2pt(this.yoffset),
                d = isNaN(d) ? void 0 : d;
            return e.mixin(this.inherited("toJson", arguments), {
                size: "auto" === this.size ? this.size : a,
                angle: this.angle && -1 * this.angle,
                xoffset: c,
                yoffset: d
            })
        }
    })
});
},
'esri/symbols/Symbol':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../lang", "../Color"], function(d, c, f, g, e, b) {
    return d(null, {
        declaredClass: "esri.symbol.Symbol",
        color: new b([0, 0, 0, 1]),
        type: null,
        constructor: function(a) {
            if (a && c.isObject(a) && (c.mixin(this, a), this.color && e.isDefined(this.color[0]) && (this.color = b.toDojoColor(this.color)), (a = this.type) && 0 === a.indexOf("esri"))) this.type = {
                esriSMS: "simplemarkersymbol",
                esriPMS: "picturemarkersymbol",
                esriSLS: "simplelinesymbol",
                esriCLS: "cartographiclinesymbol",
                esriSFS: "simplefillsymbol",
                esriPFS: "picturefillsymbol",
                esriTS: "textsymbol",
                esriSHD: "shieldlabelsymbol"
            }[a]
        },
        setColor: function(a) {
            this.color = a;
            return this
        },
        toJson: function() {
            return {
                color: b.toJsonColor(this.color)
            }
        }
    })
});
},
'esri/symbols/SimpleMarkerSymbol':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/Color", "dojo/has", "dojox/gfx/_base", "../kernel", "../lang", "./MarkerSymbol", "./SimpleLineSymbol"], function(d, m, s, u, p, v, q, t, r) {
    var e = {
            STYLE_CIRCLE: "circle",
            STYLE_SQUARE: "square",
            STYLE_CROSS: "cross",
            STYLE_X: "x",
            STYLE_DIAMOND: "diamond",
            STYLE_PATH: "path",
            STYLE_TARGET: "target"
        },
        n = {
            style: e.STYLE_CIRCLE,
            color: [255, 255, 255, 0.25],
            size: 12,
            angle: 0,
            xoffset: 0,
            yoffset: 0
        };
    d = d(t, {
        declaredClass: "esri.symbol.SimpleMarkerSymbol",
        type: "simplemarkersymbol",
        _styles: {
            circle: "esriSMSCircle",
            square: "esriSMSSquare",
            cross: "esriSMSCross",
            x: "esriSMSX",
            diamond: "esriSMSDiamond",
            path: "esriSMSPath"
        },
        constructor: function(a, b, c, d) {
            a ? m.isString(a) ? (this.style = a, b && (this.size = b), c && (this.outline = c), d && (this.color = d)) : (this.style = q.valueOf(this._styles, this.style), a.outline && (this.outline = new r(a.outline))) : (m.mixin(this, n), this.size = p.pt2px(this.size), this.outline = new r(this.outline), this.color = new s(this.color));
            this.style || (this.style = e.STYLE_CIRCLE)
        },
        setStyle: function(a) {
            this.style = a;
            return this
        },
        setPath: function(a) {
            this.path = a;
            this.setStyle(e.STYLE_PATH);
            return this
        },
        setOutline: function(a) {
            this.outline = a;
            return this
        },
        getStroke: function() {
            return this.outline && this.outline.getStroke()
        },
        getFill: function() {
            return this.color
        },
        _setDim: function(a, b, c) {
            this._targetWidth = a;
            this._targetHeight = b;
            this._spikeSize = c
        },
        getShapeDescriptors: function() {
            var a, b, c, d = this.style,
                l = (this.size || p.pt2px(n.size)) / 2,
                f = 0 - l,
                h = 0 + l,
                k = 0 - l,
                g = 0 + l;
            switch (d) {
                case e.STYLE_CIRCLE:
                    a = {
                        type: "circle",
                        cx: 0,
                        cy: 0,
                        r: l
                    };
                    b = this.getFill();
                    if (c = this.getStroke()) c.style = c.style || "Solid";
                    break;
                case e.STYLE_CROSS:
                    a = {
                        type: "path",
                        path: "M " + f + ",0 L " + h + ",0 M 0," + k + " L 0," + g + " E"
                    };
                    b = null;
                    c = this.getStroke();
                    break;
                case e.STYLE_DIAMOND:
                    a = {
                        type: "path",
                        path: "M " + f + ",0 L 0," + k + " L " + h + ",0 L 0," + g + " L " + f + ",0 E"
                    };
                    b = this.getFill();
                    c = this.getStroke();
                    break;
                case e.STYLE_SQUARE:
                    a = {
                        type: "path",
                        path: "M " + f + "," + g + " L " + f + "," + k + " L " + h + "," + k + " L " + h + "," + g + " L " + f + "," + g + " E"
                    };
                    b = this.getFill();
                    c = this.getStroke();
                    break;
                case e.STYLE_X:
                    a = {
                        type: "path",
                        path: "M " +
                            f + "," + g + " L " + h + "," + k + " M " + f + "," + k + " L " + h + "," + g + " E"
                    };
                    b = null;
                    c = this.getStroke();
                    break;
                case e.STYLE_PATH:
                    a = {
                        type: "path",
                        path: this.path || ""
                    }, b = this.getFill(), c = this.getStroke()
            }
            return {
                defaultShape: a,
                fill: b,
                stroke: c
            }
        },
        toJson: function() {
            var a = m.mixin(this.inherited("toJson", arguments), {
                    type: "esriSMS",
                    style: this._styles[this.style]
                }),
                b = this.outline;
            b && (a.outline = b.toJson());
            a.path = this.path;
            return q.fixJson(a)
        }
    });
    m.mixin(d, e);
    d.defaultProps = n;
    return d
});
},
'esri/symbols/SimpleLineSymbol':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/Color", "dojo/has", "dojox/gfx/_base", "../kernel", "../lang", "./LineSymbol"], function(a, b, h, m, k, n, e, l) {
    var c = {
            STYLE_SOLID: "solid",
            STYLE_DASH: "dash",
            STYLE_DOT: "dot",
            STYLE_DASHDOT: "dashdot",
            STYLE_DASHDOTDOT: "longdashdotdot",
            STYLE_NULL: "none",
            STYLE_SHORTDASH: "shortdash",
            STYLE_SHORTDOT: "shortdot",
            STYLE_SHORTDASHDOT: "shortdashdot",
            STYLE_SHORTDASHDOTDOT: "shortdashdotdot",
            STYLE_LONGDASH: "longdash",
            STYLE_LONGDASHDOT: "longdashdot"
        },
        f = {
            color: [0, 0, 0, 1],
            style: c.STYLE_SOLID,
            width: 1
        };
    a = a(l, {
        declaredClass: "esri.symbol.SimpleLineSymbol",
        type: "simplelinesymbol",
        _styles: {
            solid: "esriSLSSolid",
            dash: "esriSLSDash",
            dot: "esriSLSDot",
            dashdot: "esriSLSDashDot",
            longdashdotdot: "esriSLSDashDotDot",
            none: "esriSLSNull",
            insideframe: "esriSLSInsideFrame",
            shortdash: "esriSLSShortDash",
            shortdot: "esriSLSShortDot",
            shortdashdot: "esriSLSShortDashDot",
            shortdashdotdot: "esriSLSShortDashDotDot",
            longdash: "esriSLSLongDash",
            longdashdot: "esriSLSLongDashDot"
        },
        constructor: function(d, a, g) {
            d ? b.isString(d) ? (this.style =
                d, a && (this.color = a), g && (this.width = g)) : this.style = e.valueOf(this._styles, d.style) || c.STYLE_SOLID : (b.mixin(this, f), this.color = new h(this.color), this.width = k.pt2px(this.width))
        },
        setStyle: function(a) {
            this.style = a;
            return this
        },
        getStroke: function() {
            return this.style === c.STYLE_NULL || 0 === this.width ? null : {
                color: this.color,
                style: this.style,
                width: this.width
            }
        },
        getFill: function() {
            return null
        },
        getShapeDescriptors: function() {
            return {
                defaultShape: {
                    type: "path",
                    path: "M -15,0 L 15,0 E"
                },
                fill: null,
                stroke: this.getStroke()
            }
        },
        toJson: function() {
            return e.fixJson(b.mixin(this.inherited("toJson", arguments), {
                type: "esriSLS",
                style: this._styles[this.style]
            }))
        }
    });
    b.mixin(a, c);
    a.defaultProps = f;
    return a
});
},
'esri/symbols/LineSymbol':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "dojox/gfx/_base", "../kernel", "./Symbol"], function(d, b, f, c, g, e) {
    return d(e, {
        declaredClass: "esri.symbol.LineSymbol",
        constructor: function(a) {
            b.isObject(a) ? this.width = c.pt2px(this.width) : this.width = 12
        },
        setWidth: function(a) {
            this.width = a;
            return this
        },
        toJson: function() {
            var a = c.px2pt(this.width),
                a = isNaN(a) ? void 0 : a;
            return b.mixin(this.inherited("toJson", arguments), {
                width: a
            })
        }
    })
});
},
'esri/layers/TileInfo':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/has", "../kernel", "../lang", "../SpatialReference", "../geometry/Point", "./LOD"], function(e, f, c, l, m, g, d, h, k) {
    return e(null, {
        declaredClass: "esri.layers.TileInfo",
        constructor: function(a) {
            f.mixin(this, a);
            this.width = this.cols;
            this.height = this.rows;
            a = this.spatialReference;
            var b = this.origin;
            a && (a = this.spatialReference = new d(a.toJson ? a.toJson() : a));
            b && (this.origin = new h(b.toJson ? b.toJson() : b), !b.spatialReference && a && this.origin.setSpatialReference(new d(a.toJson())));
            this.lods = c.map(this.lods, function(a) {
                return new k(a)
            })
        },
        toJson: function() {
            return g.fixJson({
                rows: this.rows,
                cols: this.cols,
                dpi: this.dpi,
                format: this.format,
                compressionQuality: this.compressionQuality,
                origin: this.origin && this.origin.toJson(),
                spatialReference: this.spatialReference && this.spatialReference.toJson(),
                lods: this.lods && c.map(this.lods, function(a) {
                    return a.toJson()
                })
            })
        }
    })
});
},
'esri/layers/LOD':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../lang"], function(a, b, d, e, c) {
    return a(null, {
        declaredClass: "esri.layers.LOD",
        constructor: function(a) {
            b.mixin(this, a)
        },
        toJson: function() {
            return c.fixJson({
                level: this.level,
                levelValue: this.levelValue,
                resolution: this.resolution,
                scale: this.scale
            })
        }
    })
});
},
'esri/layers/ArcGISTiledMapServiceLayer':function(){
//>>built
define(["dojo/_base/kernel", "dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/json", "dojo/has", "dojo/io-query", "../kernel", "../urlUtils", "../SpatialReference", "./TiledMapServiceLayer", "./ArcGISMapServiceLayer", "./TileInfo", "./TimeInfo", "./TileMap"], function(l, m, e, n, p, x, h, y, k, q, r, s, t, u, v) {
    return m([r, s], {
        declaredClass: "esri.layers.ArcGISTiledMapServiceLayer",
        _agolAttrs: "Canvas/World_Dark_Gray_Base Canvas/World_Dark_Gray_Reference Canvas/World_Light_Gray_Base Canvas/World_Light_Gray_Reference Ocean/World_Ocean_Base Ocean/World_Ocean_Reference Ocean_Basemap Reference/World_Boundaries_and_Places Reference/World_Boundaries_and_Places_Alternate Reference/World_Transportation World_Imagery World_Street_Map World_Topo_Map".split(" "),
        _isReference: !1,
        _referenceLayers: "Canvas/World_Dark_Gray_Reference Canvas/World_Light_Gray_Reference Ocean/World_Ocean_Reference Reference/World_Boundaries_and_Places Reference/World_Boundaries_and_Places_Alternate Reference/World_Reference_Overlay Reference/World_Transportation".split(" "),
        constructor: function(a, b) {
            b && (b.roundrobin && (l.deprecated(this.declaredClass + " : Constructor option 'roundrobin' deprecated. Use option 'tileServers'."), b.tileServers = b.roundrobin), this._setTileServers(b.tileServers),
                this._loadCallback = b.loadCallback);
            this._params = e.mixin({}, this._url.query);
            if (n.some(["servicesdev.arcgisonline.com/arcgis/rest/services", "services.arcgisonline.com/arcgis/rest/services", "servicesqa.arcgisonline.com/arcgis/rest/services"], function(b) {
                    return -1 < a.toLowerCase().indexOf(b.toLowerCase())
                })) {
                if (this.resampling = !(b && !1 === b.resampling)) this.tileMap = new v(this)
            } else this.resampling = b && null != b.resampling ? b.resampling : void 0;
            this._initLayer = e.hitch(this, this._initLayer);
            var c = b && b.resourceInfo;
            c ? this._initLayer(c) : (this._load = e.hitch(this, this._load), this._load())
        },
        _TILE_FORMATS: {
            PNG: "png",
            PNG8: "png",
            PNG24: "png",
            PNG32: "png",
            JPG: "jpg",
            JPEG: "jpg",
            GIF: "gif"
        },
        _setTileServers: function(a) {
            if (a && 0 < a.length) {
                this.tileServers = a;
                var b, c = a.length;
                for (b = 0; b < c; b++) a[b] = k.urlToObject(a[b]).path
            }
        },
        _initLayer: function(a, b) {
            this.inherited(arguments);
            this.resourceInfo = p.toJson(a);
            this.tileInfo = new t(a.tileInfo);
            this.resampling = null == this.resampling ? !!a.resampling : this.resampling;
            !this.spatialReference &&
                this.tileInfo.spatialReference && (this.spatialReference = new q(this.tileInfo.spatialReference.toJson()));
            this.isPNG32 = "PNG24" === this.tileInfo.format || "PNG32" === this.tileInfo.format;
            a.timeInfo && (this.timeInfo = new u(a.timeInfo));
            var c = this._url.path,
                g = this._loadCallback,
                w = "file:" === window.location.protocol ? "http:" : window.location.protocol,
                d = c.match(/^https?\:\/\/(server|services)\.arcgisonline\.com\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i),
                d = d && d[2];
            if (!this.tileServers)
                if (a.tileServers) this._setTileServers(a.tileServers);
                else {
                    var f = -1 !== c.search(/^https?\:\/\/server\.arcgisonline\.com/i),
                        e = -1 !== c.search(/^https?\:\/\/services\.arcgisonline\.com/i);
                    if (f || e) this._setTileServers([c, c.replace(f ? /server\.arcgisonline/i : /services\.arcgisonline/i, f ? "services.arcgisonline" : "server.arcgisonline")])
                }
            if (d) {
                d = d.toLowerCase();
                for (c = 0; c < this._agolAttrs.length; c++)
                    if (f = this._agolAttrs[c], f.toLowerCase() === d) {
                        this.hasAttributionData = !0;
                        this.attributionDataUrl = this.attributionDataUrl || w + "//static.arcgis.com/attribution/" + f;
                        break
                    }
                for (c =
                    0; c < this._referenceLayers.length; c++)
                    if (f = this._referenceLayers[c], f.toLowerCase() === d) {
                        this._isReference = !0;
                        break
                    }
            }
            this.loaded = !0;
            this.onLoad(this);
            g && (delete this._loadCallback, g(this))
        },
        getTileUrl: function(a, b, c) {
            var g = this.tileServers,
                e = this._getToken(),
                d = this._url.query;
            a = (g ? g[b % g.length] : this._url.path) + "/tile/" + a + "/" + b + "/" + c;
            this.resampling && !this.tileMap && (a += "?blankTile\x3dfalse");
            d && (a = this.resampling && !this.tileMap ? a + ("\x26" + h.objectToQuery(d)) : a + ("?" + h.objectToQuery(d)));
            if (e && (!d || !d.token)) a +=
                (-1 === a.indexOf("?") ? "?" : "\x26") + "token\x3d" + e;
            a = this.addTimestampToURL(a);
            return k.addProxy(a)
        }
    })
});
},
'esri/layers/TiledMapServiceLayer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/connect", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/url", "dojo/dom-construct", "dojo/dom-class", "dojo/dom-geometry", "dojo/dom-style", "dojox/collections/ArrayList", "dojox/gfx/matrix", "../kernel", "../config", "../sniff", "../domUtils", "../tileUtils", "../geometry/Point", "../geometry/Rect", "../geometry/Extent", "./layer"], function(Q, s, C, A, J, q, K, L, l, M, N, v, O, x, P, D, z, E, R, S) {
    return Q(S, {
        declaredClass: "esri.layers.TiledMapServiceLayer",
        constructor: function(a, c) {
            s.connect(this, "onLoad", this, "_initTiledLayer");
            this._lowestLevel = (this._displayLevels = c ? c.displayLevels : null) ? this._displayLevels[0] : 0;
            this.resampling = c ? c.resampling : void 0;
            this._resamplingTolerance = c ? c.resamplingTolerance : null;
            this.exclusionAreas = c ? c.exclusionAreas : null;
            var d = C.hitch;
            this._addImage = d(this, this._addImage);
            this._tileLoadHandler = d(this, this._tileLoadHandler);
            this._tileErrorHandler = d(this, this._tileErrorHandler);
            this._tilePopPop = d(this, this._tilePopPop);
            this._cleanUpRemovedImages = d(this, this._cleanUpRemovedImages);
            this._fireOnUpdateEvent =
                d(this, this._fireOnUpdateEvent);
            this._transitionEnd = d(this, this._transitionEnd);
            this._tileMapCallback = d(this, this._tileMapCallback)
        },
        opacity: 1,
        isPNG32: !1,
        _multiple: 1,
        isResampling: !1,
        _initTiledLayer: function() {
            var a = this.tileInfo,
                c = a.lods;
            this.resampling = null != this.resampling ? this.resampling : !1;
            this._tileW = a.width;
            this._tileH = a.height;
            var d = this.scales = [],
                b = this._displayLevels,
                e = "esri.layers.WMTSLayer" === this.declaredClass && 96 != a.dpi,
                g = -Infinity,
                k = Infinity,
                f = this.fullExtent,
                l = new z(f.xmin, f.ymax),
                f = new z(f.xmax, f.ymin),
                m = D.getContainingTileCoords,
                h, p, r, q = c.length;
            for (r = 0; r < q; r++)
                if (p = c[r], e && (p.scale = 96 * p.scale / a.dpi), h = m(a, l, p), p.startTileRow = 0 > h.row ? 0 : h.row, p.startTileCol = 0 > h.col ? 0 : h.col, h = m(a, f, p), p.endTileRow = h.row, p.endTileCol = h.col, !b || -1 !== A.indexOf(b, p.level)) d[r] = p.scale, g = p.scale > g ? p.scale : g, k = p.scale < k ? p.scale : k;
            e && (a.dpi = 96); - Infinity !== g && !this._hasMin && this.setMinScale(g);
            Infinity !== k && !this._hasMax && this.setMaxScale(k);
            this.setExclusionAreas(this.exclusionAreas);
            this._patchIE =
                6 <= x("ie") && 7 > x("ie") && (this.isPNG32 || "Mixed" === a.format)
        },
        _isMapAtVisibleScale: function() {
            var a = this.inherited(arguments);
            if (a) {
                var c;
                c = this._map;
                var a = this.scales,
                    d = c.getScale(),
                    b = !1,
                    e = c.width > c.height ? c.width : c.height;
                for (c = 0; c < a.length; c++)
                    if (Math.abs(a[c] - d) / a[c] < 1 / e) {
                        b = !0;
                        break
                    }
                a = b
            }
            return a
        },
        _setMap: function(a, c, d, b) {
            this.inherited(arguments);
            this._map = a;
            var e = this._div = q.create("div", null, c),
                g = a.__visibleDelta,
                k = s.connect,
                f = v._css.names,
                u = {
                    position: "absolute",
                    width: a.width + "px",
                    height: a.height +
                        "px",
                    overflow: "visible"
                },
                m = O.defaults.map.zoomDuration;
            "css-transforms" === a.navigationMode ? (u[f.transform] = v._css.translate(-g.x, -g.y), l.set(e, u), delete u[f.transform], u[f.transition] = f.transformName + " " + m + "ms ease", l.set(this._active = q.create("div", null, e), u), this._active._remove = 0, this._passives = []) : (u.left = -g.x + "px", u.top = -g.y + "px", l.set(e, u));
            this._onResizeHandler_connect = k(a, "onResize", this, "_onResizeHandler");
            this._opacityChangeHandler_connect = k(this, "onOpacityChange", this, "_opacityChangeHandler");
            g = this.tileInfo;
            k = g.spatialReference;
            f = k._getInfo();
            (this._wrap = a.wrapAround180 && k._isWrappable() && Math.abs(f.origin[0] - g.origin.x) <= f.dx) && D._addFrameInfo(g, f);
            this.setExclusionAreas(this.exclusionAreas);
            this.evaluateSuspension();
            if (this.suspended && !a.loaded) var h = s.connect(a, "onLoad", this, function() {
                s.disconnect(h);
                h = null;
                this.setExclusionAreas(this.exclusionAreas);
                this.evaluateSuspension()
            });
            return e
        },
        _unsetMap: function(a, c) {
            this.suspended || this._suspendImpl();
            q.destroy(this._div);
            this._map = this._div =
                null;
            var d = s.disconnect;
            d(this._onResizeHandler_connect);
            d(this._opacityChangeHandler_connect);
            this.inherited(arguments)
        },
        onSuspend: function() {
            this.inherited(arguments);
            this._suspendImpl()
        },
        _suspendImpl: function() {
            P.hide(this._div);
            clearTimeout(this._wakeTimer);
            this._wakeTimer = null;
            this._disableDrawConnectors();
            var a = this._tiles,
                c = this._tileIds,
                d = this._loadingList,
                b, e, g = s.disconnect,
                k = q.destroy;
            d && 0 < d.count && (d.forEach(function(c) {
                if (b = a[c]) g(b._onload_connect), g(b._onerror_connect), g(b._onabort_connect),
                    b._onload_connect = b._onerror_connect = b._onabort_connect = null
            }), d.clear(), this._fireUpdateEnd());
            this._removeList.clear();
            for (d = c.length - 1; 0 <= d; d--)(b = (e = c[d]) && a[e]) && k(b);
            if ("css-transforms" === this._map.navigationMode) {
                c = this._active;
                e = this._passives;
                var f;
                this._noDom = 0;
                for (d = e.length - 1; 0 <= d; d--) f = e[d], f._endHandle && g(f._endHandle), f._matrix = f._multiply = f._endHandle = null, f._marked = f._remove = 0, e.splice(d, 1), k(f);
                c._matrix = c._multiply = null;
                c._marked = c._remove = 0
            }
            this._tileIds = this._tiles = this._tileBounds =
                this._ct = this._loadingList = this._removeList = this._standby = null
        },
        onResume: function() {
            this.inherited(arguments);
            this._tileIds = [];
            this._tiles = [];
            this._tileBounds = [];
            this._ct = null;
            this._removeList = new M;
            this._loadingList = new M;
            P.show(this._div);
            this._enableDrawConnectors();
            this._wakeTimer = this._wakeTimer || setTimeout(C.hitch(this, function() {
                this.suspended || this._onExtentChangeHandler(this._map.extent, null, !0, this._map.__LOD)
            }), 0)
        },
        _enableDrawConnectors: function() {
            var a = this._map,
                c = s.connect;
            if ("css-transforms" ===
                a.navigationMode) {
                if (this._onScaleHandler_connect = c(a, "onScale", this, this._onScaleHandler), x("esri-touch") || x("esri-pointer")) {
                    this._standby = [];
                    var d = this,
                        b = function() {
                            d._noDom = 1
                        };
                    this._onPanStartHandler_connect = c(a, "onPanStart", b);
                    this._onZoomStartHandler_connect = c(a, "onZoomStart", b)
                }
            } else this._onZoomHandler_connect = c(a, "onZoom", this, "_onZoomHandler");
            this._onPanHandler_connect = c(a, "onPan", this, "_onPanHandler");
            this._onExtentChangeHandler_connect = c(a, "onExtentChange", this, "_onExtentChangeHandler")
        },
        _disableDrawConnectors: function() {
            var a = s.disconnect;
            a(this._onPanHandler_connect);
            a(this._onZoomHandler_connect);
            a(this._onScaleHandler_connect);
            a(this._onExtentChangeHandler_connect);
            a(this._onPanStartHandler_connect);
            a(this._onZoomStartHandler_connect);
            this._onPanHandler_connect = this._onZoomHandler_connect = this._onScaleHandler_connect = this._onExtentChangeHandler_connect = this._onPanStartHandler_connect = this._onZoomStartHandler_connect = null
        },
        _onResizeHandler: function(a, c, d) {
            a = {
                width: c + "px",
                height: d +
                    "px"
            };
            c = l.set;
            c(this._div, a);
            if ("css-transforms" === this._map.navigationMode) {
                this._active && c(this._active, a);
                for (d = this._passives.length - 1; 0 <= d; d--) c(this._passives[d], a)
            }
        },
        _onExtentChangeHandler: function(a, c, d, b) {
            c = this._map;
            var e = this._standby,
                g;
            clearTimeout(this._wakeTimer);
            this._wakeTimer = null;
            if (!c._isPanningOrZooming()) {
                if ("css-transforms" === c.navigationMode) {
                    if (d)
                        for (b = this._passives.length - 1; 0 <= b; b--) g = this._passives[b], l.set(g, v._css.names.transition, "none"), g._marked ? (this._passives.splice(b,
                            1), g.parentNode && g.parentNode.removeChild(g), q.destroy(g)) : 0 < g.childNodes.length && (g._multiply = g._multiply ? N.multiply(g._matrix, g._multiply) : g._matrix);
                    this._noDom = 0;
                    if (e && e.length)
                        for (b = e.length - 1; 0 <= b; b--) g = e[b], l.set(g, "visibility", "visible"), this._tilePopPop(g), e.splice(b, 1)
                }
                this._fireUpdateStart();
                this._rrIndex = 0;
                b = D.getCandidateTileInfo(c, this.tileInfo, a);
                a = c.__visibleDelta;
                if (!this._ct || b.lod.level !== this._ct.lod.level || d) {
                    g = b && this._ct && b.lod.level !== this._ct.lod.level;
                    this._ct = b;
                    var k = this._tiles,
                        f = this._tileIds,
                        u = this._tileBounds,
                        m = this._removeList,
                        h, p = f.length;
                    this._cleanUpRemovedImages();
                    for (b = 0; b < p; b++) e = f[b], h = k[e], u[e] = f[b] = null, "css-transforms" === c.navigationMode && (g && h.parentNode && c.fadeOnZoom) && (h._fadeOut = g, h.parentNode._remove++), m.add(h);
                    d && (this._tileIds = [], this._tiles = [], this._tileBounds = [])
                }
                b = a.x;
                d = a.y;
                "css-transforms" === c.navigationMode ? (e = {}, e[v._css.names.transform] = v._css.translate(b, d), l.set(this._div, e)) : l.set(this._div, {
                    left: b + "px",
                    top: d + "px"
                });
                this.__coords_dx = b;
                this.__coords_dy =
                    d;
                this._updateImages(new E(0, 0, a.width, a.height));
                0 === this._loadingList.count ? (this._cleanUpRemovedImages(), this.onUpdate(), this._fireUpdateEnd()) : this._fireOnUpdate = !0;
                d = this._tileW;
                k = this._tileH;
                a = new E(-a.x, -a.y, a.width, a.height);
                for (b = this._tileIds.length - 1; 0 <= b; b--)(e = this._tileIds[b]) ? (g = this._tiles[e], f = L.getMarginBox(g), f = new E(f.l, f.t, d, k), "css-transforms" === c.navigationMode && (f.x = g._left, f.y = g._top), a.intersects(f) ? this._tileBounds[e] = f : (this._loadingList.contains(e) && this._tilePopPop(g),
                    q.destroy(g), this._tileIds.splice(b, 1), delete this._tileBounds[e], delete this._tiles[e])) : (this._tileIds.splice(b, 1), delete this._tileBounds[e], delete this._tiles[e])
            }
        },
        _onPanHandler: function(a, c) {
            var d = this._map,
                b = d.__visibleDelta.offset(c.x, c.y);
            this.__coords_dx = this.__coords_dy = 0;
            "css-transforms" === d.navigationMode ? (d = {}, d[v._css.names.transform] = v._css.translate(b.x, b.y), l.set(this._div, d), !x("esri-touch") && !x("esri-pointer") && this._updateImages({
                    x: -b.x,
                    y: -b.y,
                    width: b.width,
                    height: b.height
                })) :
                (l.set(this._div, {
                    left: b.x + "px",
                    top: b.y + "px"
                }), this._updateImages({
                    x: -b.x,
                    y: -b.y,
                    width: b.width,
                    height: b.height
                }));
            0 < this._loadingList.count && (this._fireUpdateStart(), this._fireOnUpdate = !0)
        },
        _onScaleHandler: function(a, c) {
            var d, b = {},
                e = v._css.names,
                g = this._map,
                k = O.defaults.map.zoomDuration;
            for (d = this._passives.length - 1; 0 <= d; d--) {
                var f = this._passives[d];
                0 === f.childNodes.length ? (this._passives.splice(d, 1), q.destroy(f)) : ("none" === f.style[e.transition] && l.set(f, e.transition, e.transformName + " " + k + "ms ease"),
                    l.set(f, e.transition, c ? "none" : e.transformName + " " + k + "ms ease"), f._matrix = a, b[e.transform] = v._css.matrix(f._multiply ? N.multiply(a, f._multiply) : a), l.set(f, b))
            }
            this._active && 0 === this._active.childNodes.length || (l.set(this._active, e.transition, c ? "none" : e.transformName + " " + k + "ms ease"), this._active._matrix = a, b[e.transform] = v._css.matrix(this._active._matrix), l.set(this._active, b), this._passives.push(this._active), b = {
                    position: "absolute",
                    width: g.width + "px",
                    height: g.height + "px",
                    overflow: "visible"
                }, b[e.transition] =
                e.transformName + " " + k + "ms ease", l.set(this._active = q.create("div", null, this._div), b), this._active._remove = 0, g.fadeOnZoom && q.place(this._active, this._div, "first"))
        },
        _onZoomHandler: function(a, c, d) {
            a = L.getMarginBox(this._div);
            d = d.offset(-a.l, -a.t);
            if (!this._previousScale || 1 === c) this._previousScale = 1;
            var b, e = this._tileW * c,
                g = this._tileH * c,
                k = this._tileBounds,
                f = this._tiles,
                u = this._previousScale,
                m = this._multiple,
                h = l.set,
                p, r;
            if ((a = x("ie")) && 8 > a) A.forEach(this._tileIds, function(a) {
                r = "";
                b = k[a];
                p = f[a].style.margin.split(" ");
                A.forEach(p, function(a) {
                    "" !== r && (r += " ");
                    a = parseFloat(a);
                    r += a / u * c + "px"
                });
                h(f[a], {
                    left: b.x - (e - b.width) * (d.x - b.x) / b.width + "px",
                    top: b.y - (g - b.height) * (d.y - b.y) / b.height + "px",
                    margin: 1 !== m && -1 === r.indexOf("NaN") ? r : "",
                    zoom: c
                })
            });
            else {
                var q = e * m,
                    T = g * m,
                    n, v;
                A.forEach(this._tileIds, function(a) {
                    r = "";
                    b = k[a];
                    n = b.x - (e - b.width) * (d.x - b.x) / b.width;
                    v = b.y - (g - b.height) * (d.y - b.y) / b.height;
                    p = f[a].style.margin.split(" ");
                    A.forEach(p, function(a) {
                        "" !== r && (r += " ");
                        a = parseFloat(a);
                        r += a / u * c + "px"
                    });
                    h(f[a], {
                        left: n + "px",
                        top: v + "px",
                        margin: 1 !== m && -1 === r.indexOf("NaN") ? r : "",
                        width: q + "px",
                        height: T + "px"
                    })
                })
            }
            this._previousScale = c
        },
        _updateImages: function(a) {
            if (this._ct) {
                var c, d = this._tileW,
                    b = this._tileH,
                    e = this._ct;
                c = e.lod;
                var e = e.tile,
                    g = e.offsets,
                    k = e.coords,
                    f = k.row,
                    k = k.col,
                    l = c.level,
                    m = this.opacity,
                    h = this._tileIds,
                    p = this._loadingList,
                    r = this._addImage,
                    q = this._map.id,
                    v = this.id,
                    n = a.x,
                    s = a.y,
                    x = c.startTileRow,
                    z = c.endTileRow,
                    C = c.startTileCol,
                    D = c.endTileCol,
                    E = A.indexOf,
                    y, t, H = g.x - this.__coords_dx,
                    F = g.y - this.__coords_dy;
                t = d - H + -a.x;
                var w = b - F +
                    -a.y;
                y = Math.ceil;
                t = 0 < t ? t % d : d - Math.abs(t) % d;
                w = 0 < w ? w % b : b - Math.abs(w) % b;
                n = 0 < n ? Math.floor((n + H) / d) : y((n - (d - H)) / d);
                s = 0 < s ? Math.floor((s + F) / b) : y((s - (b - F)) / b);
                F = n + y((a.width - t) / d);
                a = s + y((a.height - w) / b);
                var B, G, I;
                this._wrap && (B = c._frameInfo, G = B[0], I = B[1], B = B[2]);
                for (w = n; w <= F; w++)
                    for (n = s; n <= a; n++) y = f + n, t = k + w, this._wrap && (t < I ? (t %= G, t = t < I ? t + G : t) : t > B && (t %= G)), !this._isExcluded(l, y, t) && (y >= x && y <= z && t >= C && t <= D) && (c = q + "_" + v + "_tile_" + l + "_" + n + "_" + w, -1 === E(h, c) && (p.add(c), h.push(c), r(l, n, y, w, t, c, d, b, m, e, g)))
            }
        },
        _cleanUpRemovedImages: function() {
            var a =
                this._removeList,
                c = q.destroy,
                d, b = v._css.names;
            a.forEach(function(a) {
                a._fadeOut || (a.style.filter = "", a.style.zoom = 1, c(a))
            });
            if ("css-transforms" === this._map.navigationMode)
                for (d = this._passives.length - 1; 0 <= d; d--) {
                    var e = this._passives[d];
                    0 === e.childNodes.length ? (this._passives.splice(d, 1), c(e)) : this._map.fadeOnZoom && (!e._marked && e._remove === e.childNodes.length) && (e._marked = 1, 2048 > v._css.getScaleFromMatrix(l.get(e, b.transform)) ? (l.set(e, b.transition, "opacity 0.65s"), l.set(e, "opacity", 0), s.disconnect(e._endHandle),
                        e._endHandle = s.connect(e, b.endEvent, this._transitionEnd)) : this._transitionEnd({
                        propertyName: "opacity",
                        target: e
                    }))
                }
            a.clear()
        },
        _transitionEnd: function(a) {
            var c = a.target;
            "opacity" === a.propertyName && (s.disconnect(c._endHandle), c._endHandle = null, a = A.indexOf(this._passives, c), -1 < a && this._passives.splice(a, 1), c.parentNode && c.parentNode.removeChild(c), q.destroy(c))
        },
        _addImage: function(a, c, d, b, e, g, k, f, u, m, h) {
            if (this._patchIE) m = this._tiles[g] = q.create("div"), m.id = g, K.add(m, "layerTile"), l.set(m, {
                left: k * b - h.x +
                    "px",
                top: f * c - h.y + "px",
                width: k + "px",
                height: f + "px",
                filter: "progid:DXImageTransform.Microsoft.AlphaImageLoader(src\x3d'" + this.getTileUrl(a, d, e) + "', sizingMethod\x3d'scale')"
            }), 1 > u && l.set(m, "opacity", u), a = m.appendChild(q.create("div")), l.set(a, {
                opacity: 0,
                width: k + "px",
                height: f + "px"
            }), this._div.appendChild(m), this._loadingList.remove(g), this._fireOnUpdateEvent();
            else {
                m = this._tiles[g] = q.create("img");
                var p = s.connect;
                m.id = g;
                K.add(m, "layerTile");
                b = k * b - h.x;
                h = f * c - h.y;
                c = this._map;
                var r = v._css.names;
                k = {
                    width: k +
                        "px",
                    height: f + "px",
                    visibility: "hidden"
                };
                "css-transforms" === c.navigationMode ? (k[r.transform] = v._css.translate(b, h), l.set(m, k), m._left = b, m._top = h) : (k.left = b + "px", k.top = h + "px", l.set(m, k));
                1 > u && l.set(m, "opacity", u);
                m._onload_connect = p(m, "onload", this, "_tileLoadHandler");
                m._onerror_connect = p(m, "onerror", C.hitch(this, "_tileErrorHandler", d, e));
                m._onabort_connect = p(m, "onabort", this, "_tileAbortHandler");
                if (this.tileMap) this.tileMap.getTile(a, d, e, g, this._tileMapCallback);
                else if (g = this.getTileUrl(a, d, e, m)) this._failedRequests &&
                    this._failedRequests[g] ? (l.set(m, this._failedRequests[g].css), m.src = this._failedRequests[g].src, this._multiple = parseInt(this._failedRequests[g].css.width) / this._tileW, this.isResampling = 1 !== this._multiple) : (this._multiple = 1, this.isResampling = !1, m.src = g);
                "css-transforms" === c.navigationMode ? this._active.appendChild(m) : this._div.appendChild(m)
            }
        },
        _tileMapCallback: function(a, c) {
            var d, b;
            !this.suspended && this._tiles[c.id] && (this._multiple = 2 * (c.level - a.level) || 1, this.isResampling = 1 !== this._multiple, b = this._tiles[c.id],
                d = this.tileMap.style(a, c), l.set(b, d), b.src = this.getTileUrl(a.level, a.row, a.col))
        },
        getTileUrl: function(a, c, d) {},
        _reCheckTS: /[\?\&]_ts=/ig,
        _reReplaceTS: /([\?\&]_ts=)[0-9]+/ig,
        addTimestampToURL: function(a) {
            var c = this._refreshTS;
            c && (a = this._reCheckTS.test(a) ? a.replace(this._reReplaceTS, "$$$1" + c) : a + ((-1 === a.indexOf("?") ? "?" : "\x26") + "_ts\x3d" + c));
            return a
        },
        refresh: function() {
            this.suspended || (this._refreshTS = (new Date).getTime(), this._onExtentChangeHandler(this._map.extent, null, !0, this._map.__LOD))
        },
        _tilePopPop: function(a) {
            var c =
                s.disconnect;
            c(a._onload_connect);
            c(a._onerror_connect);
            c(a._onabort_connect);
            a._onload_connect = a._onerror_connect = a._onabort_connect = null;
            this._loadingList.remove(a.id);
            this._fireOnUpdateEvent()
        },
        _tileLoadHandler: function(a) {
            a = a.currentTarget;
            this._noDom ? this._standby.push(a) : (l.set(a, "visibility", "visible"), this._tilePopPop(a))
        },
        _tileAbortHandler: function(a) {
            a = a.currentTarget;
            this.onError(Error("Unable to load tile: " + a.src));
            l.set(a, "visibility", "hidden");
            this._tilePopPop(a)
        },
        _tileErrorHandler: function(a,
            c, d) {
            d = d.currentTarget;
            var b, e, g = !0;
            if (this.tileMap || !this.resampling) g = !1;
            else if (b = new J(d.src), b = b.path.split("/"), b = parseInt(b[b.length - 3]), e = this._ct.lod.level - b + 1, this._multiple = Math.pow(2, e), b === this._lowestLevel || 0 === this._resamplingTolerance || this._resamplingTolerance && Math.log(this._multiple) / Math.LN2 > this._resamplingTolerance) g = !1;
            g ? (this.isResampling = !0, this._resample(d, a, c)) : (this.onError(Error("Unable to load tile: " + d.src)), l.set(d, "visibility", "hidden"), this._tilePopPop(d))
        },
        _resample: function(a,
            c, d) {
            var b = (new J(a.src)).path.split("/"),
                e = this._multiple,
                g = parseInt(b[b.length - 3]) - 1,
                k = parseInt(c / e),
                f = parseInt(d / e),
                b = d % e,
                u = c % e,
                k = this.getTileUrl(g, k, f);
            c = this.getTileUrl(g + Math.log(e) / Math.LN2, c, d);
            e = {
                width: this._tileW * e + "px",
                height: this._tileH * e + "px",
                margin: "-" + this._tileW * u + "px 0 0 " + ("-" + this._tileH * b + "px")
            };
            this._failedRequests || (this._failedRequests = {});
            this._failedRequests[c] = {
                src: k,
                css: e
            };
            l.set(a, e);
            x("chrome") && a.setAttribute("src", null);
            a.src = k
        },
        _fireOnUpdateEvent: function() {
            0 === this._loadingList.count &&
                (this._cleanUpRemovedImages(), this._fireOnUpdate && (this._fireOnUpdate = !1, this.onUpdate(), this._fireUpdateEnd()))
        },
        setOpacity: function(a) {
            if (this.opacity != a) this.onOpacityChange(this.opacity = a)
        },
        onOpacityChange: function() {},
        _opacityChangeHandler: function(a) {
            var c = l.set,
                d, b, e;
            if ("css-transforms" === this._map.navigationMode) {
                if (this._active) {
                    e = this._active.childNodes;
                    for (d = e.length - 1; 0 <= d; d--) c(e[d], "opacity", a)
                }
                for (d = this._passives.length - 1; 0 <= d; d--) {
                    e = this._passives[d].childNodes;
                    for (b = e.length - 1; 0 <=
                        b; b--) c(e[b], "opacity", a)
                }
            } else {
                e = this._div.childNodes;
                for (d = e.length - 1; 0 <= d; d--) c(e[d], "opacity", a)
            }
        },
        setExclusionAreas: function(a) {
            this.exclusionAreas = a;
            if (this.loaded && this._map && this._map.loaded) {
                var c = this._map.spatialReference,
                    d = this.tileInfo,
                    b = d.origin,
                    e = d.lods,
                    g = e[0].level,
                    k = e[e.length - 1].level,
                    f, l, m, h, p, r, s, q, n;
                if (!this.exclusionAreas || !this.exclusionAreas.length) this._exclusionsPerZoom = null;
                else {
                    this._exclusionsPerZoom = [];
                    l = 0;
                    for (m = a.length; l < m; l++)
                        if (f = a[l], (n = f.geometry) && "extent" === n.type &&
                            n.xmin <= n.xmax && n.ymin <= n.ymax) {
                            if (!c.equals(n.spatialReference))
                                if (c._canProject(n.spatialReference)) c.isWebMercator() ? (q = z.lngLatToXY(n.xmin, n.ymin), n = z.lngLatToXY(n.xmax, n.ymax)) : (q = z.xyToLngLat(n.xmin, n.ymin, !0), n = z.xyToLngLat(n.xmax, n.ymax, !0)), n = new R(q[0], q[1], n[0], n[1], c);
                                else continue;
                            s = -1;
                            if (f.minZoom && -1 !== f.minZoom) s = f.minZoom;
                            else if (f.minScale && -1 !== f.minScale) {
                                h = 0;
                                for (p = e.length; h < p; h++)
                                    if (e[h].scale <= f.minScale) {
                                        s = e[h].level;
                                        break
                                    }
                            }
                            s = Math.max(s, g);
                            q = -1;
                            if (f.maxZoom && -1 !== f.maxZoom) q =
                                f.maxZoom;
                            else if (f.maxScale && -1 !== f.maxScale) {
                                h = 0;
                                for (p = e.length; h < p; h++)
                                    if (e[h].scale < f.maxScale) {
                                        q = e[h - 1].level;
                                        break
                                    } else if (e[h].scale === f.maxScale) {
                                    q = e[h].level;
                                    break
                                }
                            }
                            q = -1 === q ? k : Math.min(q, k);
                            for (f = s; f <= q; f++) {
                                h = 0;
                                for (p = e.length; h < p; h++)
                                    if (e[h].level === f) {
                                        r = e[h];
                                        break
                                    }
                                r && (this._exclusionsPerZoom[f] || (this._exclusionsPerZoom[f] = []), h = 1 / r.resolution / d.rows, p = 1 / r.resolution / d.cols, this._exclusionsPerZoom[f].push({
                                    rowFrom: Math.floor((b.y - n.ymax) * h),
                                    rowTo: Math.ceil((b.y - n.ymin) * h),
                                    colFrom: Math.floor((n.xmin -
                                        b.x) * p),
                                    colTo: Math.ceil((n.xmax - b.x) * p)
                                }))
                            }
                        }
                }
                this.suspended || this._onExtentChangeHandler(this._map.extent, null, !0, this._map.__LOD)
            }
        },
        _isExcluded: function(a, c, d) {
            var b, e, g;
            if (!this._exclusionsPerZoom) return !1;
            b = this._exclusionsPerZoom[a];
            if (!b) return !1;
            e = 0;
            for (g = b.length; e < g; e++)
                if (a = b[e], c >= a.rowFrom && c < a.rowTo && d >= a.colFrom && d < a.colTo) return !0;
            return !1
        }
    })
});
},
'dojox/collections/ArrayList':function(){
define(["dojo/_base/kernel", "dojo/_base/array", "./_base"], function(dojo, darray, dxc){

	dxc.ArrayList=function(/*array?*/ arr){
		// summary:
		//		Returns a new object of type dojox.collections.ArrayList
		var items=[];
		if(arr) items=items.concat(arr);
		this.count=items.length;
		this.add=function(/*object*/ obj){
			// summary:
			//		Add an element to the collection.
			items.push(obj);
			this.count=items.length;
		};
		this.addRange=function(/*array*/ a){
			// summary:
			//		Add a range of objects to the ArrayList
			if(a.getIterator){
				var e=a.getIterator();
				while(!e.atEnd()){
					this.add(e.get());
				}
				this.count=items.length;
			}else{
				for(var i=0; i<a.length; i++){
					items.push(a[i]);
				}
				this.count=items.length;
			}
		};
		this.clear=function(){
			// summary:
			//		Clear all elements out of the collection, and reset the count.
			items.splice(0, items.length);
			this.count=0;
		};
		this.clone=function(){
			// summary:
			//		Clone the array list
			return new dxc.ArrayList(items);	//	dojox.collections.ArrayList
		};
		this.contains=function(/*object*/ obj){
			// summary:
			//		Check to see if the passed object is a member in the ArrayList
			for(var i=0; i < items.length; i++){
				if(items[i] == obj) {
					return true;	//	bool
				}
			}
			return false;	//	bool
		};
		this.forEach=function(/*function*/ fn, /*object?*/ scope){
			// summary:
			//		functional iterator, following the mozilla spec.
			dojo.forEach(items, fn, scope);
		};
		this.getIterator=function(){
			// summary:
			//		Get an Iterator for this object
			return new dxc.Iterator(items);	//	dojox.collections.Iterator
		};
		this.indexOf=function(/*object*/ obj){
			// summary:
			//		Return the numeric index of the passed object; will return -1 if not found.
			for(var i=0; i < items.length; i++){
				if(items[i] == obj) {
					return i;	//	int
				}
			}
			return -1;	// int
		};
		this.insert=function(/*int*/ i, /*object*/ obj){
			// summary:
			//		Insert the passed object at index i
			items.splice(i,0,obj);
			this.count=items.length;
		};
		this.item=function(/*int*/ i){
			// summary:
			//		return the element at index i
			return items[i];	//	object
		};
		this.remove=function(/*object*/ obj){
			// summary:
			//		Look for the passed object, and if found, remove it from the internal array.
			var i=this.indexOf(obj);
			if(i >=0) {
				items.splice(i,1);
			}
			this.count=items.length;
		};
		this.removeAt=function(/*int*/ i){
			// summary:
			//		Remove the element located at the given index.
			items.splice(i,1);
			this.count=items.length;
		};
		this.reverse=function(){
			// summary:
			//		Reverse the internal array
			items.reverse();
		};
		this.sort=function(/*function?*/ fn){
			// summary:
			//		sort the internal array
			if(fn){
				items.sort(fn);
			}else{
				items.sort();
			}
		};
		this.setByIndex=function(/*int*/ i, /*object*/ obj){
			// summary:
			//		Set an element in the array by the passed index.
			items[i]=obj;
			this.count=items.length;
		};
		this.toArray=function(){
			// summary:
			//		Return a new array with all of the items of the internal array concatenated.
			return [].concat(items);
		};
		this.toString=function(/*string*/ delim){
			// summary:
			//		implementation of toString, follows [].toString();
			return items.join((delim||","));
		};
	};
	return dxc.ArrayList;
});

},
'dojox/collections/_base':function(){
define(["dojo/_base/kernel", "dojo/_base/lang", "dojo/_base/array"], 
  function(dojo, lang, arr){
	var collections = lang.getObject("dojox.collections", true);

	collections.DictionaryEntry=function(/*string*/ k, /*object*/ v){
		// summary:
		//		return an object of type dojox.collections.DictionaryEntry
		this.key=k;
		this.value=v;
		this.valueOf=function(){
			return this.value; 	//	object
		};
		this.toString=function(){
			return String(this.value);	//	string
		};
	}

	/*	Iterators
	 *	The collections.Iterators (Iterator and DictionaryIterator) are built to
	 *	work with the Collections included in this module.  However, they *can*
	 *	be used with arrays and objects, respectively, should one choose to do so.
	 */
	collections.Iterator=function(/*array*/ a){
		// summary:
		//		return an object of type dojox.collections.Iterator
		var position=0;
		this.element=a[position]||null;
		this.atEnd=function(){
			// summary:
			//		Test to see if the internal cursor has reached the end of the internal collection.
			return (position>=a.length);	//	bool
		};
		this.get=function(){
			// summary:
			//		Get the next member in the collection.
			if(this.atEnd()){
				return null;		//	object
			}
			this.element=a[position++];
			return this.element;	//	object
		};
		this.map=function(/*function*/ fn, /*object?*/ scope){
			// summary:
			//		Functional iteration with optional scope.
			return arr.map(a, fn, scope);
		};
		this.reset=function(){
			// summary:
			//		reset the internal cursor.
			position=0;
			this.element=a[position];
		};
	}

	/*	Notes:
	 *	The DictionaryIterator no longer supports a key and value property;
	 *	the reality is that you can use this to iterate over a JS object
	 *	being used as a hashtable.
	 */
	collections.DictionaryIterator=function(/*object*/ obj){
		// summary:
		//		return an object of type dojox.collections.DictionaryIterator
		var a=[];	//	Create an indexing array
		var testObject={};
		for(var p in obj){
			if(!testObject[p]){
				a.push(obj[p]);	//	fill it up
			}
		}
		var position=0;
		this.element=a[position]||null;
		this.atEnd=function(){
			// summary:
			//		Test to see if the internal cursor has reached the end of the internal collection.
			return (position>=a.length);	//	bool
		};
		this.get=function(){
			// summary:
			//		Get the next member in the collection.
			if(this.atEnd()){
				return null;		//	object
			}
			this.element=a[position++];
			return this.element;	//	object
		};
		this.map=function(/*function*/ fn, /*object?*/ scope){
			// summary:
			//		Functional iteration with optional scope.
			return arr.map(a, fn, scope);
		};
		this.reset=function() {
			// summary:
			//		reset the internal cursor.
			position=0;
			this.element=a[position];
		};
	};

	return collections;
});

},
'esri/layers/ArcGISMapServiceLayer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/has", "../kernel", "../lang", "../request", "../SpatialReference", "../geometry/Extent", "./LayerInfo"], function(c, k, l, q, r, f, m, n, g, p) {
    return c(null, {
        declaredClass: "esri.layers.ArcGISMapServiceLayer",
        infoTemplates: null,
        constructor: function(a, d) {
            this.layerInfos = [];
            d && (this.infoTemplates = d.infoTemplates || null);
            var e = this._params = {},
                b = this._url.query ? this._url.query.token : null;
            b && (e.token = b)
        },
        setInfoTemplates: function(a) {
            this.infoTemplates = a
        },
        _load: function() {
            m({
                url: this._url.path,
                content: k.mixin({
                    f: "json"
                }, this._params),
                callbackParamName: "callback",
                load: this._initLayer,
                error: this._errorHandler
            })
        },
        spatialReference: null,
        initialExtent: null,
        fullExtent: null,
        description: null,
        units: null,
        _initLayer: function(a, d) {
            try {
                this._findCredential();
                (this.credential && this.credential.ssl || a && a._ssl) && this._useSSL();
                this.description = a.description;
                this.copyright = a.copyrightText;
                this.spatialReference = a.spatialReference && new n(a.spatialReference);
                this.initialExtent = a.initialExtent && new g(a.initialExtent);
                this.fullExtent = a.fullExtent && new g(a.fullExtent);
                this.units = a.units;
                this.maxRecordCount = a.maxRecordCount;
                this.maxImageHeight = a.maxImageHeight;
                this.maxImageWidth = a.maxImageWidth;
                this.supportsDynamicLayers = a.supportsDynamicLayers;
                var e = this.layerInfos = [],
                    b = a.layers,
                    h = this._defaultVisibleLayers = [];
                l.forEach(b, function(a, b) {
                    e[b] = new p(a);
                    a.defaultVisibility && h.push(a.id)
                });
                this.visibleLayers || (this.visibleLayers = h);
                this.version = a.currentVersion;
                this.version || (this.version = "capabilities" in a || "tables" in
                    a ? 10 : "supportedImageFormatTypes" in a ? 9.31 : 9.3);
                this.capabilities = a.capabilities;
                f.isDefined(a.minScale) && !this._hasMin && this.setMinScale(a.minScale);
                f.isDefined(a.maxScale) && !this._hasMax && this.setMaxScale(a.maxScale)
            } catch (c) {
                this._errorHandler(c)
            }
        }
    })
});
},
'esri/layers/LayerInfo':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../lang"], function(a, b, d, e, c) {
    return a(null, {
        declaredClass: "esri.layers.LayerInfo",
        constructor: function(a) {
            b.mixin(this, a)
        },
        toJson: function() {
            return c.fixJson({
                defaultVisibility: this.defaultVisibility,
                id: this.id,
                maxScale: this.maxScale,
                minScale: this.minScale,
                name: this.name,
                parentLayerId: this.parentLayerId,
                subLayerIds: this.subLayerIds
            })
        }
    })
});
},
'esri/layers/TimeInfo':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../TimeExtent", "./TimeReference", "./LayerTimeOptions"], function(b, c, g, h, d, e, f) {
    b = b(null, {
        declaredClass: "esri.layers.TimeInfo",
        constructor: function(a) {
            null !== a && (c.mixin(this, a), a.exportOptions && (this.exportOptions = new f(a.exportOptions)), this.timeExtent = null, a.timeExtent && 2 === a.timeExtent.length && (this.timeExtent = new d(a.timeExtent)), this.timeReference = new e(a.timeReference))
        }
    });
    c.mixin(b, {
        UNIT_CENTURIES: "esriTimeUnitsCenturies",
        UNIT_DAYS: "esriTimeUnitsDays",
        UNIT_DECADES: "esriTimeUnitsDecades",
        UNIT_HOURS: "esriTimeUnitsHours",
        UNIT_MILLISECONDS: "esriTimeUnitsMilliseconds",
        UNIT_MINUTES: "esriTimeUnitsMinutes",
        UNIT_MONTHS: "esriTimeUnitsMonths",
        UNIT_SECONDS: "esriTimeUnitsSeconds",
        UNIT_UNKNOWN: "esriTimeUnitsUnknown",
        UNIT_WEEKS: "esriTimeUnitsWeeks",
        UNIT_YEARS: "esriTimeUnitsYears"
    });
    return b
});
},
'esri/TimeExtent':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "./kernel"], function(l, m, n, p) {
    var k = l(null, {
        declaredClass: "esri.TimeExtent",
        constructor: function(a) {
            if (1 < arguments.length) this._create(arguments[0], arguments[1]);
            else if (a)
                if (m.isArray(a)) {
                    var c = a[0],
                        b = a[1];
                    this.startTime = null === c || "null" === c ? null : new Date(c);
                    this.endTime = null === b || "null" === b ? null : new Date(b)
                } else a instanceof Date && this._create(a, null)
        },
        offset: function(a, c) {
            var b = new k,
                d = this.startTime,
                e = this.endTime;
            d && (b.startTime = this._getOffsettedDate(d,
                a, c));
            e && (b.endTime = this._getOffsettedDate(e, a, c));
            return b
        },
        intersection: function(a) {
            return this._intersection(this, a)
        },
        toJson: function() {
            var a = [],
                c = this.startTime;
            a.push(c ? c.getTime() : "null");
            c = this.endTime;
            a.push(c ? c.getTime() : "null");
            return a
        },
        _create: function(a, c) {
            this.startTime = a ? new Date(a.getTime()) : null;
            this.endTime = c ? new Date(c.getTime()) : null
        },
        _refData: {
            esriTimeUnitsMilliseconds: {
                getter: "getUTCMilliseconds",
                setter: "setUTCMilliseconds",
                multiplier: 1
            },
            esriTimeUnitsSeconds: {
                getter: "getUTCSeconds",
                setter: "setUTCSeconds",
                multiplier: 1
            },
            esriTimeUnitsMinutes: {
                getter: "getUTCMinutes",
                setter: "setUTCMinutes",
                multiplier: 1
            },
            esriTimeUnitsHours: {
                getter: "getUTCHours",
                setter: "setUTCHours",
                multiplier: 1
            },
            esriTimeUnitsDays: {
                getter: "getUTCDate",
                setter: "setUTCDate",
                multiplier: 1
            },
            esriTimeUnitsWeeks: {
                getter: "getUTCDate",
                setter: "setUTCDate",
                multiplier: 7
            },
            esriTimeUnitsMonths: {
                getter: "getUTCMonth",
                setter: "setUTCMonth",
                multiplier: 1
            },
            esriTimeUnitsYears: {
                getter: "getUTCFullYear",
                setter: "setUTCFullYear",
                multiplier: 1
            },
            esriTimeUnitsDecades: {
                getter: "getUTCFullYear",
                setter: "setUTCFullYear",
                multiplier: 10
            },
            esriTimeUnitsCenturies: {
                getter: "getUTCFullYear",
                setter: "setUTCFullYear",
                multiplier: 100
            }
        },
        _intersection: function(a, c) {
            if (a && c) {
                var b = a.startTime,
                    d = a.endTime,
                    e = c.startTime,
                    f = c.endTime,
                    b = b ? b.getTime() : -Infinity,
                    e = e ? e.getTime() : -Infinity,
                    d = d ? d.getTime() : Infinity,
                    f = f ? f.getTime() : Infinity,
                    g, h;
                e >= b && e <= d ? g = e : b >= e && b <= f && (g = b);
                d >= e && d <= f ? h = d : f >= b && f <= d && (h = f);
                if (!isNaN(g) && !isNaN(h)) return b = new k, b.startTime = -Infinity ===
                    g ? null : new Date(g), b.endTime = Infinity === h ? null : new Date(h), b
            }
            return null
        },
        _getOffsettedDate: function(a, c, b) {
            var d = this._refData;
            a = new Date(a.getTime());
            c && b && (d = d[b], a[d.setter](a[d.getter]() + c * d.multiplier));
            return a
        }
    });
    return k
});
},
'esri/layers/TimeReference':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel"], function(b, c, d, e) {
    return b(null, {
        declaredClass: "esri.layers.TimeReference",
        constructor: function(a) {
            a && c.mixin(this, a)
        }
    })
});
},
'esri/layers/LayerTimeOptions':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../lang"], function(b, c, e, f, d) {
    return b(null, {
        declaredClass: "esri.layers.LayerTimeOptions",
        constructor: function(a) {
            a && c.mixin(this, a)
        },
        toJson: function() {
            return d.fixJson({
                timeDataCumulative: this.timeDataCumulative,
                timeOffset: this.timeOffset,
                timeOffsetUnits: this.timeOffsetUnits,
                useTime: this.useTime
            })
        }
    })
});
},
'esri/layers/TileMap':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/Deferred", "dojo/io-query", "../request", "../urlUtils"], function(l, k, m, n, p, q, r) {
    return l(null, {
        declaredClass: "esri.layers.TileMap",
        constructor: function(a) {
            this.layer = a;
            this._tileMaps = {}
        },
        getTile: function(a, b, c, d, e) {
            a = {
                id: d,
                level: a,
                row: b,
                col: c
            };
            b = this._getResamplingBudget();
            0 < b ? this._process({
                tile: a,
                requestedTile: a,
                callback: e,
                resamplingBudget: b
            }) : (e || this.callback).call(this, a, a)
        },
        statusOf: function(a, b, c) {
            var d = this._getResamplingBudget();
            a = {
                level: a,
                row: b,
                col: c
            };
            if (0 === d) return 1;
            for (; 0 <= d;) {
                b = this._tileToTileMap(a);
                if (!this._tileMaps[b.uid]) return -1;
                b = this._tileMaps[b.uid];
                if (!b.promise.isFulfilled()) return -1;
                if (this._isTileAvailable(a, b)) return 1;
                a = this._parentTile(a);
                if (!a) break;
                d--
            }
            return 0
        },
        style: function(a, b) {
            if (!(a.level === b.level && a.row === b.row && a.col === b.col)) {
                for (var c = this.layer.tileInfo, d = c.lods, e = c.cols, c = c.rows, f, g, h = d.length - 1; !f || !g;) !f && d[h].level === a.level && (f = d[h]), !g && d[h].level === b.level && (g = d[h]), h--;
                d = Math.round(f.resolution /
                    g.resolution);
                return {
                    width: e * d + "px",
                    height: c * d + "px",
                    margin: "-" + b.row % d * c + "px 0 0 -" + b.col % d * e + "px"
                }
            }
        },
        _process: function(a) {
            var b = a.tile,
                c = this._tileToTileMap(b),
                d = this._parentTile(b);
            this._getTileMap(c).then(k.hitch(this, function(e) {
                c = e;
                this._isTileAvailable(b, c) ? (a.callback || this.callback).call(this, b, a.requestedTile) : 0 < a.resamplingBudget && d ? (a.resamplingBudget--, a.tile = d, this._process(a)) : (a.callback || this.callback).call(this, a.requestedTile, a.requestedTile)
            }), k.hitch(this, function() {
                (a.callback ||
                    this.callback).call(this, a.requestedTile, a.requestedTile)
            }))
        },
        _getTileMap: function(a) {
            var b, c, d, e, f = null;
            this._tileMaps[a.uid] ? (a = this._tileMaps[a.uid], b = a.promise) : (this._tileMaps[a.uid] = a, c = new n, q({
                url: this._getTileMapUrl(a.level, a.row, a.col),
                handleAs: "json",
                callbackParamName: "callback",
                timeout: 3E3,
                load: function(b) {
                    k.mixin(a, b);
                    if (a.data && 0 < a.data.length) {
                        e = a.data.length;
                        if (1 === e) f = a.data[0];
                        else {
                            f = a.data[0];
                            for (d = 1; d < e; d++)
                                if (a.data[d] !== f) {
                                    f = null;
                                    break
                                }
                        }
                        null !== f && (delete a.data, a.value = f)
                    }
                    c.resolve(a)
                },
                error: function(a) {
                    c.reject()
                }
            }), b = a.promise = c.promise);
            return b
        },
        _parentTile: function(a) {
            var b = this.layer.tileInfo.lods,
                c, d, e = null;
            m.some(b, function(b, e) {
                return a.level === b.level ? (c = b, d = e, !0) : !1
            });
            0 < d && (b = b[d - 1], e = {
                id: a.id,
                level: b.level,
                row: Math.floor(a.row * c.resolution / b.resolution + 0.01),
                col: Math.floor(a.col * c.resolution / b.resolution + 0.01)
            });
            return e
        },
        _tileToTileMap: function(a) {
            var b = 8 * Math.floor(a.row / 8),
                c = 8 * Math.floor(a.col / 8);
            return {
                uid: a.level + "_" + b + "_" + c,
                level: a.level,
                row: b,
                col: c
            }
        },
        _isTileAvailable: function(a,
            b) {
            var c, d;
            b.valid ? void 0 !== b.value ? c = b.value : (c = b.location.left, d = b.location.top, c = (a.row - d) * b.location.width + (a.col - c), c = c < b.data.length ? b.data[c] : 0) : c = 0;
            return c
        },
        _getTileMapUrl: function(a, b, c) {
            var d = this.layer,
                e = d.tileServers,
                f = d._getToken(),
                g = d._url.query;
            a = (e ? e[b % e.length] : d._url.path) + "/tilemap/" + a + "/" + b + "/" + c + "/8/8";
            g && (a += "?" + p.objectToQuery(g));
            if (f && (!g || !g.token)) a += (-1 === a.indexOf("?") ? "?" : "\x26") + "token\x3d" + f;
            a = d.addTimestampToURL(a);
            return r.addProxy(a)
        },
        _getResamplingBudget: function() {
            var a =
                this.layer,
                b = 0;
            if (a.resampling && (b = a._resamplingTolerance, null === b || void 0 === b)) b = a.tileInfo.lods.length;
            return b
        }
    })
});
},
'esri/layers/MapImageLayer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/connect", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-construct", "dojo/dom-style", "../kernel", "../config", "../sniff", "../domUtils", "../geometry/Point", "../geometry/webMercatorUtils", "./layer"], function(u, l, v, w, n, f, k, x, m, s, t, p, y) {
    var r = u([y], {
        declaredClass: "esri.layers.MapImageLayer",
        "-chains-": {
            constructor: "manual"
        },
        constructor: function(b) {
            this.inherited(arguments, [null, b]);
            this._mapImages = [];
            var a = v.hitch;
            this._panStart = a(this, this._panStart);
            this._pan = a(this, this._pan);
            this._extentChange = a(this, this._extentChange);
            this._zoom = a(this, this._zoom);
            this._zoomStart = a(this, this._zoomStart);
            this._scale = a(this, this._scale);
            this._resize = a(this, this._resize);
            l.connect(this, "onSuspend", this, this._onSuspend);
            l.connect(this, "onResume", this, this._onResume);
            this.loaded = !0;
            this.onLoad(this)
        },
        opacity: 1,
        addImage: function(b) {
            var a = this._mapImages.push(b),
                a = a - 1;
            b._idx = a;
            b._layer = this;
            this._div && this._createImage(b, a)
        },
        removeImage: function(b) {
            if (b) {
                var a = b._idx,
                    c = this._mapImages;
                if (c[a] ===
                    b) {
                    delete c[a];
                    if (a = b._node) this._clearEvents(a), a.e_idx = a.e_bl = a.e_tr = a.e_l = a.e_t = a.e_w = a.e_h = null, a.parentNode && (a.parentNode.removeChild(a), n.destroy(a));
                    b._node = b._idx = b._layer = null
                }
            }
        },
        removeAllImages: function() {
            var b = this._mapImages,
                a, c = b.length;
            for (a = 0; a < c; a++) {
                var d = b[a];
                d && this.removeImage(d)
            }
            this._mapImages = []
        },
        getImages: function() {
            var b = this._mapImages,
                a = [],
                c, d = b.length;
            for (c = 0; c < d; c++) b[c] && a.push(b[c]);
            return a
        },
        setOpacity: function(b) {
            this.opacity != b && (this._opacityChanged(this.opacity =
                b), this.onOpacityChange())
        },
        onOpacityChange: function() {},
        _opacityChanged: function(b) {
            var a = this._div,
                c, d;
            if (a)
                if (!m("ie") || 8 < m("ie")) f.set(a, "opacity", b);
                else {
                    d = a.childNodes;
                    c = d.length;
                    for (a = 0; a < c; a++) f.set(d[a], "opacity", b)
                }
        },
        _createImage: function(b, a) {
            var c = n.create("img");
            f.set(c, {
                position: "absolute"
            });
            1 > b.opacity ? f.set(c, "opacity", b.opacity) : 8 >= m("ie") && f.set(c, "opacity", this.opacity);
            b.rotation && !(9 > m("ie")) && f.set(c, k._css.names.transform, k._css.rotate(360 - b.rotation));
            b._node = c;
            c.e_idx = a;
            c.e_layer =
                this;
            c.e_load = l.connect(c, "onload", r.prototype._imageLoaded);
            c.e_error = l.connect(c, "onerror", r.prototype._imageError);
            c.e_abort = l.connect(c, "onabort", r.prototype._imageError);
            c.src = b.href
        },
        _imageLoaded: function(b, a) {
            var c = a || b.target || b.currentTarget,
                d = c.e_layer,
                e = d._mapImages[c.e_idx],
                g = d._map;
            g && (g.__zooming || g.__panning || !d._sr) ? d._standby.push(c) : (d._clearEvents(c), e && e._node === c && g && d._attach(e))
        },
        _imageError: function(b) {
            b = b.target || b.currentTarget;
            var a = b.e_layer,
                c = a._mapImages[b.e_idx];
            a._clearEvents(b);
            c && (c._node = null)
        },
        _clearEvents: function(b) {
            var a = l.disconnect;
            a(b.e_load);
            a(b.e_error);
            a(b.e_abort);
            b.e_load = b.e_error = b.e_abort = b.e_layer = null
        },
        _attach: function(b) {
            var a = b.extent,
                c = a.spatialReference,
                d = this._sr,
                e = this._div,
                g = b._node,
                f = new t({
                    x: a.xmin,
                    y: a.ymin,
                    spatialReference: c
                }),
                a = new t({
                    x: a.xmax,
                    y: a.ymax,
                    spatialReference: c
                });
            d.equals(c) || (d.isWebMercator() && 4326 === c.wkid ? (f = p.geographicToWebMercator(f), a = p.geographicToWebMercator(a)) : c.isWebMercator() && 4326 === d.wkid && (f = p.webMercatorToGeographic(f),
                a = p.webMercatorToGeographic(a)));
            g.e_bl = f;
            g.e_tr = a;
            b.visible && (this._setPos(g, e._left, e._top), (this._active || e).appendChild(g))
        },
        _setPos: function(b, a, c) {
            var d = b.e_bl,
                e = b.e_tr,
                g = this._map,
                d = g.toScreen(d),
                e = g.toScreen(e);
            a = d.x - a;
            c = e.y - c;
            var q = Math.abs(e.x - d.x),
                d = Math.abs(d.y - e.y),
                e = {
                    width: q + "px",
                    height: d + "px"
                },
                h = this._mapImages[b.e_idx];
            "css-transforms" === g.navigationMode ? e[k._css.names.transform] = k._css.translate(a, c) + (h.rotation ? " " + k._css.rotate(360 - h.rotation) : "") : (e.left = a + "px", e.top = c + "px");
            f.set(b,
                e);
            b.e_l = a;
            b.e_t = c;
            b.e_w = q;
            b.e_h = d
        },
        managedSuspension: !0,
        _setMap: function(b, a) {
            this.inherited(arguments);
            var c = this._div = n.create("div", null, a),
                d = k._css.names,
                e = {
                    position: "absolute"
                },
                g = b.__visibleDelta;
            if (!m("ie") || 8 < m("ie")) e.opacity = this.opacity;
            "css-transforms" === b.navigationMode ? (e[d.transform] = k._css.translate(g.x, g.y), f.set(c, e), c._left = g.x, c._top = g.y, e = {
                    position: "absolute",
                    width: b.width + "px",
                    height: b.height + "px",
                    overflow: "visible"
                }, this._active = n.create("div", null, c), f.set(this._active, e),
                this._passive = n.create("div", null, c), f.set(this._passive, e)) : (c._left = 0, c._top = 0, f.set(c, e));
            this._standby = [];
            d = this._mapImages;
            g = d.length;
            for (e = 0; e < g; e++) {
                var q = d[e];
                q._node || this._createImage(q, q._idx)
            }
            s.hide(c);
            return c
        },
        _unsetMap: function(b, a) {
            this._disconnect();
            var c = this._div;
            if (c) {
                var d = this._mapImages,
                    e, g = d.length;
                for (e = 0; e < g; e++) {
                    var f = d[e];
                    if (f) {
                        var h = f._node;
                        h && (this._clearEvents(h), h.e_idx = h.e_bl = h.e_tr = h.e_l = h.e_t = h.e_w = h.e_h = null);
                        f._node = null
                    }
                }
                a.removeChild(c);
                n.destroy(c)
            }
            this._map =
                this._div = this._sr = this._active = this._passive = this._standby = null;
            this.inherited(arguments)
        },
        _onSuspend: function() {
            this._disconnect();
            s.hide(this._div)
        },
        _onResume: function(b) {
            b.firstOccurrence && (this._sr = this._map.spatialReference, this._processStandbyList());
            b = this._map;
            var a = this._div,
                c = b.__visibleDelta;
            "css-transforms" === b.navigationMode && (a._left = c.x, a._top = c.y, f.set(a, k._css.names.transform, k._css.translate(a._left, a._top)));
            this._redraw("css-transforms" === b.navigationMode);
            this._connect(b);
            s.show(a)
        },
        _connect: function(b) {
            if (!this._connections) {
                var a = l.connect,
                    c = "css-transforms" === b.navigationMode;
                this._connections = [a(b, "onPanStart", this._panStart), a(b, "onPan", this._pan), a(b, "onExtentChange", this._extentChange), c && a(b, "onZoomStart", this._zoomStart), c ? a(b, "onScale", this._scale) : a(b, "onZoom", this._zoom), c && a(b, "onResize", this._resize)]
            }
        },
        _disconnect: function() {
            this._connections && (w.forEach(this._connections, l.disconnect), this._connections = null)
        },
        _panStart: function() {
            this._panL = this._div._left;
            this._panT =
                this._div._top
        },
        _pan: function(b, a) {
            var c = this._div;
            c._left = this._panL + a.x;
            c._top = this._panT + a.y;
            "css-transforms" === this._map.navigationMode ? f.set(c, k._css.names.transform, k._css.translate(c._left, c._top)) : f.set(c, {
                left: c._left + "px",
                top: c._top + "px"
            })
        },
        _extentChange: function(b, a, c) {
            c ? this._redraw("css-transforms" === this._map.navigationMode) : a && this._pan(b, a);
            this._processStandbyList()
        },
        _processStandbyList: function() {
            var b, a = this._standby;
            if (a && a.length)
                for (b = a.length - 1; 0 <= b; b--) this._imageLoaded(null,
                    a[b]), a.splice(b, 1)
        },
        _redraw: function(b) {
            if (b) {
                b = this._passive;
                var a = k._css.names;
                f.set(b, a.transition, "none");
                this._moveImages(b, this._active);
                f.set(b, a.transform, "none")
            }
            b = this._active || this._div;
            var a = this._div._left,
                c = this._div._top,
                d, e = b.childNodes.length,
                g;
            for (d = 0; d < e; d++) g = b.childNodes[d], this._setPos(g, a, c)
        },
        _zoom: function(b, a, c) {
            b = this._div;
            var d = b._left,
                e = b._top,
                g, k = b.childNodes.length,
                h;
            for (g = 0; g < k; g++) {
                h = b.childNodes[g];
                var l = h.e_w * a,
                    n = h.e_h * a,
                    m = (c.x - d - h.e_l) * (l - h.e_w) / h.e_w,
                    p = (c.y - e -
                        h.e_t) * (n - h.e_h) / h.e_h,
                    m = isNaN(m) ? 0 : m,
                    p = isNaN(p) ? 0 : p;
                f.set(h, {
                    left: h.e_l - m + "px",
                    top: h.e_t - p + "px",
                    width: l + "px",
                    height: n + "px"
                })
            }
        },
        _zoomStart: function() {
            this._moveImages(this._active, this._passive)
        },
        _moveImages: function(b, a) {
            var c = b.childNodes,
                d;
            d = c.length;
            if (0 < d)
                for (d -= 1; 0 <= d; d--) a.appendChild(c[d])
        },
        _scale: function(b, a) {
            var c = k._css.names,
                d = this._passive;
            f.set(d, c.transition, a ? "none" : c.transformName + " " + x.defaults.map.zoomDuration + "ms ease");
            k._css.matrix(b);
            f.set(d, c.transform, k._css.matrix(b))
        },
        _resize: function(b, a, c) {
            f.set(this._active, {
                width: a + "px",
                height: c + "px"
            });
            f.set(this._passive, {
                width: a + "px",
                height: c + "px"
            })
        }
    });
    return r
});
},
'esri/layers/OpenStreetMapLayer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../urlUtils", "../SpatialReference", "../geometry/Extent", "./TiledMapServiceLayer", "./TileInfo"], function(c, h, k, l, d, e, b, f, g) {
    return c(f, {
        declaredClass: "esri.layers.OpenStreetMapLayer",
        constructor: function(a) {
            this.spatialReference = new e({
                wkid: 102100
            });
            this.tileInfo = new g({
                rows: 256,
                cols: 256,
                dpi: 96,
                format: "PNG8",
                compressionQuality: 0,
                origin: {
                    x: -2.0037508342787E7,
                    y: 2.0037508342787E7
                },
                spatialReference: {
                    wkid: 102100
                },
                lods: [{
                    level: 0,
                    scale: 5.91657527591555E8,
                    resolution: 156543.033928
                }, {
                    level: 1,
                    scale: 2.95828763795777E8,
                    resolution: 78271.5169639999
                }, {
                    level: 2,
                    scale: 1.47914381897889E8,
                    resolution: 39135.7584820001
                }, {
                    level: 3,
                    scale: 7.3957190948944E7,
                    resolution: 19567.8792409999
                }, {
                    level: 4,
                    scale: 3.6978595474472E7,
                    resolution: 9783.93962049996
                }, {
                    level: 5,
                    scale: 1.8489297737236E7,
                    resolution: 4891.96981024998
                }, {
                    level: 6,
                    scale: 9244648.868618,
                    resolution: 2445.98490512499
                }, {
                    level: 7,
                    scale: 4622324.434309,
                    resolution: 1222.99245256249
                }, {
                    level: 8,
                    scale: 2311162.217155,
                    resolution: 611.49622628138
                }, {
                    level: 9,
                    scale: 1155581.108577,
                    resolution: 305.748113140558
                }, {
                    level: 10,
                    scale: 577790.554289,
                    resolution: 152.874056570411
                }, {
                    level: 11,
                    scale: 288895.277144,
                    resolution: 76.4370282850732
                }, {
                    level: 12,
                    scale: 144447.638572,
                    resolution: 38.2185141425366
                }, {
                    level: 13,
                    scale: 72223.819286,
                    resolution: 19.1092570712683
                }, {
                    level: 14,
                    scale: 36111.909643,
                    resolution: 9.55462853563415
                }, {
                    level: 15,
                    scale: 18055.954822,
                    resolution: 4.77731426794937
                }, {
                    level: 16,
                    scale: 9027.977411,
                    resolution: 2.38865713397468
                }, {
                    level: 17,
                    scale: 4513.988705,
                    resolution: 1.19432856685505
                }, {
                    level: 18,
                    scale: 2256.994353,
                    resolution: 0.597164283559817
                }, {
                    level: 19,
                    scale: 1128.497176,
                    resolution: 0.298582141647617
                }]
            });
            this.fullExtent = new b({
                xmin: -2.003750834E7,
                ymin: -2.003750834E7,
                xmax: 2.003750834E7,
                ymax: 2.003750834E7,
                spatialReference: {
                    wkid: 102100
                }
            });
            this.initialExtent = new b({
                xmin: -2.003750834E7,
                ymin: -2.003750834E7,
                xmax: 2.003750834E7,
                ymax: 2.003750834E7,
                spatialReference: {
                    wkid: 102100
                }
            });
            this.tileServers = a && a.tileServers || ["http://a.tile.openstreetmap.org", "http://b.tile.openstreetmap.org", "http://c.tile.openstreetmap.org"];
            this.serversLength = this.tileServers.length;
            this._displayLevels = a ? a.displayLevels : null;
            this.copyright = a && a.copyright || "Map data \x26copy; OpenStreetMap contributors, CC-BY-SA";
            this.loaded = !0;
            this.onLoad(this);
            (a = a && a.loadCallback) && a(this)
        },
        getTileUrl: function(a, b, c) {
            a = this.tileServers[b % this.serversLength] + "/" + a + "/" + c + "/" + b + ".png";
            a = this.addTimestampToURL(a);
            return d.addProxy(a)
        }
    })
});
},
'esri/dijit/Popup':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/connect", "dojo/_base/kernel", "dojo/has", "dojo/window", "dojo/Stateful", "dojo/query", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-construct", "dojo/dom-geometry", "dojo/dom-style", "dijit/registry", "../kernel", "../lang", "../domUtils", "../geometry/Polyline", "../geometry/Polygon", "../InfoWindowBase", "../PopupBase", "dojo/i18n!../nls/jsapi", "dojo/NodeList-dom", "require", "require"], function(D, y, q, f, g, E, F, G, O, B, t, e, C, A, n, H, P, u, I, J, K, L, M, N) {
    return D([L, M, G], {
        declaredClass: "esri.dijit.Popup",
        offsetX: 3,
        offsetY: 3,
        zoomFactor: 4,
        marginLeft: 25,
        marginTop: 25,
        highlight: !0,
        pagingControls: !0,
        pagingInfo: !0,
        keepHighlightOnHide: !1,
        popupWindow: !0,
        titleInBody: !0,
        anchor: "auto",
        visibleWhenEmpty: !0,
        hideDelay: 1E3,
        location: null,
        constructor: function(a, c) {
            this.initialize();
            y.mixin(this, a);
            this.domNode = B.byId(c);
            var b = this._nls = y.mixin({}, N.widgets.popup),
                d = this.domNode;
            e.add(d, "esriPopup");
            (this._isRTL = !A.isBodyLtr()) && n.set(d, "direction", "rtl");
            t.set(d, "innerHTML", "\x3cdiv class\x3d'esriPopupWrapper' style\x3d'position: absolute;'\x3e\x3cdiv class\x3d'sizer'\x3e\x3cdiv class\x3d'titlePane'\x3e\x3cdiv class\x3d'spinner hidden' title\x3d'" +
                b.NLS_searching + "...'\x3e\x3c/div\x3e\x3cdiv class\x3d'title'\x3e\x3c/div\x3e\x3cdiv class\x3d'titleButton prev hidden' title\x3d'" + b.NLS_prevFeature + "'\x3e\x3c/div\x3e\x3cdiv class\x3d'titleButton next hidden' title\x3d'" + b.NLS_nextFeature + "'\x3e\x3c/div\x3e\x3cdiv class\x3d'titleButton maximize' title\x3d'" + b.NLS_maximize + "'\x3e\x3c/div\x3e\x3cdiv class\x3d'titleButton close' title\x3d'" + b.NLS_close + "'\x3e\x3c/div\x3e\x3c/div\x3e\x3c/div\x3e\x3cdiv class\x3d'sizer content'\x3e\x3cdiv class\x3d'contentPane'\x3e\x3c/div\x3e\x3c/div\x3e\x3cdiv class\x3d'sizer'\x3e\x3cdiv class\x3d'actionsPane'\x3e\x3cdiv class\x3d'actionList hidden'\x3e\x3ca title\x3d" +
                b.NLS_zoomTo + " class\x3d'action zoomTo' href\x3d'javascript:void(0);'\x3e\x3cspan\x3e" + b.NLS_zoomTo + "\x3c/span\x3e\x3c/a\x3e\x3c/div\x3e\x3c/div\x3e\x3c/div\x3e\x3cdiv class\x3d'pointer hidden'\x3e\x3c/div\x3e\x3c/div\x3e\x3cdiv class\x3d'outerPointer hidden'\x3e\x3c/div\x3e");
            this._sizers = g.query(".sizer", d);
            b = g.query(".titlePane", d)[0];
            B.setSelectable(b, !1);
            this._title = g.query(".title", b)[0];
            this._prevFeatureButton = g.query(".prev", b)[0];
            this._nextFeatureButton = g.query(".next", b)[0];
            this._maxButton =
                g.query(".maximize", b)[0];
            this._spinner = g.query(".spinner", b)[0];
            this._contentPane = g.query(".contentPane", d)[0];
            this._positioner = g.query(".esriPopupWrapper", d)[0];
            this._pointer = g.query(".pointer", d)[0];
            this._outerPointer = g.query(".outerPointer", d)[0];
            this._actionList = g.query(".actionsPane .actionList", d)[0];
            this._eventConnections = [f.connect(g.query(".close", b)[0], "onclick", this, this.hide), f.connect(this._prevFeatureButton, "onclick", this, this.selectPrevious), f.connect(this._nextFeatureButton, "onclick",
                this, this.selectNext), f.connect(this._maxButton, "onclick", this, this._toggleSize), f.connect(g.query(".zoomTo", this._actionList)[0], "onclick", this, this._zoomToFeature), f.connect(this, "onClearFeatures", this, this._featuresCleared), f.connect(this, "onSelectionChange", this, this._featureSelected), f.connect(this, "onDfdComplete", this, this._updateUI)];
            E("esri-touch") && (d = I.setScrollable(this._contentPane), this._eventConnections.push(d[0], d[1]));
            this._toggleVisibility(!1)
        },
        onMaximize: function() {},
        onRestore: function() {},
        setMap: function(a) {
            this.inherited(arguments);
            C.place(this.domNode, a.root);
            this.highlight && this.enableHighlight(a);
            this._maxHeight = n.get(this._contentPane, "maxHeight")
        },
        unsetMap: function() {
            this.disableHighlight(this.map);
            this.inherited(arguments)
        },
        setTitle: function(a) {
            if (this.popupWindow) {
                if (!u.isDefined(a) || "" === a) a = "\x26nbsp;";
                this.destroyDijits(this._title);
                this.place(a, this._title);
                this.isShowing && (this.startupDijits(this._title), this.reposition())
            }
        },
        setContent: function(a) {
            if (this.popupWindow) {
                if (!u.isDefined(a) ||
                    "" === a) a = "\x26nbsp;";
                this.destroyDijits(this._contentPane);
                this.place(a, this._contentPane);
                this.isShowing && (this.startupDijits(this._contentPane), this.reposition())
            }
        },
        show: function(a, c) {
            if (this.popupWindow)
                if (this._delayHide = !1, a) {
                    var b = this.map,
                        d;
                    a.spatialReference ? (this.location = a, d = b.toScreen(a)) : (this.location = b.toMap(a), d = a);
                    var p = b._getFrameWidth();
                    if (-1 !== p && (d.x %= p, 0 > d.x && (d.x += p), b.width > p))
                        for (b = (b.width - p) / 2; d.x < b;) d.x += p;
                    this._maximized ? this.restore() : this._setPosition(d);
                    c && c.closestFirst &&
                        this.showClosestFirst(this.location);
                    this.isShowing || (this._toggleVisibility(!0), this._followMap(), this.startupDijits(this._title), this.startupDijits(this._contentPane), this.reposition(), this.showHighlight(), this.onShow())
                } else this._toggleVisibility(!0)
        },
        hide: function() {
            this.isShowing && (this._toggleVisibility(!1), this._unfollowMap(), this.keepHighlightOnHide || this.hideHighlight(), this.onHide())
        },
        resize: function(a, c) {
            this.popupWindow && (this._sizers.style({
                width: a + "px"
            }), n.set(this._contentPane, "maxHeight",
                c + "px"), this._maxHeight = c, this.isShowing && this.reposition())
        },
        reposition: function() {
            this.popupWindow && this.map && (this.location && !this._maximized && this.isShowing) && this._setPosition(this.map.toScreen(this.location))
        },
        maximize: function() {
            var a = this.map;
            if (a && !this._maximized && this.popupWindow) {
                this._maximized = !0;
                var c = this._maxButton;
                e.remove(c, "maximize");
                e.add(c, "restore");
                t.set(c, "title", this._nls.NLS_restore);
                var c = this.marginLeft,
                    b = this.marginTop,
                    d = a.width - 2 * c,
                    a = a.height - 2 * b;
                n.set(this.domNode, {
                    left: this._isRTL ? null : c + "px",
                    right: this._isRTL ? c + "px" : null,
                    top: b + "px",
                    bottom: null
                });
                n.set(this._positioner, {
                    left: null,
                    right: null,
                    top: null,
                    bottom: null
                });
                this._savedWidth = n.get(this._sizers[0], "width");
                this._savedHeight = n.get(this._contentPane, "maxHeight");
                this._sizers.style({
                    width: d + "px"
                });
                n.set(this._contentPane, {
                    maxHeight: a - 65 + "px",
                    height: a - 65 + "px"
                });
                this._showPointer("");
                this._unfollowMap();
                e.add(this.domNode, "esriPopupMaximized");
                this.onMaximize()
            }
        },
        restore: function() {
            if (this.map && this._maximized &&
                this.popupWindow) {
                this._maximized = !1;
                var a = this._maxButton;
                e.remove(a, "restore");
                e.add(a, "maximize");
                t.set(a, "title", this._nls.NLS_maximize);
                n.set(this._contentPane, "height", null);
                this.resize(this._savedWidth, this._savedHeight);
                this._savedWidth = this._savedHeight = null;
                this.show(this.location);
                this._followMap();
                e.remove(this.domNode, "esriPopupMaximized");
                this.onRestore()
            }
        },
        startup: function() {},
        destroy: function() {
            this.map && this.unsetMap();
            this.cleanup();
            this.isShowing && this.hide();
            this.destroyDijits(this._title);
            this.destroyDijits(this._content);
            q.forEach(this._eventConnections, f.disconnect);
            C.destroy(this.domNode);
            this._sizers = this._contentPane = this._actionList = this._positioner = this._pointer = this._outerPointer = this._title = this._prevFeatureButton = this._nextFeatureButton = this._spinner = this._eventConnections = this._pagerScope = this._targetLocation = this._nls = this._maxButton = null
        },
        selectNext: function() {
            this.select(this.selectedIndex + 1)
        },
        selectPrevious: function() {
            this.select(this.selectedIndex - 1)
        },
        setFeatures: function() {
            this.inherited(arguments);
            this._updateUI()
        },
        postscript: null,
        _highlightSetter: function(a) {
            var c = this.highlight,
                b = this.map;
            this.highlight = a;
            if (b && a !== c)
                if (a) {
                    if (this.enableHighlight(b), a = this.features && this.features[this.selectedIndex]) this.updateHighlight(b, a), this.showHighlight()
                } else this.disableHighlight(b)
        },
        _pagingControlsSetter: function(a) {
            var c = this.pagingControls,
                b = this.map;
            this.pagingControls = a;
            b && a !== c && this._updatePagingControls()
        },
        _pagingInfoSetter: function(a) {
            var c = this.pagingInfo,
                b = this.map;
            this.pagingInfo = a;
            b &&
                (a !== c && this.features && this.features.length) && this._updatePagingInfo()
        },
        _popupWindowSetter: function(a) {
            var c = this.popupWindow,
                b = this.map;
            this.popupWindow = a;
            b && a !== c && (a ? (this._updateUI(), this._updateWindow()) : (this.hide(), this.showHighlight()))
        },
        _anchorSetter: function(a) {
            var c = this.anchor;
            this.anchor = a;
            this.map && a !== c && this.reposition()
        },
        _featuresCleared: function() {
            this.setTitle("\x26nbsp;");
            this.setContent("\x26nbsp;");
            this._setPagerCallbacks(this);
            this._updateUI();
            this.hideHighlight()
        },
        _featureSelected: function() {
            this._updateUI();
            this._updateWindow()
        },
        _updateWindow: function() {
            var a = this.selectedIndex;
            if (0 <= a) {
                var c = this.features[a].getContent(),
                    b;
                !this.titleInBody && c && y.isString(c.id) && (b = H.byId(c.id)) && (b.set && /_PopupRenderer/.test(b.declaredClass)) && b.set("showTitle", !1);
                this.setContent(c);
                this.updateHighlight(this.map, this.features[a]);
                this.showHighlight()
            }
        },
        _toggleVisibility: function(a) {
            this._setVisibility(a);
            this.isShowing = a
        },
        _setVisibility: function(a) {
            n.set(this.domNode, "visibility", a ? "visible" : "hidden");
            e.toggle(this.domNode,
                "esriPopupVisible", a)
        },
        _waitAndHide: function(a) {
            var c = this;
            this._delayHide = !0;
            setTimeout(function() {
                c._delayHide && (c._delayHide = !1, c.hide())
            }, a)
        },
        _followMap: function() {
            this._unfollowMap();
            var a = this.map;
            this._handles = [f.connect(a, "onPanStart", this, this._onPanStart), f.connect(a, "onPan", this, this._onPan), f.connect(a, "onZoomStart", this, this._onZoomStart), f.connect(a, "onExtentChange", this, this._onExtentChange)]
        },
        _unfollowMap: function() {
            var a = this._handles;
            a && (q.forEach(a, f.disconnect), this._handles = null)
        },
        _onPanStart: function() {
            var a = this.domNode.style;
            this._panOrigin = {
                left: a.left,
                top: a.top,
                right: a.right,
                bottom: a.bottom
            }
        },
        _onPan: function(a, c) {
            var b = this._panOrigin,
                d = c.x,
                p = c.y,
                e = b.left,
                h = b.top,
                r = b.right,
                b = b.bottom;
            e && (e = parseFloat(e) + d + "px");
            h && (h = parseFloat(h) + p + "px");
            r && (r = parseFloat(r) - d + "px");
            b && (b = parseFloat(b) - p + "px");
            n.set(this.domNode, {
                left: e,
                top: h,
                right: r,
                bottom: b
            })
        },
        _onZoomStart: function() {
            this._setVisibility(!1)
        },
        _onExtentChange: function(a, c, b) {
            b && (this._setVisibility(!0), this.show(this._targetLocation ||
                this.location));
            this._targetLocation = null
        },
        _toggleSize: function() {
            this._maximized ? this.restore() : this.maximize()
        },
        _setPosition: function(a) {
            var c = a.x,
                b = a.y;
            a = this.offsetX || 0;
            var d = this.offsetY || 0,
                e = 0,
                f = 0,
                h = A.position(this.map.container, !0),
                r = h.w,
                g = h.h,
                l = "Left",
                m = "bottom",
                s = A.getContentBox(this._positioner),
                q = s.w / 2,
                y = s.h / 2,
                v = n.get(this._sizers[0], "height") + this._maxHeight + n.get(this._sizers[2], "height"),
                z = v / 2,
                t = 0,
                u = 0,
                w = c,
                x = b,
                k = this.anchor.toLowerCase();
            if ("auto" === k) {
                if (k = F.getBox) k = k(), t = Math.max(k.l,
                    h.x), r = Math.min(k.l + k.w, h.x + h.w), u = Math.max(k.t, h.y), g = Math.min(k.t + k.h, h.y + h.h), w += h.x, x += h.y;
                h = x - u >= v;
                v = g - x >= v;
                k = r - w >= s.w;
                s = w - t >= s.w;
                x - u > z && g - x >= z && (k ? (m = "", l = "Left") : s && (m = "", l = "Right"));
                l && m && (w - t > q && r - w >= q) && (h ? (l = "", m = "bottom") : v && (l = "", m = "top"));
                l && m && (k && h ? (l = "Left", m = "bottom") : k && v ? (l = "Left", m = "top") : s && v ? (l = "Right", m = "top") : s && h && (l = "Right", m = "bottom"))
            } else m = l = "", -1 !== k.indexOf("top") ? m = "bottom" : -1 !== k.indexOf("bottom") && (m = "top"), -1 !== k.indexOf("left") ? l = "Right" : -1 !== k.indexOf("right") &&
                (l = "Left");
            z = m + l;
            switch (z) {
                case "top":
                case "bottom":
                    f = 14;
                    break;
                case "Left":
                case "Right":
                    e = 13;
                    break;
                case "topLeft":
                case "topRight":
                case "bottomLeft":
                case "bottomRight":
                    f = 14, e = -16
            }
            n.set(this.domNode, {
                left: c + "px",
                top: b + "px",
                right: null,
                bottom: null
            });
            c = {
                left: null,
                right: null,
                top: null,
                bottom: null
            };
            l ? c[l.toLowerCase()] = e + a + "px" : c.left = -q + "px";
            m ? c[m] = f + d + "px" : c.top = -y + "px";
            n.set(this._positioner, c);
            this._showPointer(z)
        },
        _showPointer: function(a) {
            e.remove(this._pointer, "top bottom right left topLeft topRight bottomRight bottomLeft hidden".split(" "));
            e.remove(this._outerPointer, ["right", "left", "hidden"]);
            "Right" === a || "Left" === a ? (a = a.toLowerCase(), e.add(this._outerPointer, a)) : e.add(this._pointer, a)
        },
        _setPagerCallbacks: function(a, c, b) {
            if (this.pagingControls && !(a === this && (!this._pagerScope || this._pagerScope === this)) && a !== this._pagerScope) {
                this._pagerScope = a;
                a === this && (c = this.selectPrevious, b = this.selectNext);
                var d = this._eventConnections;
                f.disconnect(d[1]);
                f.disconnect(d[2]);
                c && (d[1] = f.connect(this._prevFeatureButton, "onclick", a, c));
                b && (d[2] = f.connect(this._nextFeatureButton,
                    "onclick", a, b))
            }
        },
        _getLocation: function(a) {
            var c = this.map,
                b, d, e = 0,
                f;
            if (a = a && a.geometry) switch (a.type) {
                case "point":
                    b = a;
                    break;
                case "multipoint":
                    b = a.getPoint(0);
                    d = a.getExtent();
                    break;
                case "polyline":
                    b = a.getPoint(0, 0);
                    d = a.getExtent(); - 1 !== c._getFrameWidth() && (q.forEach(a.paths, function(a) {
                        a = (new J({
                            paths: [a, c.spatialReference]
                        })).getExtent();
                        var b = Math.abs(a.ymax - a.ymin),
                            d = Math.abs(a.xmax - a.xmin),
                            b = d > b ? d : b;
                        b > e && (e = b, f = a)
                    }), f.spatialReference = d.spatialReference, d = f);
                    break;
                case "polygon":
                    b = a.getPoint(0,
                        0), d = a.getExtent(), -1 !== c._getFrameWidth() && (q.forEach(a.rings, function(a) {
                        a = (new K({
                            rings: [a, c.spatialReference]
                        })).getExtent();
                        var b = Math.abs(a.ymax - a.ymin),
                            d = Math.abs(a.xmax - a.xmin),
                            b = d > b ? d : b;
                        b > e && (e = b, f = a)
                    }), f.spatialReference = d.spatialReference, d = f)
            }
            return [b, d]
        },
        _zoomToFeature: function(a) {
            a.preventDefault();
            var c = this.features,
                b = this.selectedIndex;
            a = this.map;
            if (c) {
                b = this._getLocation(c[b]);
                c = b[0];
                b = b[1];
                c || (c = this.location);
                if (!b || !b.intersects(this.location)) this.location = c;
                if (b && b.getWidth() &&
                    b.getHeight()) a.setExtent(b, !0);
                else {
                    var d = a.getNumLevels(),
                        b = a.getLevel(),
                        e = a.getMaxZoom(),
                        f = this.zoomFactor || 1;
                    0 < d ? b !== e && (d = b + f, d > e && (d = e), a.navigationManager._wheelZoom({
                        value: d - b,
                        mapPoint: c
                    }, !0)) : a.navigationManager._wheelZoom({
                        value: 2 * (1 / Math.pow(2, f)),
                        mapPoint: c
                    }, !0)
                }
            }
        },
        _updatePagingControls: function() {
            var a = this._prevFeatureButton,
                c = this._nextFeatureButton,
                b = this.selectedIndex,
                d = this.features ? this.features.length : 0;
            this.pagingControls && 1 < d ? (0 === b ? e.add(a, "hidden") : e.remove(a, "hidden"), b ===
                d - 1 ? e.add(c, "hidden") : e.remove(c, "hidden")) : (e.add(a, "hidden"), e.add(c, "hidden"))
        },
        _updatePagingInfo: function() {
            var a = this.features ? this.features.length : 0,
                c = this._nls,
                b = "\x26nbsp;";
            this.pagingInfo && (1 < a && c.NLS_pagingInfo) && (b = u.substitute({
                index: this.selectedIndex + 1,
                total: a
            }, c.NLS_pagingInfo));
            if (a && (c = this.getSelectedFeature(), a = c.getInfoTemplate(), c = c.getTitle(), (!a || /esri\.InfoTemplate/.test(a.declaredClass) || !this.titleInBody) && c)) b = c + ("\x26nbsp;" === b ? "" : " " + b);
            this.setTitle(b)
        },
        _updateUI: function() {
            if (this.popupWindow) {
                var a =
                    this.features,
                    c = this.deferreds,
                    b = a ? a.length : 0,
                    d = this._spinner,
                    f = this._actionList,
                    g = this._nls;
                this._updatePagingControls();
                this._updatePagingInfo();
                b ? e.remove(f, "hidden") : e.add(f, "hidden");
                c && c.length ? a ? e.remove(d, "hidden") : this.setContent("\x3cdiv style\x3d'text-align: center;'\x3e" + g.NLS_searching + "...\x3c/div\x3e") : (e.add(d, "hidden"), b || (this.setContent("\x3cdiv style\x3d'text-align: center;'\x3e" + g.NLS_noInfo + ".\x3c/div\x3e"), this.visibleWhenEmpty || this._waitAndHide(this.hideDelay)))
            }
        }
    })
});
},
'dojo/window':function(){
define(["./_base/lang", "./sniff", "./_base/window", "./dom", "./dom-geometry", "./dom-style", "./dom-construct"],
	function(lang, has, baseWindow, dom, geom, style, domConstruct){

	// feature detection
	/* not needed but included here for future reference
	has.add("rtl-innerVerticalScrollBar-on-left", function(win, doc){
		var	body = baseWindow.body(doc),
			scrollable = domConstruct.create('div', {
				style: {overflow:'scroll', overflowX:'hidden', direction:'rtl', visibility:'hidden', position:'absolute', left:'0', width:'64px', height:'64px'}
			}, body, "last"),
			center = domConstruct.create('center', {
				style: {overflow:'hidden', direction:'ltr'}
			}, scrollable, "last"),
			inner = domConstruct.create('div', {
				style: {overflow:'visible', display:'inline' }
			}, center, "last");
		inner.innerHTML="&nbsp;";
		var midPoint = Math.max(inner.offsetLeft, geom.position(inner).x);
		var ret = midPoint >= 32;
		center.removeChild(inner);
		scrollable.removeChild(center);
		body.removeChild(scrollable);
		return ret;
	});
	*/
	has.add("rtl-adjust-position-for-verticalScrollBar", function(win, doc){
		var	body = baseWindow.body(doc),
			scrollable = domConstruct.create('div', {
				style: {overflow:'scroll', overflowX:'visible', direction:'rtl', visibility:'hidden', position:'absolute', left:'0', top:'0', width:'64px', height:'64px'}
			}, body, "last"),
			div = domConstruct.create('div', {
				style: {overflow:'hidden', direction:'ltr'}
			}, scrollable, "last"),
			ret = geom.position(div).x != 0;
		scrollable.removeChild(div);
		body.removeChild(scrollable);
		return ret;
	});

	has.add("position-fixed-support", function(win, doc){
		// IE6, IE7+quirks, and some older mobile browsers don't support position:fixed
		var	body = baseWindow.body(doc),
			outer = domConstruct.create('span', {
				style: {visibility:'hidden', position:'fixed', left:'1px', top:'1px'}
			}, body, "last"),
			inner = domConstruct.create('span', {
				style: {position:'fixed', left:'0', top:'0'}
			}, outer, "last"),
			ret = geom.position(inner).x != geom.position(outer).x;
		outer.removeChild(inner);
		body.removeChild(outer);
		return ret;
	});

	// module:
	//		dojo/window

	var window = {
		// summary:
		//		TODOC

		getBox: function(/*Document?*/ doc){
			// summary:
			//		Returns the dimensions and scroll position of the viewable area of a browser window

			doc = doc || baseWindow.doc;

			var
				scrollRoot = (doc.compatMode == 'BackCompat') ? baseWindow.body(doc) : doc.documentElement,
				// get scroll position
				scroll = geom.docScroll(doc), // scrollRoot.scrollTop/Left should work
				w, h;

			if(has("touch")){ // if(scrollbars not supported)
				var uiWindow = window.get(doc);   // use UI window, not dojo.global window
				// on mobile, scrollRoot.clientHeight <= uiWindow.innerHeight <= scrollRoot.offsetHeight, return uiWindow.innerHeight
				w = uiWindow.innerWidth || scrollRoot.clientWidth; // || scrollRoot.clientXXX probably never evaluated
				h = uiWindow.innerHeight || scrollRoot.clientHeight;
			}else{
				// on desktops, scrollRoot.clientHeight <= scrollRoot.offsetHeight <= uiWindow.innerHeight, return scrollRoot.clientHeight
				// uiWindow.innerWidth/Height includes the scrollbar and cannot be used
				w = scrollRoot.clientWidth;
				h = scrollRoot.clientHeight;
			}
			return {
				l: scroll.x,
				t: scroll.y,
				w: w,
				h: h
			};
		},

		get: function(/*Document*/ doc){
			// summary:
			//		Get window object associated with document doc.
			// doc:
			//		The document to get the associated window for.

			// In some IE versions (at least 6.0), document.parentWindow does not return a
			// reference to the real window object (maybe a copy), so we must fix it as well
			// We use IE specific execScript to attach the real window reference to
			// document._parentWindow for later use
			if(has("ie") && window !== document.parentWindow){
				/*
				In IE 6, only the variable "window" can be used to connect events (others
				may be only copies).
				*/
				doc.parentWindow.execScript("document._parentWindow = window;", "Javascript");
				//to prevent memory leak, unset it after use
				//another possibility is to add an onUnload handler which seems overkill to me (liucougar)
				var win = doc._parentWindow;
				doc._parentWindow = null;
				return win;	//	Window
			}

			return doc.parentWindow || doc.defaultView;	//	Window
		},

		scrollIntoView: function(/*DomNode*/ node, /*Object?*/ pos){
			// summary:
			//		Scroll the passed node into view using minimal movement, if it is not already.

			// Don't rely on node.scrollIntoView working just because the function is there since
			// it forces the node to the page's bottom or top (and left or right in IE) without consideration for the minimal movement.
			// WebKit's node.scrollIntoViewIfNeeded doesn't work either for inner scrollbars in right-to-left mode
			// and when there's a fixed position scrollable element

			try{ // catch unexpected/unrecreatable errors (#7808) since we can recover using a semi-acceptable native method
				node = dom.byId(node);
				var	doc = node.ownerDocument || baseWindow.doc,	// TODO: why baseWindow.doc?  Isn't node.ownerDocument always defined?
					body = baseWindow.body(doc),
					html = doc.documentElement || body.parentNode,
					isIE = has("ie"),
					isWK = has("webkit");
				// if an untested browser, then use the native method
				if(node == body || node == html){ return; }
				if(!(has("mozilla") || isIE || isWK || has("opera") || has("trident")) && ("scrollIntoView" in node)){
					node.scrollIntoView(false); // short-circuit to native if possible
					return;
				}
				var	backCompat = doc.compatMode == 'BackCompat',
					rootWidth = Math.min(body.clientWidth || html.clientWidth, html.clientWidth || body.clientWidth),
					rootHeight = Math.min(body.clientHeight || html.clientHeight, html.clientHeight || body.clientHeight),
					scrollRoot = (isWK || backCompat) ? body : html,
					nodePos = pos || geom.position(node),
					el = node.parentNode,
					isFixed = function(el){
						return (isIE <= 6 || (isIE == 7 && backCompat))
							? false
							: (has("position-fixed-support") && (style.get(el, 'position').toLowerCase() == "fixed"));
					},
					self = this,
					scrollElementBy = function(el, x, y){
						if(el.tagName == "BODY" || el.tagName == "HTML"){
							self.get(el.ownerDocument).scrollBy(x, y);
						}else{
							x && (el.scrollLeft += x);
							y && (el.scrollTop += y);
						}
					};
				if(isFixed(node)){ return; } // nothing to do
				while(el){
					if(el == body){ el = scrollRoot; }
					var	elPos = geom.position(el),
						fixedPos = isFixed(el),
						rtl = style.getComputedStyle(el).direction.toLowerCase() == "rtl";

					if(el == scrollRoot){
						elPos.w = rootWidth; elPos.h = rootHeight;
						if(scrollRoot == html && (isIE || has("trident")) && rtl){ elPos.x += scrollRoot.offsetWidth-elPos.w; } // IE workaround where scrollbar causes negative x
						if(elPos.x < 0 || !isIE || isIE >= 9 || has("trident")){ elPos.x = 0; } // older IE can have values > 0
						if(elPos.y < 0 || !isIE || isIE >= 9 || has("trident")){ elPos.y = 0; }
					}else{
						var pb = geom.getPadBorderExtents(el);
						elPos.w -= pb.w; elPos.h -= pb.h; elPos.x += pb.l; elPos.y += pb.t;
						var clientSize = el.clientWidth,
							scrollBarSize = elPos.w - clientSize;
						if(clientSize > 0 && scrollBarSize > 0){
							if(rtl && has("rtl-adjust-position-for-verticalScrollBar")){
								elPos.x += scrollBarSize;
							}
							elPos.w = clientSize;
						}
						clientSize = el.clientHeight;
						scrollBarSize = elPos.h - clientSize;
						if(clientSize > 0 && scrollBarSize > 0){
							elPos.h = clientSize;
						}
					}
					if(fixedPos){ // bounded by viewport, not parents
						if(elPos.y < 0){
							elPos.h += elPos.y; elPos.y = 0;
						}
						if(elPos.x < 0){
							elPos.w += elPos.x; elPos.x = 0;
						}
						if(elPos.y + elPos.h > rootHeight){
							elPos.h = rootHeight - elPos.y;
						}
						if(elPos.x + elPos.w > rootWidth){
							elPos.w = rootWidth - elPos.x;
						}
					}
					// calculate overflow in all 4 directions
					var	l = nodePos.x - elPos.x, // beyond left: < 0
//						t = nodePos.y - Math.max(elPos.y, 0), // beyond top: < 0
						t = nodePos.y - elPos.y, // beyond top: < 0
						r = l + nodePos.w - elPos.w, // beyond right: > 0
						bot = t + nodePos.h - elPos.h; // beyond bottom: > 0
					var s, old;
					if(r * l > 0 && (!!el.scrollLeft || el == scrollRoot || el.scrollWidth > el.offsetHeight)){
						s = Math[l < 0? "max" : "min"](l, r);
						if(rtl && ((isIE == 8 && !backCompat) || isIE >= 9 || has("trident"))){ s = -s; }
						old = el.scrollLeft;
						scrollElementBy(el, s, 0);
						s = el.scrollLeft - old;
						nodePos.x -= s;
					}
					if(bot * t > 0 && (!!el.scrollTop || el == scrollRoot || el.scrollHeight > el.offsetHeight)){
						s = Math.ceil(Math[t < 0? "max" : "min"](t, bot));
						old = el.scrollTop;
						scrollElementBy(el, 0, s);
						s = el.scrollTop - old;
						nodePos.y -= s;
					}
					el = (el != scrollRoot) && !fixedPos && el.parentNode;
				}
			}catch(error){
				console.error('scrollIntoView: ' + error);
				node.scrollIntoView(false);
			}
		}
	};

	 1  && lang.setObject("dojo.window", window);

	return window;
});

},
'dojo/Stateful':function(){
define(["./_base/declare", "./_base/lang", "./_base/array", "./when"], function(declare, lang, array, when){
	// module:
	//		dojo/Stateful

return declare("dojo.Stateful", null, {
	// summary:
	//		Base class for objects that provide named properties with optional getter/setter
	//		control and the ability to watch for property changes
	//
	//		The class also provides the functionality to auto-magically manage getters
	//		and setters for object attributes/properties.
	//		
	//		Getters and Setters should follow the format of _xxxGetter or _xxxSetter where 
	//		the xxx is a name of the attribute to handle.  So an attribute of "foo" 
	//		would have a custom getter of _fooGetter and a custom setter of _fooSetter.
	//
	// example:
	//	|	require(["dojo/Stateful", function(Stateful) {
	//	|		var obj = new Stateful();
	//	|		obj.watch("foo", function(){
	//	|			console.log("foo changed to " + this.get("foo"));
	//	|		});
	//	|		obj.set("foo","bar");
	//	|	});

	// _attrPairNames: Hash
	//		Used across all instances a hash to cache attribute names and their getter 
	//		and setter names.
	_attrPairNames: {},

	_getAttrNames: function(name){
		// summary:
		//		Helper function for get() and set().
		//		Caches attribute name values so we don't do the string ops every time.
		// tags:
		//		private

		var apn = this._attrPairNames;
		if(apn[name]){ return apn[name]; }
		return (apn[name] = {
			s: "_" + name + "Setter",
			g: "_" + name + "Getter"
		});
	},

	postscript: function(/*Object?*/ params){
		// Automatic setting of params during construction
		if (params){ this.set(params); }
	},

	_get: function(name, names){
		// summary:
		//		Private function that does a get based off a hash of names
		// names:
		//		Hash of names of custom attributes
		return typeof this[names.g] === "function" ? this[names.g]() : this[name];
	},
	get: function(/*String*/name){
		// summary:
		//		Get a property on a Stateful instance.
		// name:
		//		The property to get.
		// returns:
		//		The property value on this Stateful instance.
		// description:
		//		Get a named property on a Stateful object. The property may
		//		potentially be retrieved via a getter method in subclasses. In the base class
		//		this just retrieves the object's property.
		// example:
		//	|	require(["dojo/Stateful", function(Stateful) {
		//	|		var stateful = new Stateful({foo: 3});
		//	|		stateful.get("foo") // returns 3
		//	|		stateful.foo // returns 3
		//	|	});

		return this._get(name, this._getAttrNames(name)); //Any
	},
	set: function(/*String*/name, /*Object*/value){
		// summary:
		//		Set a property on a Stateful instance
		// name:
		//		The property to set.
		// value:
		//		The value to set in the property.
		// returns:
		//		The function returns this dojo.Stateful instance.
		// description:
		//		Sets named properties on a stateful object and notifies any watchers of
		//		the property. A programmatic setter may be defined in subclasses.
		// example:
		//	|	require(["dojo/Stateful", function(Stateful) {
		//	|		var stateful = new Stateful();
		//	|		stateful.watch(function(name, oldValue, value){
		//	|			// this will be called on the set below
		//	|		}
		//	|		stateful.set(foo, 5);
		//	set() may also be called with a hash of name/value pairs, ex:
		//	|		stateful.set({
		//	|			foo: "Howdy",
		//	|			bar: 3
		//	|		});
		//	|	});
		//	This is equivalent to calling set(foo, "Howdy") and set(bar, 3)

		// If an object is used, iterate through object
		if(typeof name === "object"){
			for(var x in name){
				if(name.hasOwnProperty(x) && x !="_watchCallbacks"){
					this.set(x, name[x]);
				}
			}
			return this;
		}

		var names = this._getAttrNames(name),
			oldValue = this._get(name, names),
			setter = this[names.s],
			result;
		if(typeof setter === "function"){
			// use the explicit setter
			result = setter.apply(this, Array.prototype.slice.call(arguments, 1));
		}else{
			// no setter so set attribute directly
			this[name] = value;
		}
		if(this._watchCallbacks){
			var self = this;
			// If setter returned a promise, wait for it to complete, otherwise call watches immediately
			when(result, function(){
				self._watchCallbacks(name, oldValue, value);
			});
		}
		return this; // dojo/Stateful
	},
	_changeAttrValue: function(name, value){
		// summary:
		//		Internal helper for directly changing an attribute value.
		//
		// name: String
		//		The property to set.
		// value: Mixed
		//		The value to set in the property.
		//
		// description:
		//		Directly change the value of an attribute on an object, bypassing any 
		//		accessor setter.  Also handles the calling of watch and emitting events. 
		//		It is designed to be used by descendant class when there are two values 
		//		of attributes that are linked, but calling .set() is not appropriate.

		var oldValue = this.get(name);
		this[name] = value;
		if(this._watchCallbacks){
			this._watchCallbacks(name, oldValue, value);
		}
		return this; // dojo/Stateful
	},
	watch: function(/*String?*/name, /*Function*/callback){
		// summary:
		//		Watches a property for changes
		// name:
		//		Indicates the property to watch. This is optional (the callback may be the
		//		only parameter), and if omitted, all the properties will be watched
		// returns:
		//		An object handle for the watch. The unwatch method of this object
		//		can be used to discontinue watching this property:
		//		|	var watchHandle = obj.watch("foo", callback);
		//		|	watchHandle.unwatch(); // callback won't be called now
		// callback:
		//		The function to execute when the property changes. This will be called after
		//		the property has been changed. The callback will be called with the |this|
		//		set to the instance, the first argument as the name of the property, the
		//		second argument as the old value and the third argument as the new value.

		var callbacks = this._watchCallbacks;
		if(!callbacks){
			var self = this;
			callbacks = this._watchCallbacks = function(name, oldValue, value, ignoreCatchall){
				var notify = function(propertyCallbacks){
					if(propertyCallbacks){
						propertyCallbacks = propertyCallbacks.slice();
						for(var i = 0, l = propertyCallbacks.length; i < l; i++){
							propertyCallbacks[i].call(self, name, oldValue, value);
						}
					}
				};
				notify(callbacks['_' + name]);
				if(!ignoreCatchall){
					notify(callbacks["*"]); // the catch-all
				}
			}; // we use a function instead of an object so it will be ignored by JSON conversion
		}
		if(!callback && typeof name === "function"){
			callback = name;
			name = "*";
		}else{
			// prepend with dash to prevent name conflicts with function (like "name" property)
			name = '_' + name;
		}
		var propertyCallbacks = callbacks[name];
		if(typeof propertyCallbacks !== "object"){
			propertyCallbacks = callbacks[name] = [];
		}
		propertyCallbacks.push(callback);

		// TODO: Remove unwatch in 2.0
		var handle = {};
		handle.unwatch = handle.remove = function(){
			var index = array.indexOf(propertyCallbacks, callback);
			if(index > -1){
				propertyCallbacks.splice(index, 1);
			}
		};
		return handle; //Object
	}

});

});

},
'esri/InfoWindowBase':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/connect", "dojo/_base/Deferred", "dojo/dom-construct", "dojo/has", "dijit/registry", "./kernel", "./lang", "./geometry/ScreenPoint"], function(l, f, g, e, m, n, q, h, r, k, p) {
    return l(null, {
        declaredClass: "esri.InfoWindowBase",
        constructor: function() {
            var a = f.hitch;
            this.__set_title = a(this, this.__set_title);
            this.__err_title = a(this, this.__err_title);
            this.__set_content = a(this, this.__set_content);
            this.__err_content = a(this, this.__err_content)
        },
        setMap: function(a) {
            this.map =
                a
        },
        unsetMap: function(a) {
            delete this.map
        },
        setTitle: function() {},
        setContent: function() {},
        show: function() {},
        hide: function() {},
        resize: function() {},
        onShow: function() {},
        onHide: function() {},
        place: function(a, b) {
            k.isDefined(a) ? f.isObject(a) ? n.place(a, b, "only") : b.innerHTML = a : b.innerHTML = ""
        },
        startupDijits: function(a) {
            this._processDijits(a)
        },
        destroyDijits: function(a) {
            this._processDijits(a, !0)
        },
        _processDijits: function(a, b) {
            if (a && 1 === a.children.length) {
                var c = a.children[0];
                if (c) {
                    var d = h.byNode(c),
                        c = d ? [d] : h.findWidgets(c);
                    g.forEach(c, function(a) {
                        if (b) {
                            if (a._started && !a._destroyed) try {
                                a.destroyRecursive ? a.destroyRecursive() : a.destroy && a.destroy()
                            } catch (c) {
                                console.debug("An error occurred when destroying a widget embedded within InfoWindow: " + c.message)
                            }
                        } else if (!a._started) try {
                            a.startup()
                        } catch (d) {
                            console.debug("An error occurred when starting a widget embedded within InfoWindow: " + d.message)
                        }
                    })
                }
            }
        },
        __registerMapListeners: function() {
            this.__unregisterMapListeners();
            var a = this.map;
            this.__handles = [e.connect(a, "onPan", this,
                this.__onMapPan), e.connect(a, "onZoomStart", this, this.__onMapZmStart), e.connect(a, "onExtentChange", this, this.__onMapExtChg)]
        },
        __unregisterMapListeners: function() {
            var a = this.__handles;
            a && (g.forEach(a, e.disconnect, e), this.__handles = null)
        },
        __onMapPan: function(a, b) {
            this.move(b, !0)
        },
        __onMapZmStart: function() {
            this.__mcoords = this.mapCoords || this.map.toMap(new p(this.coords));
            this.hide(null, !0)
        },
        __onMapExtChg: function(a, b, c) {
            a = this.map;
            var d = this.mapCoords;
            d ? this.show(d, null, !0) : (b = c ? a.toScreen(this.__mcoords) :
                this.coords.offset(b && b.x || 0, b && b.y || 0), this.show(b, null, !0))
        },
        __setValue: function(a, b) {
            this[a].innerHTML = "";
            var c = "_dfd" + a,
                d = this[c];
            d && -1 === d.fired && (d.cancel(), this[c] = null);
            k.isDefined(b) && (b instanceof m ? (this[c] = b, b.addCallbacks(this["__set" + a], this["__err" + a])) : this.__render(a, b))
        },
        __set_title: function(a) {
            this._dfd_title = null;
            this.__render("_title", a)
        },
        __err_title: function(a) {
            this._dfd_title = null
        },
        __set_content: function(a) {
            this._dfd_content = null;
            this.__render("_content", a)
        },
        __err_content: function(a) {
            this._dfd_content =
                null
        },
        __render: function(a, b) {
            var c = this[a];
            this.place(b, c);
            this.isShowing && (this.startupDijits(c), "_title" === a && this._adjustContentArea && this._adjustContentArea())
        }
    })
});
},
'esri/PopupBase':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/Color", "dojo/_base/Deferred", "dojo/has", "./kernel", "./graphic", "./geometry/Point", "./geometry/jsonUtils", "./geometry/mathUtils", "./geometry/webMercatorUtils", "./symbols/SimpleMarkerSymbol", "./symbols/SimpleLineSymbol", "./symbols/CartographicLineSymbol", "./symbols/SimpleFillSymbol", "./tasks/query", "./Evented", "require"], function(v, n, d, p, w, E, F, x, y, z, A, s, t, q, r, u, B, C) {
    function D(a) {
        return "sizeInfo" === a.type
    }
    return v(C, {
        declaredClass: "esri.PopupBase",
        _featureLayers: {},
        _updateEndHandles: [],
        _evtMap: {
            "set-features": !0,
            "clear-features": !0,
            "selection-change": !0,
            "dfd-complete": !0
        },
        onSetFeatures: function() {},
        onClearFeatures: function() {},
        onSelectionChange: function() {},
        onDfdComplete: function() {},
        initialize: function() {
            this.count = 0;
            this.selectedIndex = -1;
            this.on("clear-features", n.hitch(this, this._resetUpdateEndListeners));
            this.on("dfd-complete", n.hitch(this, this._processFeatures));
            this.on("set-features", n.hitch(this, this._processFeatures))
        },
        cleanup: function() {
            this.features =
                this.deferreds = null;
            this._resetUpdateEndListeners()
        },
        setFeatures: function(a) {
            if (a && a.length) {
                this.clearFeatures();
                var b, c;
                a[0] instanceof w ? c = a : b = a;
                b ? this._updateFeatures(null, b) : (this.deferreds = c, c = c.slice(0), d.forEach(c, function(a) {
                    a.addBoth(n.hitch(this, this._updateFeatures, a))
                }, this))
            }
        },
        clearFeatures: function() {
            this.features = this.deferreds = this._marked = null;
            this.count = 0;
            var a = this.selectedIndex;
            this.selectedIndex = -1;
            if (-1 < a) this.onSelectionChange();
            this.onClearFeatures()
        },
        getSelectedFeature: function() {
            var a =
                this.features;
            if (a) return a[this.selectedIndex]
        },
        select: function(a) {
            0 > a || a >= this.count || (this.selectedIndex = a, this.onSelectionChange())
        },
        enableHighlight: function(a) {
            this._highlighted = a.graphics.add(new x(new y(0, 0, a.spatialReference)));
            this._highlighted.hide();
            this.markerSymbol || (a = this.markerSymbol = new t, a.setStyle(t.STYLE_TARGET), a._setDim(16, 16, 0), a.setOutline(new r(q.STYLE_SOLID, new p([0, 255, 255]), 2, r.CAP_ROUND, r.JOIN_ROUND)), a.setColor(new p([0, 0, 0, 0])));
            this.lineSymbol || (this.lineSymbol = new q(q.STYLE_SOLID,
                new p([0, 255, 255]), 2));
            this.fillSymbol || (this.fillSymbol = new u(u.STYLE_NULL, new q(q.STYLE_SOLID, new p([0, 255, 255]), 2), new p([0, 0, 0, 0])))
        },
        disableHighlight: function(a) {
            var b = this._highlighted;
            b && (b.hide(), a.graphics.remove(b), delete this._highlighted);
            this.markerSymbol = this.lineSymbol = this.fillSymbol = null
        },
        showHighlight: function() {
            var a = this.features && this.features[this.selectedIndex];
            this._highlighted && (a && a.geometry) && this._highlighted.show()
        },
        hideHighlight: function() {
            this._highlighted && this._highlighted.hide()
        },
        updateHighlight: function(a, b) {
            var c = b.geometry,
                f = this._highlighted;
            if (!c || !f) f && f.hide();
            else {
                f.hide();
                !f._graphicsLayer && a && a.graphics.add(f);
                f.setGeometry(z.fromJson(c.toJson()));
                var e;
                switch (c.type) {
                    case "point":
                    case "multipoint":
                        e = this.markerSymbol;
                        e.setOffset(0, 0);
                        e.setAngle(0);
                        var g = b.getLayer();
                        if (g) {
                            var c = g._getSymbol(b),
                                l, h, d = 0,
                                m = 0,
                                k = 0;
                            if (c) {
                                g = !b.symbol ? g._getRenderer(b) : null;
                                if (d = this._getSizeInfo(g)) l = h = g.getSize(b, {
                                    sizeInfo: d,
                                    shape: c.style,
                                    resolution: a && a.getResolutionInMeters && a.getResolutionInMeters()
                                });
                                else switch (c.type) {
                                    case "simplemarkersymbol":
                                        l = h = c.size || 0;
                                        break;
                                    case "picturemarkersymbol":
                                        l = c.width || 0, h = c.height || 0
                                }
                                d = c.xoffset || 0;
                                m = c.yoffset || 0;
                                k = c.angle || 0
                            }
                            l && h && e._setDim(l + 1, h + 1, 0);
                            e.setOffset(d, m);
                            e.setAngle(k)
                        }
                        break;
                    case "polyline":
                        e = this.lineSymbol;
                        break;
                    case "polygon":
                        e = this.fillSymbol
                }
                f.setSymbol(e)
            }
        },
        showClosestFirst: function(a) {
            var b = this.features;
            if (b && b.length) {
                if (1 < b.length) {
                    var c, f = Infinity,
                        e = -1,
                        g, l = A.getLength,
                        h, d = a.spatialReference,
                        m, k;
                    a = a.normalize();
                    for (c = b.length - 1; 0 <= c; c--)
                        if (g =
                            b[c].geometry) {
                            m = g.spatialReference;
                            h = 0;
                            try {
                                k = "point" === g.type ? g : g.getExtent().getCenter(), k = k.normalize(), d && (m && !d.equals(m) && d._canProject(m)) && (k = d.isWebMercator() ? s.geographicToWebMercator(k) : s.webMercatorToGeographic(k)), h = l(a, k)
                            } catch (n) {}
                            0 < h && h < f && (f = h, e = c)
                        }
                    0 < e && (b.splice(0, 0, b.splice(e, 1)[0]), this.select(0))
                }
            } else this.deferreds && (this._marked = a)
        },
        _unbind: function(a) {
            a = d.indexOf(this.deferreds, a);
            if (-1 !== a) return this.deferreds.splice(a, 1), !this.deferreds.length ? (this.deferreds = null, 2) : 1
        },
        _fireComplete: function(a) {
            var b = this._marked;
            b && (this._marked = null, this.showClosestFirst(b));
            this.onDfdComplete(a)
        },
        _updateFeatures: function(a, b) {
            if (a) {
                if (this.deferreds) {
                    var c = this._unbind(a);
                    if (c)
                        if (b && b instanceof Error) {
                            if (this._fireComplete(b), 2 === c) this.onSetFeatures()
                        } else if (b && b.length)
                        if (this.features) {
                            var f = d.filter(b, function(a) {
                                return -1 === d.indexOf(this.features, a)
                            }, this);
                            this.features = this.features.concat(f);
                            this.count = this.features.length;
                            this._fireComplete();
                            if (2 === c) this.onSetFeatures()
                        } else {
                            this.features =
                                b;
                            this.count = b.length;
                            this.selectedIndex = 0;
                            this._fireComplete();
                            if (2 === c) this.onSetFeatures();
                            this.select(0)
                        } else if (this._fireComplete(), 2 === c) this.onSetFeatures()
                }
            } else this.features = b, this.count = b.length, this.selectedIndex = 0, this.onSetFeatures(), this.select(0)
        },
        _getSizeInfo: function(a) {
            return a ? a.sizeInfo || d.filter(a.visualVariables, D)[0] : null
        },
        _resetUpdateEndListeners: function() {
            this._featureLayers = {};
            d.forEach(this._updateEndHandles, function(a) {
                a.remove()
            });
            this._updateEndHandles = []
        },
        _processFeatures: function() {
            d.forEach(this.features,
                function(a) {
                    if ((a = a.getLayer()) && !this._featureLayers[a.id] && 1 === a.currentMode && a.objectIdField && a.hasXYFootprint && a.queryFeatures && ("esriGeometryPolygon" === a.geometryType || "esriGeometryPolyline" === a.geometryType || a.hasXYFootprint())) this._featureLayers[a.id] = a, a = a.on("update-end", n.hitch(this, this._fLyrUpdateEndHandler)), this._updateEndHandles.push(a)
                }, this)
        },
        _fLyrUpdateEndHandler: function(a) {
            if (!a.error) {
                var b = this,
                    c = a.target,
                    f = {},
                    e = [];
                d.forEach(this.features, function(a) {
                    if (a.getLayer() === c) {
                        var b =
                            a.attributes[c.objectIdField];
                        f[b] = a;
                        e.push(b)
                    }
                });
                e.length && (a = new B, a.objectIds = e, c.queryFeatures(a, function(a) {
                    d.forEach(a.features, function(a) {
                        var b = f[a.attributes[c.objectIdField]];
                        b.geometry !== a.geometry && (b.setGeometry(a.geometry), this._highlighted && b === this.getSelectedFeature() && this._highlighted.setGeometry(a.geometry))
                    }, b)
                }))
            }
        }
    })
});
},
'esri/graphic':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "./kernel", "./domUtils", "./lang", "./InfoTemplate", "./geometry/jsonUtils", "./symbols/jsonUtils"], function(e, f, n, p, g, h, k, l, m) {
    e = e(null, {
        declaredClass: "esri.Graphic",
        constructor: function(a, b, c, d) {
            a && !a.declaredClass ? (this.geometry = a.geometry ? l.fromJson(a.geometry) : null, this.symbol = a.symbol ? m.fromJson(a.symbol) : null, this.attributes = a.attributes || null, this.infoTemplate = a.infoTemplate ? new k(a.infoTemplate) : null) : (this.geometry = a, this.symbol = b, this.attributes =
                c, this.infoTemplate = d)
        },
        _shape: null,
        _graphicsLayer: null,
        _visible: !0,
        visible: !0,
        getDojoShape: function() {
            return this._shape
        },
        getShapes: function() {
            var a = [];
            this._shape && a.push(this._shape);
            this._bgShape && a.push(this._bgShape);
            return a
        },
        getNode: function() {
            var a = this._shape && this._shape.getNode();
            return a && a.nodeType ? a : null
        },
        getNodes: function() {
            var a = this.getShapes(),
                b, c, d = a.length,
                e = [];
            for (c = 0; c < d; c++)(b = a[c] && a[c].getNode()) && b.nodeType && e.push(b);
            return e
        },
        getLayer: function() {
            return this._layer
        },
        draw: function() {
            var a =
                this._graphicsLayer;
            a && a._draw(this, !0);
            return this
        },
        setGeometry: function(a) {
            this.geometry = a;
            if (a = this._graphicsLayer) a._updateExtent(this), a._draw(this, !0);
            return this
        },
        setSymbol: function(a, b) {
            var c = this._graphicsLayer,
                d = this._shape;
            this.symbol = a;
            c && (b && d && c._removeShape(this), c._draw(this, !0));
            return this
        },
        setAttributes: function(a) {
            this.attributes = a;
            return this
        },
        setInfoTemplate: function(a) {
            this.infoTemplate = a;
            return this
        },
        getInfoTemplate: function() {
            return this._getEffInfoTemplate()
        },
        _getEffInfoTemplate: function() {
            var a =
                this.getLayer();
            return this.infoTemplate || a && a.infoTemplate
        },
        getTitle: function() {
            var a = this.getInfoTemplate(),
                b = a && a.title;
            if (f.isFunction(b)) b = b.call(a, this);
            else if (f.isString(b)) var c = (a = this.getLayer()) && a._getDateOpts,
                b = h.substitute(this.attributes, b, {
                    first: !0,
                    dateFormat: c && c.call(a)
                });
            return b
        },
        getContent: function() {
            var a = this.getInfoTemplate(),
                b = a && a.content;
            if (f.isFunction(b)) b = b.call(a, this);
            else if (f.isString(b)) var c = (a = this.getLayer()) && a._getDateOpts,
                b = h.substitute(this.attributes, b, {
                    dateFormat: c && c.call(a)
                });
            return b
        },
        attr: function(a, b) {
            var c = this.getNodes(),
                d, e = c.length;
            for (d = 0; d < e; d++) null == b ? c[d].removeAttribute(a) : c[d].setAttribute(a, b);
            return this
        },
        show: function() {
            this.visible = this._visible = !0;
            var a, b, c;
            if (this.getShapes().length) {
                a = this.getNodes();
                c = a.length;
                this.attr("data-hidden");
                for (b = 0; b < c; b++) g.show(a[b])
            } else this._graphicsLayer && this._graphicsLayer._draw(this, !0);
            return this
        },
        hide: function() {
            this.visible = this._visible = !1;
            var a = this._graphicsLayer,
                b, c;
            if (a)
                if ("canvas-2d" ===
                    a.surfaceType) a._removeShape(this);
                else if (a = this.getNodes(), c = a.length) {
                this.attr("data-hidden", "");
                for (b = 0; b < c; b++) g.hide(a[b])
            }
            return this
        },
        toJson: function() {
            var a = {};
            this.geometry && (a.geometry = this.geometry.toJson());
            this.attributes && (a.attributes = f.mixin({}, this.attributes));
            this.symbol && (a.symbol = this.symbol.toJson());
            this.infoTemplate && (a.infoTemplate = this.infoTemplate.toJson());
            return a
        }
    });
    e.prototype.getShape = e.prototype.getDojoShape;
    return e
});
},
'esri/InfoTemplate':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "./kernel", "./lang"], function(b, c, e, f, d) {
    return b(null, {
        declaredClass: "esri.InfoTemplate",
        constructor: function(a, b) {
            a && c.isObject(a) && !c.isFunction(a) ? c.mixin(this, a) : (this.title = a || "${*}", this.content = b || "${*}")
        },
        setTitle: function(a) {
            this.title = a;
            return this
        },
        setContent: function(a) {
            this.content = a;
            return this
        },
        toJson: function() {
            return d.fixJson({
                title: this.title,
                content: this.content
            })
        }
    })
});
},
'esri/geometry/jsonUtils':function(){
//>>built
define(["dojo/_base/lang", "dojo/has", "../kernel", "./Point", "./Polyline", "./Polygon", "./Multipoint", "./Extent"], function(g, h, k, b, c, d, e, f) {
    return {
        fromJson: function(a) {
            if (void 0 !== a.x && void 0 !== a.y) return new b(a);
            if (void 0 !== a.paths) return new c(a);
            if (void 0 !== a.rings) return new d(a);
            if (void 0 !== a.points) return new e(a);
            if (void 0 !== a.xmin && void 0 !== a.ymin && void 0 !== a.xmax && void 0 !== a.ymax) return new f(a)
        },
        getJsonType: function(a) {
            return a instanceof b ? "esriGeometryPoint" : a instanceof c ? "esriGeometryPolyline" :
                a instanceof d ? "esriGeometryPolygon" : a instanceof f ? "esriGeometryEnvelope" : a instanceof e ? "esriGeometryMultipoint" : null
        },
        getGeometryType: function(a) {
            return "esriGeometryPoint" === a ? b : "esriGeometryPolyline" === a ? c : "esriGeometryPolygon" === a ? d : "esriGeometryEnvelope" === a ? f : "esriGeometryMultipoint" === a ? e : null
        }
    }
});
},
'esri/symbols/jsonUtils':function(){
//>>built
define(["dojo/_base/lang", "dojo/has", "../kernel", "./SimpleMarkerSymbol", "./PictureMarkerSymbol", "./SimpleLineSymbol", "./CartographicLineSymbol", "./SimpleFillSymbol", "./PictureFillSymbol", "./TextSymbol"], function(l, m, n, d, e, f, c, g, h, k) {
    return {
        fromJson: function(a) {
            var b = null;
            switch (a.type) {
                case "esriSMS":
                    b = new d(a);
                    break;
                case "esriPMS":
                    b = new e(a);
                    break;
                case "esriTS":
                    b = new k(a);
                    break;
                case "esriSLS":
                    b = void 0 !== a.cap ? new c(a) : new f(a);
                    break;
                case "esriCLS":
                    b = new c(a);
                    break;
                case "esriSFS":
                    b = new g(a);
                    break;
                case "esriPFS":
                    b =
                        new h(a)
            }
            return b
        },
        getShapeDescriptors: function(a) {
            return a && a.getShapeDescriptors ? a.getShapeDescriptors() : {
                defaultShape: null,
                fill: null,
                stroke: null
            }
        }
    }
});
},
'esri/symbols/PictureMarkerSymbol':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/sniff", "dojox/gfx/_base", "../kernel", "../lang", "../urlUtils", "./MarkerSymbol"], function(d, f, h, e, n, k, l, m) {
    var g = {
        url: "",
        width: 12,
        height: 12,
        angle: 0,
        xoffset: 0,
        yoffset: 0
    };
    d = d(m, {
        declaredClass: "esri.symbol.PictureMarkerSymbol",
        type: "picturemarkersymbol",
        constructor: function(a, c, b) {
            a ? f.isString(a) ? (this.url = a, c && (this.width = c), b && (this.height = b)) : (this.width = e.pt2px(a.width), this.height = e.pt2px(a.height), c = a.imageData, !(9 > h("ie")) && c && (b = this.url, this.url =
                "data:" + (a.contentType || "image") + ";base64," + c, this.imageData = b)) : (f.mixin(this, g), this.width = e.pt2px(this.width), this.height = e.pt2px(this.height))
        },
        getStroke: function() {
            return null
        },
        getFill: function() {
            return null
        },
        setWidth: function(a) {
            this.width = a;
            return this
        },
        setHeight: function(a) {
            this.height = a;
            return this
        },
        setUrl: function(a) {
            a !== this.url && (delete this.imageData, delete this.contentType);
            this.url = a;
            return this
        },
        getShapeDescriptors: function() {
            return {
                defaultShape: {
                    type: "image",
                    x: -Math.round(this.width /
                        2),
                    y: -Math.round(this.height / 2),
                    width: this.width,
                    height: this.height,
                    src: this.url || ""
                },
                fill: null,
                stroke: null
            }
        },
        toJson: function() {
            var a = this.url,
                c = this.imageData;
            if (0 === a.indexOf("data:")) var b = a,
                a = c,
                c = b.indexOf(";base64,") + 8,
                c = b.substr(c);
            if (f.isString(a) && (0 === a.indexOf("/") || 0 === a.indexOf("//") || 0 === a.indexOf("./") || 0 === a.indexOf("../"))) a = l.getAbsoluteUrl(a);
            var b = e.px2pt(this.width),
                b = isNaN(b) ? void 0 : b,
                d = e.px2pt(this.height),
                d = isNaN(d) ? void 0 : d,
                a = k.fixJson(f.mixin(this.inherited("toJson", arguments), {
                    type: "esriPMS",
                    url: a,
                    imageData: c,
                    contentType: this.contentType,
                    width: b,
                    height: d
                }));
            delete a.color;
            delete a.size;
            a.imageData || delete a.imageData;
            return a
        }
    });
    d.defaultProps = g;
    return d
});
},
'esri/symbols/CartographicLineSymbol':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/Color", "dojo/has", "dojox/gfx/_base", "../kernel", "../lang", "./SimpleLineSymbol"], function(b, d, m, p, e, q, f, n) {
    var c = {
            STYLE_SOLID: "solid",
            STYLE_DASH: "dash",
            STYLE_DOT: "dot",
            STYLE_DASHDOT: "dashdot",
            STYLE_DASHDOTDOT: "longdashdotdot",
            STYLE_NULL: "none",
            STYLE_INSIDE_FRAME: "insideframe",
            STYLE_SHORTDASH: "shortdash",
            STYLE_SHORTDOT: "shortdot",
            STYLE_SHORTDASHDOT: "shortdashdot",
            STYLE_SHORTDASHDOTDOT: "shortdashdotdot",
            STYLE_LONGDASH: "longdash",
            STYLE_LONGDASHDOT: "longdashdot",
            CAP_BUTT: "butt",
            CAP_ROUND: "round",
            CAP_SQUARE: "square",
            JOIN_MITER: "miter",
            JOIN_ROUND: "round",
            JOIN_BEVEL: "bevel"
        },
        g = {
            color: [0, 0, 0, 1],
            style: c.STYLE_SOLID,
            width: 1,
            cap: c.CAP_BUTT,
            join: c.JOIN_MITER,
            miterLimit: 10
        };
    b = b(n, {
        declaredClass: "esri.symbol.CartographicLineSymbol",
        type: "cartographiclinesymbol",
        _caps: {
            butt: "esriLCSButt",
            round: "esriLCSRound",
            square: "esriLCSSquare"
        },
        _joins: {
            miter: "esriLJSMiter",
            round: "esriLJSRound",
            bevel: "esriLJSBevel"
        },
        constructor: function(a, b, c, h, k, l) {
            a ? d.isString(a) ? (this.style = a,
                b && (this.color = b), void 0 !== c && (this.width = c), h && (this.cap = h), k && (this.join = k), void 0 !== l && (this.miterLimit = l)) : (this.cap = f.valueOf(this._caps, a.cap), this.join = f.valueOf(this._joins, a.join), this.width = e.pt2px(a.width), this.miterLimit = e.pt2px(a.miterLimit)) : (d.mixin(this, g), this.color = new m(this.color), this.width = e.pt2px(this.width), this.miterLimit = e.pt2px(this.miterLimit))
        },
        setCap: function(a) {
            this.cap = a;
            return this
        },
        setJoin: function(a) {
            this.join = a;
            return this
        },
        setMiterLimit: function(a) {
            this.miterLimit =
                a;
            return this
        },
        getStroke: function() {
            return d.mixin(this.inherited("getStroke", arguments), {
                cap: this.cap,
                join: this.join === c.JOIN_MITER ? this.miterLimit : this.join
            })
        },
        getFill: function() {
            return null
        },
        getShapeDescriptors: function() {
            return {
                defaultShape: {
                    type: "path",
                    path: "M -15,0 L 15,0 E"
                },
                fill: null,
                stroke: this.getStroke()
            }
        },
        toJson: function() {
            var a = e.px2pt(this.miterLimit),
                a = isNaN(a) ? void 0 : a;
            return f.fixJson(d.mixin(this.inherited("toJson", arguments), {
                type: "esriCLS",
                cap: this._caps[this.cap],
                join: this._joins[this.join],
                miterLimit: a
            }))
        }
    });
    d.mixin(b, c);
    b.defaultProps = g;
    return b
});
},
'esri/symbols/SimpleFillSymbol':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/Color", "dojo/has", "dojox/gfx/_base", "../kernel", "../lang", "./FillSymbol", "./SimpleLineSymbol", "require"], function(b, d, g, n, h, p, e, k, l, m) {
    var c = {
            STYLE_SOLID: "solid",
            STYLE_NULL: "none",
            STYLE_HORIZONTAL: "horizontal",
            STYLE_VERTICAL: "vertical",
            STYLE_FORWARD_DIAGONAL: "forwarddiagonal",
            STYLE_BACKWARD_DIAGONAL: "backwarddiagonal",
            STYLE_CROSS: "cross",
            STYLE_DIAGONAL_CROSS: "diagonalcross",
            STYLE_FORWARDDIAGONAL: "forwarddiagonal",
            STYLE_BACKWARDDIAGONAL: "backwarddiagonal",
            STYLE_DIAGONALCROSS: "diagonalcross"
        },
        f = {
            style: c.STYLE_SOLID,
            color: [0, 0, 0, 0.25]
        };
    b = b(k, {
        declaredClass: "esri.symbol.SimpleFillSymbol",
        type: "simplefillsymbol",
        patternUrlPrefix: m.toUrl("../images/symbol/sfs/"),
        _styles: {
            solid: "esriSFSSolid",
            none: "esriSFSNull",
            horizontal: "esriSFSHorizontal",
            vertical: "esriSFSVertical",
            forwarddiagonal: "esriSFSForwardDiagonal",
            backwarddiagonal: "esriSFSBackwardDiagonal",
            cross: "esriSFSCross",
            diagonalcross: "esriSFSDiagonalCross"
        },
        constructor: function(a, b, c) {
            a ? d.isString(a) ? (this.style =
                a, void 0 !== b && (this.outline = b), void 0 !== c && (this.color = c)) : this.style = e.valueOf(this._styles, a.style) : (d.mixin(this, f), this.outline = new l(this.outline), this.color = new g(this.color))
        },
        setStyle: function(a) {
            this.style = a;
            return this
        },
        getStroke: function() {
            return this.outline && this.outline.getStroke()
        },
        getFill: function() {
            var a = this.style;
            return a === c.STYLE_NULL ? null : a === c.STYLE_SOLID ? this.color : d.mixin({}, h.defaultPattern, {
                src: this.patternUrlPrefix + a + ".png",
                width: 10,
                height: 10
            })
        },
        getShapeDescriptors: function() {
            return {
                defaultShape: {
                    type: "path",
                    path: "M -10,-10 L 10,0 L 10,10 L -10,10 L -10,-10 E"
                },
                fill: this.getFill(),
                stroke: this.getStroke()
            }
        },
        toJson: function() {
            return e.fixJson(d.mixin(this.inherited("toJson", arguments), {
                type: "esriSFS",
                style: this._styles[this.style]
            }))
        }
    });
    d.mixin(b, c);
    b.defaultProps = f;
    return b
});
},
'esri/symbols/FillSymbol':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "./Symbol", "./SimpleLineSymbol"], function(b, c, f, g, d, e) {
    return b(d, {
        declaredClass: "esri.symbol.FillSymbol",
        constructor: function(a) {
            a && (c.isObject(a) && a.outline) && (this.outline = new e(a.outline))
        },
        setOutline: function(a) {
            this.outline = a;
            return this
        },
        toJson: function() {
            var a = this.inherited("toJson", arguments);
            this.outline && (a.outline = this.outline.toJson());
            return a
        }
    })
});
},
'esri/symbols/PictureFillSymbol':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/sniff", "dojox/gfx/_base", "../kernel", "../lang", "../urlUtils", "./FillSymbol"], function(e, g, l, d, q, m, n, p) {
    var k = {
        xoffset: 0,
        yoffset: 0,
        width: 12,
        height: 12
    };
    e = e(p, {
        declaredClass: "esri.symbol.PictureFillSymbol",
        type: "picturefillsymbol",
        xscale: 1,
        yscale: 1,
        xoffset: 0,
        yoffset: 0,
        constructor: function(a, b, c, f) {
            a ? g.isString(a) ? (this.url = a, void 0 !== b && (this.outline = b), void 0 !== c && (this.width = c), void 0 !== f && (this.height = f)) : (this.xoffset = d.pt2px(a.xoffset), this.yoffset =
                d.pt2px(a.yoffset), this.width = d.pt2px(a.width), this.height = d.pt2px(a.height), b = a.imageData, !(9 > l("ie")) && b && (c = this.url, this.url = "data:" + (a.contentType || "image") + ";base64," + b, this.imageData = c)) : (g.mixin(this, k), this.width = d.pt2px(this.width), this.height = d.pt2px(this.height))
        },
        setWidth: function(a) {
            this.width = a;
            return this
        },
        setHeight: function(a) {
            this.height = a;
            return this
        },
        setOffset: function(a, b) {
            this.xoffset = a;
            this.yoffset = b;
            return this
        },
        setUrl: function(a) {
            a !== this.url && (delete this.imageData, delete this.contentType);
            this.url = a;
            return this
        },
        setXScale: function(a) {
            this.xscale = a;
            return this
        },
        setYScale: function(a) {
            this.yscale = a;
            return this
        },
        getStroke: function() {
            return this.outline && this.outline.getStroke()
        },
        getFill: function() {
            return g.mixin({}, d.defaultPattern, {
                src: this.url,
                width: this.width * this.xscale,
                height: this.height * this.yscale,
                x: this.xoffset,
                y: this.yoffset
            })
        },
        getShapeDescriptors: function() {
            return {
                defaultShape: {
                    type: "path",
                    path: "M -10,-10 L 10,0 L 10,10 L -10,10 L -10,-10 E"
                },
                fill: this.getFill(),
                stroke: this.getStroke()
            }
        },
        toJson: function() {
            var a = this.url,
                b = this.imageData;
            if (0 === a.indexOf("data:")) var c = a,
                a = b,
                b = c.indexOf(";base64,") + 8,
                b = c.substr(b);
            if (g.isString(a) && (0 === a.indexOf("/") || 0 === a.indexOf("//") || 0 === a.indexOf("./") || 0 === a.indexOf("../"))) a = n.getAbsoluteUrl(a);
            var c = d.px2pt(this.width),
                c = isNaN(c) ? void 0 : c,
                f = d.px2pt(this.height),
                f = isNaN(f) ? void 0 : f,
                e = d.px2pt(this.xoffset),
                e = isNaN(e) ? void 0 : e,
                h = d.px2pt(this.yoffset),
                h = isNaN(h) ? void 0 : h,
                a = m.fixJson(g.mixin(this.inherited("toJson", arguments), {
                    type: "esriPFS",
                    url: a,
                    imageData: b,
                    contentType: this.contentType,
                    width: c,
                    height: f,
                    xoffset: e,
                    yoffset: h,
                    xscale: this.xscale,
                    yscale: this.yscale
                }));
            a.imageData || delete a.imageData;
            return a
        }
    });
    e.defaultProps = k;
    return e
});
},
'esri/symbols/TextSymbol':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "dojox/gfx/_base", "../kernel", "../lang", "../Color", "./Symbol", "./Font"], function(d, f, s, c, t, k, l, n, g) {
    var m = {
            type: "textsymbol",
            x: 0,
            y: 0,
            text: "",
            rotated: !1,
            kerning: !0,
            color: [0, 0, 0, 1],
            font: c.defaultFont,
            angle: 0,
            xoffset: 0,
            yoffset: 0,
            horizontalAlignment: "center"
        },
        p = {
            start: "left",
            middle: "center",
            end: "right"
        },
        q = {
            left: "start",
            center: "middle",
            right: "end",
            justify: "start"
        },
        r = {
            top: "text-before-edge",
            middle: "central",
            baseline: "alphabetic",
            bottom: "text-after-edge"
        },
        h = document.createElement("canvas");
    d = d(n, {
        declaredClass: "esri.symbol.TextSymbol",
        angle: 0,
        xoffset: 0,
        yoffset: 0,
        constructor: function(a, b, e) {
            f.mixin(this, m);
            this.font = new g(this.font);
            this.color = new l(this.color);
            a && (f.isObject(a) ? (f.mixin(this, a), this.color && k.isDefined(this.color[0]) && (this.color = l.toDojoColor(this.color)), this.type = "textsymbol", this.font = new g(this.font), this.xoffset = c.pt2px(this.xoffset), this.yoffset = c.pt2px(this.yoffset), this.angle && (this.angle *= -1)) : (this.text = a, b && (this.font = b),
                e && (this.color = e)));
            this.setAlign(this.align || this.getSVGAlign())
        },
        setFont: function(a) {
            this.font = a;
            return this
        },
        setSize: function(a) {
            this.font.size = a;
            return this
        },
        setAngle: function(a) {
            this.angle = a;
            return this
        },
        setOffset: function(a, b) {
            this.xoffset = a;
            this.yoffset = b;
            return this
        },
        setAlign: function(a) {
            this.align = a;
            this.setHorizontalAlignment(a && p[a.toLowerCase()] || "center");
            return this
        },
        setHorizontalAlignment: function(a) {
            this.horizontalAlignment = a;
            return this
        },
        getSVGAlign: function() {
            var a = this.horizontalAlignment;
            return a = a && q[a.toLowerCase()] || "middle"
        },
        setVerticalAlignment: function(a) {
            this.verticalAlignment = a;
            return this
        },
        getSVGBaseline: function() {
            var a = this.verticalAlignment;
            return a && r[a.toLowerCase()] || "alphabetic"
        },
        getSVGBaselineShift: function() {
            return "bottom" === this.verticalAlignment ? "super" : null
        },
        setDecoration: function(a) {
            this.decoration = a;
            this.font || this.setFont(new g);
            this.font.setDecoration(a);
            return this
        },
        setRotated: function(a) {
            this.rotated = a;
            return this
        },
        setKerning: function(a) {
            this.kerning = a;
            return this
        },
        setText: function(a) {
            this.text = a;
            return this
        },
        getStroke: function() {
            return null
        },
        getFill: function() {
            return this.color
        },
        getWidth: function() {
            var a = h && h.getContext && h.getContext("2d");
            if (a) {
                var b = this.font;
                a.font = (b.style ? b.style : c.defaultFont.style) + " " + (b.weight ? b.weight : c.defaultFont.weight) + " " + (b.size ? b.size : c.defaultFont.size) + "px " + (b.family ? b.family : c.defaultFont.family);
                return a.measureText(this.text).width
            }
            var a = this.getHeight(),
                b = 0,
                e, d;
            for (e = 0; e < this.text.length; e++) d = this.text.charAt(e),
                b = d == d.toUpperCase() ? b + 0.7 * a : b + 0.5 * a;
            return b
        },
        getHeight: function() {
            return c.normalizedLength(this.font.size)
        },
        getShapeDescriptors: function() {
            var a = this.font,
                b;
            a && (b = {}, a.size && (b.size = a.size), a.style && (b.style = a.style), a.variant && (b.variant = a.variant), a.decoration && (b.decoration = a.decoration), a.weight && (b.weight = a.weight), a.family && (b.family = a.family));
            return {
                defaultShape: {
                    type: "text",
                    text: this.text,
                    x: 0,
                    y: this.getHeight() / 4,
                    align: "middle",
                    decoration: this.decoration || a && a.decoration,
                    rotated: this.rotated,
                    kerning: this.kerning
                },
                font: b,
                fill: this.getFill(),
                stroke: this.getStroke()
            }
        },
        toJson: function() {
            var a = c.px2pt(this.xoffset),
                b = c.px2pt(this.yoffset),
                a = isNaN(a) ? void 0 : a,
                b = isNaN(b) ? void 0 : b;
            return k.fixJson(f.mixin(this.inherited("toJson", arguments), {
                type: "esriTS",
                backgroundColor: this.backgroundColor,
                borderLineColor: this.borderLineColor,
                borderLineSize: this.borderLineSize,
                haloSize: this.haloSize,
                haloColor: this.haloColor,
                verticalAlignment: this.verticalAlignment,
                horizontalAlignment: this.horizontalAlignment,
                rightToLeft: this.rightToLeft,
                width: this.width,
                angle: this.angle && -1 * this.angle,
                xoffset: a,
                yoffset: b,
                text: this.text,
                rotated: this.rotated,
                kerning: this.kerning,
                font: this.font.toJson()
            }))
        }
    });
    f.mixin(d, {
        ALIGN_START: "start",
        ALIGN_MIDDLE: "middle",
        ALIGN_END: "end",
        DECORATION_NONE: "none",
        DECORATION_UNDERLINE: "underline",
        DECORATION_OVERLINE: "overline",
        DECORATION_LINETHROUGH: "line-through"
    });
    d.defaultProps = m;
    return d
});
},
'esri/symbols/Font':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/sniff", "dojox/gfx/_base", "../kernel", "../lang"], function(c, d, h, e, l, k) {
    c = c(null, {
        declaredClass: "esri.symbol.Font",
        constructor: function(a, b, c, f, g) {
            a ? d.isObject(a) ? d.mixin(this, a) : (this.size = a, parseFloat(this.size) == this.size && (this.size += "px"), void 0 !== b && (this.style = b), void 0 !== c && (this.variant = c), void 0 !== f && (this.weight = f), void 0 !== g && (this.family = g)) : d.mixin(this, e.defaultFont);
            parseFloat(this.size) == this.size && (this.size += "pt");
            9 > h("ie") && (this.size &&
                d.isString(this.size) && -1 < this.size.indexOf("em")) && (this.size = e.pt2px(12 * parseFloat(this.size)) + "px");
            this.size = this._convert2PxSize(this.size)
        },
        setSize: function(a) {
            this.size = this._convert2PxSize(a);
            return this
        },
        _convert2PxSize: function(a) {
            var b;
            parseFloat(a) == a ? b = a : d.isString(a) && (-1 < a.indexOf("pt") ? b = e.pt2px(parseFloat(a)) : -1 < a.indexOf("px") ? b = parseFloat(a) : -1 < a.indexOf("em") ? b = e.pt2px(12 * parseFloat(a)) : -1 < a.indexOf("%") && (b = e.pt2px(0.12 * parseFloat(a))));
            return b
        },
        setStyle: function(a) {
            this.style =
                a;
            return this
        },
        setVariant: function(a) {
            this.variant = a;
            return this
        },
        setWeight: function(a) {
            this.weight = a;
            return this
        },
        setFamily: function(a) {
            this.family = a;
            return this
        },
        setDecoration: function(a) {
            this.decoration = a;
            return this
        },
        toJson: function() {
            return k.fixJson({
                size: e.px2pt(this.size),
                style: this.style,
                variant: this.variant,
                decoration: this.decoration,
                weight: this.weight,
                family: this.family
            })
        }
    });
    d.mixin(c, {
        STYLE_NORMAL: "normal",
        STYLE_ITALIC: "italic",
        STYLE_OBLIQUE: "oblique",
        VARIANT_NORMAL: "normal",
        VARIANT_SMALLCAPS: "small-caps",
        WEIGHT_NORMAL: "normal",
        WEIGHT_BOLD: "bold",
        WEIGHT_BOLDER: "bolder",
        WEIGHT_LIGHTER: "lighter"
    });
    return c
});
},
'esri/tasks/query':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/json", "dojo/has", "../kernel", "../geometry/jsonUtils", "./SpatialRelationship", "require", "require", "require"], function(p, q, r, c, u, v, s, t) {
    var d = p(null, {
        declaredClass: "esri.tasks.Query",
        constructor: function() {
            this.spatialRelationship = d.SPATIAL_REL_INTERSECTS
        },
        text: null,
        where: "",
        geometry: null,
        groupByFieldsForStatistics: null,
        objectIds: null,
        returnGeometry: !1,
        returnDistinctValues: !1,
        orderByFields: null,
        outSpatialReference: null,
        outFields: null,
        outStatistics: null,
        timeExtent: null,
        relationParam: null,
        pixelSize: null,
        distance: null,
        units: null,
        resultOffset: null,
        resultRecordCount: null,
        quantizationParameters: null,
        _units: {
            meters: "esriSRUnit_Meter",
            kilometers: "esriSRUnit_Kilometer",
            feet: "esriSRUnit_Foot",
            miles: "esriSRUnit_StatuteMile",
            "nautical-miles": "esriSRUnit_NauticalMile",
            "us-nautical-miles": "esriSRUnit_USNauticalMile"
        },
        toJson: function(e) {
            var a = {
                    text: this.text,
                    where: this.where,
                    returnGeometry: this.returnGeometry,
                    spatialRel: this.spatialRelationship,
                    maxAllowableOffset: this.maxAllowableOffset,
                    geometryPrecision: this.geometryPrecision
                },
                b = e && e.geometry || this.geometry,
                g = this.objectIds,
                h = this.outFields,
                f = this.outSpatialReference,
                k = this.groupByFieldsForStatistics,
                l = this.orderByFields,
                m = this.outStatistics;
            e = this.distance;
            b && (a.geometry = b, a.geometryType = s.getJsonType(b), a.inSR = b.spatialReference.wkid || c.toJson(b.spatialReference.toJson()));
            g && (a.objectIds = g.join(","));
            h && (a.outFields = h.join(","));
            this.returnDistinctValues && (a.returnDistinctValues = !0);
            k && (a.groupByFieldsForStatistics = k.join(","));
            l && (a.orderByFields = l.join(","));
            if (m) {
                var n = [];
                r.forEach(m, function(a) {
                    n.push(a.toJson())
                });
                a.outStatistics = c.toJson(n)
            }
            f ? a.outSR = f.wkid || c.toJson(f.toJson()) : b && (a.outSR = b.spatialReference.wkid || c.toJson(b.spatialReference.toJson()));
            b = this.timeExtent;
            a.time = b ? b.toJson().join(",") : null;
            if ((b = this.relationParam) && this.spatialRelationship === d.SPATIAL_REL_RELATION) a.relationParam = b;
            e && (a.distance = this.distance, this.hasOwnProperty("units") ? a.units = this._units[this.units] ||
                this._units.meters : (console.warn("esri/tasks/query::no distance unit provided, defaulting to meters"), a.units = this._units.meters));
            this.hasOwnProperty("start") && (a.resultOffset = this.start, a.resultRecordCount = 10, "" === a.where && (a.where = "1\x3d1"));
            this.hasOwnProperty("num") && (a.resultRecordCount = this.num);
            a.pixelSize = this.pixelSize ? c.toJson(this.pixelSize.toJson()) : null;
            a.multipatchOption = this.multipatchOption;
            this.quantizationParameters && (a.quantizationParameters = c.toJson(this.quantizationParameters));
            a._ts = this._ts;
            return a
        }
    });
    q.mixin(d, t);
    return d
});
},
'esri/tasks/SpatialRelationship':function(){
//>>built
define(["dojo/_base/lang", "dojo/has", "../kernel"], function(a, b, c) {
    return {
        SPATIAL_REL_INTERSECTS: "esriSpatialRelIntersects",
        SPATIAL_REL_CONTAINS: "esriSpatialRelContains",
        SPATIAL_REL_CROSSES: "esriSpatialRelCrosses",
        SPATIAL_REL_ENVELOPEINTERSECTS: "esriSpatialRelEnvelopeIntersects",
        SPATIAL_REL_INDEXINTERSECTS: "esriSpatialRelIndexIntersects",
        SPATIAL_REL_OVERLAPS: "esriSpatialRelOverlaps",
        SPATIAL_REL_TOUCHES: "esriSpatialRelTouches",
        SPATIAL_REL_WITHIN: "esriSpatialRelWithin",
        SPATIAL_REL_RELATION: "esriSpatialRelRelation"
    }
});
},
'esri/plugins/popupManager':function(){
//>>built
define(["../PopupManager"], function(c) {
    return {
        add: function(a, b) {
            a.popupManager || (a.popupManager = new c(b), a.popupManager.setMap(a))
        },
        remove: function(a) {
            var b = a.popupManager;
            b && (b.unsetMap(), a.popupManager = void 0)
        }
    }
});
},
'esri/PopupManager':function(){
//>>built
define(["./geometry/Extent", "./geometry/ScreenPoint", "./kernel", "./layerUtils", "./tasks/query", "dijit/registry", "dojo/_base/array", "dojo/_base/declare", "dojo/_base/Deferred", "dojo/_base/lang", "dojo/has", "dojo/on", "dojo/promise/all", "dojo/Stateful", "require"], function(E, u, M, C, F, G, f, H, v, w, N, I, J, K, L) {
    var x;
    return H(K, {
        declaredClass: "esri.PopupManager",
        enabled: !1,
        map: null,
        _mapClickHandle: null,
        _featureLayersCache: {},
        constructor: function(a) {
            this._mapClickHandler = w.hitch(this, this._mapClickHandler)
        },
        setMap: function(a) {
            if (this.map)
                if (a !==
                    this.map) this.unsetMap();
                else return;
            this.map = a;
            this._setupClickHandler()
        },
        unsetMap: function() {
            this.map && (this.map = null);
            this._mapClickHandle && (this._mapClickHandle.remove(), this._mapClickHandle = null)
        },
        getMapLayer: function(a) {
            var c;
            if (a && (c = a.getLayer()))
                if (a = c.id, this._featureLayersCache[a]) {
                    var b = a.lastIndexOf("_"); - 1 < b && (a = a.substring(0, b), c = this.map.getLayer(a))
                }
            return c
        },
        _enabledSetter: function(a) {
            this.enabled = a;
            this._setupClickHandler()
        },
        _setupClickHandler: function() {
            this._mapClickHandle && (this._mapClickHandle.remove(),
                this._mapClickHandle = null);
            this.enabled && this.map && (this._mapClickHandle = this.map.on("click", this._mapClickHandler))
        },
        _mapClickHandler: function(a) {
            var c = this.map.infoWindow,
                b = a.graphic;
            c && this.map.loaded && (c.clearFeatures && c.setFeatures ? this._showPopup(a) : b && b.getInfoTemplate() && this._showInfoWindow(b, a.mapPoint))
        },
        _showPopup: function(a) {
            var c = this.map,
                b = c.infoWindow,
                d = this,
                m = [],
                g = [c.graphics].concat(f.map(c.graphicsLayerIds, c.getLayer, c));
            f.forEach(g, function(a) {
                a && (a.loaded && a.infoTemplate && !a.suspended) &&
                    m.push(a)
            });
            var n = [];
            f.forEach(c.layerIds, function(a) {
                (a = c.getLayer(a)) && (a.loaded && !a.suspended) && (d._isImageServiceLayer(a) && a.infoTemplate ? m.push(a) : ("esri.layers.ArcGISDynamicMapServiceLayer" === a.declaredClass || "esri.layers.ArcGISTiledMapServiceLayer" === a.declaredClass) && a.infoTemplates && n.push(a))
            });
            this._getSubLayerFeatureLayers(n).then(function(g) {
                m = m.concat(g);
                g = null;
                a.graphic && (a.graphic.getInfoTemplate() && !d._isImageServiceLayer(a.graphic._layer)) && (g = a.graphic);
                if (m.length || g) {
                    var k = d._calculateClickTolerance(m),
                        r = a.screenPoint,
                        e = c.toMap(new u(r.x - k, r.y + k)),
                        k = c.toMap(new u(r.x + k, r.y - k)),
                        s = new E(e.x, e.y, k.x, k.y, c.spatialReference),
                        l = new F,
                        p = !!g,
                        n = !0,
                        e = f.map(m, function(b) {
                            var e;
                            l.timeExtent = b.useMapTime ? c.timeExtent : null;
                            if (d._isImageServiceLayer(b)) l.geometry = a.mapPoint, n = !1, e = b.queryVisibleRasters(l, {
                                rasterAttributeTableFieldPrefix: "Raster.",
                                returnDomainValues: !0
                            }), e.addCallback(function() {
                                var a = b.getVisibleRasters();
                                p = p || 0 < a.length;
                                return a
                            });
                            else if (d._featureLayersCache[b.id] || "function" === typeof b.queryFeatures &&
                                (0 === b.currentMode || 1 === b.currentMode)) l.geometry = s, e = b.queryFeatures(l), e.addCallback(function(a) {
                                a = a.features;
                                p = p || 0 < a.length;
                                return a
                            });
                            else {
                                e = new v;
                                var g = f.filter(b.graphics, function(a) {
                                    return a && a.visible && s.intersects(a.geometry)
                                });
                                p = p || 0 < g.length;
                                e.resolve(g)
                            }
                            return e
                        });
                    g && (k = new v, k.resolve([g]), e.unshift(k));
                    !f.some(e, function(a) {
                        return !a.isFulfilled()
                    }) && !p ? (b.hide(), b.clearFeatures()) : (b.setFeatures(e), b.show(a.mapPoint, {
                        closestFirst: n
                    }))
                }
            })
        },
        _getSubLayerFeatureLayers: function(a, c) {
            var b =
                c || new v,
                d = [],
                m = a.length,
                g = Math.floor(this.map.extent.getWidth() / this.map.width),
                n = this.map.getScale(),
                u = !1,
                k = this,
                r = 0;
            a: for (; r < m; r++) {
                var e = a[r],
                    s = e.dynamicLayerInfos || e.layerInfos;
                if (s) {
                    var l = null;
                    if (e._params && (e._params.layers || e._params.dynamicLayers)) l = e.visibleLayers;
                    for (var l = C._getVisibleLayers(s, l), p = C._getLayersForScale(n, s), w = s.length, z = 0; z < w; z++) {
                        var y = s[z],
                            q = y.id,
                            t = e.infoTemplates[q];
                        if (!y.subLayerIds && t && t.infoTemplate && -1 < f.indexOf(l, q) && -1 < f.indexOf(p, q)) {
                            if (!x) {
                                u = !0;
                                break a
                            }
                            var A =
                                e.id + "_" + q,
                                h = this._featureLayersCache[A];
                            if (!h || !h.loadError) h || ((h = t.layerUrl) || (h = y.source ? this._getLayerUrl(e.url, "/dynamicLayer") : this._getLayerUrl(e.url, q)), h = new x(h, {
                                    id: A,
                                    drawMode: !1,
                                    mode: x.MODE_SELECTION,
                                    outFields: this._getOutFields(t.infoTemplate),
                                    resourceInfo: t.resourceInfo,
                                    source: y.source
                                }), this._featureLayersCache[A] = h), h.setDefinitionExpression(e.layerDefinitions && e.layerDefinitions[q]), h.setGDBVersion(e.gdbVersion), h.setInfoTemplate(t.infoTemplate), h.setMaxAllowableOffset(g), h.setUseMapTime(!!e.useMapTime),
                                e.layerDrawingOptions && (e.layerDrawingOptions[q] && e.layerDrawingOptions[q].renderer) && h.setRenderer(e.layerDrawingOptions[q].renderer), d.push(h)
                        }
                    }
                }
            }
            if (u) {
                var D = new v;
                L(["./layers/FeatureLayer"], function(a) {
                    x = a;
                    D.resolve()
                });
                D.then(function() {
                    k._getSubLayerFeatureLayers(a, b)
                })
            } else {
                var B = [];
                f.forEach(d, function(a) {
                    if (!a.loaded) {
                        var b = new v;
                        I.once(a, "load, error", function() {
                            b.resolve()
                        });
                        B.push(b.promise)
                    }
                });
                B.length ? J(B).then(function() {
                    d = f.filter(d, function(a) {
                        return !a.loadError && a.isVisibleAtScale(n)
                    });
                    b.resolve(d)
                }) : (d = f.filter(d, function(a) {
                    return a.isVisibleAtScale(n)
                }), b.resolve(d))
            }
            return b.promise
        },
        _getLayerUrl: function(a, c) {
            var b = a.indexOf("?");
            return -1 === b ? a + "/" + c : a.substring(0, b) + "/" + c + a.substring(b)
        },
        _getOutFields: function(a) {
            var c;
            a.info && "esri.dijit.PopupTemplate" === a.declaredClass ? (c = [], f.forEach(a.info.fieldInfos, function(a) {
                var d = a.fieldName && a.fieldName.toLowerCase();
                d && ("shape" !== d && 0 !== d.indexOf("relationships/")) && c.push(a.fieldName)
            })) : c = ["*"];
            return c
        },
        _calculateClickTolerance: function(a) {
            var c =
                6,
                b, d;
            f.forEach(a, function(a) {
                if (b = a.renderer) "esri.renderer.SimpleRenderer" === b.declaredClass ? ((d = b.symbol) && d.xoffset && (c = Math.max(c, Math.abs(d.xoffset))), d && d.yoffset && (c = Math.max(c, Math.abs(d.yoffset)))) : ("esri.renderer.UniqueValueRenderer" === b.declaredClass || "esri.renderer.ClassBreaksRenderer" === b.declaredClass) && f.forEach(b.infos, function(a) {
                    (d = a.symbol) && d.xoffset && (c = Math.max(c, Math.abs(d.xoffset)));
                    d && d.yoffset && (c = Math.max(c, Math.abs(d.yoffset)))
                })
            });
            return c
        },
        _showInfoWindow: function(a,
            c) {
            var b = this.map.infoWindow,
                d = a.geometry,
                d = d && "point" === d.type ? d : c,
                f = a.getContent();
            b.setTitle(a.getTitle());
            if (f && w.isString(f.id)) {
                var g = G.byId(f.id);
                g && (g.set && /_PopupRenderer/.test(g.declaredClass)) && g.set("showTitle", !1)
            }
            b.setContent(f);
            b.show(d)
        },
        _isImageServiceLayer: function(a) {
            return "esri.layers.ArcGISImageServiceLayer" === a.declaredClass || "esri.layers.ArcGISImageServiceVectorLayer" === a.declaredClass
        }
    })
});
},
'esri/layerUtils':function(){
//>>built
define(["dojo/_base/lang", "dojo/_base/array", "dojo/_base/json", "dojo/has", "./kernel"], function(l, g, k, m, n) {
    return {
        _serializeLayerDefinitions: function(a) {
            var b = [],
                c = !1,
                e = /[:;]/;
            if (a && (g.forEach(a, function(a, d) {
                    a && (b.push([d, a]), !c && e.test(a) && (c = !0))
                }), 0 < b.length)) {
                var d;
                c ? (d = {}, g.forEach(b, function(a) {
                    d[a[0]] = a[1]
                }), d = k.toJson(d)) : (d = [], g.forEach(b, function(a) {
                    d.push(a[0] + ":" + a[1])
                }), d = d.join(";"));
                return d
            }
            return null
        },
        _serializeTimeOptions: function(a, b) {
            if (a) {
                var c = [];
                g.forEach(a, function(a, d) {
                    if (a) {
                        var f =
                            a.toJson();
                        b && -1 !== g.indexOf(b, d) && (f.useTime = !1);
                        c.push('"' + d + '":' + k.toJson(f))
                    }
                });
                if (c.length) return "{" + c.join(",") + "}"
            }
        },
        _getVisibleLayers: function(a, b) {
            var c = [],
                e, d, f;
            if (!a) return c;
            if (b) {
                c = b.concat();
                for (f = 0; f < a.length; f++) e = a[f], d = g.indexOf(a, e.id), e.subLayerIds && -1 < d && (c.splice(d, 1), c = c.concat(e.subLayerIds))
            } else c = this._getDefaultVisibleLayers(a);
            return c
        },
        _getDefaultVisibleLayers: function(a) {
            var b = [],
                c;
            if (!a) return b;
            for (c = 0; c < a.length; c++) 0 <= a[c].parentLayerId && -1 === g.indexOf(b, a[c].parentLayerId) &&
                g.some(a, function(b) {
                    return b.id === a[c].parentLayerId
                }) || a[c].defaultVisibility && b.push(a[c].id);
            return b
        },
        _getLayersForScale: function(a, b) {
            var c = [];
            if (0 < a && b) {
                var e;
                for (e = 0; e < b.length; e++)
                    if (!(0 <= b[e].parentLayerId && -1 === g.indexOf(c, b[e].parentLayerId) && g.some(b, function(a) {
                            return a.id === b[e].parentLayerId
                        })) && 0 <= b[e].id) {
                        var d = !0,
                            f = b[e].maxScale,
                            h = b[e].minScale;
                        if (0 < f || 0 < h) 0 < f && 0 < h ? d = f <= a && a <= h : 0 < f ? d = f <= a : 0 < h && (d = a <= h);
                        d && c.push(b[e].id)
                    }
            }
            return c
        }
    }
});
},
'dojo/promise/all':function(){
define([
	"../_base/array",
	"../Deferred",
	"../when"
], function(array, Deferred, when){
	"use strict";

	// module:
	//		dojo/promise/all

	var some = array.some;

	return function all(objectOrArray){
		// summary:
		//		Takes multiple promises and returns a new promise that is fulfilled
		//		when all promises have been resolved or one has been rejected.
		// description:
		//		Takes multiple promises and returns a new promise that is fulfilled
		//		when all promises have been resolved or one has been rejected. If one of
		//		the promises is rejected, the returned promise is also rejected. Canceling
		//		the returned promise will *not* cancel any passed promises.
		// objectOrArray: Object|Array?
		//		The promise will be fulfilled with a list of results if invoked with an
		//		array, or an object of results when passed an object (using the same
		//		keys). If passed neither an object or array it is resolved with an
		//		undefined value.
		// returns: dojo/promise/Promise

		var object, array;
		if(objectOrArray instanceof Array){
			array = objectOrArray;
		}else if(objectOrArray && typeof objectOrArray === "object"){
			object = objectOrArray;
		}

		var results;
		var keyLookup = [];
		if(object){
			array = [];
			for(var key in object){
				if(Object.hasOwnProperty.call(object, key)){
					keyLookup.push(key);
					array.push(object[key]);
				}
			}
			results = {};
		}else if(array){
			results = [];
		}

		if(!array || !array.length){
			return new Deferred().resolve(results);
		}

		var deferred = new Deferred();
		deferred.promise.always(function(){
			results = keyLookup = null;
		});
		var waiting = array.length;
		some(array, function(valueOrPromise, index){
			if(!object){
				keyLookup.push(index);
			}
			when(valueOrPromise, function(value){
				if(!deferred.isFulfilled()){
					results[keyLookup[index]] = value;
					if(--waiting === 0){
						deferred.resolve(results);
					}
				}
			}, deferred.reject);
			return deferred.isFulfilled();
		});
		return deferred.promise;	// dojo/promise/Promise
	};
});

},
'dojo/uacss':function(){
define(["./dom-geometry", "./_base/lang", "./domReady", "./sniff", "./_base/window"],
	function(geometry, lang, domReady, has, baseWindow){

	// module:
	//		dojo/uacss

	/*=====
	return {
		// summary:
		//		Applies pre-set CSS classes to the top-level HTML node, based on:
		//
		//		- browser (ex: dj_ie)
		//		- browser version (ex: dj_ie6)
		//		- box model (ex: dj_contentBox)
		//		- text direction (ex: dijitRtl)
		//
		//		In addition, browser, browser version, and box model are
		//		combined with an RTL flag when browser text is RTL. ex: dj_ie-rtl.
		//
		//		Returns the has() method.
	};
	=====*/

	var
		html = baseWindow.doc.documentElement,
		ie = has("ie"),
		opera = has("opera"),
		maj = Math.floor,
		ff = has("ff"),
		boxModel = geometry.boxModel.replace(/-/,''),

		classes = {
			"dj_quirks": has("quirks"),

			// NOTE: Opera not supported by dijit
			"dj_opera": opera,

			"dj_khtml": has("khtml"),

			"dj_webkit": has("webkit"),
			"dj_safari": has("safari"),
			"dj_chrome": has("chrome"),

			"dj_gecko": has("mozilla"),

			"dj_ios": has("ios"),
			"dj_android": has("android")
		}; // no dojo unsupported browsers

	if(ie){
		classes["dj_ie"] = true;
		classes["dj_ie" + maj(ie)] = true;
		classes["dj_iequirks"] = has("quirks");
	}
	if(ff){
		classes["dj_ff" + maj(ff)] = true;
	}

	classes["dj_" + boxModel] = true;

	// apply browser, browser version, and box model class names
	var classStr = "";
	for(var clz in classes){
		if(classes[clz]){
			classStr += clz + " ";
		}
	}
	html.className = lang.trim(html.className + " " + classStr);

	// If RTL mode, then add dj_rtl flag plus repeat existing classes with -rtl extension.
	// We can't run the code below until the <body> tag has loaded (so we can check for dir=rtl).
	domReady(function(){
		if(!geometry.isBodyLtr()){
			var rtlClassStr = "dj_rtl dijitRtl " + classStr.replace(/ /g, "-rtl ");
			html.className = lang.trim(html.className + " " + rtlClassStr + "dj_rtl dijitRtl " + classStr.replace(/ /g, "-rtl "));
		}
	});
	return has;
});

},
'esri/MapNavigationManager':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/connect", "dojo/_base/event", "dojo/mouse", "dojo/keys", "./kernel", "./MouseEvents", "./TouchEvents", "./PointerEvents", "./config", "./sniff", "./lang", "./fx", "./graphic", "./tileUtils", "./geometry/ScreenPoint", "./geometry/Extent", "./geometry/Rect", "./geometry/mathUtils", "./symbols/SimpleFillSymbol"], function(u, g, v, p, w, q, d, H, r, x, y, n, k, z, A, B, C, h, m, s, D, E) {
    var e = p.connect,
        f = p.disconnect,
        t = k("chrome"),
        F = k("safari"),
        G = [d.NUMPAD_PLUS, 61, d.NUMPAD_MINUS, d.UP_ARROW, d.NUMPAD_8,
            d.RIGHT_ARROW, d.NUMPAD_6, d.DOWN_ARROW, d.NUMPAD_2, d.LEFT_ARROW, d.NUMPAD_4, d.PAGE_UP, d.NUMPAD_9, d.PAGE_DOWN, d.NUMPAD_3, d.END, d.NUMPAD_1, d.HOME, d.NUMPAD_7
        ];
    return u(null, {
        declaredClass: "esri.MapNavigationManager",
        eventModel: "",
        constructor: function(a, b) {
            this.map = a;
            g.mixin(this, b);
            var c = a.__container;
            k("esri-pointer") ? (this.pointerEvents = new y(c, {
                map: a
            }), this.eventModel = "pointer") : k("esri-touch") ? (k("ios") || (this.mouseEvents = new r(c, {
                    map: a
                })), this.touchEvents = new x(c, {
                    map: a,
                    mouseEvents: this.mouseEvents
                }),
                this.eventModel = "touch") : (this.mouseEvents = new r(c, {
                map: a
            }), this.eventModel = "mouse");
            this._zoomRect = new B(null, new E(n.defaults.map.zoomSymbol));
            this._keyDx = this._keyDy = 0;
            this._adjustPinch = g.hitch(this, this._adjustPinch);
            this._adjustPinchEnd = g.hitch(this, this._adjustPinchEnd)
        },
        _panInit: function(a) {
            var b = this.mouseEvents;
            q.isLeft(a) && (this.map.isPan && !a.shiftKey) && (this._dragOrigin = new h(0, 0), g.mixin(this._dragOrigin, a.screenPoint), this._panStartHandle = e(b, "onMouseDragStart", this, this._panStart), this._panHandle =
                e(b, "onMouseDrag", this, this._pan), this._panEndHandle = e(b, "onMouseUp", this, this._panEnd), (t || F) && a.preventDefault())
        },
        _panStart: function(a) {
            this.map.setCursor("move");
            this.map.__panStart(a.screenPoint.x, a.screenPoint.y)
        },
        _pan: function(a) {
            this.map.__pan(a.screenPoint.x - this._dragOrigin.x, a.screenPoint.y - this._dragOrigin.y)
        },
        _panEnd: function(a) {
            f(this._panStartHandle);
            f(this._panHandle);
            f(this._panEndHandle);
            this._panStartHandle = this._panHandle = this._panEndHandle = null;
            var b = this.map;
            b.__panning && (b.__panEnd(a.screenPoint.x -
                this._dragOrigin.x, a.screenPoint.y - this._dragOrigin.y), b.resetMapCursor())
        },
        _zoomInit: function(a) {
            var b = this.map,
                c = this.pointerEvents || this.mouseEvents;
            if ((q.isLeft(a) || a.pointerType) && b.isRubberBandZoom && a.shiftKey) b.setCursor("crosshair"), this._dragOrigin = g.mixin({}, a.screenPoint), this._zoomDir = a.ctrlKey || a.metaKey ? -1 : 1, this.pointerEvents ? (this._zoomHandle = e(c, "onSwipeMove", this, this._zoom), this._zoomEndHandle = e(c, "onSwipeEnd", this, this._zoomEnd)) : (this._zoomHandle = e(c, "onMouseDrag", this, this._zoom),
                this._zoomEndHandle = e(c, "onMouseUp", this, this._zoomEnd)), t && a.preventDefault()
        },
        _zoom: function(a) {
            var b = this.map,
                c = this._normalizeRect(a).offset(b.__visibleRect.x, b.__visibleRect.y);
            a = b.graphics;
            var d = this._zoomRect;
            d.geometry || b.setCursor("crosshair");
            d.geometry && a.remove(d, !0);
            var e = b.toMap(new h(c.x, c.y)),
                c = b.toMap(new h(c.x + c.width, c.y + c.height)),
                c = new s(e.x, e.y, c.x - e.x, e.y - c.y, b.spatialReference);
            c._originOnly = !0;
            d.setGeometry(c);
            a.add(d, !0)
        },
        _zoomEnd: function(a) {
            var b = this._zoomRect,
                c = this.map,
                d = c.extent,
                e = c.spatialReference;
            f(this._zoomHandle);
            f(this._zoomEndHandle);
            this._zoomHandle = this._zoomEndHandle = null;
            if (c._canZoom(this._zoomDir) && b.getDojoShape()) {
                c.graphics.remove(b);
                b.geometry = null;
                a = this._normalizeRect(a);
                a.x += c.__visibleRect.x;
                a.y += c.__visibleRect.y;
                if (-1 === this._zoomDir) {
                    var g = d.getWidth();
                    a = (g * c.width / a.width - g) / 2;
                    e = new m(d.xmin - a, d.ymin - a, d.xmax + a, d.ymax + a, e)
                } else d = c.toMap({
                    x: a.x,
                    y: a.y + a.height
                }), a = c.toMap({
                    x: a.x + a.width,
                    y: a.y
                }), e = new m(d.x, d.y, a.x, a.y, e);
                c._extentUtil(null,
                    null, e)
            }
            b.getDojoShape() && c.graphics.remove(b, !0);
            this._zoomDir = 0;
            c.resetMapCursor()
        },
        _wheelZoom: function(a, b) {
            var c = this.map;
            if (!b) {
                if (c.smartNavigation && !a.shiftKey && !c._isPanningOrZooming()) {
                    c.disableScrollWheelZoom();
                    this._setScrollWheelPan(!0);
                    this._wheelPan(a);
                    return
                }
                var d = a.timeStamp;
                if (!z.isDefined(d) || 0 >= d) d = (new Date).getTime();
                if (100 > (this._mwts ? d - this._mwts : d)) return;
                this._mwts = d
            }
            c._canZoom(a.value) && c._extentUtil({
                numLevels: a.value,
                mapAnchor: a.mapPoint,
                screenAnchor: a.screenPoint
            })
        },
        _wheelPan: function(a) {
            var b =
                this.map;
            if (a.shiftKey && !b._isPanningOrZooming()) this._setScrollWheelPan(!1), b.enableScrollWheelZoom(), this._wheelZoom(a);
            else {
                var c = 0,
                    d = 0;
                k("ff") ? a.axis === a.HORIZONTAL_AXIS ? c = -a.detail : d = -a.detail : (c = a.wheelDeltaX, d = a.wheelDeltaY);
                b.translate(c, d)
            }
        },
        _setScrollWheelPan: function(a) {
            this.map.isScrollWheelPan = a;
            this.mouseEvents.enableMouseWheel(a);
            f(this._mwMacHandle);
            this._mwMacHandle = null;
            a && (this._mwMacHandle = e(this.mouseEvents, "onMouseWheel", this, this._wheelPan))
        },
        _recenter: function(a) {
            a.shiftKey &&
                !this.map._isPanningOrZooming() && this.map.centerAt(a.mapPoint)
        },
        _recenterZoom: function(a) {
            a.shiftKey && !this.map._isPanningOrZooming() && (a.value = a.ctrlKey || a.metaKey ? -1 : 1, this._wheelZoom(a, !0))
        },
        _dblClickZoom: function(a) {
            this.map._isPanningOrZooming() || (a.value = 1, this._wheelZoom(a, !0))
        },
        _twoFingerTap: function(a) {
            this.map._isPanningOrZooming() || (a.value = -1, this._wheelZoom(a, !0))
        },
        _keyDown: function(a) {
            var b = a.keyCode,
                c = this.map;
            if (-1 !== v.indexOf(G, b)) {
                if (b === d.NUMPAD_PLUS || 61 === b) c._extentUtil({
                    numLevels: 1
                });
                else if (b === d.NUMPAD_MINUS) c._extentUtil({
                    numLevels: -1
                });
                else {
                    c.__panning || c.__panStart(0, 0);
                    switch (b) {
                        case d.UP_ARROW:
                        case d.NUMPAD_8:
                            this._keyDy += 10;
                            break;
                        case d.RIGHT_ARROW:
                        case d.NUMPAD_6:
                            this._keyDx -= 10;
                            break;
                        case d.DOWN_ARROW:
                        case d.NUMPAD_2:
                            this._keyDy -= 10;
                            break;
                        case d.LEFT_ARROW:
                        case d.NUMPAD_4:
                            this._keyDx += 10;
                            break;
                        case d.PAGE_UP:
                        case d.NUMPAD_9:
                            this._keyDx -= 10;
                            this._keyDy += 10;
                            break;
                        case d.PAGE_DOWN:
                        case d.NUMPAD_3:
                            this._keyDx -= 10;
                            this._keyDy -= 10;
                            break;
                        case d.END:
                        case d.NUMPAD_1:
                            this._keyDx +=
                                10;
                            this._keyDy -= 10;
                            break;
                        case d.HOME:
                        case d.NUMPAD_7:
                            this._keyDx += 10;
                            this._keyDy += 10;
                            break;
                        default:
                            return
                    }
                    c.__pan(this._keyDx, this._keyDy)
                }
                w.stop(a)
            }
        },
        _keyEnd: function(a) {
            var b = this.map;
            b.__panning && a.keyCode !== d.SHIFT && (b.__panEnd(this._keyDx, this._keyDy), this._keyDx = this._keyDy = 0)
        },
        _swipeInit: function(a) {
            var b = this.map,
                b = b._zoomAnim || b._panAnim;
            if (a.shiftKey) return !1;
            b && b._active && (b.stop(), b._fire("onEnd", [b.node]));
            this._dragOrigin = new h(0, 0);
            g.mixin(this._dragOrigin, a.screenPoint);
            f(this._swipeHandle);
            f(this._swipeEndHandle);
            this._swipeHandle = e(this.touchEvents || this.pointerEvents, "onSwipeMove", this, this._swipe);
            this._swipeEndHandle = e(this.touchEvents || this.pointerEvents, "onSwipeEnd", this, this._swipeEnd)
        },
        _swipe: function(a) {
            var b = this.map;
            b.__panning ? (this._panX = a.screenPoint.x, this._panY = a.screenPoint.y, b.__pan(a.screenPoint.x - this._dragOrigin.x, a.screenPoint.y - this._dragOrigin.y)) : (b.setCursor("move"), b.__panStart(a.screenPoint.x, a.screenPoint.y))
        },
        _swipeEnd: function(a) {
            f(this._swipeHandle);
            f(this._swipeEndHandle);
            this._swipeHandle = this._swipeEndHandle = null;
            var b = this.map;
            b.__panning && (b.resetMapCursor(), b.__panEnd(a.screenPoint.x - this._dragOrigin.x, a.screenPoint.y - this._dragOrigin.y))
        },
        _pinchInit: function(a) {
            var b = this.map,
                c = b._zoomAnim || b._panAnim;
            c && c._active ? (c.stop(), c._fire("onEnd", [c.node])) : b.__panning && (a.screenPoint = new h(this._panX, this._panY), a.mapPoint = b.toMap(a.screenPoint), this._swipeEnd(a));
            f(this._pinchHandle);
            f(this._pinchEndHandle);
            this._pinchHandle = e(this.touchEvents ||
                this.pointerEvents, "onPinchMove", this, this._pinch);
            this._pinchEndHandle = e(this.touchEvents || this.pointerEvents, "onPinchEnd", this, this._pinchEnd)
        },
        _pinch: function(a) {
            var b = this.map;
            a.screenPoints && (this.currLength = D.getLength(a.screenPoints[0], a.screenPoints[1]), b.__zooming ? (a = this.currLength / this._length, this._zoomStartExtent = this.__scaleExtent(b.extent, a, this._dragOrigin), b.__zoom(this._zoomStartExtent, a, this._dragOrigin)) : (this._dragOrigin = new h((a.screenPoints[0].x + a.screenPoints[1].x) / 2, (a.screenPoints[0].y +
                a.screenPoints[1].y) / 2), this._length = this.currLength, b.__zoomStart(b.extent, this._dragOrigin)), b._fireOnScale(this.currLength / this._length, this._dragOrigin, !0))
        },
        _pinchEnd: function(a) {
            a = this.map;
            f(this._pinchHandle);
            f(this._pinchEndHandle);
            this._pinchHandle = this._pinchEndHandle = null;
            if (a.__zooming && null === a._zoomAnim) {
                var b = this.currLength / this._length,
                    c = a.extent.getWidth();
                this._zoomAnimAnchor = a.toMap(this._dragOrigin);
                this._zoomStartExtent = this.__scaleExtent(a.extent, 1 / b, this._zoomAnimAnchor);
                if (a.__tileInfo) {
                    var d =
                        C.getCandidateTileInfo(a, a.__tileInfo, this._zoomStartExtent),
                        e = a.__getExtentForLevel(d.lod.level, this._zoomAnimAnchor),
                        g = a.getMinZoom(),
                        k = a.getMaxZoom(),
                        h = e.extent,
                        e = e.lod,
                        m = c / h.getWidth(),
                        l = d.lod.level;
                    1 > b ? m > b && l-- : m < b && l++;
                    l < g ? l = g : l > k && (l = k);
                    l !== d.lod.level && (e = a.__getExtentForLevel(l, this._zoomAnimAnchor), h = e.extent, e = e.lod);
                    this._zoomEndExtent = h;
                    this._zoomEndLod = e;
                    a._zoomAnim = A.animateRange({
                        range: {
                            start: c / this._zoomStartExtent.getWidth(),
                            end: m
                        },
                        duration: n.defaults.map.zoomDuration,
                        rate: n.defaults.map.zoomRate,
                        onAnimate: this._adjustPinch,
                        onEnd: this._adjustPinchEnd
                    });
                    a._zoomAnim.play();
                    a._fireOnScale(a.extent.getWidth() / this._zoomEndExtent.getWidth(), this._dragOrigin)
                } else this._zoomEndExtent = this._zoomStartExtent, a._fireOnScale(a.extent.getWidth() / this._zoomEndExtent.getWidth(), this._dragOrigin), this._adjustPinchEnd()
            }
        },
        _adjustPinch: function(a) {
            var b = this.__scaleExtent(this.map.extent, a, this._zoomAnimAnchor);
            this.map.__zoom(b, a, this._dragOrigin)
        },
        _adjustPinchEnd: function() {
            var a = this.map,
                b = a.extent.getWidth() /
                this._zoomEndExtent.getWidth(),
                c = this.__scaleExtent(a.extent, 1 / b, this._zoomAnimAnchor),
                d = this._dragOrigin,
                e = this._zoomEndLod;
            this._zoomStartExtent = this._zoomEndExtent = this._zoomEndLod = this._dragOrigin = a._zoomAnim = this._zoomAnimAnchor = null;
            a.__zoomEnd(c, b, d, e, !0)
        },
        __scaleExtent: function(a, b, c) {
            c = c || a.getCenter();
            b = a.expand(b);
            var d = a.xmin - (b.getWidth() - a.getWidth()) * (c.x - a.xmin) / a.getWidth();
            c = a.ymax - (b.getHeight() - a.getHeight()) * (c.y - a.ymax) / a.getHeight();
            return new m(d, c - b.getHeight(), d + b.getWidth(),
                c, a.spatialReference)
        },
        _normalizeRect: function(a) {
            a = a.screenPoint;
            var b = this._dragOrigin.x,
                c = this._dragOrigin.y;
            a = new s((a.x < b ? a.x : b) - this.map.__visibleRect.x, (a.y < c ? a.y : c) - this.map.__visibleRect.y, Math.abs(a.x - b), Math.abs(a.y - c));
            delete a.spatialReference;
            0 === a.width && (a.width = 1);
            0 === a.height && (a.height = 1);
            return a
        },
        setImmediateClick: function(a) {
            switch (this.eventModel) {
                case "mouse":
                    this.mouseEvents.setImmediateClick(a);
                    break;
                case "touch":
                    this.touchEvents.setImmediateTap(a);
                    this.mouseEvents && this.mouseEvents.setImmediateClick(a);
                    break;
                case "pointer":
                    this.pointerEvents.setImmediateTap(a)
            }
        },
        enablePan: function() {
            this.disablePan();
            switch (this.eventModel) {
                case "mouse":
                    this._panInitHandle = e(this.mouseEvents, "onMouseDown", this, this._panInit);
                    break;
                case "touch":
                    this._panInitHandle = e(this.mouseEvents, "onMouseDown", this, this._panInit);
                    this._swipeInitHandle = e(this.touchEvents, "onSwipeStart", this, this._swipeInit);
                    break;
                case "pointer":
                    this._swipeInitHandle = e(this.pointerEvents, "onSwipeStart", this, this._swipeInit)
            }
        },
        disablePan: function() {
            f(this._panInitHandle);
            this._panInitHandle = null;
            f(this._swipeInitHandle);
            this._swipeInitHandle = null
        },
        enableRubberBandZoom: function() {
            this.disableRubberBandZoom();
            this._zoomInitHandle = this.pointerEvents ? e(this.pointerEvents, "onSwipeStart", this, this._zoomInit) : e(this.mouseEvents, "onMouseDown", this, this._zoomInit)
        },
        disableRubberBandZoom: function() {
            f(this._zoomInitHandle);
            this._zoomInitHandle = null
        },
        enablePinchZoom: function() {
            this.disablePinchZoom();
            if ("touch" === this.eventModel || "pointer" === this.eventModel) this._pinchInitHandle =
                e(this.touchEvents || this.pointerEvents, "onPinchStart", this, this._pinchInit)
        },
        disablePinchZoom: function() {
            f(this._pinchInitHandle);
            this._pinchInitHandle = null
        },
        enableScrollWheelZoom: function() {
            this.disableScrollWheelZoom();
            this._wheelHandle = e(this.mouseEvents || this.pointerEvents, "onMouseWheel", this, this._wheelZoom)
        },
        disableScrollWheelZoom: function() {
            f(this._wheelHandle);
            this._wheelHandle = null
        },
        enableDoubleClickZoom: function() {
            this.disableDoubleClickZoom();
            switch (this.eventModel) {
                case "mouse":
                    this._dblClickHandle =
                        e(this.mouseEvents, "onDblClick", this, this._dblClickZoom);
                    break;
                case "touch":
                    this._dblClickHandle = e(this.mouseEvents, "onDblClick", this, this._dblClickZoom);
                    this._dblTapHandle = e(this.touchEvents, "onDoubleTap", this, this._dblClickZoom);
                    this._zoomOutHandle = e(this.touchEvents, "onTwoFingerTap", this, this._twoFingerTap);
                    break;
                case "pointer":
                    this._dblTapHandle = e(this.pointerEvents, "onDoubleTap", this, this._dblClickZoom), this._zoomOutHandle = e(this.pointerEvents, "onTwoFingerTap", this, this._twoFingerTap)
            }
        },
        disableDoubleClickZoom: function() {
            f(this._dblClickHandle);
            f(this._zoomOutHandle);
            this._dblTapHandle && f(this._dblTapHandle);
            this._dblClickHandle = this._zoomOutHandle = this._dblTapHandle = null
        },
        enableShiftDoubleClickZoom: function() {
            this.disableShiftDoubleClickZoom();
            this._sDblClickHandle = e(this.pointerEvents || this.mouseEvents, "onDblClick", this, this._recenterZoom)
        },
        disableShiftDoubleClickZoom: function() {
            f(this._sDblClickHandle);
            this._sDblClickHandle = null
        },
        enableClickRecenter: function() {
            this.disableClickRecenter();
            this._recenterHandle = e(this.pointerEvents || this.mouseEvents,
                "onClick", this, this._recenter)
        },
        disableClickRecenter: function() {
            f(this._recenterHandle);
            this._recenterHandle = null
        },
        enableKeyboardNavigation: function() {
            this.disableKeyboardNavigation();
            this._keyHandle = e(this.pointerEvents || this.mouseEvents, "onKeyDown", this, this._keyDown);
            this._keyEndHandle = e(this.pointerEvents || this.mouseEvents, "onKeyUp", this, this._keyEnd)
        },
        disableKeyboardNavigation: function() {
            f(this._keyHandle);
            f(this._keyEndHandle);
            this._keyHandle = this._keyEndHandle = null
        },
        enableNavigation: function() {
            var a =
                this.map;
            a && a.loaded && (a.enableDoubleClickZoom(), a.enableClickRecenter(), a.enablePan(), a.enableRubberBandZoom(), this.enablePinchZoom(), a.enableKeyboardNavigation(), a.smartNavigation ? this._setScrollWheelPan(!0) : a.enableScrollWheelZoom())
        },
        disableNavigation: function() {
            var a = this.map;
            a && a.loaded && (a.disableDoubleClickZoom(), a.disableClickRecenter(), a.disablePan(), a.disableRubberBandZoom(), this.disablePinchZoom(), a.disableKeyboardNavigation(), a.disableScrollWheelZoom(), a.smartNavigation && this._setScrollWheelPan(!1))
        },
        destroy: function() {
            this.touchEvents && this.touchEvents.destroy();
            this.mouseEvents && this.mouseEvents.destroy();
            this.pointerEvents && this.pointerEvents.destroy();
            var a, b = [this._panInitHandle, this._panStartHandle, this._panHandle, this._panEndHandle, this._zoomInitHandle, this._zoomHandle, this._zoomEndHandle, this._wheelHandle, this._mwMacHandle, this._dblClickHandle, this._zoomOutHandle, this._recenterHandle, this._sDblClickHandle, this._dblTapHandle, this._keyHandle, this._keyEndHandle, this._swipeInitHandle, this._swipeHandle,
                this._swipeEndHandle, this._pinchInitHandle, this._pinchHandle, this._pinchEndHandle
            ];
            for (a = 0; a < b.length; a++) f(b[a]);
            this.map = this.touchEvents = this.mouseEvents = this.eventModel = this.pointerEvents = this._zoomRect = this._dragOrigin = this._panInitHandle = this._panStartHandle = this._panHandle = this._panEndHandle = this._zoomInitHandle = this._zoomHandle = this._zoomEndHandle = this._wheelHandle = this._mwMacHandle = this._dblClickHandle = this._zoomOutHandle = this._recenterHandle = this._sDblClickHandle = this._dblTapHandle = this._keyHandle =
                this._keyEndHandle = this._swipeInitHandle = this._swipeHandle = this._swipeEndHandle = this._pinchInitHandle = this._pinchHandle = this._pinchEndHandle = null
        }
    })
});
},
'esri/MouseEvents':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/html", "dojo/_base/lang", "dojo/_base/sniff", "dojo/_base/connect", "dojo/_base/event", "./kernel", "./Evented", "./geometry/Point", "./geometry/ScreenPoint"], function(n, p, h, e, k, g, l, q, r, m) {
    var c = k.connect,
        d = k.disconnect;
    return n([q], {
        declaredClass: "esri.MouseEvents",
        doubleClickDuration: 300,
        minWheelValue: 1,
        maxWheelValue: 1,
        mozWheelDivisor: -1 !== e("mac") ? 1 : 3,
        wheelDivisor: 2 > e("chrome") ? 360 : 120,
        preventPageScroll: !0,
        map: null,
        constructor: function(a, b) {
            this.node = a;
            h.mixin(this, b);
            var f =
                function(a) {
                    g.stop(a);
                    return !1
                };
            e("mozilla") && p.style(a, "MozUserSelect", "none");
            this._handles = [c(a, "onselectstart", f), c(a, "ondragstart", f), c(a, "onmouseenter", this, this._onMouseEnterHandler), c(a, "onmouseleave", this, this._onMouseLeaveHandler), c(a, "onmousedown", this, this._onMouseDownHandler), c(a, "onclick", this, this._onClickHandler), c(a, "ondblclick", this, this._onDblClickHandler)];
            this._onMouseMoveHandler_connect = c(a, "onmousemove", this, this._onMouseMoveHandler);
            this._onMouseUpHandler_connect = c(a, "onmouseup",
                this, this._onMouseUpHandler);
            this._fireClickEvent = h.hitch(this, this._fireClickEvent);
            this._initialDuration = this.doubleClickDuration;
            this.preventPageScroll = (f = this.map) ? f.isScrollWheelZoom || f.isScrollWheelPan : this.preventPageScroll;
            this.enableMouseWheel(!1)
        },
        _fire: function(a, b) {
            if (!this._preventClick || !("onClick" === a || "onDblClick" === a)) {
                if (this[a]) this[a](b);
                if (this.map && this.map[a]) this.map[a](b)
            }
        },
        _processEvent: function(a) {
            a = g.fix(a, a.target);
            var b = this.map,
                c = b && b.position;
            c && ("DOMMouseScroll" ===
                a.type && 3 > e("ff") ? a.screenPoint = new m(window.scrollX + a.screenX - c.x, window.scrollY + a.screenY - c.y) : a.screenPoint = new m(a.pageX - c.x, a.pageY - c.y), a.mapPoint = b.extent ? b.toMap(a.screenPoint) : new r);
            a.numPoints = 0;
            return a
        },
        _onMouseEnterHandler: function(a) {
            d(this._onKeyDown_connect);
            d(this._onKeyUp_connect);
            this._onKeyDown_connect = c(document, "onkeydown", this, this._onKeyDownHandler);
            this._onKeyUp_connect = c(document, "onkeyup", this, this._onKeyUpHandler);
            this._fire("onMouseOver", this._processEvent(a))
        },
        _onMouseLeaveHandler: function(a) {
            d(this._onKeyDown_connect);
            d(this._onKeyUp_connect);
            this._onKeyDown_connect = this._onKeyUp_connect = null;
            this._fire("onMouseOut", this._processEvent(a))
        },
        _onMouseMoveHandler: function(a) {
            this._dragEnd ? this._dragEnd = !1 : this._fire("onMouseMove", this._processEvent(a))
        },
        _onMouseDownHandler: function(a) {
            d(this._onMouseMoveHandler_connect);
            this._onMouseMoveHandler_connect = null;
            this.node.setCapture && this.node.setCapture(!1);
            this._onMouseDragHandler_connect = c(document, "onmousemove", this, this._onMouseDragHandler);
            this._startX = a.pageX;
            this._startY =
                a.pageY;
            this._fire("onMouseDown", this._processEvent(a))
        },
        _onMouseUpHandler: function(a) {
            var b = this.node;
            b.releaseCapture && b.releaseCapture();
            d(this._onMouseDragHandler_connect);
            this._onMouseDragHandler_connect = null;
            d(this._onMouseMoveHandler_connect);
            this._onMouseMoveHandler_connect = c(b, "onmousemove", this, this._onMouseMoveHandler);
            this._fire("onMouseUp", this._processEvent(a))
        },
        _onMouseDragHandler: function(a) {
            d(this._onMouseDragHandler_connect);
            this._onMouseDragHandler_connect = c(document, "onmousemove",
                this, this._onMouseDraggingHandler);
            d(this._onMouseUpHandler_connect);
            this._onMouseUpHandler_connect = c(document, "onmouseup", this, this._onDragMouseUpHandler);
            this._docLeaveConnect = c(document, "onmouseout", this, this._onDocMouseOut);
            this._fire("onMouseDragStart", this._processEvent(a))
        },
        _onMouseDraggingHandler: function(a) {
            g.stop(a);
            this._fire("onMouseDrag", this._processEvent(a))
        },
        _onDragMouseUpHandler: function(a) {
            var b = this.node;
            b.releaseCapture && b.releaseCapture();
            this._dragEnd = !0;
            d(this._docLeaveConnect);
            d(this._onMouseDragHandler_connect);
            d(this._onMouseUpHandler_connect);
            this._docLeaveConnect = this._onMouseDragHandler_connect = null;
            this._onMouseMoveHandler_connect = c(b, "onmousemove", this, this._onMouseMoveHandler);
            this._onMouseUpHandler_connect = c(b, "onmouseup", this, this._onMouseUpHandler);
            a = this._processEvent(a);
            this._fire("onMouseDragEnd", a);
            this._fire("onMouseUp", a)
        },
        _onDocMouseOut: function(a) {
            var b = 9 > e("ie") ? a.toElement : a.relatedTarget,
                c = b && b.nodeName.toLowerCase();
            (!b || e("chrome") && "html" === c) &&
            this._onDragMouseUpHandler(a)
        },
        _onClickHandler: function(a) {
            a = this._processEvent(a);
            a.pageX !== this._startX || a.pageY !== this._startY || (clearTimeout(this._clickTimer), this._clickEvent = h.mixin({}, a), this._clickTimer = setTimeout(this._fireClickEvent, this.doubleClickDuration))
        },
        _fireClickEvent: function() {
            clearTimeout(this._clickTimer);
            9 > e("ie") && (this._clickEvent.graphic = l._ieGraphic, delete l._ieGraphic);
            this._fire("onClick", this._clickEvent)
        },
        _onDblClickHandler: function(a) {
            clearTimeout(this._clickTimer);
            this._fire("onDblClick", this._processEvent(a))
        },
        _onMouseWheelHandler: function(a) {
            var b = this.map;
            (b ? b.isScrollWheelZoom || b.isScrollWheelPan : this.preventPageScroll) && g.stop(a);
            var b = e("ff") || e("mozilla") ? -a.detail / this.mozWheelDivisor : a.wheelDelta / this.wheelDivisor,
                c = Math.abs(b),
                c = c <= this.minWheelValue ? this.minWheelValue : this.maxWheelValue;
            a.value = 0 > b ? -c : c;
            this._fire("onMouseWheel", this._processEvent(a))
        },
        _onKeyDownHandler: function(a) {
            this._fire("onKeyDown", a)
        },
        _onKeyUpHandler: function(a) {
            this._fire("onKeyUp",
                a)
        },
        enableMouseWheel: function(a) {
            d(this._scrollHandle);
            this._scrollHandle = c(this.node, e("ff") || e("mozilla") ? a ? "MozMousePixelScroll" : "DOMMouseScroll" : "onmousewheel", this, this._onMouseWheelHandler)
        },
        setImmediateClick: function(a) {
            this.doubleClickDuration = a ? 0 : this._initialDuration
        },
        preventClickEvents: function(a) {
            this._preventClick = a
        },
        destroy: function() {
            var a = this._handles.concat([this._onMouseMoveHandler_connect, this._onMouseUpHandler_connect, this._onMouseDragHandler_connect, this._scrollHandle, this._onKeyDown_connect,
                    this._onKeyUp_connect, this._docLeaveConnect
                ]),
                b;
            for (b = 0; b < a.length; b++) d(a[b]);
            clearTimeout(this._clickTimer);
            this.node = this.map = this._handles = this._clickEvent = this._onMouseMoveHandler_connect = this._onMouseUpHandler_connect = this._onMouseDragHandler_connect = this._scrollHandle = this._onKeyDown_connect = this._onKeyUp_connect = this._docLeaveConnect = null
        }
    })
});
},
'dojo/_base/html':function(){
define(["./kernel", "../dom", "../dom-style", "../dom-attr", "../dom-prop", "../dom-class", "../dom-construct", "../dom-geometry"], function(dojo, dom, style, attr, prop, cls, ctr, geom){
	// module:
	//		dojo/dom

	/*=====
	return {
		// summary:
		//		This module is a stub for the core dojo DOM API.
	};
	=====*/

	// mix-in dom
	dojo.byId = dom.byId;
	dojo.isDescendant = dom.isDescendant;
	dojo.setSelectable = dom.setSelectable;

	// mix-in dom-attr
	dojo.getAttr = attr.get;
	dojo.setAttr = attr.set;
	dojo.hasAttr = attr.has;
	dojo.removeAttr = attr.remove;
	dojo.getNodeProp = attr.getNodeProp;

	dojo.attr = function(node, name, value){
		// summary:
		//		Gets or sets an attribute on an HTML element.
		// description:
		//		Handles normalized getting and setting of attributes on DOM
		//		Nodes. If 2 arguments are passed, and a the second argument is a
		//		string, acts as a getter.
		//
		//		If a third argument is passed, or if the second argument is a
		//		map of attributes, acts as a setter.
		//
		//		When passing functions as values, note that they will not be
		//		directly assigned to slots on the node, but rather the default
		//		behavior will be removed and the new behavior will be added
		//		using `dojo.connect()`, meaning that event handler properties
		//		will be normalized and that some caveats with regards to
		//		non-standard behaviors for onsubmit apply. Namely that you
		//		should cancel form submission using `dojo.stopEvent()` on the
		//		passed event object instead of returning a boolean value from
		//		the handler itself.
		// node: DOMNode|String
		//		id or reference to the element to get or set the attribute on
		// name: String|Object
		//		the name of the attribute to get or set.
		// value: String?
		//		The value to set for the attribute
		// returns:
		//		when used as a getter, the value of the requested attribute
		//		or null if that attribute does not have a specified or
		//		default value;
		//
		//		when used as a setter, the DOM node
		//
		// example:
		//	|	// get the current value of the "foo" attribute on a node
		//	|	dojo.attr(dojo.byId("nodeId"), "foo");
		//	|	// or we can just pass the id:
		//	|	dojo.attr("nodeId", "foo");
		//
		// example:
		//	|	// use attr() to set the tab index
		//	|	dojo.attr("nodeId", "tabIndex", 3);
		//	|
		//
		// example:
		//	Set multiple values at once, including event handlers:
		//	|	dojo.attr("formId", {
		//	|		"foo": "bar",
		//	|		"tabIndex": -1,
		//	|		"method": "POST",
		//	|		"onsubmit": function(e){
		//	|			// stop submitting the form. Note that the IE behavior
		//	|			// of returning true or false will have no effect here
		//	|			// since our handler is connect()ed to the built-in
		//	|			// onsubmit behavior and so we need to use
		//	|			// dojo.stopEvent() to ensure that the submission
		//	|			// doesn't proceed.
		//	|			dojo.stopEvent(e);
		//	|
		//	|			// submit the form with Ajax
		//	|			dojo.xhrPost({ form: "formId" });
		//	|		}
		//	|	});
		//
		// example:
		//	Style is s special case: Only set with an object hash of styles
		//	|	dojo.attr("someNode",{
		//	|		id:"bar",
		//	|		style:{
		//	|			width:"200px", height:"100px", color:"#000"
		//	|		}
		//	|	});
		//
		// example:
		//	Again, only set style as an object hash of styles:
		//	|	var obj = { color:"#fff", backgroundColor:"#000" };
		//	|	dojo.attr("someNode", "style", obj);
		//	|
		//	|	// though shorter to use `dojo.style()` in this case:
		//	|	dojo.style("someNode", obj);

		if(arguments.length == 2){
			return attr[typeof name == "string" ? "get" : "set"](node, name);
		}
		return attr.set(node, name, value);
	};

	// mix-in dom-class
	dojo.hasClass = cls.contains;
	dojo.addClass = cls.add;
	dojo.removeClass = cls.remove;
	dojo.toggleClass = cls.toggle;
	dojo.replaceClass = cls.replace;

	// mix-in dom-construct
	dojo._toDom = dojo.toDom = ctr.toDom;
	dojo.place = ctr.place;
	dojo.create = ctr.create;
	dojo.empty = function(node){ ctr.empty(node); };
	dojo._destroyElement = dojo.destroy = function(node){ ctr.destroy(node); };

	// mix-in dom-geometry
	dojo._getPadExtents = dojo.getPadExtents = geom.getPadExtents;
	dojo._getBorderExtents = dojo.getBorderExtents = geom.getBorderExtents;
	dojo._getPadBorderExtents = dojo.getPadBorderExtents = geom.getPadBorderExtents;
	dojo._getMarginExtents = dojo.getMarginExtents = geom.getMarginExtents;
	dojo._getMarginSize = dojo.getMarginSize = geom.getMarginSize;
	dojo._getMarginBox = dojo.getMarginBox = geom.getMarginBox;
	dojo.setMarginBox = geom.setMarginBox;
	dojo._getContentBox = dojo.getContentBox = geom.getContentBox;
	dojo.setContentSize = geom.setContentSize;
	dojo._isBodyLtr = dojo.isBodyLtr = geom.isBodyLtr;
	dojo._docScroll = dojo.docScroll = geom.docScroll;
	dojo._getIeDocumentElementOffset = dojo.getIeDocumentElementOffset = geom.getIeDocumentElementOffset;
	dojo._fixIeBiDiScrollLeft = dojo.fixIeBiDiScrollLeft = geom.fixIeBiDiScrollLeft;
	dojo.position = geom.position;

	dojo.marginBox = function marginBox(/*DomNode|String*/node, /*Object?*/box){
		// summary:
		//		Getter/setter for the margin-box of node.
		// description:
		//		Getter/setter for the margin-box of node.
		//		Returns an object in the expected format of box (regardless
		//		if box is passed). The object might look like:
		//		`{ l: 50, t: 200, w: 300: h: 150 }`
		//		for a node offset from its parent 50px to the left, 200px from
		//		the top with a margin width of 300px and a margin-height of
		//		150px.
		// node:
		//		id or reference to DOM Node to get/set box for
		// box:
		//		If passed, denotes that dojo.marginBox() should
		//		update/set the margin box for node. Box is an object in the
		//		above format. All properties are optional if passed.
		// example:
		//		Retrieve the margin box of a passed node
		//	|	var box = dojo.marginBox("someNodeId");
		//	|	console.dir(box);
		//
		// example:
		//		Set a node's margin box to the size of another node
		//	|	var box = dojo.marginBox("someNodeId");
		//	|	dojo.marginBox("someOtherNode", box);
		return box ? geom.setMarginBox(node, box) : geom.getMarginBox(node); // Object
	};

	dojo.contentBox = function contentBox(/*DomNode|String*/node, /*Object?*/box){
		// summary:
		//		Getter/setter for the content-box of node.
		// description:
		//		Returns an object in the expected format of box (regardless if box is passed).
		//		The object might look like:
		//		`{ l: 50, t: 200, w: 300: h: 150 }`
		//		for a node offset from its parent 50px to the left, 200px from
		//		the top with a content width of 300px and a content-height of
		//		150px. Note that the content box may have a much larger border
		//		or margin box, depending on the box model currently in use and
		//		CSS values set/inherited for node.
		//		While the getter will return top and left values, the
		//		setter only accepts setting the width and height.
		// node:
		//		id or reference to DOM Node to get/set box for
		// box:
		//		If passed, denotes that dojo.contentBox() should
		//		update/set the content box for node. Box is an object in the
		//		above format, but only w (width) and h (height) are supported.
		//		All properties are optional if passed.
		return box ? geom.setContentSize(node, box) : geom.getContentBox(node); // Object
	};

	dojo.coords = function(/*DomNode|String*/node, /*Boolean?*/includeScroll){
		// summary:
		//		Deprecated: Use position() for border-box x/y/w/h
		//		or marginBox() for margin-box w/h/l/t.
		//
		//		Returns an object that measures margin-box (w)idth/(h)eight
		//		and absolute position x/y of the border-box. Also returned
		//		is computed (l)eft and (t)op values in pixels from the
		//		node's offsetParent as returned from marginBox().
		//		Return value will be in the form:
		//|			{ l: 50, t: 200, w: 300: h: 150, x: 100, y: 300 }
		//		Does not act as a setter. If includeScroll is passed, the x and
		//		y params are affected as one would expect in dojo.position().
		dojo.deprecated("dojo.coords()", "Use dojo.position() or dojo.marginBox().");
		node = dom.byId(node);
		var s = style.getComputedStyle(node), mb = geom.getMarginBox(node, s);
		var abs = geom.position(node, includeScroll);
		mb.x = abs.x;
		mb.y = abs.y;
		return mb;	// Object
	};

	// mix-in dom-prop
	dojo.getProp = prop.get;
	dojo.setProp = prop.set;

	dojo.prop = function(/*DomNode|String*/node, /*String|Object*/name, /*String?*/value){
		// summary:
		//		Gets or sets a property on an HTML element.
		// description:
		//		Handles normalized getting and setting of properties on DOM
		//		Nodes. If 2 arguments are passed, and a the second argument is a
		//		string, acts as a getter.
		//
		//		If a third argument is passed, or if the second argument is a
		//		map of attributes, acts as a setter.
		//
		//		When passing functions as values, note that they will not be
		//		directly assigned to slots on the node, but rather the default
		//		behavior will be removed and the new behavior will be added
		//		using `dojo.connect()`, meaning that event handler properties
		//		will be normalized and that some caveats with regards to
		//		non-standard behaviors for onsubmit apply. Namely that you
		//		should cancel form submission using `dojo.stopEvent()` on the
		//		passed event object instead of returning a boolean value from
		//		the handler itself.
		// node:
		//		id or reference to the element to get or set the property on
		// name:
		//		the name of the property to get or set.
		// value:
		//		The value to set for the property
		// returns:
		//		when used as a getter, the value of the requested property
		//		or null if that attribute does not have a specified or
		//		default value;
		//
		//		when used as a setter, the DOM node
		//
		// example:
		//	|	// get the current value of the "foo" property on a node
		//	|	dojo.prop(dojo.byId("nodeId"), "foo");
		//	|	// or we can just pass the id:
		//	|	dojo.prop("nodeId", "foo");
		//
		// example:
		//	|	// use prop() to set the tab index
		//	|	dojo.prop("nodeId", "tabIndex", 3);
		//	|
		//
		// example:
		//	Set multiple values at once, including event handlers:
		//	|	dojo.prop("formId", {
		//	|		"foo": "bar",
		//	|		"tabIndex": -1,
		//	|		"method": "POST",
		//	|		"onsubmit": function(e){
		//	|			// stop submitting the form. Note that the IE behavior
		//	|			// of returning true or false will have no effect here
		//	|			// since our handler is connect()ed to the built-in
		//	|			// onsubmit behavior and so we need to use
		//	|			// dojo.stopEvent() to ensure that the submission
		//	|			// doesn't proceed.
		//	|			dojo.stopEvent(e);
		//	|
		//	|			// submit the form with Ajax
		//	|			dojo.xhrPost({ form: "formId" });
		//	|		}
		//	|	});
		//
		// example:
		//		Style is s special case: Only set with an object hash of styles
		//	|	dojo.prop("someNode",{
		//	|		id:"bar",
		//	|		style:{
		//	|			width:"200px", height:"100px", color:"#000"
		//	|		}
		//	|	});
		//
		// example:
		//		Again, only set style as an object hash of styles:
		//	|	var obj = { color:"#fff", backgroundColor:"#000" };
		//	|	dojo.prop("someNode", "style", obj);
		//	|
		//	|	// though shorter to use `dojo.style()` in this case:
		//	|	dojo.style("someNode", obj);

		if(arguments.length == 2){
			return prop[typeof name == "string" ? "get" : "set"](node, name);
		}
		// setter
		return prop.set(node, name, value);
	};

	// mix-in dom-style
	dojo.getStyle = style.get;
	dojo.setStyle = style.set;
	dojo.getComputedStyle = style.getComputedStyle;
	dojo.__toPixelValue = dojo.toPixelValue = style.toPixelValue;

	dojo.style = function(node, name, value){
		// summary:
		//		Accesses styles on a node. If 2 arguments are
		//		passed, acts as a getter. If 3 arguments are passed, acts
		//		as a setter.
		// description:
		//		Getting the style value uses the computed style for the node, so the value
		//		will be a calculated value, not just the immediate node.style value.
		//		Also when getting values, use specific style names,
		//		like "borderBottomWidth" instead of "border" since compound values like
		//		"border" are not necessarily reflected as expected.
		//		If you want to get node dimensions, use `dojo.marginBox()`,
		//		`dojo.contentBox()` or `dojo.position()`.
		// node: DOMNode|String
		//		id or reference to node to get/set style for
		// name: String|Object?
		//		the style property to set in DOM-accessor format
		//		("borderWidth", not "border-width") or an object with key/value
		//		pairs suitable for setting each property.
		// value: String?
		//		If passed, sets value on the node for style, handling
		//		cross-browser concerns.  When setting a pixel value,
		//		be sure to include "px" in the value. For instance, top: "200px".
		//		Otherwise, in some cases, some browsers will not apply the style.
		// returns:
		//		when used as a getter, return the computed style of the node if passing in an ID or node,
		//		or return the normalized, computed value for the property when passing in a node and a style property
		// example:
		//		Passing only an ID or node returns the computed style object of
		//		the node:
		//	|	dojo.style("thinger");
		// example:
		//		Passing a node and a style property returns the current
		//		normalized, computed value for that property:
		//	|	dojo.style("thinger", "opacity"); // 1 by default
		//
		// example:
		//		Passing a node, a style property, and a value changes the
		//		current display of the node and returns the new computed value
		//	|	dojo.style("thinger", "opacity", 0.5); // == 0.5
		//
		// example:
		//		Passing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:
		//	|	dojo.style("thinger", {
		//	|		"opacity": 0.5,
		//	|		"border": "3px solid black",
		//	|		"height": "300px"
		//	|	});
		//
		// example:
		//		When the CSS style property is hyphenated, the JavaScript property is camelCased.
		//		font-size becomes fontSize, and so on.
		//	|	dojo.style("thinger",{
		//	|		fontSize:"14pt",
		//	|		letterSpacing:"1.2em"
		//	|	});
		//
		// example:
		//		dojo/NodeList implements .style() using the same syntax, omitting the "node" parameter, calling
		//		dojo.style() on every element of the list. See: `dojo/query` and `dojo/NodeList`
		//	|	dojo.query(".someClassName").style("visibility","hidden");
		//	|	// or
		//	|	dojo.query("#baz > div").style({
		//	|		opacity:0.75,
		//	|		fontSize:"13pt"
		//	|	});

		switch(arguments.length){
			case 1:
				return style.get(node);
			case 2:
				return style[typeof name == "string" ? "get" : "set"](node, name);
		}
		// setter
		return style.set(node, name, value);
	};

	return dojo;
});

},
'esri/TouchEvents':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/html", "dojo/_base/lang", "dojo/_base/sniff", "dojo/dom", "./kernel", "./Evented", "./geometry/Point", "./geometry/ScreenPoint"], function(r, q, k, l, s, u, t, m, n) {
    return r([t], {
        declaredClass: "esri.TouchEvents",
        tapRadius: 8,
        doubleTapRadius: 10,
        tapStartTolerance: 50,
        doubleTapDuration: 300,
        map: null,
        constructor: function(a, b) {
            this.node = a;
            k.mixin(this, b);
            q.setSelectable(a, !1);
            this._touchStart = k.hitch(this, this._touchStart);
            this._touchMove = k.hitch(this, this._touchMove);
            this._touchEnd = k.hitch(this,
                this._touchEnd);
            this._touchCancel = k.hitch(this, this._touchCancel);
            a.addEventListener("touchstart", this._touchStart, !1);
            a.addEventListener("touchmove", this._touchMove, !1);
            a.addEventListener("touchend", this._touchEnd, !1);
            a.addEventListener("touchcancel", this._touchCancel, !1);
            this.map && l("ios") && (this._mouseOver = k.hitch(this, this._mouseOver), this._mouseOut = k.hitch(this, this._mouseOut), this._mouseDown = k.hitch(this, this._mouseDown), this._mouseUp = k.hitch(this, this._mouseUp), this._mouseClick = k.hitch(this,
                this._mouseClick), a.addEventListener("mouseover", this._mouseOver, !1), a.addEventListener("mouseout", this._mouseOut, !1), a.addEventListener("mousedown", this._mouseDown, !1), a.addEventListener("mouseup", this._mouseUp, !1), a.addEventListener("click", this._mouseClick, !1));
            this._numTouches = 0;
            this._nodeTouches = [];
            this._touches = {};
            this._touchIds = [];
            this._taps = [];
            this._immediate = !1
        },
        _touchStart: function(a) {
            var b = this._touches,
                c, d = a.changedTouches.length,
                f, e, g, h, k = (new Date).getTime();
            if (!l("android") || !l("safari") ||
                !(1 === a.targetTouches.length && a.touches.length === a.targetTouches.length && a.targetTouches.length === a.changedTouches.length && 0 === a.changedTouches[0].identifier && b[a.changedTouches[0].identifier])) {
                this._addTouch(a);
                for (c = 0; c < d; c++) f = a.changedTouches[c], e = b[f.identifier] = {}, e.startX = f.pageX, e.startY = f.pageY, e.startTS = k, -1 === this._touchIds.indexOf(f.identifier) && this._touchIds.push(f.identifier);
                this._swipeActive && (g = this._nodeTouches[0]);
                this._pinchActive && (h = this._nodeTouches[1]);
                1 === this._numTouches ?
                    this._swipeActive ? (this._swipeActive = !1, this._fire("onSwipeEnd", this._processTouchEvent(a, g))) : this._pinchActive && (this._pinchActive = !1, this._fire("onPinchEnd", this._processTouchEvent(a, [g, h]))) : 2 === this._numTouches ? this._swipeActive && (g && (e = b[this._touchIds[0]], e.startX = g.pageX, e.startY = g.pageY, e.moved = !1), this._swipeActive = !1, this._fire("onSwipeEnd", this._processTouchEvent(a, g))) : this._swipeActive ? (this._swipeActive = !1, this._fire("onSwipeEnd", this._processTouchEvent(a, g))) : this._pinchActive && (this._pinchActive = !1, this._fire("onPinchEnd", this._processTouchEvent(a, [g, h])))
            }
        },
        _touchMove: function(a) {
            a.preventDefault();
            this._updateTouch(a);
            var b = this._touches,
                c, d = a.changedTouches.length,
                f, e, g, h;
            if (!l("android") || !l("safari") || !(1 === a.targetTouches.length && a.touches.length === a.targetTouches.length && a.targetTouches.length === a.changedTouches.length && 0 === a.changedTouches[0].identifier && b[a.changedTouches[0].identifier] && 1 < this._touchIds.length)) {
                for (c = 0; c < d; c++)
                    if (f = a.changedTouches[c], e = b[f.identifier]) {
                        g = Math.abs(f.pageX -
                            e.startX);
                        f = Math.abs(f.pageY - e.startY);
                        if (!e.moved && (g >= this.tapRadius || f >= this.tapRadius)) e.moved = e.absMoved = !0;
                        h = h ? h : e.moved
                    }
                1 === this._numTouches ? (c = a.changedTouches[0], this._swipeActive ? this._fire("onSwipeMove", this._processTouchEvent(a, c)) : h && (this._swipeActive = !0, this._fire("onSwipeStart", this._processTouchEvent(a, c)))) : 2 === this._numTouches && (c = this._nodeTouches[0], d = this._nodeTouches[1], this._pinchActive ? this._fire("onPinchMove", this._processTouchEvent(a, [c, d])) : h && (h = b[c.identifier], e = b[d.identifier],
                    b = Math.abs(h.startX - e.startX), h = Math.abs(h.startY - e.startY), b = Math.sqrt(b * b + h * h), h = Math.abs(c.pageX - d.pageX), e = Math.abs(c.pageY - d.pageY), h = Math.sqrt(h * h + e * e), Math.abs(h - b) >= 2 * this.tapRadius && (this._pinchActive = !0, this._fire("onPinchStart", this._processTouchEvent(a, [c, d])))))
            }
        },
        _touchEnd: function(a) {
            this._removeTouch(a);
            var b = this._touches,
                c = a.changedTouches,
                d, f = c.length,
                e, g, h = (new Date).getTime(),
                k = this._touchIds;
            for (d = 0; d < f; d++)
                if (g = b[c[d].identifier]) g.absMoved && (e = !0), g.pageX = c[d].pageX, g.pageY =
                    c[d].pageY, g.endTS = h;
            if (0 === this._numTouches)
                if (this._touches = {}, this._touchIds = [], this._swipeActive) this._swipeActive = !1, this._fire("onSwipeEnd", this._processTouchEvent(a, c[0]));
                else if (this._pinchActive) this._pinchActive = !1, this._fire("onPinchEnd", this._processTouchEvent(a, c));
            else {
                if (!e) {
                    f = Infinity;
                    e = -Infinity;
                    var h = Infinity,
                        l = -Infinity,
                        m = this.tapStartTolerance,
                        p = [],
                        n = !0;
                    for (d = 0; d < k.length; d++) g = b[k[d]], p.push(g), g.startTS < f && (f = g.startTS), g.startTS > e && (e = g.startTS), g.endTS < h && (h = g.endTS), g.endTS >
                        l && (l = g.endTS), delete b[k[d]];
                    if (1 === p.length && c[0] && (b = Math.abs(c[0].pageX - p[0].startX), c = Math.abs(c[0].pageY - p[0].startY), b >= this.tapRadius || c >= this.tapRadius)) n = !1;
                    n && (Math.abs(e - f) <= m && Math.abs(l - h) <= m) && this._basicTap(a, p)
                }
            } else 1 === this._numTouches && this._pinchActive && (d = this._nodeTouches[0], g = b[d.identifier], g.startX = d.pageX, g.startY = d.pageY, this._pinchActive = g.moved = !1, this._fire("onPinchEnd", this._processTouchEvent(a, [c[0], d])))
        },
        _touchCancel: function(a) {
            this._numTouches && this._touchEnd(a)
        },
        _basicTap: function(a, b) {
            var c = (new Date).getTime(),
                d = this;
            a = this._processTouchEvent(a, b);
            this._taps.push({
                touchInfos: b,
                ts: c,
                event: a
            });
            2 < this._taps.length && this._taps.shift();
            this._fire("onBasicTap", a);
            clearTimeout(this._tapTimer);
            this._immediate ? this._analyzeTap(!0) : this._tapTimer = setTimeout(function() {
                var a = d;
                d = null;
                clearTimeout(a._tapTimer);
                a._analyzeTap()
            }, 2 === this._taps.length ? this.doubleTapDuration / 2 : this.doubleTapDuration)
        },
        _analyzeTap: function(a) {
            var b = this._taps,
                c = b[0],
                d = b[1],
                f = c.touchInfos,
                e = d && d.touchInfos;
            b.length && (a || (this._taps = []), c && d ? f.length === e.length ? d.ts - c.ts <= this.doubleTapDuration ? (1 === f.length ? (a = Math.abs(f[0].startX - e[0].startX), f = Math.abs(f[0].startY - e[0].startY), f = a <= this.doubleTapRadius && f <= this.doubleTapRadius) : f = !0, f ? this._processedDoubleTap(b) : this._processedTap(d)) : this._processedTap(d) : this._processedTap(d) : this._processedTap(c || d))
        },
        _processedTap: function(a) {
            var b = a.event;
            this._fire("onProcessedTap", b);
            1 === a.touchInfos.length ? this._fire("onTap", this._fixEvent(b)) :
                2 === a.touchInfos.length && this._fire("onTwoFingerTap", b)
        },
        _processedDoubleTap: function(a) {
            var b = 1 === a[1].touchInfos.length,
                c;
            b && (c = [this._fixEvent(a[0].event), this._fixEvent(a[1].event)], c[1].relatedEvents = c);
            a = [a[0].event, a[1].event];
            a[1].relatedEvents = a;
            this._fire("onProcessedDoubleTap", a[1]);
            b && (this._fire("onDoubleTap", c[1]), this._fire("onDblClick", c[1]))
        },
        _addTouch: function(a) {
            var b = a.changedTouches,
                c = this._nodeTouches,
                d, f, e;
            this._numTouches += b.length;
            for (a = 0; a < b.length; a++) {
                f = c.length;
                e = !1;
                for (d =
                    0; d < f && !(e = c[d].identifier === b[a].identifier); d++);
                e ? this._numTouches-- : c.push(b[a])
            }
            for (a = c.length - 1; 0 <= a; a--) s.isDescendant(c[a].target, document.body) || (c.splice(a, 1), this._numTouches--);
            0 > this._numTouches && (this._numTouches = 0)
        },
        _removeTouch: function(a) {
            var b = [],
                c = [],
                d = a.changedTouches,
                f = this._nodeTouches;
            this._numTouches -= d.length;
            0 > this._numTouches && (this._numTouches = 0);
            for (a = 0; a < d.length; a++) b.push(d[a].identifier);
            for (a = f.length - 1; 0 <= a; a--) - 1 !== b.indexOf(f[a].identifier) && c.push(f.splice(a,
                1)[0]);
            return c
        },
        _updateTouch: function(a) {
            var b = [],
                c, d = a.changedTouches,
                f = this._nodeTouches;
            for (a = 0; a < d.length; a++) b.push(d[a].identifier);
            for (a = 0; a < f.length; a++) c = b.indexOf(f[a].identifier), -1 !== c && f.splice(a, 1, d[c])
        },
        _mouseOver: function(a) {
            this._fire("onMouseOver", this._processMouseEvent(a))
        },
        _mouseOut: function(a) {
            this._fire("onMouseOut", this._processMouseEvent(a))
        },
        _mouseDown: function(a) {
            this._fire("onMouseDown", this._processMouseEvent(a))
        },
        _mouseUp: function(a) {
            this._fire("onMouseUp", this._processMouseEvent(a))
        },
        _mouseClick: function(a) {
            this._fire("onClick", this._processMouseEvent(a))
        },
        _fire: function(a, b) {
            if ("onDblClick" === a && this.mouseEvents) {
                this.mouseEvents.preventClickEvents(!0);
                var c = this;
                setTimeout(function() {
                    c.mouseEvents.preventClickEvents(!1)
                }, 350)
            }
            if (this[a]) this[a](b);
            if (this.map && this.map[a]) this.map[a](b)
        },
        _fixEvent: function(a) {
            var b = {},
                c;
            for (c in a) b[c] = a[c];
            this.map && (b.screenPoint = b.screenPoints[0], b.mapPoint = b.mapPoints[0]);
            return b
        },
        _processTouchEvent: function(a, b) {
            var c = this.map,
                d = c && c.position,
                f = 0;
            if (d && b)
                if (k.isArray(b)) {
                    var e, g;
                    a.screenPoints = [];
                    a.mapPoints = [];
                    for (e = 0; e < b.length; e++) b[e] ? (g = new n(b[e].pageX - d.x, b[e].pageY - d.y), a.screenPoints.push(g), a.mapPoints.push(c.extent ? c.toMap(g) : new m)) : f++
                } else a.screenPoint = new n(b.pageX - d.x, b.pageY - d.y), a.mapPoint = c.extent ? c.toMap(a.screenPoint) : new m;
            a.numPoints = b ? k.isArray(b) ? b.length - f : 1 : 0;
            return a
        },
        _processMouseEvent: function(a) {
            var b = this.map,
                c = b && b.position;
            c && (a.screenPoint = new n(a.pageX - c.x, a.pageY - c.y), a.mapPoint = b.extent ? b.toMap(a.screenPoint) :
                new m);
            return a
        },
        setImmediateTap: function(a) {
            this._immediate = a
        },
        destroy: function() {
            var a = this.node;
            a.removeEventListener("touchstart", this._touchStart, !1);
            a.removeEventListener("touchmove", this._touchMove, !1);
            a.removeEventListener("touchend", this._touchEnd, !1);
            a.removeEventListener("touchcancel", this._touchCancel, !1);
            this.map && (a.removeEventListener("mouseover", this._mouseOver, !1), a.removeEventListener("mouseout", this._mouseOut, !1), a.removeEventListener("mousedown", this._mouseDown, !1), a.removeEventListener("mouseup",
                this._mouseUp, !1), a.removeEventListener("click", this._mouseClick, !1));
            q.setSelectable(a, !0);
            clearTimeout(this._tapTimer);
            this.node = this.map = this._numTouches = this._nodeTouches = this._touches = this._touchIds = this._taps = null
        }
    })
});
},
'esri/PointerEvents':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/has", "./kernel", "./Evented", "./geometry/Point", "./geometry/ScreenPoint"], function(q, g, h, r, t, s, k, l) {
    return q([s], {
        declaredClass: "esri.PointerEvents",
        tapRadius: 8,
        clickRadius: 2,
        doubleTapRadius: 10,
        tapStartTolerance: 50,
        doubleTapDuration: 300,
        minWheelValue: 1,
        maxWheelValue: 1,
        mozWheelDivisor: -1 !== r("mac") ? 1 : 3,
        wheelDivisor: 120,
        preventPageScroll: !0,
        constructor: function(a, c) {
            this.node = a;
            g.mixin(this, c);
            void 0 !== a.style.msTouchAction ? a.style.msTouchAction =
                "none" : void 0 !== a.style.touchAction && (a.style.touchAction = "none");
            var b = navigator.msPointerEnabled,
                d = function(a) {
                    a.preventDefault()
                };
            a.addEventListener("selectstart", d, !1);
            a.addEventListener("dragstart", d, !1);
            this._pointerDown = g.hitch(this, this._pointerDown);
            this._pointerMove = g.hitch(this, this._pointerMove);
            this._pointerUp = g.hitch(this, this._pointerUp);
            this._pointerCancel = g.hitch(this, this._pointerCancel);
            a.addEventListener(b ? "MSPointerDown" : "pointerdown", this._pointerDown, !1);
            a.addEventListener(b ?
                "MSPointerMove" : "pointermove", this._pointerMove, !1);
            a.addEventListener(b ? "MSPointerUp" : "pointerup", this._pointerUp, !1);
            a.addEventListener(b ? "MSPointerCancel" : "pointercancel", this._pointerCancel, !1);
            this.map && (this._mouseOver = g.hitch(this, this._mouseOver), this._mouseOut = g.hitch(this, this._mouseOut), this._mouseLeave = g.hitch(this, this._mouseLeave), this._mouseDown = g.hitch(this, this._mouseDown), this._mouseUp = g.hitch(this, this._mouseUp), this._mouseClick = g.hitch(this, this._mouseClick), this._mouseWheel = g.hitch(this,
                this._mouseWheel), this._mouseMove = g.hitch(this, this._mouseMove), this._mouseEnter = g.hitch(this, this._mouseEnter), this._onKeyDown = g.hitch(this, this._onKeyDown), this._onKeyUp = g.hitch(this, this._onKeyUp), a.addEventListener("mouseover", this._mouseOver, !1), a.addEventListener("mouseout", this._mouseOut, !1), a.addEventListener("mouseleave", this._mouseLeave, !1), a.addEventListener("mousedown", this._mouseDown, !1), a.addEventListener("mouseup", this._mouseUp, !1), a.addEventListener("click", this._mouseClick, !1), a.addEventListener("mousewheel",
                this._mouseWheel, !1), a.addEventListener("mousemove", this._mouseMove, !1), a.addEventListener("mouseenter", this._mouseEnter, !1));
            this._numTouches = 0;
            this._touches = {};
            this._touchIds = [];
            this._taps = [];
            this._immediate = !1
        },
        _pointerDown: function(a) {
            if (-1 < h.indexOf(this._touchIds, a.pointerId)) this._pointerUp(a);
            else {
                var c = this._touches,
                    b = a.target,
                    d = a.pointerId,
                    e = this._touchIds,
                    f, g = (new Date).getTime();
                f = c[d] = {};
                f.pointerId = d;
                f.startX = f.pageX = a.pageX;
                f.startY = f.pageY = a.pageY;
                f.startTS = g;
                e.push(d);
                this._numTouches++;
                b.setPointerCapture ? b.setPointerCapture(d) : b.msSetPointerCapture && b.msSetPointerCapture(d);
                b = c[e[0]];
                c = c[e[1]];
                1 !== this._numTouches && (2 === this._numTouches ? this._swipeActive && (b && (b.startX = b.pageX, b.startY = b.pageY, b.moved = !1), this._swipeActive = !1, this._fire("onSwipeEnd", this._processTouchEvent(a, b))) : this._swipeActive ? (this._swipeActive = !1, this._fire("onSwipeEnd", this._processTouchEvent(a, b))) : this._pinchActive && (this._pinchActive = !1, this._fire("onPinchEnd", this._processTouchEvent(a, [b, c]))))
            }
        },
        _pointerMove: function(a) {
            var c =
                this._touches,
                b = this._touchIds,
                d, e, f;
            if ((d = c[a.pointerId]) && !(d.pageX === a.pageX && d.pageY === a.pageY)) {
                d.pageX = a.pageX;
                d.pageY = a.pageY;
                e = Math.abs(d.pageX - d.startX);
                f = Math.abs(d.pageY - d.startY);
                if (!d.moved && (e >= this.tapRadius || f >= this.tapRadius)) d.moved = d.absMoved = !0;
                if (1 === this._numTouches) this._swipeActive ? this._fire("onSwipeMove", this._processTouchEvent(a, a)) : d.moved && (this._swipeActive = !0, this._fire("onSwipeStart", this._processTouchEvent(a, a)));
                else if (2 === this._numTouches)
                    if (d = c[b[0]], c = c[b[1]],
                        this._pinchActive) this._fire("onPinchMove", this._processTouchEvent(a, [d, c]));
                    else if (d.moved || c.moved) b = Math.abs(d.startX - c.startX), e = Math.abs(d.startY - c.startY), b = Math.sqrt(b * b + e * e), e = Math.abs(d.pageX - c.pageX), f = Math.abs(d.pageY - c.pageY), e = Math.sqrt(e * e + f * f), Math.abs(e - b) >= 2 * this.tapRadius && (this._pinchActive = !0, this._fire("onPinchStart", this._processTouchEvent(a, [d, c])))
            }
        },
        _pointerUp: function(a) {
            var c = this._touches,
                b, d = this.node,
                e = a.target,
                f = a.pointerId,
                g = this._touchIds,
                n = g.slice(0),
                k = h.map(n, function(a) {
                    return c[a]
                }),
                m = (new Date).getTime();
            if (b = c[f])
                if (b.pageX = a.pageX, b.pageY = a.pageY, b.endTS = m, this._numTouches--, e.releasePointerCapture ? e.releasePointerCapture(f) : e.msReleasePointerCapture && e.msReleasePointerCapture(f), 0 === this._numTouches)
                    if (this._touches = {}, this._touchIds = [], this._swipeActive) this._swipeActive = !1, this._fire("onSwipeEnd", this._processTouchEvent(a, a));
                    else if (this._pinchActive) this._pinchActive = !1, this._fire("onPinchEnd", this._processTouchEvent(a, a));
            else {
                if (!b.absMoved) {
                    var e = Infinity,
                        f = -Infinity,
                        g = Infinity,
                        m = -Infinity,
                        l = this.tapStartTolerance,
                        p;
                    for (p = 0; p < n.length; p++) b = k[p], b.startTS < e && (e = b.startTS), b.startTS > f && (f = b.startTS), b.endTS < g && (g = b.endTS), b.endTS > m && (m = b.endTS);
                    Math.abs(f - e) <= l && Math.abs(m - g) <= l && this._basicTap(a, k)
                }
            } else 1 === this._numTouches && this._pinchActive && (g.splice(h.indexOf(g, a.pointerId), 1), delete c[a.pointerId], b = c[g[0]], b.startX = b.pageX, b.startY = b.pageY, b.moved = !1, document.msElementsFromPoint && (n = document.msElementsFromPoint(b.pageX, b.pageY), h.some(n, function(a) {
                return a ===
                    d
            }) || (this._touches = {}, this._touchIds = [], this._numTouches = 0)), this._pinchActive = !1, this._fire("onPinchEnd", this._processTouchEvent(a, [a, b])))
        },
        _pointerCancel: function(a) {
            this._numTouches && this._pointerUp(a)
        },
        _basicTap: function(a, c) {
            var b = (new Date).getTime(),
                d = this,
                e = this._immediate;
            a = this._processTouchEvent(a, c);
            this._taps.push({
                touchInfos: c,
                ts: b,
                event: a
            });
            2 < this._taps.length && this._taps.shift();
            this._fire("onBasicTap", a);
            clearTimeout(this._tapTimer);
            b = 2 === this._taps.length ? this.doubleTapDuration /
                2 : this.doubleTapDuration;
            this._tapTimer = setTimeout(function() {
                var a = d;
                d = null;
                clearTimeout(a._tapTimer);
                a._analyzeTap(e)
            }, e ? 0 : b)
        },
        _analyzeTap: function(a) {
            var c = this._taps,
                b = c[0],
                d = c[1],
                e = b.touchInfos,
                f = d && d.touchInfos;
            c.length && (a || (this._taps = []), b && d ? e.length === f.length ? d.ts - b.ts <= this.doubleTapDuration ? (1 === e.length ? (a = Math.abs(e[0].startX - f[0].startX), e = Math.abs(e[0].startY - f[0].startY), e = a <= this.doubleTapRadius && e <= this.doubleTapRadius) : e = !0, e ? this._processedDoubleTap(c) : this._processedTap(d)) :
                this._processedTap(d) : this._processedTap(d) : this._processedTap(b || d))
        },
        _processedTap: function(a) {
            var c = a.event;
            this._fire("onProcessedTap", c);
            1 === a.touchInfos.length ? this._fire("onTap", this._fixEvent(c)) : 2 === a.touchInfos.length && this._fire("onTwoFingerTap", c)
        },
        _processedDoubleTap: function(a) {
            var c = 1 === a[1].touchInfos.length,
                b;
            c && (b = [this._fixEvent(a[0].event), this._fixEvent(a[1].event)], b[1].relatedEvents = b);
            a = [a[0].event, a[1].event];
            a[1].relatedEvents = a;
            this._fire("onProcessedDoubleTap", a[1]);
            c &&
                (this._fire("onDoubleTap", b[1]), this._fire("onDblClick", b[1]))
        },
        _mouseOver: function(a) {
            this._fire("onMouseOver", this._processMouseEvent(a))
        },
        _mouseMove: function(a) {
            this._fire("onMouseMove", this._processMouseEvent(a))
        },
        _mouseOut: function(a) {
            this._fire("onMouseOut", this._processMouseEvent(a))
        },
        _mouseLeave: function(a) {
            document.removeEventListener("keydown", this._onKeyDown, !1);
            document.removeEventListener("keyup", this._onKeyUp, !1);
            this._fire("onMouseOut", this._processMouseEvent(event))
        },
        _mouseDown: function(a) {
            this._downX =
                a.pageX;
            this._downY = a.pageY;
            this._fire("onMouseDown", this._processMouseEvent(a))
        },
        _mouseUp: function(a) {
            this._fire("onMouseUp", this._processMouseEvent(a))
        },
        _mouseClick: function(a) {
            Math.abs(a.pageX - this._downX) <= this.clickRadius && Math.abs(a.pageY - this._downY) <= this.clickRadius && this._fire("onClick", this._processMouseEvent(a))
        },
        _mouseWheel: function(a) {
            var c = this.map;
            (c ? c.isScrollWheelZoom || c.isScrollWheelPan : this.preventPageScroll) && a.preventDefault();
            var c = a.wheelDelta ? a.wheelDelta / this.wheelDivisor :
                -a.detail / this.mozWheelDivisor,
                b = Math.abs(c),
                b = b <= this.minWheelValue ? this.minWheelValue : this.maxWheelValue;
            a.value = 0 > c ? -b : b;
            this._fire("onMouseWheel", this._processMouseEvent(a))
        },
        _mouseEnter: function(a) {
            document.removeEventListener("keydown", this._onKeyDown, !1);
            document.removeEventListener("keyup", this._onKeyUp, !1);
            document.addEventListener("keydown", this._onKeyDown, !1);
            document.addEventListener("keyup", this._onKeyUp, !1);
            this._fire("onMouseEnter", this._processMouseEvent(a))
        },
        _onKeyDown: function(a) {
            this._fire("onKeyDown",
                a)
        },
        _onKeyUp: function(a) {
            this._fire("onKeyUp", a)
        },
        _fire: function(a, c) {
            if (this[a]) this[a](c);
            if (this.map && this.map[a]) this.map[a](c)
        },
        _fixEvent: function(a) {
            var c = {},
                b;
            for (b in a) c[b] = a[b];
            this.map && (c.screenPoint = c.screenPoints[0], c.mapPoint = c.mapPoints[0]);
            return c
        },
        _processTouchEvent: function(a, c) {
            var b = this.map,
                d = b && b.position,
                e = 0;
            if (d && c)
                if (g.isArray(c)) {
                    var f, h;
                    a.screenPoints = [];
                    a.mapPoints = [];
                    for (f = 0; f < c.length; f++) c[f] ? (h = new l(c[f].pageX - d.x, c[f].pageY - d.y), a.screenPoints.push(h), a.mapPoints.push(b.extent ?
                        b.toMap(h) : new k)) : e++
                } else a.screenPoint = new l(c.pageX - d.x, c.pageY - d.y), a.mapPoint = b.extent ? b.toMap(a.screenPoint) : new k;
            a.numPoints = c ? g.isArray(c) ? c.length - e : 1 : 0;
            return a
        },
        _processMouseEvent: function(a) {
            var c = this.map,
                b = c && c.position;
            b && (a.screenPoint = new l(a.pageX - b.x, a.pageY - b.y), a.mapPoint = c.extent ? c.toMap(a.screenPoint) : new k);
            return a
        },
        setImmediateTap: function(a) {
            this._immediate = a
        },
        destroy: function() {
            var a = this.node;
            a.removeEventListener("MSPointerDown", this._pointerDown, !1);
            a.removeEventListener("MSPointerMove",
                this._pointerMove, !1);
            a.removeEventListener("MSPointerUp", this._pointerUp, !1);
            a.removeEventListener("MSPointerCancel", this._pointerCancel, !1);
            this.map && (a.removeEventListener("mouseover", this._mouseOver, !1), a.removeEventListener("mousemove", this._mouseMove, !1), a.removeEventListener("mouseout", this._mouseOut, !1), a.removeEventListener("mouseleave", this._mouseLeave, !1), a.removeEventListener("mousedown", this._mouseDown, !1), a.removeEventListener("mouseup", this._mouseUp, !1), a.removeEventListener("click",
                this._mouseClick, !1), a.removeEventListener("mouseenter", this._mouseEnter, !1));
            clearTimeout(this._tapTimer);
            this.node = this.map = this._numTouches = this._touches = this._touchIds = this._taps = null
        }
    })
});
},
'esri/dijit/Search':function(){
//>>built
define(["require", "dojo/Evented", "dijit/_WidgetBase", "dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/Deferred", "dojo/dom", "dojo/dom-attr", "dojo/dom-class", "dojo/dom-style", "dojo/dom-construct", "dojo/keys", "dojo/on", "dojo/promise/all", "dojo/query", "dojo/string", "dojo/i18n!../nls/jsapi", "dojo/text!./Search/templates/Search.html", "dojo/uacss", "dijit/a11yclick", "dijit/_TemplatedMixin", "dijit/focus", "dijit/_FocusMixin", "../InfoTemplate", "../kernel", "../SpatialReference", "../graphic", "../symbols/PictureMarkerSymbol", "../symbols/SimpleMarkerSymbol", "../symbols/SimpleLineSymbol", "../symbols/SimpleFillSymbol", "../geometry/Point", "../geometry/Extent", "../tasks/locator", "../tasks/query", "../symbols/TextSymbol", "../Color", "../symbols/Font", "../geometry/scaleUtils", "../styles/basic"], function(K, L, M, N, k, B, s, C, q, l, D, O, m, r, x, u, P, p, Q, ba, v, R, h, S, T, ca, E, t, U, V, y, W, z, F, X, G, Y, Z, w, $, aa) {
    return N("esri.dijit.Search", [M, R, S, L], {
        templateString: Q,
        reHostedFS: /https?:\/\/services.*\.arcgis\.com/i,
        basePath: K.toUrl("."),
        constructor: function(a, c) {
            this.css = {
                searchGroup: "searchGroup",
                searchInput: "searchInput",
                searchInputGroup: "searchInputGroup",
                searchBtn: "searchBtn",
                searchSubmit: "searchSubmit",
                searchIcon: "searchIcon esriIconZoom",
                searchButtonText: "searchButtonText",
                searchToggle: "searchToggle",
                searchToggleIcon: "searchIcon esriIconDownArrow",
                searchMenu: "searchMenu",
                searchMenuHeader: "menuHeader",
                searchClear: "searchClear",
                searchClearIcon: "searchIcon esriIconClose searchClose",
                searchSpinner: "searchIcon esriIconAjaxLoaderArrow searchSpinner",
                searchSourceName: "sourceName",
                suggestionsMenu: "suggestionsMenu",
                sourcesMenu: "sourcesMenu",
                activeSource: "active",
                hasValue: "hasValue",
                hasButtonMode: "hasButtonMode",
                hasMultipleSources: "hasMultipleSources",
                showSuggestions: "showSuggestions",
                showSources: "showSources",
                showNoResults: "showNoResults",
                searchLoading: "searchLoading",
                searchMoreResults: "moreResults",
                searchMoreResultsList: "resultsList",
                searchMoreResultsHeader: "moreHeader",
                searchMoreResultsItem: "moreItem",
                searchMoreResultsListHeader: "popupHeader",
                searchShowMoreResults: "showMoreResults",
                searchNoResultsMenu: "noResultsMenu",
                searchNoResultsBody: "noResultsBody",
                searchNoResultsHeader: "noResultsHeader",
                searchNoValueIcon: "noValueIcon esriIconNoticeTriangle",
                searchNoValueText: "noValueText",
                searchNoResultsText: "noResultsText",
                searchExpandContainer: "searchExpandContainer",
                searchAnimateContainer: "searchAnimate",
                searchExpanded: "searchExpanded",
                searchCollapsed: "searchCollapsed",
                searchClearFloat: "searchClearFloat"
            };
            this._allIndex = "all";
            this._objectIdIdentifier = "_objectId";
            this._dijitName = "Search Dijit::";
            this._deferreds = [];
            this.options = {
                map: null,
                theme: "arcgisSearch",
                visible: !0,
                value: "",
                sources: [{
                    locator: new X("//geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer"),
                    singleLineFieldName: "SingleLine",
                    outFields: ["Addr_type"],
                    name: p.widgets.Search.main.esriLocatorName,
                    localSearchOptions: {
                        minScale: 3E5,
                        distance: 5E4
                    },
                    placeholder: p.widgets.Search.main.placeholder,
                    highlightSymbol: (new U(this.basePath + "/Search/images/search-pointer.png", 36, 36)).setOffset(9, 18)
                }],
                activeSourceIndex: 0,
                suggestionDelay: 150,
                enableSourcesMenu: !0,
                enableSuggestionsMenu: !0,
                enableInfoWindow: !0,
                showInfoWindowOnSelect: !0,
                enableSuggestions: !0,
                enableButtonMode: !1,
                autoNavigate: !0,
                autoSelect: !0,
                addLayersFromMap: !1,
                zoomScale: 1E3,
                graphicsLayer: null,
                enableHighlight: !0,
                highlightGraphic: null,
                enableLabel: !1,
                labelSymbol: (new Y).setColor(new Z([181, 56, 46, 0.9])).setFont(new w("14px", w.STYLE_NORMAL, w.VARIANT_NORMAL, w.WEIGHT_BOLD, "Arial")),
                labelGraphic: null,
                infoTemplate: new T(p.widgets.Search.main.searchResult, '\x3cdiv class\x3d"${searchTheme}"\x3e\x3cdiv id\x3d"${searchMoreResultsId}" class\x3d"${searchMoreResults}"\x3e\x3cdiv class\x3d"${searchMoreResultsItem}"\x3e${searchResult}\x3c/div\x3e\x3cdiv\x3e${searchMoreResultsHtml}\x3c/div\x3e\x3c/div\x3e\x3c/div\x3e'),
                searchResults: null,
                suggestResults: null,
                expanded: !1,
                maxResults: 6,
                maxSuggestions: 6,
                locationToAddressDistance: 1500,
                minCharacters: 1
            };
            var b = k.mixin({}, this.options, a);
            this.set("map", b.map);
            this.set("theme", b.theme);
            this.set("visible", b.visible);
            this.set("value", b.value);
            this.set("sources", b.sources);
            this.set("activeSourceIndex", b.activeSourceIndex);
            this.set("suggestionDelay", b.suggestionDelay);
            this.set("enableSourcesMenu", b.enableSourcesMenu);
            this.set("enableSuggestionsMenu", b.enableSuggestionsMenu);
            this.set("enableInfoWindow", b.enableInfoWindow);
            this.set("enableSuggestions", b.enableSuggestions);
            this.set("enableButtonMode", b.enableButtonMode);
            this.set("autoNavigate", b.autoNavigate);
            this.set("autoSelect", b.autoSelect);
            this.set("addLayersFromMap", b.addLayersFromMap);
            this.set("zoomScale", b.zoomScale);
            this.set("graphicsLayer", b.graphicsLayer);
            this.set("enableHighlight", b.enableHighlight);
            this.set("highlightGraphic", b.highlightGraphic);
            this.set("enableLabel", b.enableLabel);
            this.set("labelSymbol", b.labelSymbol);
            this.set("labelGraphic", b.labelGraphic);
            this.set("infoTemplate", b.infoTemplate);
            this.set("searchResults", b.searchResults);
            this.set("suggestResults", b.suggestResults);
            this.set("expanded", b.expanded);
            this.set("minCharacters", b.minCharacters);
            this.set("showInfoWindowOnSelect", b.showInfoWindowOnSelect);
            this.set("maxResults", b.maxResults);
            this.set("maxSuggestions", b.maxSuggestions);
            this.set("locationToAddressDistance", b.locationToAddressDistance);
            this._updateActiveSource();
            this._i18n = p;
            this._defaultSR = new E(4326);
            this.domNode = c
        },
        startup: function() {
            this.sources ||
                (this.sources = []);
            if (this.domNode)
                if (this.map)
                    if (this.map.loaded) this._init();
                    else r.once(this.map, "load", k.hitch(this, function() {
                        this._init()
                    }));
            else this._init();
            else console.log(this._dijitName + " domNode is undefined."), this.destroy()
        },
        postCreate: function() {
            this.inherited(arguments);
            this._moreResultsId = this.id + "_more_results";
            this.own(r(this.submitNode, v, k.hitch(this, this._searchButton)));
            this.own(r(this.sourcesBtnNode, v, k.hitch(this, this._toggleSourcesMenu)));
            this.own(r(this.inputNode, v, k.hitch(this,
                this._inputClick)));
            this.own(r(this.clearNode, v, k.hitch(this, this.clear)));
            this.own(r(this.inputNode, "keyup", k.hitch(this, function(a) {
                this._inputKey(a)
            })));
            this.own(r(this.sourcesBtnNode, "keyup", k.hitch(this, function(a) {
                this._sourceBtnKey(a)
            })));
            this.own(r(this.suggestionsNode, "li:click, li:keyup", k.hitch(this, function(a) {
                this._suggestionsEvent(a)
            })));
            this.own(r(this.sourcesNode, "li:click, li:keyup", k.hitch(this, function(a) {
                this._sourcesEvent(a)
            })));
            this.map && (this.map.infoWindow && this.map.infoWindow.domNode &&
                this.enableInfoWindow) && (this.own(r(this.map.infoWindow.domNode, "#" + this._moreResultsId + "_show:click", k.hitch(this, function() {
                this._showMoreResultsClick()
            }))), this.own(r(this.map.infoWindow.domNode, "#" + this._moreResultsId + "_list li a:click", k.hitch(this, function(a) {
                this._moreResultsClick(a)
            }))));
            this.value && this._checkStatus();
            this._hideMenus();
            this._updateVisible();
            this._insertSources(this.sources);
            this._setPlaceholder(this.activeSourceIndex);
            this._updateButtonMode(this.enableButtonMode);
            this.toggle(this.expanded)
        },
        destroy: function() {
            O.empty(this.domNode);
            this.inherited(arguments)
        },
        clear: function() {
            this._clearGraphics();
            q.set(this.inputNode, "value", "");
            this._changeAttrValue("value", "");
            this.set("searchResults", null);
            this.set("suggestResults", null);
            l.remove(this.containerNode, this.css.hasValue);
            q.set(this.clearNode, "title", "");
            this._hideMenus();
            this._closePopup();
            this._hideLoading();
            h.focus(this.inputNode);
            this.emit("clear-search", {})
        },
        show: function() {
            D.set(this.domNode, "display", "block")
        },
        hide: function() {
            D.set(this.domNode,
                "display", "none")
        },
        expand: function() {
            this.enableButtonMode && (l.add(this.containerNode, this.css.searchExpanded), l.remove(this.containerNode, this.css.searchCollapsed), this._hideMenus(), this.set("expanded", !0))
        },
        collapse: function() {
            this.enableButtonMode && (l.remove(this.containerNode, this.css.searchExpanded), l.add(this.containerNode, this.css.searchCollapsed), this._hideMenus(), this.set("expanded", !1))
        },
        toggle: function(a) {
            this.enableButtonMode && ("undefined" === typeof a && (a = !this.expanded), a ? this.expand() :
                this.collapse())
        },
        search: function(a) {
            var c, b = new s,
                d = this.value,
                e = this.activeSourceIndex;
            a && a.hasOwnProperty("index") && (e = a.index);
            this._showLoading();
            this._hideMenus();
            this._closePopup();
            this._clearGraphics();
            (a = a ? "string" === typeof a ? this._searchSource({
                    text: a
                }) : "object" === typeof a && a.hasOwnProperty("magicKey") ? this._searchSource(a) : "object" === typeof a && a.hasOwnProperty("geometry") ? this._searchSource({
                    geometry: a
                }) : "object" === typeof a && a.hasOwnProperty(this._objectIdIdentifier) ? this._searchSource(a) :
                "object" === typeof a && "point" === a.type ? this._searchSource({
                    point: a
                }) : a instanceof Array && 2 === a.length ? this._searchSource({
                    latlon: a
                }) : this._searchSource({
                    text: d
                }) : this._searchSource({
                    text: d
                })) ? a.then(k.hitch(this, function(a) {
                if (a = this._formatResults(a, e)) {
                    var g = a.results;
                    this.set("searchResults", g);
                    c = {
                        activeSourceIndex: e,
                        results: g,
                        numResults: a.numResults,
                        value: d
                    };
                    0 === a.numResults && (this._noResultsHTML(d), this._showNoResultsMenu());
                    this._hideLoading();
                    this.emit("search-results", c);
                    this._selectFirstResult(g,
                        e);
                    b.resolve(c)
                }
            }), k.hitch(this, function(a) {
                this.set("searchResults", null);
                c = {
                    activeSourceIndex: e,
                    results: null,
                    numResults: 0,
                    value: d,
                    error: a
                };
                this.emit("search-results", c);
                this._hideLoading();
                b.resolve(c)
            })): (this._hideLoading(), b.reject(Error(this._dijitName + " Error processing search query")));
            return b.promise
        },
        suggest: function(a) {
            var c, b, d = new s;
            a || (a = this.value);
            var e = this.activeSourceIndex;
            (c = this._suggestSource({
                text: a
            })) ? c.then(k.hitch(this, function(c) {
                if (c = this._formatResults(c, e)) {
                    var g = c.results;
                    this.set("suggestResults", g);
                    this._insertSuggestions(g);
                    b = {
                        activeSourceIndex: e,
                        results: g,
                        numResults: c.numResults,
                        value: a
                    };
                    this.emit("suggest-results", b);
                    d.resolve(b)
                }
            }), k.hitch(this, function(c) {
                this.set("suggestResults", null);
                this._insertSuggestions();
                b = {
                    activeSourceIndex: e,
                    results: null,
                    numResults: 0,
                    value: a,
                    error: c
                };
                this.emit("suggest-results", b);
                d.resolve(b)
            })): d.reject(Error(this._dijitName + " Error processing suggest query"));
            return d.promise
        },
        select: function(a) {
            var c, b, d, e = this.sources,
                f = this.activeSourceIndex,
                g = this.enableHighlight,
                H = this.enableLabel,
                l = this.autoNavigate,
                I = this.showInfoWindowOnSelect,
                A = this.enableInfoWindow,
                J = this.infoTemplate;
            if (f === this._allIndex) {
                var n = this._getSourceIndexOfResult(a);
                null !== n && (d = e[n], f = n)
            } else d = e[f];
            d && (c = d.highlightSymbol, b = d.labelSymbol, d.hasOwnProperty("enableHighlight") && (g = d.enableHighlight), d.hasOwnProperty("enableLabel") && (H = d.enableLabel), d.hasOwnProperty("autoNavigate") && (l = d.autoNavigate), d.hasOwnProperty("showInfoWindowOnSelect") && (I = d.showInfoWindowOnSelect),
                d.hasOwnProperty("enableInfoWindow") && (A = d.enableInfoWindow), d.hasOwnProperty("infoTemplate") && (J = d.infoTemplate));
            this._hideMenus();
            this._hideLoading();
            if (a.feature) {
                var e = this.highlightGraphic,
                    h = this.graphicsLayer,
                    n = this.labelGraphic;
                c = c || this._getDefaultSymbol(a) || a.feature.symbol;
                b = b || this.labelSymbol || a.feature.symbol;
                var m = k.mixin({}, a.feature.attributes, {
                        searchTheme: this.theme,
                        searchResult: a.name,
                        searchMoreResults: this.css.searchMoreResults,
                        searchMoreResultsItem: this.css.searchMoreResultsItem,
                        searchMoreResultsId: this._moreResultsId,
                        searchMoreResultsHtml: this._moreResultsHTML(a)
                    }),
                    p = null;
                A && (p = J);
                n ? (n.setGeometry(a.feature.geometry), n.setAttributes(m), n.setSymbol(b)) : (n = new t(a.feature.geometry, b, m), H && (h ? h.add(n) : this.map && this.map.graphics && this.map.graphics.add(n)));
                n && (n.symbol && "textsymbol" === n.symbol.type) && n.symbol.setText(a.name);
                e ? (e.setGeometry(a.feature.geometry), e.setAttributes(m), e.setInfoTemplate(p), e.setSymbol(c)) : (e = new t(a.feature.geometry, c, m, p), g && (h ? h.add(e) : this.map &&
                    this.map.graphics && this.map.graphics.add(e)));
                e && (e.symbol && "textsymbol" === e.symbol.type) && e.symbol.setText(a.name);
                this.map && (this.map.infoWindow && A && I) && (this.map.infoWindow.setFeatures([e]), g = this._getPointFromGeometry(e.geometry), this.map.infoWindow.show(g));
                this.map && (l && a && a.hasOwnProperty("extent")) && ("function" === typeof this.map.setExtent ? this.map.setExtent(a.extent) : "function" === typeof this.map.set && this.map.set("extent", a.extent));
                this.set("highlightGraphic", e);
                this.set("labelGraphic", n)
            }
            this.emit("select-result", {
                result: a,
                source: d,
                sourceIndex: f
            })
        },
        focus: function() {
            h.focus(this.inputNode);
            this.map && "function" === typeof this.map.disableKeyboardNavigation && this.map.disableKeyboardNavigation();
            this.emit("focus", {})
        },
        blur: function() {
            h.curNode && h.curNode.blur();
            this._hideMenus();
            this.map && "function" === typeof this.map.enableKeyboardNavigation && this.map.enableKeyboardNavigation();
            this.enableButtonMode && this.loaded && this.collapse();
            this.emit("blur", {})
        },
        _init: function() {
            this._getMapLayers().then(k.hitch(this, function() {
                this.set("loaded", !0);
                this.emit("load", {})
            }))
        },
        _getDefaultSymbol: function(a) {
            var c, b, d, e;
            this.map && (e = this.map.getBasemap());
            e || (e = "topo");
            a && (a.feature && a.feature.geometry) && (d = a.feature.geometry.type);
            if (d) {
                if (a = aa.getSchemes({
                        theme: "default",
                        basemap: e,
                        geometryType: d
                    })) b = a.primaryScheme;
                if (b) {
                    c = b;
                    a = b.color;
                    b = b.size;
                    var f;
                    switch (d) {
                        case "point":
                            f = new V;
                            f.setColor(a);
                            f.setSize(null !== b ? b : c.size);
                            d = new y;
                            d.setColor(c.outline.color);
                            d.setWidth(c.outline.width);
                            f.setOutline(d);
                            break;
                        case "line":
                            f = new y;
                            f.setColor(a);
                            f.setWidth(null !== b ? b : c.width);
                            break;
                        case "polygon":
                            f = new W, f.setColor(a), d = new y, d.setColor(c.outline.color), d.setWidth(c.outline.width), f.setOutline(d)
                    }
                    c = f
                }
            }
            return c
        },
        _selectFirstResult: function(a, c) {
            if (this.autoSelect && a) {
                var b;
                c === this._allIndex ? b = this._getFirstResult(a) : a[c] && a[c][0] && (b = a[c][0]);
                b && this.select(b)
            }
        },
        _getSourceIndexOfResult: function(a) {
            var c = this.searchResults;
            if (c)
                for (var b in c)
                    if (c[b] && c[b].length)
                        for (var d = 0; d < c[b].length; d++)
                            if (c[b][d] === a) return parseInt(b, 10);
            return null
        },
        _getFirstResult: function(a) {
            if (a)
                for (var c in a)
                    if (a[c] && a[c][0]) return a[c][0];
            return !1
        },
        _onFocus: function() {
            this.focus();
            this.inherited(arguments)
        },
        _onBlur: function() {
            this.blur();
            this.inherited(arguments)
        },
        _getMapLayers: function() {
            var a = new s;
            if (this.addLayersFromMap) {
                var c = [],
                    b = [],
                    d = this.map.graphicsLayerIds;
                if (d && d.length) {
                    for (var e = 0; e < d.length; e++) {
                        var f = this.map.getLayer(d[e]);
                        f && (c.push(f), b.push(this._featureLayerLoaded(f)))
                    }
                    b.length ? x(b).then(k.hitch(this, function() {
                        for (var b = this.sources,
                                d = 0; d < c.length; d++) "Feature Layer" === c[d].type && b.push({
                            featureLayer: c[d],
                            enableSuggestions: !0
                        });
                        this.set("sources", b);
                        a.resolve(b)
                    }), k.hitch(this, function(b) {
                        b || (b = Error(this._dijitName + " Error loading a layer"));
                        a.reject(b)
                    })) : a.resolve()
                } else a.resolve()
            } else a.resolve();
            return a.promise
        },
        _moreResultsClick: function(a) {
            var c = a.target;
            a = parseInt(q.get(c, "data-source-index"), 10);
            var b = parseInt(q.get(c, "data-index"), 10),
                d = this.searchResults;
            (c = q.get(c, "data-latlon")) ? (this.set("value", c), this.search()) :
            d && d[a] && (a = d[a][b]) && this.select(a)
        },
        _showMoreResultsClick: function() {
            var a = C.byId(this._moreResultsId);
            if (a) {
                l.toggle(a, this.css.searchShowMoreResults);
                var c = C.byId(this._moreResultsId + "_show");
                c && (l.contains(a, this.css.searchShowMoreResults) ? c.innerHTML = p.widgets.Search.main.hideMoreResults : c.innerHTML = p.widgets.Search.main.showMoreResults)
            }
        },
        _clearGraphics: function() {
            var a = this.highlightGraphic,
                c = this.graphicsLayer,
                b = this.labelGraphic;
            a && (c ? c.remove(a) : this.map && this.map.graphics && this.map.graphics.remove(a));
            b && (c ? c.remove(b) : this.map && this.map.graphics && this.map.graphics.remove(b));
            this.set("labelGraphic", null);
            this.set("highlightGraphic", null)
        },
        _featureLayerLoaded: function(a) {
            var c = new s;
            if (a.loaded) c.resolve();
            else if (a.loadError) c.reject(Error(this._dijitName + " Layer failed to load."));
            else {
                var b, d;
                b = r.once(a, "load", k.hitch(this, function() {
                    d.remove();
                    c.resolve()
                }));
                d = r.once(a, "error", k.hitch(this, function() {
                    b.remove();
                    c.reject(Error(this._dijitName + " Layer could not be loaded."))
                }))
            }
            return c.promise
        },
        _getObjectSize: function(a) {
            var c = 0,
                b;
            for (b in a) a.hasOwnProperty(b) && c++;
            return c
        },
        _sourcesEvent: function(a) {
            var c = a.target,
                b = q.get(c, "data-index"),
                d = u("li", this.sourcesNode),
                c = B.indexOf(d, c);
            b !== this._allIndex && (b = parseInt(b, 10));
            "click" === a.type || a.keyCode === m.ENTER ? (this.set("activeSourceIndex", b), h.focus(this.inputNode), this._hideSourcesMenu()) : a.keyCode === m.UP_ARROW ? (a.stopPropagation(), a.preventDefault(), a = c - 1, 0 > a ? h.focus(this.sourcesBtnNode) : h.focus(d[a])) : a.keyCode === m.DOWN_ARROW ? (a.stopPropagation(),
                a.preventDefault(), a = c + 1, a >= d.length ? h.focus(this.sourcesBtnNode) : h.focus(d[a])) : a.keyCode === m.ESCAPE && (this._hideSourcesMenu(), h.focus(this.inputNode))
        },
        _suggestionsEvent: function(a) {
            var c = a.target,
                b = q.get(c, "data-source-index"),
                d = parseInt(q.get(c, "data-index"), 10),
                e = u("li", this.suggestionsNode),
                f = this.sources,
                c = B.indexOf(e, c);
            b !== this._allIndex && (b = parseInt(b, 10));
            var g;
            this._clearQueryTimeout();
            "click" === a.type || a.keyCode === m.ENTER ? ((e = this.suggestResults) && (e[b] && e[b][d]) && (g = e[b][d]), g && (g.index =
                b, f[b].featureLayer ? (g[this._objectIdIdentifier] = g.feature.attributes[f[b].featureLayer.objectIdField], b = this._getDisplayField(f[b]), b = g.feature.attributes[b]) : b = g.text, b || (b = ""), this.set("value", b), this.search(g), h.focus(this.inputNode))) : a.keyCode === m.BACKSPACE || a.keyCode === m.DELETE ? h.focus(this.inputNode) : a.keyCode === m.UP_ARROW ? (a.stopPropagation(), a.preventDefault(), g = c - 1, 0 > g ? h.focus(this.inputNode) : h.focus(e[g])) : a.keyCode === m.DOWN_ARROW ? (a.stopPropagation(), a.preventDefault(), g = c + 1, g >= e.length ?
                h.focus(this.inputNode) : h.focus(e[g])) : a.keyCode === m.ESCAPE && (this._hideMenus(), h.focus(this.inputNode))
        },
        _getResultName: function(a) {
            return a.name || p.widgets.Search.main.untitledResult
        },
        _getSuggestionName: function(a) {
            return a.text || a.name || p.widgets.Search.main.untitledResult
        },
        _moreResultsHTML: function(a) {
            var c = "",
                b = "",
                d = this.searchResults,
                e = this.sources,
                f = 0;
            if (d) {
                var b = b + ('\x3cdiv class\x3d"' + this.css.searchMoreResultsItem + '"\x3e'),
                    b = b + ('\x3ca href\x3d"javascript:;" id\x3d"' + this._moreResultsId +
                        '_show"\x3e' + p.widgets.Search.main.showMoreResults + "\x3c/a\x3e"),
                    b = b + "\x3c/div\x3e" + ('\x3cdiv class\x3d"' + this.css.searchMoreResultsList + '"\x3e'),
                    b = b + ('\x3cdiv class\x3d"' + this.css.searchMoreResultsHeader + '"\x3e'),
                    b = b + p.widgets.Search.main.moreResultsHeader,
                    b = b + "\x3c/div\x3e",
                    b = b + ('\x3cdiv id\x3d"' + this._moreResultsId + '_list"\x3e'),
                    g;
                for (g in d)
                    if (d[g] && d[g].length) {
                        if (1 < this._getObjectSize(d) && !(1 === d[g].length && d[g][0] === a)) var k = this._getSourceName(g),
                            b = b + ('\x3cdiv class\x3d"' + this.css.searchMoreResultsListHeader +
                                '"\x3e' + k + "\x3c/div\x3e");
                        for (var b = b + "\x3cul\x3e", l = e[g].maxResults || this.maxResults, k = 0; k < d[g].length && k < l; ++k)
                            if (d[g][k] !== a) {
                                var h = this._getResultName(d[g][k]),
                                    b = b + ('\x3cli\x3e\x3ca tabindex\x3d"0" title\x3d"' + h + '" data-index\x3d"' + k + '" data-source-index\x3d"' + g + '" href\x3d"javascript:;"\x3e' + h + "\x3c/a\x3e\x3c/li\x3e");
                                f++
                            }
                        a.feature.attributes && (a.feature.attributes.Addr_type && "LatLong" === a.feature.attributes.Addr_type) && (k = a.name.split(" "), 2 == k.length && (k = k[1] + " " + k[0], b += '\x3cli\x3e\x3ca data-latlon\x3d"' +
                            k + '" tabindex\x3d"0" title\x3d"' + k + '" href\x3d"javascript:;"\x3e' + k + "\x3c/a\x3e\x3c/li\x3e", f++));
                        b += "\x3c/ul\x3e"
                    }
                b += "\x3c/div\x3e";
                b += "\x3c/div\x3e"
            }
            f && (c += b);
            return c
        },
        _validField: function(a, c) {
            return a.getField(c)
        },
        _validFields: function(a, c) {
            if (a && c && c.length) {
                for (var b = 0; b < c.length; b++)
                    if (!this._validField(a, c[b])) return !1;
                return !0
            }
            return !1
        },
        _suggest: function(a) {
            a || (a = {
                index: this.activeSourceIndex,
                text: this.value
            });
            var c = new s;
            this._deferreds.push(c);
            var b = a.index,
                d = this.sources[b],
                e = this.enableSuggestions;
            d.hasOwnProperty("enableSuggestions") && (e = d.enableSuggestions);
            var f = 0,
                g;
            a.hasOwnProperty("text") && (g = k.trim(a.text), f = a.text.length);
            a = d.minCharacters || this.minCharacters;
            if (e && g && f >= a && this._supportsPagination(d)) {
                var l = "";
                d.prefix && (l += d.prefix);
                l += g;
                d.suffix && (l += d.suffix);
                var h = this._defaultSR;
                this.map && (h = this.map.spatialReference);
                e = {};
                if (d.locator) {
                    d.categories && (e.categories = d.categories);
                    d.locator.outSpatialReference = h;
                    if (this.map && (d.localSearchOptions && d.localSearchOptions.hasOwnProperty("distance") &&
                            d.localSearchOptions.hasOwnProperty("minScale")) && (f = this._getScale(), !d.localSearchOptions.minScale || f && f <= parseFloat(d.localSearchOptions.minScale))) e.location = this.map.extent.getCenter(), e.distance = d.localSearchOptions.distance;
                    e.text = l;
                    d.searchExtent && (e.searchExtent = d.searchExtent);
                    d.locator.suggestLocations(e).then(k.hitch(this, function(a) {
                        c.isFulfilled() || c.resolve(a)
                    }), k.hitch(this, function(a) {
                        a || (a = Error(this._dijitName + " Suggest location error"));
                        c.reject(a)
                    }))
                } else d.featureLayer && this._featureLayerLoaded(d.featureLayer).then(k.hitch(this,
                    function() {
                        var a = this._getDisplayField(d),
                            e = d.searchFields || [a],
                            f = this._validField(d.featureLayer, a),
                            g = this._validFields(d.featureLayer, e);
                        if (!f || !g) c.reject(Error(this._dijitName + " Invalid featureLayer field"));
                        else {
                            f = new G;
                            f.outSpatialReference = h;
                            f.returnGeometry = !1;
                            f.num = d.maxSuggestions || this.maxSuggestions;
                            d.searchExtent && (f.geometry = d.searchExtent);
                            g = "";
                            this.reHostedFS.test(d.featureLayer.url) && this._containsNonLatinCharacter(l) && (g = "N");
                            f.outFields = [d.featureLayer.objectIdField, a];
                            if (e && e.length)
                                for (a =
                                    0; a < e.length; a++) f.where = 0 === a ? "" : f.where + " or ", f.where += "UPPER(" + e[a] + ") LIKE " + g + "'%" + l.toUpperCase() + "%'";
                            d.featureLayer.queryFeatures(f, k.hitch(this, function(a) {
                                var d;
                                (a = a.features) && (d = this._hydrateResults(a, b));
                                c.isFulfilled() || c.resolve(d)
                            }), k.hitch(this, function(a) {
                                a || (a = Error(this._dijitName + " suggest queryFeatures error"));
                                c.reject(a)
                            }))
                        }
                    }))
            } else c.resolve();
            return c.promise
        },
        _supportsPagination: function(a) {
            var c;
            a.locator ? c = !0 : a.featureLayer && a.featureLayer.advancedQueryCapabilities &&
                a.featureLayer.advancedQueryCapabilities.supportsPagination && (c = !0);
            return c
        },
        _suggestSource: function(a) {
            var c;
            c = this.sources;
            var b = this.activeSourceIndex;
            if (b === this._allIndex) {
                for (var b = [], d = 0; d < c.length; d++) {
                    var e = a;
                    e.index = d;
                    e = this._suggest(e);
                    b.push(e)
                }
                if (b.length) return x(b)
            } else if (a.index = b, c = c[b]) return this._suggest(a);
            a = new s;
            a.reject(Error(this._dijitName + " No suggestions to perform"));
            return a.promise
        },
        _getPointFromGeometry: function(a) {
            var c;
            switch (a.type) {
                case "extent":
                    c = a.getCenter();
                    break;
                case "multipoint":
                    c = a.getExtent().getCenter();
                    break;
                case "point":
                    c = a;
                    break;
                case "polygon":
                    c = a.getExtent().getCenter();
                    break;
                case "polyline":
                    c = a.getExtent().getCenter()
            }
            return c
        },
        _searchSource: function(a) {
            a.hasOwnProperty("index") || (a.index = this.activeSourceIndex);
            if (a.index === this._allIndex) {
                for (var c = [], b = this.sources, d = 0; d < b.length; d++) {
                    var e = a;
                    e.index = d;
                    (e = this._search(e)) && c.push(e)
                }
                if (c.length) return x(c)
            } else if (a = this._search(a)) return a;
            a = new s;
            a.reject(Error(this._dijitName + " No searches to perform"));
            return a.promise
        },
        _searchButton: function() {
            this.enableButtonMode && !this.expanded ? (this.expand(), h.focus(this.inputNode)) : this.search()
        },
        _search: function(a) {
            a || (a = {
                text: this.value,
                magicKey: null,
                geometry: null,
                point: null,
                index: this.activeSourceIndex,
                latlon: null
            });
            var c, b = new s;
            this._deferreds.push(b);
            var d = a.index,
                e = this.sources[d],
                f;
            a.hasOwnProperty("text") && (f = k.trim(a.text));
            if (e) {
                var g = "";
                e.prefix && (g += e.prefix);
                g += f;
                e.suffix && (g += e.suffix);
                var l = this._defaultSR;
                this.map && (l = this.map.spatialReference);
                if (e.locator)
                    if (a.hasOwnProperty("text") && f) {
                        var h = {};
                        e.categories && (h.categories = e.categories);
                        l && (e.locator.outSpatialReference = l);
                        if (this.map && e.localSearchOptions && e.localSearchOptions.hasOwnProperty("distance") && e.localSearchOptions.hasOwnProperty("minScale")) {
                            var m = this._getScale();
                            if (!e.localSearchOptions.minScale || m && m <= parseFloat(e.localSearchOptions.minScale)) h.location = this.map.extent.getCenter(), h.distance = e.localSearchOptions.distance
                        }
                        h.address = {};
                        h.maxLocations = e.maxResults || this.maxResults;
                        e.searchExtent && (h.searchExtent = e.searchExtent);
                        e.sourceCountry && (h.countryCode = e.sourceCountry);
                        a.magicKey && (h.magicKey = a.magicKey);
                        e.singleLineFieldName ? h.address[e.singleLineFieldName] = g : h.address["Single Line Input"] = g;
                        e.outFields && (h.outFields = e.outFields);
                        e.locator.addressToLocations(h).then(k.hitch(this, function(a) {
                            a = this._hydrateResults(a, d);
                            b.isFulfilled() || b.resolve(a)
                        }), k.hitch(this, function(a) {
                            a || (a = Error(this._dijitName + " addressToLocations error"));
                            b.reject(a)
                        }))
                    } else a.geometry ? (c =
                            this._getPointFromGeometry(a.geometry.geometry)) ? this._reverseGeocodePoint(d, c).then(function(a) {
                            b.isFulfilled() || b.resolve(a)
                        }, function(a) {
                            b.reject(a)
                        }) : b.reject(Error(this._dijitName + " Invalid point to reverse geocode")) : a.point ? this._reverseGeocodePoint(d, a.point).then(function(a) {
                            b.isFulfilled() || b.resolve(a)
                        }, function(a) {
                            b.reject(a)
                        }) : a.latlon ? (h = new z(a.latlon, this._defaultSR), this._reverseGeocodePoint(d, h).then(function(a) {
                            b.isFulfilled() || b.resolve(a)
                        }, function(a) {
                            b.reject(a)
                        })) : a.hasOwnProperty("text") &&
                        !f ? b.isFulfilled() || b.resolve([]) : b.reject(Error(this._dijitName + " Invalid query type for Locator"));
                else e.featureLayer && this._featureLayerLoaded(e.featureLayer).then(k.hitch(this, function() {
                    var h = this._getDisplayField(e),
                        m = e.searchFields || [h],
                        n = this._validField(e.featureLayer, h),
                        p = this._validFields(e.featureLayer, m);
                    if (!n || !p) b.reject(Error(this._dijitName + " Invalid featureLayer field"));
                    else {
                        n = new G;
                        l && (n.outSpatialReference = l);
                        n.returnGeometry = !0;
                        n.outFields = e.outFields ? e.outFields : [h];
                        var r,
                            q;
                        a.hasOwnProperty(this._objectIdIdentifier) || (n.num = e.maxResults || this.maxResults, e.searchExtent && (n.geometry = e.searchExtent), r = e.exactMatch, q = "", this.reHostedFS.test(e.featureLayer.url) && this._containsNonLatinCharacter(g) && (q = "N"));
                        if (a.hasOwnProperty("text") && f) {
                            if (m && m.length)
                                for (h = 0; h < m.length; h++) n.where = 0 === h ? "" : n.where + " or ", n.where = r ? n.where + (m[h] + " \x3d " + q + "'" + g + "'") : n.where + ("UPPER(" + m[h] + ") LIKE " + q + "'%" + g.toUpperCase() + "%'");
                            m = !0
                        } else a.hasOwnProperty(this._objectIdIdentifier) ? (n.objectIds = [a[this._objectIdIdentifier]], m = !0) : a.geometry ? (n.geometry = a.geometry, m = !0) : a.point ? (n.geometry = a.point, m = !0) : a.latlon ? (c = new z(a.latlon, this._defaultSR), n.geometry = c, m = !0) : (a.hasOwnProperty("text") && !f ? b.isFulfilled() || b.resolve([]) : b.reject(Error(this._dijitName + " Invalid query type for FeatureLayer")), m = !1);
                        m && e.featureLayer.queryFeatures(n, k.hitch(this, function(a) {
                            a = a.features;
                            var c;
                            a && (c = this._hydrateResults(a, d));
                            b.isFulfilled() || b.resolve(c)
                        }), k.hitch(this, function(a) {
                            a || (a = Error(this._dijitName +
                                " Search queryFeatures error"));
                            b.reject(a)
                        }))
                    }
                }))
            } else b.reject(Error(this._dijitName + " Source is undefined"));
            return b.promise
        },
        _clearQueryTimeout: function() {
            this._queryTimer && clearTimeout(this._queryTimer)
        },
        _formatResults: function(a, c) {
            var b = {},
                d = 0,
                e;
            if (a) {
                if (c === this._allIndex)
                    for (var f = 0; f < a.length; f++) a[f] && (b[f] = a[f], d += a[f].length, e = !0);
                else b[c] = a, d += a.length, e = !0;
                if (e) return {
                    numResults: d,
                    results: b
                }
            }
        },
        _reverseGeocodePoint: function(a, c) {
            var b = new s,
                d = this.sources[a];
            if (c && d) {
                var e = d.locationToAddressDistance ||
                    this.locationToAddressDistance;
                d.locator.outSpatialReference = this._defaultSR;
                this.map && (d.locator.outSpatialReference = this.map.spatialReference);
                d.locator.locationToAddress(c, e, k.hitch(this, function(c) {
                    c = this._hydrateResults([c], a);
                    b.resolve(c)
                }), k.hitch(this, function(a) {
                    a || (a = Error(this._dijitName + " locationToAddress error"));
                    b.reject(a)
                }))
            } else b.reject(Error(this._dijitName + " no point or active geocoder defined"));
            return b.promise
        },
        _cancelDeferreds: function() {
            if (this._deferreds && this._deferreds.length)
                for (var a =
                        0; a < this._deferreds.length; a++) this._deferreds[a].isFulfilled() || this._deferreds[a].cancel(this._dijitName + " cancelling request");
            this._deferreds = []
        },
        _sourceBtnKey: function(a) {
            if (a) {
                var c = u("li", this.sourcesNode);
                a.keyCode === m.UP_ARROW ? (a.stopPropagation(), a.preventDefault(), this._showSourcesMenu(), (a = c.length) && h.focus(c[a - 1])) : a.keyCode === m.DOWN_ARROW && (a.stopPropagation(), a.preventDefault(), this._showSourcesMenu(), c[0] && h.focus(c[0]))
            }
        },
        _inputKey: function(a) {
            if (a) {
                var c = u("li", this.suggestionsNode),
                    b = this.suggestResults;
                this._cancelDeferreds();
                this._clearQueryTimeout();
                if (a.keyCode === m.TAB || a.keyCode === m.ESCAPE) this._hideMenus();
                else if (a.keyCode === m.UP_ARROW) a.stopPropagation(), a.preventDefault(), b && this._showSuggestionsMenu(), (a = c.length) && h.focus(c[a - 1]);
                else if (a.keyCode === m.DOWN_ARROW) a.stopPropagation(), a.preventDefault(), b && this._showSuggestionsMenu(), c[0] && h.focus(c[0]);
                else {
                    if (a.ctrlKey || a.metaKey || a.keyCode === m.copyKey || a.keyCode === m.LEFT_ARROW || a.keyCode === m.RIGHT_ARROW) return a;
                    this._changeAttrValue("value", this.inputNode.value);
                    this._checkStatus();
                    a.keyCode === m.ENTER ? this.search() : this._queryTimer = setTimeout(k.hitch(this, function() {
                        this.suggest()
                    }), this.suggestionDelay)
                }
            }
        },
        _inputClick: function() {
            this._hideSourcesMenu();
            this._hideNoResultsMenu()
        },
        _getSourceName: function(a) {
            var c = this.sources,
                b = c[a].name;
            !b && c[a].featureLayer && (b = c[a].featureLayer.name);
            b || (b = p.widgets.Search.main.untitledSource);
            return b
        },
        _insertSuggestions: function(a) {
            if (this.enableSuggestionsMenu && this.suggestionsNode) {
                this._hideSourcesMenu();
                this._hideNoResultsMenu();
                var c = "",
                    b = this.sources,
                    d = this.value;
                if (a)
                    for (var e in a)
                        if (a[e] && a[e].length) {
                            var f = this._getSourceName(e);
                            1 < b.length && this.activeSourceIndex === this._allIndex && (c += '\x3cdiv title\x3d"' + f + '" class\x3d"' + this.css.searchMenuHeader + '"\x3e' + f + "\x3c/div\x3e");
                            for (var c = c + "\x3cul\x3e", g = RegExp("(" + d + ")", "gi"), h = b[e].maxSuggestions || this.maxSuggestions, f = 0; f < a[e].length && f < h; ++f) var k = this._getSuggestionName(a[e][f]),
                                c = c + ('\x3cli title\x3d"' + k + '" data-index\x3d"' + f + '" data-source-index\x3d"' +
                                    e + '" role\x3d"menuitem" tabindex\x3d"0"\x3e' + k.replace(g, "\x3cstrong \x3e$1\x3c/strong\x3e") + "\x3c/li\x3e");
                            c += "\x3c/ul\x3e"
                        }(this.suggestionsNode.innerHTML = c) ? this._showSuggestionsMenu(): this._hideSuggestionsMenu()
            }
        },
        _insertSources: function(a) {
            var c = "";
            if (this.enableSourcesMenu && a && 1 < a.length) {
                var b, d, e = this.activeSourceIndex;
                b = "";
                e === this._allIndex && (b = "active");
                c = c + "\x3cul\x3e" + ('\x3cli title\x3d"' + p.widgets.Search.main.all + '" data-index\x3d"' + this._allIndex + '" role\x3d"menuitem" class\x3d"' + b +
                    '" tabindex\x3d"0" class\x3d""\x3e' + p.widgets.Search.main.all + "\x3c/li\x3e");
                for (d = 0; d < a.length; d++) {
                    b = "";
                    d === e && (b = this.css.activeSource);
                    var f = this._getSourceName(d),
                        c = c + ('\x3cli title\x3d"' + f + '" data-index\x3d"' + d + '" role\x3d"menuitem" tabindex\x3d"0" class\x3d"' + b + '"\x3e' + f + "\x3c/li\x3e")
                }
                c += "\x3c/ul\x3e";
                l.add(this.containerNode, this.css.hasMultipleSources)
            } else l.remove(this.containerNode, this.css.hasMultipleSources);
            this.sourcesNode.innerHTML = c
        },
        _showLoading: function() {
            l.add(this.containerNode,
                this.css.searchLoading)
        },
        _hideLoading: function() {
            l.remove(this.containerNode, this.css.searchLoading)
        },
        _checkStatus: function() {
            this.value ? (l.add(this.containerNode, this.css.hasValue), q.set(this.clearNode, "title", p.widgets.Search.main.clearButtonTitle)) : this.clear()
        },
        _closePopup: function() {
            this.enableInfoWindow && (this.map && this.map.infoWindow) && this.map.infoWindow.hide()
        },
        _noResultsHTML: function(a) {
            var c = "",
                b = k.trim(a),
                c = c + ('\x3cdiv class\x3d"' + this.css.searchNoResultsBody + '"\x3e');
            a && b ? (c += '\x3cdiv class\x3d"' +
                this.css.searchNoResultsHeader + '"\x3e', c += p.widgets.Search.main.noResults, c = c + "\x3c/div\x3e" + ('\x3cdiv class\x3d"' + this.css.searchNoResultsText + '"\x3e'), c += P.substitute(p.widgets.Search.main.noResultsFound, {
                    value: '"' + a + '"'
                })) : (c += "\x3cdiv\x3e", c += '\x3cspan class\x3d"' + this.css.searchNoValueIcon + '"\x3e\x3c/span\x3e', c += '\x3cspan class\x3d"' + this.css.searchNoValueText + '"\x3e' + p.widgets.Search.main.emptyValue + "\x3c/span\x3e");
            c += "\x3c/div\x3e";
            c += "\x3c/div\x3e";
            this.noResultsMenuNode.innerHTML = c
        },
        _hideMenus: function() {
            this._hideSourcesMenu();
            this._hideSuggestionsMenu();
            this._hideNoResultsMenu()
        },
        _hideNoResultsMenu: function() {
            l.remove(this.containerNode, this.css.showNoResults)
        },
        _showNoResultsMenu: function() {
            this._hideSourcesMenu();
            this._hideSuggestionsMenu();
            l.add(this.containerNode, this.css.showNoResults)
        },
        _hideSourcesMenu: function() {
            l.remove(this.containerNode, this.css.showSources)
        },
        _hideSuggestionsMenu: function() {
            l.remove(this.containerNode, this.css.showSuggestions)
        },
        _showSourcesMenu: function() {
            this._hideSuggestionsMenu();
            this._hideNoResultsMenu();
            l.add(this.containerNode, this.css.showSources)
        },
        _showSuggestionsMenu: function() {
            this._hideSourcesMenu();
            this._hideNoResultsMenu();
            l.add(this.containerNode, this.css.showSuggestions)
        },
        _toggleSourcesMenu: function() {
            this._hideSuggestionsMenu();
            this._hideNoResultsMenu();
            l.toggle(this.containerNode, this.css.showSources)
        },
        _getFirstStringField: function(a) {
            if (a && (a = a.fields) && a.length)
                for (var c = 0; c < a.length; c++) {
                    var b = a[c];
                    if ("esriFieldTypeString" === b.type) return b.name
                }
            return ""
        },
        _getDisplayField: function(a) {
            return a.displayField ||
                a.featureLayer.displayField || this._getFirstStringField(a.featureLayer)
        },
        _hydrateResult: function(a, c) {
            var b = {},
                d = this._defaultSR,
                e;
            e = this.sources[c];
            var f;
            e.featureLayer && (f = this._getDisplayField(e));
            this.map && (d = this.map.spatialReference);
            if (a.hasOwnProperty("text") && a.hasOwnProperty("magicKey")) return a;
            if (a.hasOwnProperty("feature")) b.feature = new t(a.feature), (e = b.feature.geometry) && e.setSpatialReference(d);
            else if (a.hasOwnProperty("geometry")) {
                var g = a.symbol || null;
                e = a.attributes || {};
                b.feature =
                    new t(a.geometry, g, e, a.infoTemplate || null);
                (e = b.feature.geometry) && e.setSpatialReference(d)
            } else a.hasOwnProperty("location") ? (g = new z(a.location.x, a.location.y, d), e = {}, a.hasOwnProperty("attributes") && (e = a.attributes), a.hasOwnProperty("score") && (e.score = a.score), b.feature = new t(g, null, e, null)) : b.feature = null;
            if (a.hasOwnProperty("extent")) b.extent = new F(a.extent), b.extent.setSpatialReference(new E(d));
            else if (b.feature && b.feature.geometry) switch (b.feature.geometry.type) {
                case "extent":
                    b.extent = b.feature.geometry;
                    break;
                case "multipoint":
                    b.extent = b.feature.geometry.getExtent();
                    break;
                case "polygon":
                    b.extent = b.feature.geometry.getExtent();
                    break;
                case "polyline":
                    b.extent = b.feature.geometry.getExtent();
                    break;
                case "point":
                    this.map ? this._getScale() > this.zoomScale ? b.extent = $.getExtentForScale(this.map, this.zoomScale).centerAt(b.feature.geometry) : b.extent = this.map.extent.centerAt(b.feature.geometry) : b.extent = new F({
                        xmin: b.feature.geometry.x - 0.25,
                        ymin: b.feature.geometry.y - 0.25,
                        xmax: b.feature.geometry.x + 0.25,
                        ymax: b.feature.geometry.y +
                            0.25,
                        spatialReference: this._defaultSR
                    })
            } else b.extent = null;
            a.hasOwnProperty("name") ? b.name = a.name : f && a.hasOwnProperty("attributes") && a.attributes.hasOwnProperty(f) ? b.name = a.attributes[f] : a.hasOwnProperty("Match_addr") && "string" === typeof a.Match_addr ? b.name = a.Match_addr : a.hasOwnProperty("address") && "object" === typeof a.address && a.address.hasOwnProperty("Match_addr") ? b.name = a.address.Match_addr : a.hasOwnProperty("address") && "string" === typeof a.address ? b.name = a.address : a.hasOwnProperty("address") && "object" ===
                typeof a.address && a.address.hasOwnProperty("Address") ? b.name = a.address.Address : b.name = b.feature && b.feature.geometry ? b.feature.geometry.x + "," + b.feature.geometry.y : "";
            return b
        },
        _getScale: function() {
            var a;
            this.map && "function" === typeof this.map.getScale ? a = this.map.getScale() : this.map && "function" === typeof this.map.get && (a = this.map.get("scale"));
            return a
        },
        _hydrateResults: function(a, c) {
            var b = [],
                d = 0;
            if (a && a.length)
                for (d; d < a.length; d++) {
                    var e = this._hydrateResult(a[d], c);
                    b.push(e)
                }
            return b
        },
        _containsNonLatinCharacter: function(a) {
            for (var c =
                    0; c < a.length; c++)
                if (255 < a.charCodeAt(c)) return !0;
            return !1
        },
        _setPlaceholder: function(a) {
            var c = "",
                b = this.sources[a];
            a === this._allIndex ? c = p.widgets.Search.main.placeholder : b && b.placeholder && (c = b.placeholder);
            var d = p.widgets.Search.main.all;
            b && (d = this._getSourceName(a));
            this.sourceNameNode.innerHTML = d;
            q.set(this.inputNode, "placeholder", c);
            q.set(this.inputNode, "title", c)
        },
        _updateActiveSource: function() {
            var a = this.sources,
                c = this.activeSourceIndex,
                b;
            a && a[c] && (b = a[c]);
            b ? this.set("activeSource", b) : this.set("activeSource",
                null)
        },
        _updateVisible: function() {
            this.visible ? this.show() : this.hide()
        },
        _updateButtonMode: function(a) {
            a ? (l.toggle(this.containerNode, this.css.searchExpanded, this.expanded), l.toggle(this.containerNode, this.css.searchCollapsed, !this.expanded), l.add(this.containerNode, this.css.hasButtonMode)) : (l.remove(this.containerNode, this.css.searchExpanded), l.remove(this.containerNode, this.css.searchCollapsed), l.remove(this.containerNode, this.css.hasButtonMode))
        },
        _setDefaultActiveSourceIndex: function() {
            var a = this.sources;
            a && 1 === a.length ? this.set("activeSourceIndex", 0) : this.set("activeSourceIndex", this._allIndex)
        },
        _setSourcesAttr: function(a) {
            this.sources = a;
            this._created && (this._setDefaultActiveSourceIndex(), this._hideMenus(), this._insertSources(a))
        },
        _setActiveSourceIndexAttr: function(a) {
            this.activeSourceIndex = a;
            this._updateActiveSource();
            this._created && (this._setPlaceholder(a), this._hideMenus(), this._insertSources(this.sources))
        },
        _setValueAttr: function(a) {
            this.value = a;
            this._created && (q.set(this.inputNode, "value", a),
                this._checkStatus())
        },
        _setVisibleAttr: function(a) {
            this.visible = a;
            this._created && this._updateVisible()
        },
        _setEnableButtonModeAttr: function(a) {
            this.enableButtonMode = a;
            this._created && this._updateButtonMode(a)
        },
        _setThemeAttr: function(a) {
            this._created && (l.remove(this.domNode, this.theme), l.add(this.domNode, a));
            this.theme = a
        }
    })
});
},
'dijit/_WidgetBase':function(){
define([
	"require", // require.toUrl
	"dojo/_base/array", // array.forEach array.map
	"dojo/aspect",
	"dojo/_base/config", // config.blankGif
	"dojo/_base/connect", // connect.connect
	"dojo/_base/declare", // declare
	"dojo/dom", // dom.byId
	"dojo/dom-attr", // domAttr.set domAttr.remove
	"dojo/dom-class", // domClass.add domClass.replace
	"dojo/dom-construct", // domConstruct.destroy domConstruct.place
	"dojo/dom-geometry", // isBodyLtr
	"dojo/dom-style", // domStyle.set, domStyle.get
	"dojo/has",
	"dojo/_base/kernel",
	"dojo/_base/lang", // mixin(), isArray(), etc.
	"dojo/on",
	"dojo/ready",
	"dojo/Stateful", // Stateful
	"dojo/topic",
	"dojo/_base/window", // win.body()
	"./Destroyable",
	"dojo/has!dojo-bidi?./_BidiMixin",
	"./registry"    // registry.getUniqueId(), registry.findWidgets()
], function(require, array, aspect, config, connect, declare,
			dom, domAttr, domClass, domConstruct, domGeometry, domStyle, has, kernel,
			lang, on, ready, Stateful, topic, win, Destroyable, _BidiMixin, registry){

	// module:
	//		dijit/_WidgetBase

	// Flag to make dijit load modules the app didn't explicitly request, for backwards compatibility
	has.add("dijit-legacy-requires", !kernel.isAsync);

	// Flag to enable support for textdir attribute
	has.add("dojo-bidi", false);


	// For back-compat, remove in 2.0.
	if(has("dijit-legacy-requires")){
		ready(0, function(){
			var requires = ["dijit/_base/manager"];
			require(requires);	// use indirection so modules not rolled into a build
		});
	}

	// Nested hash listing attributes for each tag, all strings in lowercase.
	// ex: {"div": {"style": true, "tabindex" true}, "form": { ...
	var tagAttrs = {};

	function getAttrs(obj){
		var ret = {};
		for(var attr in obj){
			ret[attr.toLowerCase()] = true;
		}
		return ret;
	}

	function nonEmptyAttrToDom(attr){
		// summary:
		//		Returns a setter function that copies the attribute to this.domNode,
		//		or removes the attribute from this.domNode, depending on whether the
		//		value is defined or not.
		return function(val){
			domAttr[val ? "set" : "remove"](this.domNode, attr, val);
			this._set(attr, val);
		};
	}

	function isEqual(a, b){
		//	summary:
		//		Function that determines whether two values are identical,
		//		taking into account that NaN is not normally equal to itself
		//		in JS.

		return a === b || (/* a is NaN */ a !== a && /* b is NaN */ b !== b);
	}

	var _WidgetBase = declare("dijit._WidgetBase", [Stateful, Destroyable], {
		// summary:
		//		Future base class for all Dijit widgets.
		// description:
		//		Future base class for all Dijit widgets.
		//		_Widget extends this class adding support for various features needed by desktop.
		//
		//		Provides stubs for widget lifecycle methods for subclasses to extend, like postMixInProperties(), buildRendering(),
		//		postCreate(), startup(), and destroy(), and also public API methods like set(), get(), and watch().
		//
		//		Widgets can provide custom setters/getters for widget attributes, which are called automatically by set(name, value).
		//		For an attribute XXX, define methods _setXXXAttr() and/or _getXXXAttr().
		//
		//		_setXXXAttr can also be a string/hash/array mapping from a widget attribute XXX to the widget's DOMNodes:
		//
		//		- DOM node attribute
		// |		_setFocusAttr: {node: "focusNode", type: "attribute"}
		// |		_setFocusAttr: "focusNode"	(shorthand)
		// |		_setFocusAttr: ""		(shorthand, maps to this.domNode)
		//		Maps this.focus to this.focusNode.focus, or (last example) this.domNode.focus
		//
		//		- DOM node innerHTML
		//	|		_setTitleAttr: { node: "titleNode", type: "innerHTML" }
		//		Maps this.title to this.titleNode.innerHTML
		//
		//		- DOM node innerText
		//	|		_setTitleAttr: { node: "titleNode", type: "innerText" }
		//		Maps this.title to this.titleNode.innerText
		//
		//		- DOM node CSS class
		// |		_setMyClassAttr: { node: "domNode", type: "class" }
		//		Maps this.myClass to this.domNode.className
		//
		//		If the value of _setXXXAttr is an array, then each element in the array matches one of the
		//		formats of the above list.
		//
		//		If the custom setter is null, no action is performed other than saving the new value
		//		in the widget (in this).
		//
		//		If no custom setter is defined for an attribute, then it will be copied
		//		to this.focusNode (if the widget defines a focusNode), or this.domNode otherwise.
		//		That's only done though for attributes that match DOMNode attributes (title,
		//		alt, aria-labelledby, etc.)

		// id: [const] String
		//		A unique, opaque ID string that can be assigned by users or by the
		//		system. If the developer passes an ID which is known not to be
		//		unique, the specified ID is ignored and the system-generated ID is
		//		used instead.
		id: "",
		_setIdAttr: "domNode", // to copy to this.domNode even for auto-generated id's

		// lang: [const] String
		//		Rarely used.  Overrides the default Dojo locale used to render this widget,
		//		as defined by the [HTML LANG](http://www.w3.org/TR/html401/struct/dirlang.html#adef-lang) attribute.
		//		Value must be among the list of locales specified during by the Dojo bootstrap,
		//		formatted according to [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt) (like en-us).
		lang: "",
		// set on domNode even when there's a focus node.	but don't set lang="", since that's invalid.
		_setLangAttr: nonEmptyAttrToDom("lang"),

		// dir: [const] String
		//		Bi-directional support, as defined by the [HTML DIR](http://www.w3.org/TR/html401/struct/dirlang.html#adef-dir)
		//		attribute. Either left-to-right "ltr" or right-to-left "rtl".  If undefined, widgets renders in page's
		//		default direction.
		dir: "",
		// set on domNode even when there's a focus node.	but don't set dir="", since that's invalid.
		_setDirAttr: nonEmptyAttrToDom("dir"), // to set on domNode even when there's a focus node

		// class: String
		//		HTML class attribute
		"class": "",
		_setClassAttr: { node: "domNode", type: "class" },

		// Override automatic assigning type --> focusNode, it causes exception on IE6-8.
		// Instead, type must be specified as ${type} in the template, as part of the original DOM.
		_setTypeAttr: null,

		// style: String||Object
		//		HTML style attributes as cssText string or name/value hash
		style: "",

		// title: String
		//		HTML title attribute.
		//
		//		For form widgets this specifies a tooltip to display when hovering over
		//		the widget (just like the native HTML title attribute).
		//
		//		For TitlePane or for when this widget is a child of a TabContainer, AccordionContainer,
		//		etc., it's used to specify the tab label, accordion pane title, etc.  In this case it's
		//		interpreted as HTML.
		title: "",

		// tooltip: String
		//		When this widget's title attribute is used to for a tab label, accordion pane title, etc.,
		//		this specifies the tooltip to appear when the mouse is hovered over that text.
		tooltip: "",

		// baseClass: [protected] String
		//		Root CSS class of the widget (ex: dijitTextBox), used to construct CSS classes to indicate
		//		widget state.
		baseClass: "",

		// srcNodeRef: [readonly] DomNode
		//		pointer to original DOM node
		srcNodeRef: null,

		// domNode: [readonly] DomNode
		//		This is our visible representation of the widget! Other DOM
		//		Nodes may by assigned to other properties, usually through the
		//		template system's data-dojo-attach-point syntax, but the domNode
		//		property is the canonical "top level" node in widget UI.
		domNode: null,

		// containerNode: [readonly] DomNode
		//		Designates where children of the source DOM node will be placed.
		//		"Children" in this case refers to both DOM nodes and widgets.
		//		For example, for myWidget:
		//
		//		|	<div data-dojo-type=myWidget>
		//		|		<b> here's a plain DOM node
		//		|		<span data-dojo-type=subWidget>and a widget</span>
		//		|		<i> and another plain DOM node </i>
		//		|	</div>
		//
		//		containerNode would point to:
		//
		//		|		<b> here's a plain DOM node
		//		|		<span data-dojo-type=subWidget>and a widget</span>
		//		|		<i> and another plain DOM node </i>
		//
		//		In templated widgets, "containerNode" is set via a
		//		data-dojo-attach-point assignment.
		//
		//		containerNode must be defined for any widget that accepts innerHTML
		//		(like ContentPane or BorderContainer or even Button), and conversely
		//		is null for widgets that don't, like TextBox.
		containerNode: null,

		// ownerDocument: [const] Document?
		//		The document this widget belongs to.  If not specified to constructor, will default to
		//		srcNodeRef.ownerDocument, or if no sourceRef specified, then to the document global
		ownerDocument: null,
		_setOwnerDocumentAttr: function(val){
			// this setter is merely to avoid automatically trying to set this.domNode.ownerDocument
			this._set("ownerDocument", val);
		},

		/*=====
		// _started: [readonly] Boolean
		//		startup() has completed.
		_started: false,
		=====*/

		// attributeMap: [protected] Object
		//		Deprecated.	Instead of attributeMap, widget should have a _setXXXAttr attribute
		//		for each XXX attribute to be mapped to the DOM.
		//
		//		attributeMap sets up a "binding" between attributes (aka properties)
		//		of the widget and the widget's DOM.
		//		Changes to widget attributes listed in attributeMap will be
		//		reflected into the DOM.
		//
		//		For example, calling set('title', 'hello')
		//		on a TitlePane will automatically cause the TitlePane's DOM to update
		//		with the new title.
		//
		//		attributeMap is a hash where the key is an attribute of the widget,
		//		and the value reflects a binding to a:
		//
		//		- DOM node attribute
		// |		focus: {node: "focusNode", type: "attribute"}
		//		Maps this.focus to this.focusNode.focus
		//
		//		- DOM node innerHTML
		//	|		title: { node: "titleNode", type: "innerHTML" }
		//		Maps this.title to this.titleNode.innerHTML
		//
		//		- DOM node innerText
		//	|		title: { node: "titleNode", type: "innerText" }
		//		Maps this.title to this.titleNode.innerText
		//
		//		- DOM node CSS class
		// |		myClass: { node: "domNode", type: "class" }
		//		Maps this.myClass to this.domNode.className
		//
		//		If the value is an array, then each element in the array matches one of the
		//		formats of the above list.
		//
		//		There are also some shorthands for backwards compatibility:
		//
		//		- string --> { node: string, type: "attribute" }, for example:
		//
		//	|	"focusNode" ---> { node: "focusNode", type: "attribute" }
		//
		//		- "" --> { node: "domNode", type: "attribute" }
		attributeMap: {},

		// _blankGif: [protected] String
		//		Path to a blank 1x1 image.
		//		Used by `<img>` nodes in templates that really get their image via CSS background-image.
		_blankGif: config.blankGif || require.toUrl("dojo/resources/blank.gif"),

		//////////// INITIALIZATION METHODS ///////////////////////////////////////

		/*=====
		constructor: function(params, srcNodeRef){
			// summary:
			//		Create the widget.
			// params: Object|null
			//		Hash of initialization parameters for widget, including scalar values (like title, duration etc.)
			//		and functions, typically callbacks like onClick.
			//		The hash can contain any of the widget's properties, excluding read-only properties.
			// srcNodeRef: DOMNode|String?
			//		If a srcNodeRef (DOM node) is specified:
			//
			//		- use srcNodeRef.innerHTML as my contents
			//		- if this is a behavioral widget then apply behavior to that srcNodeRef
			//		- otherwise, replace srcNodeRef with my generated DOM tree
		},
		=====*/

		_introspect: function(){
			// summary:
			//		Collect metadata about this widget (only once per class, not once per instance):
			//
			//			- list of attributes with custom setters, storing in this.constructor._setterAttrs
			//			- generate this.constructor._onMap, mapping names like "mousedown" to functions like onMouseDown

			var ctor = this.constructor;
			if(!ctor._setterAttrs){
				var proto = ctor.prototype,
					attrs = ctor._setterAttrs = [], // attributes with custom setters
					onMap = (ctor._onMap = {});

				// Items in this.attributeMap are like custom setters.  For back-compat, remove for 2.0.
				for(var name in proto.attributeMap){
					attrs.push(name);
				}

				// Loop over widget properties, collecting properties with custom setters and filling in ctor._onMap.
				for(name in proto){
					if(/^on/.test(name)){
						onMap[name.substring(2).toLowerCase()] = name;
					}

					if(/^_set[A-Z](.*)Attr$/.test(name)){
						name = name.charAt(4).toLowerCase() + name.substr(5, name.length - 9);
						if(!proto.attributeMap || !(name in proto.attributeMap)){
							attrs.push(name);
						}
					}
				}

				// Note: this isn't picking up info on properties like aria-label and role, that don't have custom setters
				// but that set() maps to attributes on this.domNode or this.focusNode
			}
		},

		postscript: function(/*Object?*/params, /*DomNode|String*/srcNodeRef){
			// summary:
			//		Kicks off widget instantiation.  See create() for details.
			// tags:
			//		private

			// Note that we skip calling this.inherited(), i.e. dojo/Stateful::postscript(), because 1.x widgets don't
			// expect their custom setters to get called until after buildRendering().  Consider changing for 2.0.

			this.create(params, srcNodeRef);
		},

		create: function(params, srcNodeRef){
			// summary:
			//		Kick off the life-cycle of a widget
			// description:
			//		Create calls a number of widget methods (postMixInProperties, buildRendering, postCreate,
			//		etc.), some of which of you'll want to override. See http://dojotoolkit.org/reference-guide/dijit/_WidgetBase.html
			//		for a discussion of the widget creation lifecycle.
			//
			//		Of course, adventurous developers could override create entirely, but this should
			//		only be done as a last resort.
			// params: Object|null
			//		Hash of initialization parameters for widget, including scalar values (like title, duration etc.)
			//		and functions, typically callbacks like onClick.
			//		The hash can contain any of the widget's properties, excluding read-only properties.
			// srcNodeRef: DOMNode|String?
			//		If a srcNodeRef (DOM node) is specified:
			//
			//		- use srcNodeRef.innerHTML as my contents
			//		- if this is a behavioral widget then apply behavior to that srcNodeRef
			//		- otherwise, replace srcNodeRef with my generated DOM tree
			// tags:
			//		private

			// First time widget is instantiated, scan prototype to figure out info about custom setters etc.
			this._introspect();

			// store pointer to original DOM tree
			this.srcNodeRef = dom.byId(srcNodeRef);

			// No longer used, remove for 2.0.
			this._connects = [];
			this._supportingWidgets = [];

			// this is here for back-compat, remove in 2.0 (but check NodeList-instantiate.html test)
			if(this.srcNodeRef && (typeof this.srcNodeRef.id == "string")){
				this.id = this.srcNodeRef.id;
			}

			// mix in our passed parameters
			if(params){
				this.params = params;
				lang.mixin(this, params);
			}
			this.postMixInProperties();

			// Generate an id for the widget if one wasn't specified, or it was specified as id: undefined.
			// Do this before buildRendering() because it might expect the id to be there.
			if(!this.id){
				this.id = registry.getUniqueId(this.declaredClass.replace(/\./g, "_"));
				if(this.params){
					// if params contains {id: undefined}, prevent _applyAttributes() from processing it
					delete this.params.id;
				}
			}

			// The document and <body> node this widget is associated with
			this.ownerDocument = this.ownerDocument || (this.srcNodeRef ? this.srcNodeRef.ownerDocument : document);
			this.ownerDocumentBody = win.body(this.ownerDocument);

			registry.add(this);

			this.buildRendering();

			var deleteSrcNodeRef;

			if(this.domNode){
				// Copy attributes listed in attributeMap into the [newly created] DOM for the widget.
				// Also calls custom setters for all attributes with custom setters.
				this._applyAttributes();

				// If srcNodeRef was specified, then swap out original srcNode for this widget's DOM tree.
				// For 2.0, move this after postCreate().  postCreate() shouldn't depend on the
				// widget being attached to the DOM since it isn't when a widget is created programmatically like
				// new MyWidget({}).	See #11635.
				var source = this.srcNodeRef;
				if(source && source.parentNode && this.domNode !== source){
					source.parentNode.replaceChild(this.domNode, source);
					deleteSrcNodeRef = true;
				}

				// Note: for 2.0 may want to rename widgetId to dojo._scopeName + "_widgetId",
				// assuming that dojo._scopeName even exists in 2.0
				this.domNode.setAttribute("widgetId", this.id);
			}
			this.postCreate();

			// If srcNodeRef has been processed and removed from the DOM (e.g. TemplatedWidget) then delete it to allow GC.
			// I think for back-compatibility it isn't deleting srcNodeRef until after postCreate() has run.
			if(deleteSrcNodeRef){
				delete this.srcNodeRef;
			}

			this._created = true;
		},

		_applyAttributes: function(){
			// summary:
			//		Step during widget creation to copy  widget attributes to the
			//		DOM according to attributeMap and _setXXXAttr objects, and also to call
			//		custom _setXXXAttr() methods.
			//
			//		Skips over blank/false attribute values, unless they were explicitly specified
			//		as parameters to the widget, since those are the default anyway,
			//		and setting tabIndex="" is different than not setting tabIndex at all.
			//
			//		For backwards-compatibility reasons attributeMap overrides _setXXXAttr when
			//		_setXXXAttr is a hash/string/array, but _setXXXAttr as a functions override attributeMap.
			// tags:
			//		private

			// Call this.set() for each property that was either specified as parameter to constructor,
			// or is in the list found above.	For correlated properties like value and displayedValue, the one
			// specified as a parameter should take precedence.
			// Particularly important for new DateTextBox({displayedValue: ...}) since DateTextBox's default value is
			// NaN and thus is not ignored like a default value of "".

			// Step 1: Save the current values of the widget properties that were specified as parameters to the constructor.
			// Generally this.foo == this.params.foo, except if postMixInProperties() changed the value of this.foo.
			var params = {};
			for(var key in this.params || {}){
				params[key] = this._get(key);
			}

			// Step 2: Call set() for each property with a non-falsy value that wasn't passed as a parameter to the constructor
			array.forEach(this.constructor._setterAttrs, function(key){
				if(!(key in params)){
					var val = this._get(key);
					if(val){
						this.set(key, val);
					}
				}
			}, this);

			// Step 3: Call set() for each property that was specified as parameter to constructor.
			// Use params hash created above to ignore side effects from step #2 above.
			for(key in params){
				this.set(key, params[key]);
			}
		},

		postMixInProperties: function(){
			// summary:
			//		Called after the parameters to the widget have been read-in,
			//		but before the widget template is instantiated. Especially
			//		useful to set properties that are referenced in the widget
			//		template.
			// tags:
			//		protected
		},

		buildRendering: function(){
			// summary:
			//		Construct the UI for this widget, setting this.domNode.
			//		Most widgets will mixin `dijit._TemplatedMixin`, which implements this method.
			// tags:
			//		protected

			if(!this.domNode){
				// Create root node if it wasn't created by _TemplatedMixin
				this.domNode = this.srcNodeRef || this.ownerDocument.createElement("div");
			}

			// baseClass is a single class name or occasionally a space-separated list of names.
			// Add those classes to the DOMNode.  If RTL mode then also add with Rtl suffix.
			// TODO: make baseClass custom setter
			if(this.baseClass){
				var classes = this.baseClass.split(" ");
				if(!this.isLeftToRight()){
					classes = classes.concat(array.map(classes, function(name){
						return name + "Rtl";
					}));
				}
				domClass.add(this.domNode, classes);
			}
		},

		postCreate: function(){
			// summary:
			//		Processing after the DOM fragment is created
			// description:
			//		Called after the DOM fragment has been created, but not necessarily
			//		added to the document.  Do not include any operations which rely on
			//		node dimensions or placement.
			// tags:
			//		protected
		},

		startup: function(){
			// summary:
			//		Processing after the DOM fragment is added to the document
			// description:
			//		Called after a widget and its children have been created and added to the page,
			//		and all related widgets have finished their create() cycle, up through postCreate().
			//
			//		Note that startup() may be called while the widget is still hidden, for example if the widget is
			//		inside a hidden dijit/Dialog or an unselected tab of a dijit/layout/TabContainer.
			//		For widgets that need to do layout, it's best to put that layout code inside resize(), and then
			//		extend dijit/layout/_LayoutWidget so that resize() is called when the widget is visible.
			if(this._started){
				return;
			}
			this._started = true;
			array.forEach(this.getChildren(), function(obj){
				if(!obj._started && !obj._destroyed && lang.isFunction(obj.startup)){
					obj.startup();
					obj._started = true;
				}
			});
		},

		//////////// DESTROY FUNCTIONS ////////////////////////////////

		destroyRecursive: function(/*Boolean?*/ preserveDom){
			// summary:
			//		Destroy this widget and its descendants
			// description:
			//		This is the generic "destructor" function that all widget users
			//		should call to cleanly discard with a widget. Once a widget is
			//		destroyed, it is removed from the manager object.
			// preserveDom:
			//		If true, this method will leave the original DOM structure
			//		alone of descendant Widgets. Note: This will NOT work with
			//		dijit._TemplatedMixin widgets.

			this._beingDestroyed = true;
			this.destroyDescendants(preserveDom);
			this.destroy(preserveDom);
		},

		destroy: function(/*Boolean*/ preserveDom){
			// summary:
			//		Destroy this widget, but not its descendants.  Descendants means widgets inside of
			//		this.containerNode.   Will also destroy any resources (including widgets) registered via this.own().
			//
			//		This method will also destroy internal widgets such as those created from a template,
			//		assuming those widgets exist inside of this.domNode but outside of this.containerNode.
			//
			//		For 2.0 it's planned that this method will also destroy descendant widgets, so apps should not
			//		depend on the current ability to destroy a widget without destroying its descendants.   Generally
			//		they should use destroyRecursive() for widgets with children.
			// preserveDom: Boolean
			//		If true, this method will leave the original DOM structure alone.
			//		Note: This will not yet work with _TemplatedMixin widgets

			this._beingDestroyed = true;
			this.uninitialize();

			function destroy(w){
				if(w.destroyRecursive){
					w.destroyRecursive(preserveDom);
				}else if(w.destroy){
					w.destroy(preserveDom);
				}
			}

			// Back-compat, remove for 2.0
			array.forEach(this._connects, lang.hitch(this, "disconnect"));
			array.forEach(this._supportingWidgets, destroy);

			// Destroy supporting widgets, but not child widgets under this.containerNode (for 2.0, destroy child widgets
			// here too).   if() statement is to guard against exception if destroy() called multiple times (see #15815).
			if(this.domNode){
				array.forEach(registry.findWidgets(this.domNode, this.containerNode), destroy);
			}

			this.destroyRendering(preserveDom);
			registry.remove(this.id);
			this._destroyed = true;
		},

		destroyRendering: function(/*Boolean?*/ preserveDom){
			// summary:
			//		Destroys the DOM nodes associated with this widget.
			// preserveDom:
			//		If true, this method will leave the original DOM structure alone
			//		during tear-down. Note: this will not work with _Templated
			//		widgets yet.
			// tags:
			//		protected

			if(this.bgIframe){
				this.bgIframe.destroy(preserveDom);
				delete this.bgIframe;
			}

			if(this.domNode){
				if(preserveDom){
					domAttr.remove(this.domNode, "widgetId");
				}else{
					domConstruct.destroy(this.domNode);
				}
				delete this.domNode;
			}

			if(this.srcNodeRef){
				if(!preserveDom){
					domConstruct.destroy(this.srcNodeRef);
				}
				delete this.srcNodeRef;
			}
		},

		destroyDescendants: function(/*Boolean?*/ preserveDom){
			// summary:
			//		Recursively destroy the children of this widget and their
			//		descendants.
			// preserveDom:
			//		If true, the preserveDom attribute is passed to all descendant
			//		widget's .destroy() method. Not for use with _Templated
			//		widgets.

			// get all direct descendants and destroy them recursively
			array.forEach(this.getChildren(), function(widget){
				if(widget.destroyRecursive){
					widget.destroyRecursive(preserveDom);
				}
			});
		},

		uninitialize: function(){
			// summary:
			//		Deprecated. Override destroy() instead to implement custom widget tear-down
			//		behavior.
			// tags:
			//		protected
			return false;
		},

		////////////////// GET/SET, CUSTOM SETTERS, ETC. ///////////////////

		_setStyleAttr: function(/*String||Object*/ value){
			// summary:
			//		Sets the style attribute of the widget according to value,
			//		which is either a hash like {height: "5px", width: "3px"}
			//		or a plain string
			// description:
			//		Determines which node to set the style on based on style setting
			//		in attributeMap.
			// tags:
			//		protected

			var mapNode = this.domNode;

			// Note: technically we should revert any style setting made in a previous call
			// to his method, but that's difficult to keep track of.

			if(lang.isObject(value)){
				domStyle.set(mapNode, value);
			}else{
				if(mapNode.style.cssText){
					mapNode.style.cssText += "; " + value;
				}else{
					mapNode.style.cssText = value;
				}
			}

			this._set("style", value);
		},

		_attrToDom: function(/*String*/ attr, /*String*/ value, /*Object?*/ commands){
			// summary:
			//		Reflect a widget attribute (title, tabIndex, duration etc.) to
			//		the widget DOM, as specified by commands parameter.
			//		If commands isn't specified then it's looked up from attributeMap.
			//		Note some attributes like "type"
			//		cannot be processed this way as they are not mutable.
			// attr:
			//		Name of member variable (ex: "focusNode" maps to this.focusNode) pointing
			//		to DOMNode inside the widget, or alternately pointing to a subwidget
			// tags:
			//		private

			commands = arguments.length >= 3 ? commands : this.attributeMap[attr];

			array.forEach(lang.isArray(commands) ? commands : [commands], function(command){

				// Get target node and what we are doing to that node
				var mapNode = this[command.node || command || "domNode"];	// DOM node
				var type = command.type || "attribute";	// class, innerHTML, innerText, or attribute

				switch(type){
					case "attribute":
						if(lang.isFunction(value)){ // functions execute in the context of the widget
							value = lang.hitch(this, value);
						}

						// Get the name of the DOM node attribute; usually it's the same
						// as the name of the attribute in the widget (attr), but can be overridden.
						// Also maps handler names to lowercase, like onSubmit --> onsubmit
						var attrName = command.attribute ? command.attribute :
							(/^on[A-Z][a-zA-Z]*$/.test(attr) ? attr.toLowerCase() : attr);

						if(mapNode.tagName){
							// Normal case, mapping to a DOMNode.  Note that modern browsers will have a mapNode.set()
							// method, but for consistency we still call domAttr
							domAttr.set(mapNode, attrName, value);
						}else{
							// mapping to a sub-widget
							mapNode.set(attrName, value);
						}
						break;
					case "innerText":
						mapNode.innerHTML = "";
						mapNode.appendChild(this.ownerDocument.createTextNode(value));
						break;
					case "innerHTML":
						mapNode.innerHTML = value;
						break;
					case "class":
						domClass.replace(mapNode, value, this[attr]);
						break;
				}
			}, this);
		},

		get: function(name){
			// summary:
			//		Get a property from a widget.
			// name:
			//		The property to get.
			// description:
			//		Get a named property from a widget. The property may
			//		potentially be retrieved via a getter method. If no getter is defined, this
			//		just retrieves the object's property.
			//
			//		For example, if the widget has properties `foo` and `bar`
			//		and a method named `_getFooAttr()`, calling:
			//		`myWidget.get("foo")` would be equivalent to calling
			//		`widget._getFooAttr()` and `myWidget.get("bar")`
			//		would be equivalent to the expression
			//		`widget.bar2`
			var names = this._getAttrNames(name);
			return this[names.g] ? this[names.g]() : this._get(name);
		},

		set: function(name, value){
			// summary:
			//		Set a property on a widget
			// name:
			//		The property to set.
			// value:
			//		The value to set in the property.
			// description:
			//		Sets named properties on a widget which may potentially be handled by a
			//		setter in the widget.
			//
			//		For example, if the widget has properties `foo` and `bar`
			//		and a method named `_setFooAttr()`, calling
			//		`myWidget.set("foo", "Howdy!")` would be equivalent to calling
			//		`widget._setFooAttr("Howdy!")` and `myWidget.set("bar", 3)`
			//		would be equivalent to the statement `widget.bar = 3;`
			//
			//		set() may also be called with a hash of name/value pairs, ex:
			//
			//	|	myWidget.set({
			//	|		foo: "Howdy",
			//	|		bar: 3
			//	|	});
			//
			//	This is equivalent to calling `set(foo, "Howdy")` and `set(bar, 3)`

			if(typeof name === "object"){
				for(var x in name){
					this.set(x, name[x]);
				}
				return this;
			}
			var names = this._getAttrNames(name),
				setter = this[names.s];
			if(lang.isFunction(setter)){
				// use the explicit setter
				var result = setter.apply(this, Array.prototype.slice.call(arguments, 1));
			}else{
				// Mapping from widget attribute to DOMNode/subwidget attribute/value/etc.
				// Map according to:
				//		1. attributeMap setting, if one exists (TODO: attributeMap deprecated, remove in 2.0)
				//		2. _setFooAttr: {...} type attribute in the widget (if one exists)
				//		3. apply to focusNode or domNode if standard attribute name, excluding funcs like onClick.
				// Checks if an attribute is a "standard attribute" by whether the DOMNode JS object has a similar
				// attribute name (ex: accept-charset attribute matches jsObject.acceptCharset).
				// Note also that Tree.focusNode() is a function not a DOMNode, so test for that.
				var defaultNode = this.focusNode && !lang.isFunction(this.focusNode) ? "focusNode" : "domNode",
					tag = this[defaultNode] && this[defaultNode].tagName,
					attrsForTag = tag && (tagAttrs[tag] || (tagAttrs[tag] = getAttrs(this[defaultNode]))),
					map = name in this.attributeMap ? this.attributeMap[name] :
						names.s in this ? this[names.s] :
							((attrsForTag && names.l in attrsForTag && typeof value != "function") ||
								/^aria-|^data-|^role$/.test(name)) ? defaultNode : null;
				if(map != null){
					this._attrToDom(name, value, map);
				}
				this._set(name, value);
			}
			return result || this;
		},

		_attrPairNames: {}, // shared between all widgets
		_getAttrNames: function(name){
			// summary:
			//		Helper function for get() and set().
			//		Caches attribute name values so we don't do the string ops every time.
			// tags:
			//		private

			var apn = this._attrPairNames;
			if(apn[name]){
				return apn[name];
			}
			var uc = name.replace(/^[a-z]|-[a-zA-Z]/g, function(c){
				return c.charAt(c.length - 1).toUpperCase();
			});
			return (apn[name] = {
				n: name + "Node",
				s: "_set" + uc + "Attr", // converts dashes to camel case, ex: accept-charset --> _setAcceptCharsetAttr
				g: "_get" + uc + "Attr",
				l: uc.toLowerCase()        // lowercase name w/out dashes, ex: acceptcharset
			});
		},

		_set: function(/*String*/ name, /*anything*/ value){
			// summary:
			//		Helper function to set new value for specified property, and call handlers
			//		registered with watch() if the value has changed.
			var oldValue = this[name];
			this[name] = value;
			if(this._created && !isEqual(oldValue, value)){
				if(this._watchCallbacks){
					this._watchCallbacks(name, oldValue, value);
				}
				this.emit("attrmodified-" + name, {
					detail: {
						prevValue: oldValue,
						newValue: value
					}
				});
			}
		},

		_get: function(/*String*/ name){
			// summary:
			//		Helper function to get value for specified property stored by this._set(),
			//		i.e. for properties with custom setters.  Used mainly by custom getters.
			//
			//		For example, CheckBox._getValueAttr() calls this._get("value").

			// future: return name in this.props ? this.props[name] : this[name];
			return this[name];
		},

		emit: function(/*String*/ type, /*Object?*/ eventObj, /*Array?*/ callbackArgs){
			// summary:
			//		Used by widgets to signal that a synthetic event occurred, ex:
			//	|	myWidget.emit("attrmodified-selectedChildWidget", {}).
			//
			//		Emits an event on this.domNode named type.toLowerCase(), based on eventObj.
			//		Also calls onType() method, if present, and returns value from that method.
			//		By default passes eventObj to callback, but will pass callbackArgs instead, if specified.
			//		Modifies eventObj by adding missing parameters (bubbles, cancelable, widget).
			// tags:
			//		protected

			// Specify fallback values for bubbles, cancelable in case they are not set in eventObj.
			// Also set pointer to widget, although since we can't add a pointer to the widget for native events
			// (see #14729), maybe we shouldn't do it here?
			eventObj = eventObj || {};
			if(eventObj.bubbles === undefined){
				eventObj.bubbles = true;
			}
			if(eventObj.cancelable === undefined){
				eventObj.cancelable = true;
			}
			if(!eventObj.detail){
				eventObj.detail = {};
			}
			eventObj.detail.widget = this;

			var ret, callback = this["on" + type];
			if(callback){
				ret = callback.apply(this, callbackArgs ? callbackArgs : [eventObj]);
			}

			// Emit event, but avoid spurious emit()'s as parent sets properties on child during startup/destroy
			if(this._started && !this._beingDestroyed){
				on.emit(this.domNode, type.toLowerCase(), eventObj);
			}

			return ret;
		},

		on: function(/*String|Function*/ type, /*Function*/ func){
			// summary:
			//		Call specified function when event occurs, ex: myWidget.on("click", function(){ ... }).
			// type:
			//		Name of event (ex: "click") or extension event like touch.press.
			// description:
			//		Call specified function when event `type` occurs, ex: `myWidget.on("click", function(){ ... })`.
			//		Note that the function is not run in any particular scope, so if (for example) you want it to run in the
			//		widget's scope you must do `myWidget.on("click", lang.hitch(myWidget, func))`.

			// For backwards compatibility, if there's an onType() method in the widget then connect to that.
			// Remove in 2.0.
			var widgetMethod = this._onMap(type);
			if(widgetMethod){
				return aspect.after(this, widgetMethod, func, true);
			}

			// Otherwise, just listen for the event on this.domNode.
			return this.own(on(this.domNode, type, func))[0];
		},

		_onMap: function(/*String|Function*/ type){
			// summary:
			//		Maps on() type parameter (ex: "mousemove") to method name (ex: "onMouseMove").
			//		If type is a synthetic event like touch.press then returns undefined.
			var ctor = this.constructor, map = ctor._onMap;
			if(!map){
				map = (ctor._onMap = {});
				for(var attr in ctor.prototype){
					if(/^on/.test(attr)){
						map[attr.replace(/^on/, "").toLowerCase()] = attr;
					}
				}
			}
			return map[typeof type == "string" && type.toLowerCase()];	// String
		},

		toString: function(){
			// summary:
			//		Returns a string that represents the widget.
			// description:
			//		When a widget is cast to a string, this method will be used to generate the
			//		output. Currently, it does not implement any sort of reversible
			//		serialization.
			return '[Widget ' + this.declaredClass + ', ' + (this.id || 'NO ID') + ']'; // String
		},

		getChildren: function(){
			// summary:
			//		Returns all direct children of this widget, i.e. all widgets underneath this.containerNode whose parent
			//		is this widget.   Note that it does not return all descendants, but rather just direct children.
			//		Analogous to [Node.childNodes](https://developer.mozilla.org/en-US/docs/DOM/Node.childNodes),
			//		except containing widgets rather than DOMNodes.
			//
			//		The result intentionally excludes internally created widgets (a.k.a. supporting widgets)
			//		outside of this.containerNode.
			//
			//		Note that the array returned is a simple array.  Application code should not assume
			//		existence of methods like forEach().

			return this.containerNode ? registry.findWidgets(this.containerNode) : []; // dijit/_WidgetBase[]
		},

		getParent: function(){
			// summary:
			//		Returns the parent widget of this widget.

			return registry.getEnclosingWidget(this.domNode.parentNode);
		},

		connect: function(/*Object|null*/ obj, /*String|Function*/ event, /*String|Function*/ method){
			// summary:
			//		Deprecated, will be removed in 2.0, use this.own(on(...)) or this.own(aspect.after(...)) instead.
			//
			//		Connects specified obj/event to specified method of this object
			//		and registers for disconnect() on widget destroy.
			//
			//		Provide widget-specific analog to dojo.connect, except with the
			//		implicit use of this widget as the target object.
			//		Events connected with `this.connect` are disconnected upon
			//		destruction.
			// returns:
			//		A handle that can be passed to `disconnect` in order to disconnect before
			//		the widget is destroyed.
			// example:
			//	|	var btn = new Button();
			//	|	// when foo.bar() is called, call the listener we're going to
			//	|	// provide in the scope of btn
			//	|	btn.connect(foo, "bar", function(){
			//	|		console.debug(this.toString());
			//	|	});
			// tags:
			//		protected

			return this.own(connect.connect(obj, event, this, method))[0];	// handle
		},

		disconnect: function(handle){
			// summary:
			//		Deprecated, will be removed in 2.0, use handle.remove() instead.
			//
			//		Disconnects handle created by `connect`.
			// tags:
			//		protected

			handle.remove();
		},

		subscribe: function(t, method){
			// summary:
			//		Deprecated, will be removed in 2.0, use this.own(topic.subscribe()) instead.
			//
			//		Subscribes to the specified topic and calls the specified method
			//		of this object and registers for unsubscribe() on widget destroy.
			//
			//		Provide widget-specific analog to dojo.subscribe, except with the
			//		implicit use of this widget as the target object.
			// t: String
			//		The topic
			// method: Function
			//		The callback
			// example:
			//	|	var btn = new Button();
			//	|	// when /my/topic is published, this button changes its label to
			//	|	// be the parameter of the topic.
			//	|	btn.subscribe("/my/topic", function(v){
			//	|		this.set("label", v);
			//	|	});
			// tags:
			//		protected
			return this.own(topic.subscribe(t, lang.hitch(this, method)))[0];	// handle
		},

		unsubscribe: function(/*Object*/ handle){
			// summary:
			//		Deprecated, will be removed in 2.0, use handle.remove() instead.
			//
			//		Unsubscribes handle created by this.subscribe.
			//		Also removes handle from this widget's list of subscriptions
			// tags:
			//		protected

			handle.remove();
		},

		isLeftToRight: function(){
			// summary:
			//		Return this widget's explicit or implicit orientation (true for LTR, false for RTL)
			// tags:
			//		protected
			return this.dir ? (this.dir.toLowerCase() == "ltr") : domGeometry.isBodyLtr(this.ownerDocument); //Boolean
		},

		isFocusable: function(){
			// summary:
			//		Return true if this widget can currently be focused
			//		and false if not
			return this.focus && (domStyle.get(this.domNode, "display") != "none");
		},

		placeAt: function(/*String|DomNode|DocumentFragment|dijit/_WidgetBase*/ reference, /*String|Int?*/ position){
			// summary:
			//		Place this widget somewhere in the DOM based
			//		on standard domConstruct.place() conventions.
			// description:
			//		A convenience function provided in all _Widgets, providing a simple
			//		shorthand mechanism to put an existing (or newly created) Widget
			//		somewhere in the dom, and allow chaining.
			// reference:
			//		Widget, DOMNode, DocumentFragment, or id of widget or DOMNode
			// position:
			//		If reference is a widget (or id of widget), and that widget has an ".addChild" method,
			//		it will be called passing this widget instance into that method, supplying the optional
			//		position index passed.  In this case position (if specified) should be an integer.
			//
			//		If reference is a DOMNode (or id matching a DOMNode but not a widget),
			//		the position argument can be a numeric index or a string
			//		"first", "last", "before", or "after", same as dojo/dom-construct::place().
			// returns: dijit/_WidgetBase
			//		Provides a useful return of the newly created dijit._Widget instance so you
			//		can "chain" this function by instantiating, placing, then saving the return value
			//		to a variable.
			// example:
			//	|	// create a Button with no srcNodeRef, and place it in the body:
			//	|	var button = new Button({ label:"click" }).placeAt(win.body());
			//	|	// now, 'button' is still the widget reference to the newly created button
			//	|	button.on("click", function(e){ console.log('click'); }));
			// example:
			//	|	// create a button out of a node with id="src" and append it to id="wrapper":
			//	|	var button = new Button({},"src").placeAt("wrapper");
			// example:
			//	|	// place a new button as the first element of some div
			//	|	var button = new Button({ label:"click" }).placeAt("wrapper","first");
			// example:
			//	|	// create a contentpane and add it to a TabContainer
			//	|	var tc = dijit.byId("myTabs");
			//	|	new ContentPane({ href:"foo.html", title:"Wow!" }).placeAt(tc)

			var refWidget = !reference.tagName && registry.byId(reference);
			if(refWidget && refWidget.addChild && (!position || typeof position === "number")){
				// Adding this to refWidget and can use refWidget.addChild() to handle everything.
				refWidget.addChild(this, position);
			}else{
				// "reference" is a plain DOMNode, or we can't use refWidget.addChild().   Use domConstruct.place() and
				// target refWidget.containerNode for nested placement (position==number, "first", "last", "only"), and
				// refWidget.domNode otherwise ("after"/"before"/"replace").  (But not supported officially, see #14946.)
				var ref = refWidget && ("domNode" in refWidget) ?
					(refWidget.containerNode && !/after|before|replace/.test(position || "") ?
						refWidget.containerNode : refWidget.domNode) : dom.byId(reference, this.ownerDocument);
				domConstruct.place(this.domNode, ref, position);

				// Start this iff it has a parent widget that's already started.
				// TODO: for 2.0 maybe it should also start the widget when this.getParent() returns null??
				if(!this._started && (this.getParent() || {})._started){
					this.startup();
				}
			}
			return this;
		},

		defer: function(fcn, delay){
			// summary:
			//		Wrapper to setTimeout to avoid deferred functions executing
			//		after the originating widget has been destroyed.
			//		Returns an object handle with a remove method (that returns null) (replaces clearTimeout).
			// fcn: Function
			//		Function reference.
			// delay: Number?
			//		Delay, defaults to 0.
			// tags:
			//		protected

			var timer = setTimeout(lang.hitch(this,
				function(){
					if(!timer){
						return;
					}
					timer = null;
					if(!this._destroyed){
						lang.hitch(this, fcn)();
					}
				}),
				delay || 0
			);
			return {
				remove: function(){
					if(timer){
						clearTimeout(timer);
						timer = null;
					}
					return null; // so this works well: handle = handle.remove();
				}
			};
		}
	});

	if(has("dojo-bidi")){
		_WidgetBase.extend(_BidiMixin);
	}

	return _WidgetBase;
});

},
'dijit/Destroyable':function(){
define([
	"dojo/_base/array", // array.forEach array.map
	"dojo/aspect",
	"dojo/_base/declare"
], function(array, aspect, declare){

	// module:
	//		dijit/Destroyable

	return declare("dijit.Destroyable", null, {
		// summary:
		//		Mixin to track handles and release them when instance is destroyed.
		// description:
		//		Call this.own(...) on list of handles (returned from dojo/aspect, dojo/on,
		//		dojo/Stateful::watch, or any class (including widgets) with a destroyRecursive() or destroy() method.
		//		Then call destroy() later to destroy this instance and release the resources.

		destroy: function(/*Boolean*/ preserveDom){
			// summary:
			//		Destroy this class, releasing any resources registered via own().
			this._destroyed = true;
		},

		own: function(){
			// summary:
			//		Track specified handles and remove/destroy them when this instance is destroyed, unless they were
			//		already removed/destroyed manually.
			// tags:
			//		protected
			// returns:
			//		The array of specified handles, so you can do for example:
			//	|		var handle = this.own(on(...))[0];

			var cleanupMethods = [
				"destroyRecursive",
				"destroy",
				"remove"
			];

			array.forEach(arguments, function(handle){
				// When this.destroy() is called, destroy handle.  Since I'm using aspect.before(),
				// the handle will be destroyed before a subclass's destroy() method starts running, before it calls
				// this.inherited() or even if it doesn't call this.inherited() at all.  If that's an issue, make an
				// onDestroy() method and connect to that instead.
				var destroyMethodName;
				var odh = aspect.before(this, "destroy", function (preserveDom){
					handle[destroyMethodName](preserveDom);
				});

				// Callback for when handle is manually destroyed.
				var hdhs = [];
				function onManualDestroy(){
					odh.remove();
					array.forEach(hdhs, function(hdh){
						hdh.remove();
					});
				}

				// Setup listeners for manual destroy of handle.
				// Also computes destroyMethodName, used in listener above.
				if(handle.then){
					// Special path for Promises.  Detect when Promise is resolved, rejected, or
					// canceled (nb: cancelling a Promise causes it to be rejected).
					destroyMethodName = "cancel";
					handle.then(onManualDestroy, onManualDestroy);
				}else{
					// Path for other handles.  Just use AOP to detect when handle is manually destroyed.
					array.forEach(cleanupMethods, function(cleanupMethod){
						if(typeof handle[cleanupMethod] === "function"){
							if(!destroyMethodName){
								// Use first matching method name in above listener (prefer destroyRecursive() to destroy())
								destroyMethodName = cleanupMethod;
							}
							hdhs.push(aspect.after(handle, cleanupMethod, onManualDestroy, true));
						}
					});
				}
			}, this);

			return arguments;		// handle
		}
	});
});

},
'dojo/text':function(){
define(["./_base/kernel", "require", "./has", "./request"], function(dojo, require, has, request){
	// module:
	//		dojo/text

	var getText;
	if( 1 ){
		getText= function(url, sync, load){
			request(url, {sync:!!sync, headers: { 'X-Requested-With': null } }).then(load);
		};
	}else{
		// Path for node.js and rhino, to load from local file system.
		// TODO: use node.js native methods rather than depending on a require.getText() method to exist.
		if(require.getText){
			getText= require.getText;
		}else{
			console.error("dojo/text plugin failed to load because loader does not support getText");
		}
	}

	var
		theCache = {},

		strip= function(text){
			//Strips <?xml ...?> declarations so that external SVG and XML
			//documents can be added to a document without worry. Also, if the string
			//is an HTML document, only the part inside the body tag is returned.
			if(text){
				text= text.replace(/^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im, "");
				var matches= text.match(/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im);
				if(matches){
					text= matches[1];
				}
			}else{
				text = "";
			}
			return text;
		},

		notFound = {},

		pending = {};

	dojo.cache = function(/*String||Object*/module, /*String*/url, /*String||Object?*/value){
		// summary:
		//		A getter and setter for storing the string content associated with the
		//		module and url arguments.
		// description:
		//		If module is a string that contains slashes, then it is interpretted as a fully
		//		resolved path (typically a result returned by require.toUrl), and url should not be
		//		provided. This is the preferred signature. If module is a string that does not
		//		contain slashes, then url must also be provided and module and url are used to
		//		call `dojo.moduleUrl()` to generate a module URL. This signature is deprecated.
		//		If value is specified, the cache value for the moduleUrl will be set to
		//		that value. Otherwise, dojo.cache will fetch the moduleUrl and store it
		//		in its internal cache and return that cached value for the URL. To clear
		//		a cache value pass null for value. Since XMLHttpRequest (XHR) is used to fetch the
		//		the URL contents, only modules on the same domain of the page can use this capability.
		//		The build system can inline the cache values though, to allow for xdomain hosting.
		// module: String||Object
		//		If a String with slashes, a fully resolved path; if a String without slashes, the
		//		module name to use for the base part of the URL, similar to module argument
		//		to `dojo.moduleUrl`. If an Object, something that has a .toString() method that
		//		generates a valid path for the cache item. For example, a dojo._Url object.
		// url: String
		//		The rest of the path to append to the path derived from the module argument. If
		//		module is an object, then this second argument should be the "value" argument instead.
		// value: String||Object?
		//		If a String, the value to use in the cache for the module/url combination.
		//		If an Object, it can have two properties: value and sanitize. The value property
		//		should be the value to use in the cache, and sanitize can be set to true or false,
		//		to indicate if XML declarations should be removed from the value and if the HTML
		//		inside a body tag in the value should be extracted as the real value. The value argument
		//		or the value property on the value argument are usually only used by the build system
		//		as it inlines cache content.
		// example:
		//		To ask dojo.cache to fetch content and store it in the cache (the dojo["cache"] style
		//		of call is used to avoid an issue with the build system erroneously trying to intern
		//		this example. To get the build system to intern your dojo.cache calls, use the
		//		"dojo.cache" style of call):
		//		| //If template.html contains "<h1>Hello</h1>" that will be
		//		| //the value for the text variable.
		//		| //Note: This is pre-AMD, deprecated syntax
		//		| var text = dojo["cache"]("my.module", "template.html");
		// example:
		//		To ask dojo.cache to fetch content and store it in the cache, and sanitize the input
		//		 (the dojo["cache"] style of call is used to avoid an issue with the build system
		//		erroneously trying to intern this example. To get the build system to intern your
		//		dojo.cache calls, use the "dojo.cache" style of call):
		//		| //If template.html contains "<html><body><h1>Hello</h1></body></html>", the
		//		| //text variable will contain just "<h1>Hello</h1>".
		//		| //Note: This is pre-AMD, deprecated syntax
		//		| var text = dojo["cache"]("my.module", "template.html", {sanitize: true});
		// example:
		//		Same example as previous, but demonstrates how an object can be passed in as
		//		the first argument, then the value argument can then be the second argument.
		//		| //If template.html contains "<html><body><h1>Hello</h1></body></html>", the
		//		| //text variable will contain just "<h1>Hello</h1>".
		//		| //Note: This is pre-AMD, deprecated syntax
		//		| var text = dojo["cache"](new dojo._Url("my/module/template.html"), {sanitize: true});

		//	 * (string string [value]) => (module, url, value)
		//	 * (object [value])        => (module, value), url defaults to ""
		//
		//	 * if module is an object, then it must be convertable to a string
		//	 * (module, url) module + (url ? ("/" + url) : "") must be a legal argument to require.toUrl
		//	 * value may be a string or an object; if an object then may have the properties "value" and/or "sanitize"
		var key;
		if(typeof module=="string"){
			if(/\//.test(module)){
				// module is a version 1.7+ resolved path
				key = module;
				value = url;
			}else{
				// module is a version 1.6- argument to dojo.moduleUrl
				key = require.toUrl(module.replace(/\./g, "/") + (url ? ("/" + url) : ""));
			}
		}else{
			key = module + "";
			value = url;
		}
		var
			val = (value != undefined && typeof value != "string") ? value.value : value,
			sanitize = value && value.sanitize;

		if(typeof val == "string"){
			//We have a string, set cache value
			theCache[key] = val;
			return sanitize ? strip(val) : val;
		}else if(val === null){
			//Remove cached value
			delete theCache[key];
			return null;
		}else{
			//Allow cache values to be empty strings. If key property does
			//not exist, fetch it.
			if(!(key in theCache)){
				getText(key, true, function(text){
					theCache[key]= text;
				});
			}
			return sanitize ? strip(theCache[key]) : theCache[key];
		}
	};

	return {
		// summary:
		//		This module implements the dojo/text! plugin and the dojo.cache API.
		// description:
		//		We choose to include our own plugin to leverage functionality already contained in dojo
		//		and thereby reduce the size of the plugin compared to various foreign loader implementations.
		//		Also, this allows foreign AMD loaders to be used without their plugins.
		//
		//		CAUTION: this module is designed to optionally function synchronously to support the dojo v1.x synchronous
		//		loader. This feature is outside the scope of the CommonJS plugins specification.

		// the dojo/text caches it's own resources because of dojo.cache
		dynamic: true,

		normalize: function(id, toAbsMid){
			// id is something like (path may be relative):
			//
			//	 "path/to/text.html"
			//	 "path/to/text.html!strip"
			var parts= id.split("!"),
				url= parts[0];
			return (/^\./.test(url) ? toAbsMid(url) : url) + (parts[1] ? "!" + parts[1] : "");
		},

		load: function(id, require, load){
			// id: String
			//		Path to the resource.
			// require: Function
			//		Object that include the function toUrl with given id returns a valid URL from which to load the text.
			// load: Function
			//		Callback function which will be called, when the loading finished.

			// id is something like (path is always absolute):
			//
			//	 "path/to/text.html"
			//	 "path/to/text.html!strip"
			var
				parts= id.split("!"),
				stripFlag= parts.length>1,
				absMid= parts[0],
				url = require.toUrl(parts[0]),
				requireCacheUrl = "url:" + url,
				text = notFound,
				finish = function(text){
					load(stripFlag ? strip(text) : text);
				};
			if(absMid in theCache){
				text = theCache[absMid];
			}else if(require.cache && requireCacheUrl in require.cache){
				text = require.cache[requireCacheUrl];
			}else if(url in theCache){
				text = theCache[url];
			}
			if(text===notFound){
				if(pending[url]){
					pending[url].push(finish);
				}else{
					var pendingList = pending[url] = [finish];
					getText(url, !require.async, function(text){
						theCache[absMid]= theCache[url]= text;
						for(var i = 0; i<pendingList.length;){
							pendingList[i++](text);
						}
						delete pending[url];
					});
				}
			}else{
				finish(text);
			}
		}
	};

});


},
'dojo/request':function(){
define([
	'./request/default!'/*=====,
	'./_base/declare',
	'./promise/Promise' =====*/
], function(request/*=====, declare, Promise =====*/){
	/*=====
	request = function(url, options){
		// summary:
		//		Send a request using the default transport for the current platform.
		// url: String
		//		The URL to request.
		// options: dojo/request.__Options?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	request.__Promise = declare(Promise, {
		// response: dojo/promise/Promise
		//		A promise resolving to an object representing
		//		the response from the server.
	});
	request.__BaseOptions = declare(null, {
		// query: String|Object?
		//		Query parameters to append to the URL.
		// data: String|Object?
		//		Data to transfer.  This is ignored for GET and DELETE
		//		requests.
		// preventCache: Boolean?
		//		Whether to append a cache-busting parameter to the URL.
		// timeout: Integer?
		//		Milliseconds to wait for the response.  If this time
		//		passes, the then the promise is rejected.
		// handleAs: String?
		//		How to handle the response from the server.  Default is
		//		'text'.  Other values are 'json', 'javascript', and 'xml'.
	});
	request.__MethodOptions = declare(null, {
		// method: String?
		//		The HTTP method to use to make the request.  Must be
		//		uppercase.
	});
	request.__Options = declare([request.__BaseOptions, request.__MethodOptions]);

	request.get = function(url, options){
		// summary:
		//		Send an HTTP GET request using the default transport for the current platform.
		// url: String
		//		URL to request
		// options: dojo/request.__BaseOptions?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	request.post = function(url, options){
		// summary:
		//		Send an HTTP POST request using the default transport for the current platform.
		// url: String
		//		URL to request
		// options: dojo/request.__BaseOptions?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	request.put = function(url, options){
		// summary:
		//		Send an HTTP POST request using the default transport for the current platform.
		// url: String
		//		URL to request
		// options: dojo/request.__BaseOptions?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	request.del = function(url, options){
		// summary:
		//		Send an HTTP DELETE request using the default transport for the current platform.
		// url: String
		//		URL to request
		// options: dojo/request.__BaseOptions?
		//		Options for the request.
		// returns: dojo/request.__Promise
	};
	=====*/
	return request;
});

},
'dojo/request/default':function(){
define([
	'exports',
	'require',
	'../has'
], function(exports, require, has){
	var defId = has('config-requestProvider'),
		platformId;

	if( 1  || has('host-webworker')){
		platformId = './xhr';
	}else if( 0 ){
		platformId = './node';
	/* TODO:
	}else if( 0 ){
		platformId = './rhino';
   */
	}

	if(!defId){
		defId = platformId;
	}

	exports.getPlatformDefaultId = function(){
		return platformId;
	};

	exports.load = function(id, parentRequire, loaded, config){
		require([id == 'platform' ? platformId : defId], function(provider){
			loaded(provider);
		});
	};
});

},
'dijit/a11yclick':function(){
define([
	"dojo/keys", // keys.ENTER keys.SPACE
	"dojo/mouse",
	"dojo/on",
	"dojo/touch" // touch support for click is now there
], function(keys, mouse, on, touch){

	// module:
	//		dijit/a11yclick

	/*=====
	return {
		// summary:
		//		Custom press, release, and click synthetic events
		//		which trigger on a left mouse click, touch, or space/enter keyup.

		click: function(node, listener){
			// summary:
			//		Logical click operation for mouse, touch, or keyboard (space/enter key)
		},
		press: function(node, listener){
			// summary:
			//		Mousedown (left button), touchstart, or keydown (space or enter) corresponding to logical click operation.
		},
		release: function(node, listener){
			// summary:
			//		Mouseup (left button), touchend, or keyup (space or enter) corresponding to logical click operation.
		},
		move: function(node, listener){
			// summary:
			//		Mouse cursor or a finger is dragged over the given node.
		}
	};
	=====*/

	function clickKey(/*Event*/ e){
		// Test if this keyboard event should be tracked as the start (if keydown) or end (if keyup) of a click event.
		// Only track for nodes marked to be tracked, and not for buttons or inputs,
		// since buttons handle keyboard click natively, and text inputs should not
		// prevent typing spaces or newlines.
		if((e.keyCode === keys.ENTER || e.keyCode === keys.SPACE) && !/input|button|textarea/i.test(e.target.nodeName)){

			// Test if a node or its ancestor has been marked with the dojoClick property to indicate special processing
			for(var node = e.target; node; node = node.parentNode){
				if(node.dojoClick){ return true; }
			}
		}
	}

	var lastKeyDownNode;

	on(document, "keydown", function(e){
		//console.log("a11yclick: onkeydown, e.target = ", e.target, ", lastKeyDownNode was ", lastKeyDownNode, ", equality is ", (e.target === lastKeyDownNode));
		if(clickKey(e)){
			// needed on IE for when focus changes between keydown and keyup - otherwise dropdown menus do not work
			lastKeyDownNode = e.target;

			// Prevent viewport scrolling on space key in IE<9.
			// (Reproducible on test_Button.html on any of the first dijit/form/Button examples)
			e.preventDefault();
		}else{
			lastKeyDownNode = null;
		}
	});

	on(document, "keyup", function(e){
		//console.log("a11yclick: onkeyup, e.target = ", e.target, ", lastKeyDownNode was ", lastKeyDownNode, ", equality is ", (e.target === lastKeyDownNode));
		if(clickKey(e) && e.target == lastKeyDownNode){	// === breaks greasemonkey
			//need reset here or have problems in FF when focus returns to trigger element after closing popup/alert
			lastKeyDownNode = null;

			on.emit(e.target, "click", {
				cancelable: true,
				bubbles: true,
				ctrlKey: e.ctrlKey,
				shiftKey: e.shiftKey,
				metaKey: e.metaKey,
				altKey: e.altKey,
				_origType: e.type
			});
		}
	});

	// I want to return a hash of the synthetic events, but for backwards compatibility the main return value
	// needs to be the click event.   Change for 2.0.

	var click = function(node, listener){
		// Set flag on node so that keydown/keyup above emits click event.
		// Also enables fast click processing from dojo/touch.
		node.dojoClick = true;

		return on(node, "click", listener);
	};
	click.click = click;	// forward compatibility with 2.0

	click.press =  function(node, listener){
		var touchListener = on(node, touch.press, function(evt){
			if(evt.type == "mousedown" && !mouse.isLeft(evt)){
				// Ignore right click
				return;
			}
			listener(evt);
		}), keyListener = on(node, "keydown", function(evt){
			if(evt.keyCode === keys.ENTER || evt.keyCode === keys.SPACE){
				listener(evt);
			}
		});
		return {
			remove: function(){
				touchListener.remove();
				keyListener.remove();
			}
		};
	};

	click.release =  function(node, listener){
		var touchListener = on(node, touch.release, function(evt){
			if(evt.type == "mouseup" && !mouse.isLeft(evt)){
				// Ignore right click
				return;
			}
			listener(evt);
		}), keyListener = on(node, "keyup", function(evt){
			if(evt.keyCode === keys.ENTER || evt.keyCode === keys.SPACE){
				listener(evt);
			}
		});
		return {
			remove: function(){
				touchListener.remove();
				keyListener.remove();
			}
		};
	};

	click.move = touch.move;	// just for convenience

	return click;
});

},
'dojo/touch':function(){
define(["./_base/kernel", "./aspect", "./dom", "./dom-class", "./_base/lang", "./on", "./has", "./mouse", "./domReady", "./_base/window"],
function(dojo, aspect, dom, domClass, lang, on, has, mouse, domReady, win){

	// module:
	//		dojo/touch

	var ios4 = has("ios") < 5;

	// Detect if platform supports Pointer Events, and if so, the names of the events (pointerdown vs. MSPointerDown).
	var hasPointer = has("pointer-events") || has("MSPointer"),
		pointer = (function () {
			var pointer = {};
			for (var type in { down: 1, move: 1, up: 1, cancel: 1, over: 1, out: 1 }) {
				pointer[type] = has("MSPointer") ?
					"MSPointer" + type.charAt(0).toUpperCase() + type.slice(1) :
					"pointer" + type;
			}
			return pointer;
		})();

	// Detect if platform supports the webkit touchstart/touchend/... events
	var hasTouch = has("touch-events");

	// Click generation variables
	var clicksInited, clickTracker, useTarget = false, clickTarget, clickX, clickY, clickDx, clickDy, clickTime;

	// Time of most recent touchstart, touchmove, or touchend event
	var lastTouch;

	function dualEvent(mouseType, touchType, pointerType){
		// Returns synthetic event that listens for both the specified mouse event and specified touch event.
		// But ignore fake mouse events that were generated due to the user touching the screen.
		if(hasPointer && pointerType){
			// IE10+: MSPointer* events are designed to handle both mouse and touch in a uniform way,
			// so just use that regardless of hasTouch.
			return function(node, listener){
				return on(node, pointerType, listener);
			}
		}else if(hasTouch){
			return function(node, listener){
				var handle1 = on(node, touchType, function(evt){
						listener.call(this, evt);

						// On slow mobile browsers (see https://bugs.dojotoolkit.org/ticket/17634),
						// a handler for a touch event may take >1s to run.  That time shouldn't
						// be included in the calculation for lastTouch.
						lastTouch = (new Date()).getTime();
					}),
					handle2 = on(node, mouseType, function(evt){
						if(!lastTouch || (new Date()).getTime() > lastTouch + 1000){
							listener.call(this, evt);
						}
					});
				return {
					remove: function(){
						handle1.remove();
						handle2.remove();
					}
				};
			};
		}else{
			// Avoid creating listeners for touch events on performance sensitive older browsers like IE6
			return function(node, listener){
				return on(node, mouseType, listener);
			}
		}
	}

	function marked(/*DOMNode*/ node){
		// Search for node ancestor has been marked with the dojoClick property to indicate special processing.
		// Returns marked ancestor.
		do{
			if(node.dojoClick !== undefined){ return node; }
		}while(node = node.parentNode);
	}
	
	function doClicks(e, moveType, endType){
		// summary:
		//		Setup touch listeners to generate synthetic clicks immediately (rather than waiting for the browser
		//		to generate clicks after the double-tap delay) and consistently (regardless of whether event.preventDefault()
		//		was called in an event listener. Synthetic clicks are generated only if a node or one of its ancestors has
		//		its dojoClick property set to truthy. If a node receives synthetic clicks because one of its ancestors has its
		//      dojoClick property set to truthy, you can disable synthetic clicks on this node by setting its own dojoClick property
		//      to falsy.
		
		var markedNode = marked(e.target);
		clickTracker  = !e.target.disabled && markedNode && markedNode.dojoClick; // click threshold = true, number, x/y object, or "useTarget"
		if(clickTracker){
			useTarget = (clickTracker == "useTarget");
			clickTarget = (useTarget?markedNode:e.target);
			if(useTarget){
				// We expect a click, so prevent any other 
				// default action on "touchpress"
				e.preventDefault();
			}
			clickX = e.changedTouches ? e.changedTouches[0].pageX - win.global.pageXOffset : e.clientX;
			clickY = e.changedTouches ? e.changedTouches[0].pageY - win.global.pageYOffset : e.clientY;
			clickDx = (typeof clickTracker == "object" ? clickTracker.x : (typeof clickTracker == "number" ? clickTracker : 0)) || 4;
			clickDy = (typeof clickTracker == "object" ? clickTracker.y : (typeof clickTracker == "number" ? clickTracker : 0)) || 4;

			// add move/end handlers only the first time a node with dojoClick is seen,
			// so we don't add too much overhead when dojoClick is never set.
			if(!clicksInited){
				clicksInited = true;

				function updateClickTracker(e){
					if(useTarget){
						clickTracker = dom.isDescendant(
							win.doc.elementFromPoint(
								(e.changedTouches ? e.changedTouches[0].pageX - win.global.pageXOffset : e.clientX),
								(e.changedTouches ? e.changedTouches[0].pageY - win.global.pageYOffset : e.clientY)),
							clickTarget);
					}else{
						clickTracker = clickTracker &&
							(e.changedTouches ? e.changedTouches[0].target : e.target) == clickTarget &&
							Math.abs((e.changedTouches ? e.changedTouches[0].pageX - win.global.pageXOffset : e.clientX) - clickX) <= clickDx &&
							Math.abs((e.changedTouches ? e.changedTouches[0].pageY - win.global.pageYOffset : e.clientY) - clickY) <= clickDy;
					}
				}

				win.doc.addEventListener(moveType, function(e){
					updateClickTracker(e);
					if(useTarget){
						// prevent native scroll event and ensure touchend is
						// fire after touch moves between press and release.
						e.preventDefault();
					}
				}, true);

				win.doc.addEventListener(endType, function(e){
					updateClickTracker(e);
					if(clickTracker){
						clickTime = (new Date()).getTime();
						var target = (useTarget?clickTarget:e.target);
						if(target.tagName === "LABEL"){
							// when clicking on a label, forward click to its associated input if any
							target = dom.byId(target.getAttribute("for")) || target;
						}
						//some attributes can be on the Touch object, not on the Event:
						//http://www.w3.org/TR/touch-events/#touch-interface
						var src = (e.changedTouches) ? e.changedTouches[0] : e;
						//create the synthetic event.
						//http://www.w3.org/TR/DOM-Level-3-Events/#widl-MouseEvent-initMouseEvent
						var clickEvt = document.createEvent("MouseEvents");
						clickEvt._dojo_click = true;
						clickEvt.initMouseEvent("click",
							true, //bubbles
							true, //cancelable
							e.view,
							e.detail,
							src.screenX,
							src.screenY,
							src.clientX,
							src.clientY,
							e.ctrlKey,
							e.altKey,
							e.shiftKey,
							e.metaKey,
							0, //button
							null //related target
						);
						setTimeout(function(){
							on.emit(target, "click", clickEvt);

							// refresh clickTime in case app-defined click handler took a long time to run
							clickTime = (new Date()).getTime();
						}, 0);
					}
				}, true);

				function stopNativeEvents(type){
					win.doc.addEventListener(type, function(e){
						// Stop native events when we emitted our own click event.  Note that the native click may occur
						// on a different node than the synthetic click event was generated on.  For example,
						// click on a menu item, causing the menu to disappear, and then (~300ms later) the browser
						// sends a click event to the node that was *underneath* the menu.  So stop all native events
						// sent shortly after ours, similar to what is done in dualEvent.
						// The INPUT.dijitOffScreen test is for offscreen inputs used in dijit/form/Button, on which
						// we call click() explicitly, we don't want to stop this event.
							if(!e._dojo_click &&
								(new Date()).getTime() <= clickTime + 1000 &&
								!(e.target.tagName == "INPUT" && domClass.contains(e.target, "dijitOffScreen"))){
							e.stopPropagation();
							e.stopImmediatePropagation && e.stopImmediatePropagation();
							if(type == "click" && (e.target.tagName != "INPUT" || e.target.type == "radio" || e.target.type == "checkbox")
								&& e.target.tagName != "TEXTAREA" && e.target.tagName != "AUDIO" && e.target.tagName != "VIDEO"){
								 // preventDefault() breaks textual <input>s on android, keyboard doesn't popup,
								 // but it is still needed for checkboxes and radio buttons, otherwise in some cases
								 // the checked state becomes inconsistent with the widget's state
								e.preventDefault();
							}
						}
					}, true);
				}

				stopNativeEvents("click");

				// We also stop mousedown/up since these would be sent well after with our "fast" click (300ms),
				// which can confuse some dijit widgets.
				stopNativeEvents("mousedown");
				stopNativeEvents("mouseup");
			}
		}
	}

	var hoveredNode;

	if(hasPointer){
		 // MSPointer (IE10+) already has support for over and out, so we just need to init click support
		domReady(function(){
			win.doc.addEventListener(pointer.down, function(evt){
				doClicks(evt, pointer.move, pointer.up);
			}, true);
		});
	}else if(hasTouch){
		domReady(function(){
			// Keep track of currently hovered node
			hoveredNode = win.body();	// currently hovered node

			win.doc.addEventListener("touchstart", function(evt){
					lastTouch = (new Date()).getTime();

				// Precede touchstart event with touch.over event.  DnD depends on this.
				// Use addEventListener(cb, true) to run cb before any touchstart handlers on node run,
				// and to ensure this code runs even if the listener on the node does event.stop().
				var oldNode = hoveredNode;
				hoveredNode = evt.target;
				on.emit(oldNode, "dojotouchout", {
					relatedTarget: hoveredNode,
					bubbles: true
				});
				on.emit(hoveredNode, "dojotouchover", {
					relatedTarget: oldNode,
					bubbles: true
				});

				doClicks(evt, "touchmove", "touchend"); // init click generation
			}, true);

			function copyEventProps(evt){
				// Make copy of event object and also set bubbles:true.  Used when calling on.emit().
				var props = lang.delegate(evt, {
					bubbles: true
				});

				if(has("ios") >= 6){
					// On iOS6 "touches" became a non-enumerable property, which
					// is not hit by for...in.  Ditto for the other properties below.
					props.touches = evt.touches;
					props.altKey = evt.altKey;
					props.changedTouches = evt.changedTouches;
					props.ctrlKey = evt.ctrlKey;
					props.metaKey = evt.metaKey;
					props.shiftKey = evt.shiftKey;
					props.targetTouches = evt.targetTouches;
				}

				return props;
			}

			on(win.doc, "touchmove", function(evt){
				lastTouch = (new Date()).getTime();

				var newNode = win.doc.elementFromPoint(
					evt.pageX - (ios4 ? 0 : win.global.pageXOffset), // iOS 4 expects page coords
					evt.pageY - (ios4 ? 0 : win.global.pageYOffset)
				);

				if(newNode){
					// Fire synthetic touchover and touchout events on nodes since the browser won't do it natively.
					if(hoveredNode !== newNode){
						// touch out on the old node
						on.emit(hoveredNode, "dojotouchout", {
							relatedTarget: newNode,
							bubbles: true
						});

						// touchover on the new node
						on.emit(newNode, "dojotouchover", {
							relatedTarget: hoveredNode,
							bubbles: true
						});

						hoveredNode = newNode;
					}

					// Unlike a listener on "touchmove", on(node, "dojotouchmove", listener) fires when the finger
					// drags over the specified node, regardless of which node the touch started on.
					if(!on.emit(newNode, "dojotouchmove", copyEventProps(evt))){
						// emit returns false when synthetic event "dojotouchmove" is cancelled, so we prevent the
						// default behavior of the underlying native event "touchmove".
						evt.preventDefault();
					}
				}
			});

			// Fire a dojotouchend event on the node where the finger was before it was removed from the screen.
			// This is different than the native touchend, which fires on the node where the drag started.
			on(win.doc, "touchend", function(evt){
					lastTouch = (new Date()).getTime();
				var node = win.doc.elementFromPoint(
					evt.pageX - (ios4 ? 0 : win.global.pageXOffset), // iOS 4 expects page coords
					evt.pageY - (ios4 ? 0 : win.global.pageYOffset)
				) || win.body(); // if out of the screen

				on.emit(node, "dojotouchend", copyEventProps(evt));
			});
		});
	}

	//device neutral events - touch.press|move|release|cancel/over/out
	var touch = {
		press: dualEvent("mousedown", "touchstart", pointer.down),
		move: dualEvent("mousemove", "dojotouchmove", pointer.move),
		release: dualEvent("mouseup", "dojotouchend", pointer.up),
		cancel: dualEvent(mouse.leave, "touchcancel", hasPointer ? pointer.cancel : null),
		over: dualEvent("mouseover", "dojotouchover", pointer.over),
		out: dualEvent("mouseout", "dojotouchout", pointer.out),
		enter: mouse._eventHandler(dualEvent("mouseover","dojotouchover", pointer.over)),
		leave: mouse._eventHandler(dualEvent("mouseout", "dojotouchout", pointer.out))
	};

	/*=====
	touch = {
		// summary:
		//		This module provides unified touch event handlers by exporting
		//		press, move, release and cancel which can also run well on desktop.
		//		Based on http://dvcs.w3.org/hg/webevents/raw-file/tip/touchevents.html
		//      Also, if the dojoClick property is set to truthy on a DOM node, dojo/touch generates
		//      click events immediately for this node and its descendants (except for descendants that
		//      have a dojoClick property set to falsy), to avoid the delay before native browser click events,
		//      and regardless of whether evt.preventDefault() was called in a touch.press event listener.
		//
		// example:
		//		Used with dojo/on
		//		|	define(["dojo/on", "dojo/touch"], function(on, touch){
		//		|		on(node, touch.press, function(e){});
		//		|		on(node, touch.move, function(e){});
		//		|		on(node, touch.release, function(e){});
		//		|		on(node, touch.cancel, function(e){});
		// example:
		//		Used with touch.* directly
		//		|	touch.press(node, function(e){});
		//		|	touch.move(node, function(e){});
		//		|	touch.release(node, function(e){});
		//		|	touch.cancel(node, function(e){});
		// example:
		//		Have dojo/touch generate clicks without delay, with a default move threshold of 4 pixels
		//		|	node.dojoClick = true;
		// example:
		//		Have dojo/touch generate clicks without delay, with a move threshold of 10 pixels horizontally and vertically
		//		|	node.dojoClick = 10;
		// example:
		//		Have dojo/touch generate clicks without delay, with a move threshold of 50 pixels horizontally and 10 pixels vertically
		//		|	node.dojoClick = {x:50, y:5};
		// example:
		//		Disable clicks without delay generated by dojo/touch on a node that has an ancestor with property dojoClick set to truthy
		//		|  node.dojoClick = false;

		press: function(node, listener){
			// summary:
			//		Register a listener to 'touchstart'|'mousedown' for the given node
			// node: Dom
			//		Target node to listen to
			// listener: Function
			//		Callback function
			// returns:
			//		A handle which will be used to remove the listener by handle.remove()
		},
		move: function(node, listener){
			// summary:
			//		Register a listener that fires when the mouse cursor or a finger is dragged over the given node.
			// node: Dom
			//		Target node to listen to
			// listener: Function
			//		Callback function
			// returns:
			//		A handle which will be used to remove the listener by handle.remove()
		},
		release: function(node, listener){
			// summary:
			//		Register a listener to releasing the mouse button while the cursor is over the given node
			//		(i.e. "mouseup") or for removing the finger from the screen while touching the given node.
			// node: Dom
			//		Target node to listen to
			// listener: Function
			//		Callback function
			// returns:
			//		A handle which will be used to remove the listener by handle.remove()
		},
		cancel: function(node, listener){
			// summary:
			//		Register a listener to 'touchcancel'|'mouseleave' for the given node
			// node: Dom
			//		Target node to listen to
			// listener: Function
			//		Callback function
			// returns:
			//		A handle which will be used to remove the listener by handle.remove()
		},
		over: function(node, listener){
			// summary:
			//		Register a listener to 'mouseover' or touch equivalent for the given node
			// node: Dom
			//		Target node to listen to
			// listener: Function
			//		Callback function
			// returns:
			//		A handle which will be used to remove the listener by handle.remove()
		},
		out: function(node, listener){
			// summary:
			//		Register a listener to 'mouseout' or touch equivalent for the given node
			// node: Dom
			//		Target node to listen to
			// listener: Function
			//		Callback function
			// returns:
			//		A handle which will be used to remove the listener by handle.remove()
		},
		enter: function(node, listener){
			// summary:
			//		Register a listener to mouse.enter or touch equivalent for the given node
			// node: Dom
			//		Target node to listen to
			// listener: Function
			//		Callback function
			// returns:
			//		A handle which will be used to remove the listener by handle.remove()
		},
		leave: function(node, listener){
			// summary:
			//		Register a listener to mouse.leave or touch equivalent for the given node
			// node: Dom
			//		Target node to listen to
			// listener: Function
			//		Callback function
			// returns:
			//		A handle which will be used to remove the listener by handle.remove()
		}
	};
	=====*/

	 1  && (dojo.touch = touch);

	return touch;
});

},
'dijit/_TemplatedMixin':function(){
define([
	"dojo/cache",	// dojo.cache
	"dojo/_base/declare", // declare
	"dojo/dom-construct", // domConstruct.destroy, domConstruct.toDom
	"dojo/_base/lang", // lang.getObject
	"dojo/on",
	"dojo/sniff", // has("ie")
	"dojo/string", // string.substitute string.trim
	"./_AttachMixin"
], function(cache, declare, domConstruct, lang, on, has, string, _AttachMixin){

	// module:
	//		dijit/_TemplatedMixin

	var _TemplatedMixin = declare("dijit._TemplatedMixin", _AttachMixin, {
		// summary:
		//		Mixin for widgets that are instantiated from a template

		// templateString: [protected] String
		//		A string that represents the widget template.
		//		Use in conjunction with dojo.cache() to load from a file.
		templateString: null,

		// templatePath: [protected deprecated] String
		//		Path to template (HTML file) for this widget relative to dojo.baseUrl.
		//		Deprecated: use templateString with require([... "dojo/text!..."], ...) instead
		templatePath: null,

		// skipNodeCache: [protected] Boolean
		//		If using a cached widget template nodes poses issues for a
		//		particular widget class, it can set this property to ensure
		//		that its template is always re-built from a string
		_skipNodeCache: false,

/*=====
		// _rendered: Boolean
		//		Not normally use, but this flag can be set by the app if the server has already rendered the template,
		//		i.e. already inlining the template for the widget into the main page.   Reduces _TemplatedMixin to
		//		just function like _AttachMixin.
		_rendered: false,
=====*/

		// Set _AttachMixin.searchContainerNode to true for back-compat for widgets that have data-dojo-attach-point's
		// and events inside this.containerNode.   Remove for 2.0.
		searchContainerNode: true,

		_stringRepl: function(tmpl){
			// summary:
			//		Does substitution of ${foo} type properties in template string
			// tags:
			//		private
			var className = this.declaredClass, _this = this;
			// Cache contains a string because we need to do property replacement
			// do the property replacement
			return string.substitute(tmpl, this, function(value, key){
				if(key.charAt(0) == '!'){ value = lang.getObject(key.substr(1), false, _this); }
				if(typeof value == "undefined"){ throw new Error(className+" template:"+key); } // a debugging aide
				if(value == null){ return ""; }

				// Substitution keys beginning with ! will skip the transform step,
				// in case a user wishes to insert unescaped markup, e.g. ${!foo}
				return key.charAt(0) == "!" ? value : this._escapeValue("" + value);
			}, this);
		},

		_escapeValue: function(/*String*/ val){
			// summary:
			//		Escape a value to be inserted into the template, either into an attribute value
			//		(ex: foo="${bar}") or as inner text of an element (ex: <span>${foo}</span>)

			// Safer substitution, see heading "Attribute values" in
			// http://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.3.2
			// and also https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet#RULE_.231_-_HTML_Escape_Before_Inserting_Untrusted_Data_into_HTML_Element_Content
			return val.replace(/["'<>&]/g, function(val){
				return {
					"&": "&amp;",
					"<": "&lt;",
					">": "&gt;",
					"\"": "&quot;",
					"'": "&#x27;"
				}[val];
			});
		},

		buildRendering: function(){
			// summary:
			//		Construct the UI for this widget from a template, setting this.domNode.
			// tags:
			//		protected

			if(!this._rendered){
				if(!this.templateString){
					this.templateString = cache(this.templatePath, {sanitize: true});
				}

				// Lookup cached version of template, and download to cache if it
				// isn't there already.  Returns either a DomNode or a string, depending on
				// whether or not the template contains ${foo} replacement parameters.
				var cached = _TemplatedMixin.getCachedTemplate(this.templateString, this._skipNodeCache, this.ownerDocument);

				var node;
				if(lang.isString(cached)){
					node = domConstruct.toDom(this._stringRepl(cached), this.ownerDocument);
					if(node.nodeType != 1){
						// Flag common problems such as templates with multiple top level nodes (nodeType == 11)
						throw new Error("Invalid template: " + cached);
					}
				}else{
					// if it's a node, all we have to do is clone it
					node = cached.cloneNode(true);
				}

				this.domNode = node;
			}

			// Call down to _WidgetBase.buildRendering() to get base classes assigned
			// TODO: change the baseClass assignment to _setBaseClassAttr
			this.inherited(arguments);

			if(!this._rendered){
				this._fillContent(this.srcNodeRef);
			}

			this._rendered = true;
		},

		_fillContent: function(/*DomNode*/ source){
			// summary:
			//		Relocate source contents to templated container node.
			//		this.containerNode must be able to receive children, or exceptions will be thrown.
			// tags:
			//		protected
			var dest = this.containerNode;
			if(source && dest){
				while(source.hasChildNodes()){
					dest.appendChild(source.firstChild);
				}
			}
		}

	});

	// key is templateString; object is either string or DOM tree
	_TemplatedMixin._templateCache = {};

	_TemplatedMixin.getCachedTemplate = function(templateString, alwaysUseString, doc){
		// summary:
		//		Static method to get a template based on the templatePath or
		//		templateString key
		// templateString: String
		//		The template
		// alwaysUseString: Boolean
		//		Don't cache the DOM tree for this template, even if it doesn't have any variables
		// doc: Document?
		//		The target document.   Defaults to document global if unspecified.
		// returns: Mixed
		//		Either string (if there are ${} variables that need to be replaced) or just
		//		a DOM tree (if the node can be cloned directly)

		// is it already cached?
		var tmplts = _TemplatedMixin._templateCache;
		var key = templateString;
		var cached = tmplts[key];
		if(cached){
			try{
				// if the cached value is an innerHTML string (no ownerDocument) or a DOM tree created within the
				// current document, then use the current cached value
				if(!cached.ownerDocument || cached.ownerDocument == (doc || document)){
					// string or node of the same document
					return cached;
				}
			}catch(e){ /* squelch */ } // IE can throw an exception if cached.ownerDocument was reloaded
			domConstruct.destroy(cached);
		}

		templateString = string.trim(templateString);

		if(alwaysUseString || templateString.match(/\$\{([^\}]+)\}/g)){
			// there are variables in the template so all we can do is cache the string
			return (tmplts[key] = templateString); //String
		}else{
			// there are no variables in the template so we can cache the DOM tree
			var node = domConstruct.toDom(templateString, doc);
			if(node.nodeType != 1){
				throw new Error("Invalid template: " + templateString);
			}
			return (tmplts[key] = node); //Node
		}
	};

	if(has("ie")){
		on(window, "unload", function(){
			var cache = _TemplatedMixin._templateCache;
			for(var key in cache){
				var value = cache[key];
				if(typeof value == "object"){ // value is either a string or a DOM node template
					domConstruct.destroy(value);
				}
				delete cache[key];
			}
		});
	}

	return _TemplatedMixin;
});

},
'dojo/cache':function(){
define(["./_base/kernel", "./text"], function(dojo){
	// module:
	//		dojo/cache

	// dojo.cache is defined in dojo/text
	return dojo.cache;
});

},
'dijit/_AttachMixin':function(){
define([
	"require",
	"dojo/_base/array", // array.forEach
	"dojo/_base/connect",	// remove for 2.0
	"dojo/_base/declare", // declare
	"dojo/_base/lang", // lang.getObject
	"dojo/mouse",
	"dojo/on",
	"dojo/touch",
	"./_WidgetBase"
], function(require, array, connect, declare, lang, mouse, on, touch, _WidgetBase){

	// module:
	//		dijit/_AttachMixin

	// Map from string name like "mouseenter" to synthetic event like mouse.enter
	var synthEvents = lang.delegate(touch, {
		"mouseenter": mouse.enter,
		"mouseleave": mouse.leave,
		"keypress": connect._keypress	// remove for 2.0
	});

	// To be lightweight, _AttachMixin doesn't require() dijit/a11yclick.
	// If the subclass has a template using "ondijitclick", it must load dijit/a11yclick itself.
	// In that case, the a11yclick variable below will get set to point to that synthetic event.
	var a11yclick;

	var _AttachMixin = declare("dijit._AttachMixin", null, {
		// summary:
		//		Mixin for widgets to attach to dom nodes and setup events via
		//		convenient data-dojo-attach-point and data-dojo-attach-event DOM attributes.
		//
		//		Superclass of _TemplatedMixin, and can also be used standalone when templates are pre-rendered on the
		//		server.
		//
		//		Does not [yet] handle widgets like ContentPane with this.containerNode set.   It should skip
		//		scanning for data-dojo-attach-point and data-dojo-attach-event inside this.containerNode, but it
		//		doesn't.

/*=====
		// _attachPoints: [private] String[]
		//		List of widget attribute names associated with data-dojo-attach-point=... in the
		//		template, ex: ["containerNode", "labelNode"]
		_attachPoints: [],

		// _attachEvents: [private] Handle[]
		//		List of connections associated with data-dojo-attach-event=... in the
		//		template
		_attachEvents: [],

		// attachScope: [public] Object
		//		Object to which attach points and events will be scoped.  Defaults
		//		to 'this'.
		attachScope: undefined,

		// searchContainerNode: [protected] Boolean
		//		Search descendants of this.containerNode for data-dojo-attach-point and data-dojo-attach-event.
		//		Should generally be left false (the default value) both for performance and to avoid failures when
		//		this.containerNode holds other _AttachMixin instances with their own attach points and events.
 		searchContainerNode: false,
 =====*/

		constructor: function(/*===== params, srcNodeRef =====*/){
			// summary:
			//		Create the widget.
			// params: Object|null
			//		Hash of initialization parameters for widget, including scalar values (like title, duration etc.)
			//		and functions, typically callbacks like onClick.
			//		The hash can contain any of the widget's properties, excluding read-only properties.
			// srcNodeRef: DOMNode|String?
			//		If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree.

			this._attachPoints = [];
			this._attachEvents = [];
		},


		buildRendering: function(){
			// summary:
			//		Attach to DOM nodes marked with special attributes.
			// tags:
			//		protected

			this.inherited(arguments);

			// recurse through the node, looking for, and attaching to, our
			// attachment points and events, which should be defined on the template node.
			this._attachTemplateNodes(this.domNode);

			this._beforeFillContent();		// hook for _WidgetsInTemplateMixin
		},

		_beforeFillContent: function(){
		},

		_attachTemplateNodes: function(rootNode){
			// summary:
			//		Iterate through the dom nodes and attach functions and nodes accordingly.
			// description:
			//		Map widget properties and functions to the handlers specified in
			//		the dom node and it's descendants. This function iterates over all
			//		nodes and looks for these properties:
			//
			//		- dojoAttachPoint/data-dojo-attach-point
			//		- dojoAttachEvent/data-dojo-attach-event
			// rootNode: DomNode
			//		The node to search for properties. All descendants will be searched.
			// tags:
			//		private

			// DFS to process all nodes except those inside of this.containerNode
			var node = rootNode;
			while(true){
				if(node.nodeType == 1 && (this._processTemplateNode(node, function(n,p){ return n.getAttribute(p); },
						this._attach) || this.searchContainerNode) && node.firstChild){
					node = node.firstChild;
				}else{
					if(node == rootNode){ return; }
					while(!node.nextSibling){
						node = node.parentNode;
						if(node == rootNode){ return; }
					}
					node = node.nextSibling;
				}
			}
		},

		_processTemplateNode: function(/*DOMNode|Widget*/ baseNode, getAttrFunc, attachFunc){
			// summary:
			//		Process data-dojo-attach-point and data-dojo-attach-event for given node or widget.
			//		Returns true if caller should process baseNode's children too.

			var ret = true;

			// Process data-dojo-attach-point
			var _attachScope = this.attachScope || this,
				attachPoint = getAttrFunc(baseNode, "dojoAttachPoint") || getAttrFunc(baseNode, "data-dojo-attach-point");
			if(attachPoint){
				var point, points = attachPoint.split(/\s*,\s*/);
				while((point = points.shift())){
					if(lang.isArray(_attachScope[point])){
						_attachScope[point].push(baseNode);
					}else{
						_attachScope[point] = baseNode;
					}
					ret = (point != "containerNode");
					this._attachPoints.push(point);
				}
			}

			// Process data-dojo-attach-event
			var attachEvent = getAttrFunc(baseNode, "dojoAttachEvent") || getAttrFunc(baseNode, "data-dojo-attach-event");
			if(attachEvent){
				// NOTE: we want to support attributes that have the form
				// "domEvent: nativeEvent; ..."
				var event, events = attachEvent.split(/\s*,\s*/);
				var trim = lang.trim;
				while((event = events.shift())){
					if(event){
						var thisFunc = null;
						if(event.indexOf(":") != -1){
							// oh, if only JS had tuple assignment
							var funcNameArr = event.split(":");
							event = trim(funcNameArr[0]);
							thisFunc = trim(funcNameArr[1]);
						}else{
							event = trim(event);
						}
						if(!thisFunc){
							thisFunc = event;
						}

						this._attachEvents.push(attachFunc(baseNode, event, lang.hitch(_attachScope, thisFunc)));
					}
				}
			}

			return ret;
		},

		_attach: function(node, type, func){
			// summary:
			//		Roughly corresponding to dojo/on, this is the default function for processing a
			//		data-dojo-attach-event.  Meant to attach to DOMNodes, not to widgets.
			// node: DOMNode
			//		The node to setup a listener on.
			// type: String
			//		Event name like "click".
			// getAttrFunc: Function
			//		Function to get the specified property for a given DomNode/Widget.
			// attachFunc: Function?
			//		Attaches an event handler from the specified node/widget to specified function.

			// Map special type names like "mouseenter" to synthetic events.
			// Subclasses are responsible to require() dijit/a11yclick if they want to use it.
			type = type.replace(/^on/, "").toLowerCase();
			if(type == "dijitclick"){
				type = a11yclick || (a11yclick = require("./a11yclick"));
			}else{
				type = synthEvents[type] || type;
			}

			return on(node, type, func);
		},

		_detachTemplateNodes: function() {
			// summary:
			//		Detach and clean up the attachments made in _attachtempalteNodes.

			// Delete all attach points to prevent IE6 memory leaks.
			var _attachScope = this.attachScope || this;
			array.forEach(this._attachPoints, function(point){
				delete _attachScope[point];
			});
			this._attachPoints = [];

			// And same for event handlers
			array.forEach(this._attachEvents, function(handle){ handle.remove(); });
			this._attachEvents = [];
		},

		destroyRendering: function(){
			this._detachTemplateNodes();
			this.inherited(arguments);
		}
	});

	// These arguments can be specified for widgets which are used in templates.
	// Since any widget can be specified as sub widgets in template, mix it
	// into the base widget class.  (This is a hack, but it's effective.).
	// Remove for 2.0.   Also, hide from API doc parser.
	lang.extend(_WidgetBase, /*===== {} || =====*/ {
		dojoAttachEvent: "",
		dojoAttachPoint: ""
	});
	
	return _AttachMixin;
});

},
'dijit/focus':function(){
define([
	"dojo/aspect",
	"dojo/_base/declare", // declare
	"dojo/dom", // domAttr.get dom.isDescendant
	"dojo/dom-attr", // domAttr.get dom.isDescendant
	"dojo/dom-class",
	"dojo/dom-construct", // connect to domConstruct.empty, domConstruct.destroy
	"dojo/Evented",
	"dojo/_base/lang", // lang.hitch
	"dojo/on",
	"dojo/domReady",
	"dojo/sniff", // has("ie")
	"dojo/Stateful",
	"dojo/_base/window", // win.body
	"dojo/window", // winUtils.get
	"./a11y",	// a11y.isTabNavigable
	"./registry",	// registry.byId
	"./main"		// to set dijit.focus
], function(aspect, declare, dom, domAttr, domClass, domConstruct, Evented, lang, on, domReady, has, Stateful, win, winUtils,
			a11y, registry, dijit){

	// module:
	//		dijit/focus

	// Time of the last focusin event
	var lastFocusin;

	// Time of the last touch/mousedown or focusin event
	var lastTouchOrFocusin;

	var FocusManager = declare([Stateful, Evented], {
		// summary:
		//		Tracks the currently focused node, and which widgets are currently "active".
		//		Access via require(["dijit/focus"], function(focus){ ... }).
		//
		//		A widget is considered active if it or a descendant widget has focus,
		//		or if a non-focusable node of this widget or a descendant was recently clicked.
		//
		//		Call focus.watch("curNode", callback) to track the current focused DOMNode,
		//		or focus.watch("activeStack", callback) to track the currently focused stack of widgets.
		//
		//		Call focus.on("widget-blur", func) or focus.on("widget-focus", ...) to monitor when
		//		when widgets become active/inactive
		//
		//		Finally, focus(node) will focus a node, suppressing errors if the node doesn't exist.

		// curNode: DomNode
		//		Currently focused item on screen
		curNode: null,

		// activeStack: dijit/_WidgetBase[]
		//		List of currently active widgets (focused widget and it's ancestors)
		activeStack: [],

		constructor: function(){
			// Don't leave curNode/prevNode pointing to bogus elements
			var check = lang.hitch(this, function(node){
				if(dom.isDescendant(this.curNode, node)){
					this.set("curNode", null);
				}
				if(dom.isDescendant(this.prevNode, node)){
					this.set("prevNode", null);
				}
			});
			aspect.before(domConstruct, "empty", check);
			aspect.before(domConstruct, "destroy", check);
		},

		registerIframe: function(/*DomNode*/ iframe){
			// summary:
			//		Registers listeners on the specified iframe so that any click
			//		or focus event on that iframe (or anything in it) is reported
			//		as a focus/click event on the `<iframe>` itself.
			// description:
			//		Currently only used by editor.
			// returns:
			//		Handle with remove() method to deregister.
			return this.registerWin(iframe.contentWindow, iframe);
		},

		registerWin: function(/*Window?*/targetWindow, /*DomNode?*/ effectiveNode){
			// summary:
			//		Registers listeners on the specified window (either the main
			//		window or an iframe's window) to detect when the user has clicked somewhere
			//		or focused somewhere.
			// description:
			//		Users should call registerIframe() instead of this method.
			// targetWindow:
			//		If specified this is the window associated with the iframe,
			//		i.e. iframe.contentWindow.
			// effectiveNode:
			//		If specified, report any focus events inside targetWindow as
			//		an event on effectiveNode, rather than on evt.target.
			// returns:
			//		Handle with remove() method to deregister.

			// TODO: make this function private in 2.0; Editor/users should call registerIframe(),

			// Listen for blur and focus events on targetWindow's document.
			var _this = this,
				body = targetWindow.document && targetWindow.document.body;

			if(body){
				// Listen for touches or mousedowns... could also use dojo/touch.press here.
				var event = has("pointer-events") ? "pointerdown" : has("MSPointer") ? "MSPointerDown" :
					has("touch-events") ? "mousedown, touchstart" : "mousedown";
				var mdh = on(targetWindow.document, event, function(evt){
					// workaround weird IE bug where the click is on an orphaned node
					// (first time clicking a Select/DropDownButton inside a TooltipDialog).
					// actually, strangely this is happening on latest chrome too.
					if(evt && evt.target && evt.target.parentNode == null){
						return;
					}

					_this._onTouchNode(effectiveNode || evt.target, "mouse");
				});

				var fih = on(body, 'focusin', function(evt){
					// When you refocus the browser window, IE gives an event with an empty srcElement
					if(!evt.target.tagName) { return; }

					// IE reports that nodes like <body> have gotten focus, even though they have tabIndex=-1,
					// ignore those events
					var tag = evt.target.tagName.toLowerCase();
					if(tag == "#document" || tag == "body"){ return; }

					if(a11y.isFocusable(evt.target)){
						_this._onFocusNode(effectiveNode || evt.target);
					}else{
						// Previous code called _onTouchNode() for any activate event on a non-focusable node.   Can
						// probably just ignore such an event as it will be handled by onmousedown handler above, but
						// leaving the code for now.
						_this._onTouchNode(effectiveNode || evt.target);
					}
				});

				var foh = on(body, 'focusout', function(evt){
					_this._onBlurNode(effectiveNode || evt.target);
				});

				return {
					remove: function(){
						mdh.remove();
						fih.remove();
						foh.remove();
						mdh = fih = foh = null;
						body = null;	// prevent memory leak (apparent circular reference via closure)
					}
				};
			}
		},

		_onBlurNode: function(/*DomNode*/ node){
			// summary:
			//		Called when focus leaves a node.
			//		Usually ignored, _unless_ it *isn't* followed by touching another node,
			//		which indicates that we tabbed off the last field on the page,
			//		in which case every widget is marked inactive

			var now = (new Date()).getTime();

			// IE9+ and chrome have a problem where focusout events come after the corresponding focusin event.
			// For chrome problem see https://bugs.dojotoolkit.org/ticket/17668.
			// IE problem happens when moving focus from the Editor's <iframe> to a normal DOMNode.
			if(now < lastFocusin + 100){
				return;
			}

			// If the blur event isn't followed by a focus event, it means the user clicked on something unfocusable,
			// so clear focus.
			if(this._clearFocusTimer){
				clearTimeout(this._clearFocusTimer);
			}
			this._clearFocusTimer = setTimeout(lang.hitch(this, function(){
				this.set("prevNode", this.curNode);
				this.set("curNode", null);
			}), 0);

			// Unset timer to zero-out widget stack; we'll reset it below if appropriate.
			if(this._clearActiveWidgetsTimer){
				clearTimeout(this._clearActiveWidgetsTimer);
			}

			if(now < lastTouchOrFocusin + 100){
				// This blur event is coming late (after the call to _onTouchNode() rather than before.
				// So let _onTouchNode() handle setting the widget stack.
				// See https://bugs.dojotoolkit.org/ticket/17668
				return;
			}

			// If the blur event isn't followed (or preceded) by a focus or touch event then mark all widgets as inactive.
			this._clearActiveWidgetsTimer = setTimeout(lang.hitch(this, function(){
				delete this._clearActiveWidgetsTimer;
				this._setStack([]);
			}), 0);
		},

		_onTouchNode: function(/*DomNode*/ node, /*String*/ by){
			// summary:
			//		Callback when node is focused or touched.
			//		Note that _onFocusNode() calls _onTouchNode().
			// node:
			//		The node that was touched.
			// by:
			//		"mouse" if the focus/touch was caused by a mouse down event

			// Keep track of time of last focusin or touch event.
			lastTouchOrFocusin = (new Date()).getTime();

			if(this._clearActiveWidgetsTimer){
				// forget the recent blur event
				clearTimeout(this._clearActiveWidgetsTimer);
				delete this._clearActiveWidgetsTimer;
			}

			// if the click occurred on the scrollbar of a dropdown, treat it as a click on the dropdown,
			// even though the scrollbar is technically on the popup wrapper (see #10631)
			if(domClass.contains(node, "dijitPopup")){
				node = node.firstChild;
			}

			// compute stack of active widgets (ex: ComboButton --> Menu --> MenuItem)
			var newStack=[];
			try{
				while(node){
					var popupParent = domAttr.get(node, "dijitPopupParent");
					if(popupParent){
						node=registry.byId(popupParent).domNode;
					}else if(node.tagName && node.tagName.toLowerCase() == "body"){
						// is this the root of the document or just the root of an iframe?
						if(node === win.body()){
							// node is the root of the main document
							break;
						}
						// otherwise, find the iframe this node refers to (can't access it via parentNode,
						// need to do this trick instead). window.frameElement is supported in IE/FF/Webkit
						node=winUtils.get(node.ownerDocument).frameElement;
					}else{
						// if this node is the root node of a widget, then add widget id to stack,
						// except ignore clicks on disabled widgets (actually focusing a disabled widget still works,
						// to support MenuItem)
						var id = node.getAttribute && node.getAttribute("widgetId"),
							widget = id && registry.byId(id);
						if(widget && !(by == "mouse" && widget.get("disabled"))){
							newStack.unshift(id);
						}
						node=node.parentNode;
					}
				}
			}catch(e){ /* squelch */ }

			this._setStack(newStack, by);
		},

		_onFocusNode: function(/*DomNode*/ node){
			// summary:
			//		Callback when node is focused

			if(!node){
				return;
			}

			if(node.nodeType == 9){
				// Ignore focus events on the document itself.  This is here so that
				// (for example) clicking the up/down arrows of a spinner
				// (which don't get focus) won't cause that widget to blur. (FF issue)
				return;
			}

			// Keep track of time of last focusin event.
			lastFocusin = (new Date()).getTime();

			// There was probably a blur event right before this event, but since we have a new focus,
			// forget about the blur
			if(this._clearFocusTimer){
				clearTimeout(this._clearFocusTimer);
				delete this._clearFocusTimer;
			}

			this._onTouchNode(node);

			if(node == this.curNode){ return; }
			this.set("prevNode", this.curNode);
			this.set("curNode", node);
		},

		_setStack: function(/*String[]*/ newStack, /*String*/ by){
			// summary:
			//		The stack of active widgets has changed.  Send out appropriate events and records new stack.
			// newStack:
			//		array of widget id's, starting from the top (outermost) widget
			// by:
			//		"mouse" if the focus/touch was caused by a mouse down event

			var oldStack = this.activeStack, lastOldIdx = oldStack.length - 1, lastNewIdx = newStack.length - 1;

			if(newStack[lastNewIdx] == oldStack[lastOldIdx]){
				// no changes, return now to avoid spurious notifications about changes to activeStack
				return;
			}

			this.set("activeStack", newStack);

			var widget, i;

			// for all elements that have gone out of focus, set focused=false
			for(i = lastOldIdx; i >= 0 && oldStack[i] != newStack[i]; i--){
				widget = registry.byId(oldStack[i]);
				if(widget){
					widget._hasBeenBlurred = true;		// TODO: used by form widgets, should be moved there
					widget.set("focused", false);
					if(widget._focusManager == this){
						widget._onBlur(by);
					}
					this.emit("widget-blur", widget, by);
				}
			}

			// for all element that have come into focus, set focused=true
			for(i++; i <= lastNewIdx; i++){
				widget = registry.byId(newStack[i]);
				if(widget){
					widget.set("focused", true);
					if(widget._focusManager == this){
						widget._onFocus(by);
					}
					this.emit("widget-focus", widget, by);
				}
			}
		},

		focus: function(node){
			// summary:
			//		Focus the specified node, suppressing errors if they occur
			if(node){
				try{ node.focus(); }catch(e){/*quiet*/}
			}
		}
	});

	var singleton = new FocusManager();

	// register top window and all the iframes it contains
	domReady(function(){
		var handle = singleton.registerWin(winUtils.get(document));
		if(has("ie")){
			on(window, "unload", function(){
				if(handle){	// because this gets called twice when doh.robot is running
					handle.remove();
					handle = null;
				}
			});
		}
	});

	// Setup dijit.focus as a pointer to the singleton but also (for backwards compatibility)
	// as a function to set focus.   Remove for 2.0.
	dijit.focus = function(node){
		singleton.focus(node);	// indirection here allows dijit/_base/focus.js to override behavior
	};
	for(var attr in singleton){
		if(!/^_/.test(attr)){
			dijit.focus[attr] = typeof singleton[attr] == "function" ? lang.hitch(singleton, attr) : singleton[attr];
		}
	}
	singleton.watch(function(attr, oldVal, newVal){
		dijit.focus[attr] = newVal;
	});

	return singleton;
});

},
'dijit/a11y':function(){
define([
	"dojo/_base/array", // array.forEach array.map
	"dojo/dom",			// dom.byId
	"dojo/dom-attr", // domAttr.attr domAttr.has
	"dojo/dom-style", // domStyle.style
	"dojo/_base/lang", // lang.mixin()
	"dojo/sniff", // has("ie")  1 
	"./main"	// for exporting methods to dijit namespace
], function(array, dom, domAttr, domStyle, lang, has, dijit){

	// module:
	//		dijit/a11y

	var undefined;

	var a11y = {
		// summary:
		//		Accessibility utility functions (keyboard, tab stops, etc.)

		_isElementShown: function(/*Element*/ elem){
			var s = domStyle.get(elem);
			return (s.visibility != "hidden")
				&& (s.visibility != "collapsed")
				&& (s.display != "none")
				&& (domAttr.get(elem, "type") != "hidden");
		},

		hasDefaultTabStop: function(/*Element*/ elem){
			// summary:
			//		Tests if element is tab-navigable even without an explicit tabIndex setting

			// No explicit tabIndex setting, need to investigate node type
			switch(elem.nodeName.toLowerCase()){
				case "a":
					// An <a> w/out a tabindex is only navigable if it has an href
					return domAttr.has(elem, "href");
				case "area":
				case "button":
				case "input":
				case "object":
				case "select":
				case "textarea":
					// These are navigable by default
					return true;
				case "iframe":
					// If it's an editor <iframe> then it's tab navigable.
					var body;
					try{
						// non-IE
						var contentDocument = elem.contentDocument;
						if("designMode" in contentDocument && contentDocument.designMode == "on"){
							return true;
						}
						body = contentDocument.body;
					}catch(e1){
						// contentWindow.document isn't accessible within IE7/8
						// if the iframe.src points to a foreign url and this
						// page contains an element, that could get focus
						try{
							body = elem.contentWindow.document.body;
						}catch(e2){
							return false;
						}
					}
					return body && (body.contentEditable == 'true' ||
						(body.firstChild && body.firstChild.contentEditable == 'true'));
				default:
					return elem.contentEditable == 'true';
			}
		},

		effectiveTabIndex: function(/*Element*/ elem){
			// summary:
			//		Returns effective tabIndex of an element, either a number, or undefined if element isn't focusable.

			if(domAttr.get(elem, "disabled")){
				return undefined;
			}else if(domAttr.has(elem, "tabIndex")){
				// Explicit tab index setting
				return +domAttr.get(elem, "tabIndex");// + to convert string --> number
			}else{
				// No explicit tabIndex setting, so depends on node type
				return a11y.hasDefaultTabStop(elem) ? 0 : undefined;
			}
		},

		isTabNavigable: function(/*Element*/ elem){
			// summary:
			//		Tests if an element is tab-navigable

			return a11y.effectiveTabIndex(elem) >= 0;
		},

		isFocusable: function(/*Element*/ elem){
			// summary:
			//		Tests if an element is focusable by tabbing to it, or clicking it with the mouse.

			return a11y.effectiveTabIndex(elem) >= -1;
		},

		_getTabNavigable: function(/*DOMNode*/ root){
			// summary:
			//		Finds descendants of the specified root node.
			// description:
			//		Finds the following descendants of the specified root node:
			//
			//		- the first tab-navigable element in document order
			//		  without a tabIndex or with tabIndex="0"
			//		- the last tab-navigable element in document order
			//		  without a tabIndex or with tabIndex="0"
			//		- the first element in document order with the lowest
			//		  positive tabIndex value
			//		- the last element in document order with the highest
			//		  positive tabIndex value
			var first, last, lowest, lowestTabindex, highest, highestTabindex, radioSelected = {};

			function radioName(node){
				// If this element is part of a radio button group, return the name for that group.
				return node && node.tagName.toLowerCase() == "input" &&
					node.type && node.type.toLowerCase() == "radio" &&
					node.name && node.name.toLowerCase();
			}

			var shown = a11y._isElementShown, effectiveTabIndex = a11y.effectiveTabIndex;
			var walkTree = function(/*DOMNode*/ parent){
				for(var child = parent.firstChild; child; child = child.nextSibling){
					// Skip text elements, hidden elements, and also non-HTML elements (those in custom namespaces) in IE,
					// since show() invokes getAttribute("type"), which crash on VML nodes in IE.
					if(child.nodeType != 1 || (has("ie") <= 9 && child.scopeName !== "HTML") || !shown(child)){
						continue;
					}

					var tabindex = effectiveTabIndex(child);
					if(tabindex >= 0){
						if(tabindex == 0){
							if(!first){
								first = child;
							}
							last = child;
						}else if(tabindex > 0){
							if(!lowest || tabindex < lowestTabindex){
								lowestTabindex = tabindex;
								lowest = child;
							}
							if(!highest || tabindex >= highestTabindex){
								highestTabindex = tabindex;
								highest = child;
							}
						}
						var rn = radioName(child);
						if(domAttr.get(child, "checked") && rn){
							radioSelected[rn] = child;
						}
					}
					if(child.nodeName.toUpperCase() != 'SELECT'){
						walkTree(child);
					}
				}
			};
			if(shown(root)){
				walkTree(root);
			}
			function rs(node){
				// substitute checked radio button for unchecked one, if there is a checked one with the same name.
				return radioSelected[radioName(node)] || node;
			}

			return { first: rs(first), last: rs(last), lowest: rs(lowest), highest: rs(highest) };
		},

		getFirstInTabbingOrder: function(/*String|DOMNode*/ root, /*Document?*/ doc){
			// summary:
			//		Finds the descendant of the specified root node
			//		that is first in the tabbing order
			var elems = a11y._getTabNavigable(dom.byId(root, doc));
			return elems.lowest ? elems.lowest : elems.first; // DomNode
		},

		getLastInTabbingOrder: function(/*String|DOMNode*/ root, /*Document?*/ doc){
			// summary:
			//		Finds the descendant of the specified root node
			//		that is last in the tabbing order
			var elems = a11y._getTabNavigable(dom.byId(root, doc));
			return elems.last ? elems.last : elems.highest; // DomNode
		}
	};

	 1  && lang.mixin(dijit, a11y);

	return a11y;
});

},
'dijit/_FocusMixin':function(){
define([
	"./focus",
	"./_WidgetBase",
	"dojo/_base/declare", // declare
	"dojo/_base/lang" // lang.extend
], function(focus, _WidgetBase, declare, lang){

	// module:
	//		dijit/_FocusMixin

	// We don't know where _FocusMixin will occur in the inheritance chain, but we need the _onFocus()/_onBlur() below
	// to be last in the inheritance chain, so mixin to _WidgetBase.
	lang.extend(_WidgetBase, {
		// focused: [readonly] Boolean
		//		This widget or a widget it contains has focus, or is "active" because
		//		it was recently clicked.
		focused: false,

		onFocus: function(){
			// summary:
			//		Called when the widget becomes "active" because
			//		it or a widget inside of it either has focus, or has recently
			//		been clicked.
			// tags:
			//		callback
		},

		onBlur: function(){
			// summary:
			//		Called when the widget stops being "active" because
			//		focus moved to something outside of it, or the user
			//		clicked somewhere outside of it, or the widget was
			//		hidden.
			// tags:
			//		callback
		},

		_onFocus: function(){
			// summary:
			//		This is where widgets do processing for when they are active,
			//		such as changing CSS classes.  See onFocus() for more details.
			// tags:
			//		protected
			this.onFocus();
		},

		_onBlur: function(){
			// summary:
			//		This is where widgets do processing for when they stop being active,
			//		such as changing CSS classes.  See onBlur() for more details.
			// tags:
			//		protected
			this.onBlur();
		}
	});

	return declare("dijit._FocusMixin", null, {
		// summary:
		//		Mixin to widget to provide _onFocus() and _onBlur() methods that
		//		fire when a widget or its descendants get/lose focus

		// flag that I want _onFocus()/_onBlur() notifications from focus manager
		_focusManager: focus
	});

});

},
'esri/tasks/locator':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/Deferred", "dojo/_base/json", "dojo/has", "../kernel", "../request", "../deferredUtils", "./Task", "./AddressCandidate"], function(t, f, u, p, l, z, A, q, v, y, m) {
    return t(y, {
        declaredClass: "esri.tasks.Locator",
        _eventMap: {
            "address-to-locations-complete": ["addresses"],
            "addresses-to-locations-complete": ["addresses"],
            "location-to-address-complete": ["address"],
            "suggest-locations-complete": ["suggestions"]
        },
        constructor: function(a) {
            this._geocodeHandler = f.hitch(this,
                this._geocodeHandler);
            this._geocodeAddressesHandler = f.hitch(this, this._geocodeAddressesHandler);
            this._reverseGeocodeHandler = f.hitch(this, this._reverseGeocodeHandler);
            this.registerConnectEvents()
        },
        outSpatialReference: null,
        setOutSpatialReference: function(a) {
            this.outSpatialReference = a
        },
        _geocodeHandler: function(a, b, k, g, c) {
            try {
                var h = a.candidates,
                    e;
                b = [];
                var d, n = h.length,
                    r = a.spatialReference,
                    f;
                for (d = 0; d < n; d++) {
                    e = h[d];
                    if (f = e.location) f.spatialReference = r;
                    b[d] = new m(e)
                }
                this._successHandler([b], "onAddressToLocationsComplete",
                    k, c)
            } catch (l) {
                this._errorHandler(l, g, c)
            }
        },
        _geocodeAddressesHandler: function(a, b, k, g, c) {
            try {
                var h = a.locations;
                b = [];
                var e, d = h.length,
                    n = a.spatialReference,
                    f;
                for (e = 0; e < d; e++) {
                    if (f = h[e].location) f.spatialReference = n;
                    b[e] = new m(h[e])
                }
                this._successHandler([b], "onAddressesToLocationsComplete", k, c)
            } catch (l) {
                this._errorHandler(l, g, c)
            }
        },
        addressToLocations: function(a, b, k, g, c) {
            var h, e, d, n, r, m, w;
            a.address && (g = k, k = b, b = a.outFields, c = a.searchExtent, w = a.countryCode, h = a.magicKey, e = a.distance, m = a.categories, a.location &&
                this.normalization && (d = a.location.normalize()), n = a.maxLocations, r = a.forStorage, a = a.address);
            c && (c = c.shiftCentralMeridian());
            var x = this.outSpatialReference;
            a = this._encode(f.mixin({}, this._url.query, a, {
                f: "json",
                outSR: x && l.toJson(x.toJson()),
                outFields: b && b.join(",") || null,
                searchExtent: c && l.toJson(c.toJson()),
                category: m && m.join(",") || null,
                countryCode: w || null,
                magicKey: h || null,
                distance: e || null,
                location: d || null,
                maxLocations: n || null,
                forStorage: r || null
            }));
            var t = this._geocodeHandler,
                u = this._errorHandler,
                s =
                new p(v._dfdCanceller);
            s._pendingDfd = q({
                url: this._url.path + "/findAddressCandidates",
                content: a,
                callbackParamName: "callback",
                load: function(a, b) {
                    t(a, b, k, g, s)
                },
                error: function(a) {
                    u(a, g, s)
                }
            });
            return s
        },
        suggestLocations: function(a) {
            var b;
            b = new p;
            a.hasOwnProperty("location") && this.normalization && (a.location = a.location.normalize());
            a.searchExtent && (a.searchExtent = a.searchExtent.shiftCentralMeridian());
            a = this._encode(f.mixin({}, this._url.query, {
                f: "json",
                text: a.text,
                searchExtent: a.searchExtent && l.toJson(a.searchExtent.toJson()),
                category: a.categories && a.categories.join(",") || null,
                location: a.location || null,
                distance: a.distance || null
            }, {
                f: "json"
            }));
            q({
                url: this._url.path + "/suggest",
                content: a,
                callbackParamName: "callback"
            }).then(f.hitch(this, function(a) {
                a = a.suggestions || [];
                this.onSuggestLocationsComplete(a);
                b.resolve(a)
            }), f.hitch(this, function(a) {
                this._errorHandler(a);
                b.reject(a)
            }));
            return b
        },
        addressesToLocations: function(a, b, k) {
            var g = this.outSpatialReference,
                c = [];
            u.forEach(a.addresses, function(a, b) {
                c.push({
                    attributes: a
                })
            });
            a = this._encode(f.mixin({},
                this._url.query, {
                    addresses: l.toJson({
                        records: c
                    })
                }, {
                    f: "json",
                    outSR: g && l.toJson(g.toJson())
                }));
            var h = this._geocodeAddressesHandler,
                e = this._errorHandler,
                d = new p(v._dfdCanceller);
            d._pendingDfd = q({
                url: this._url.path + "/geocodeAddresses",
                content: a,
                callbackParamName: "callback",
                load: function(a, c) {
                    h(a, c, b, k, d)
                },
                error: function(a) {
                    e(a, k, d)
                }
            });
            return d
        },
        _reverseGeocodeHandler: function(a, b, f, g, c) {
            try {
                var h = new m({
                    address: a.address,
                    location: a.location,
                    score: 100
                });
                this._successHandler([h], "onLocationToAddressComplete",
                    f, c)
            } catch (e) {
                this._errorHandler(e, g, c)
            }
        },
        locationToAddress: function(a, b, k, g) {
            a && this.normalization && (a = a.normalize());
            var c = this.outSpatialReference;
            a = this._encode(f.mixin({}, this._url.query, {
                outSR: c && l.toJson(c.toJson()),
                location: a && l.toJson(a.toJson()),
                distance: b,
                f: "json"
            }));
            var h = this._reverseGeocodeHandler,
                e = this._errorHandler,
                d = new p(v._dfdCanceller);
            d._pendingDfd = q({
                url: this._url.path + "/reverseGeocode",
                content: a,
                callbackParamName: "callback",
                load: function(a, b) {
                    h(a, b, k, g, d)
                },
                error: function(a) {
                    e(a,
                        g, d)
                }
            });
            return d
        },
        onSuggestLocationsComplete: function() {},
        onAddressToLocationsComplete: function() {},
        onAddressesToLocationsComplete: function() {},
        onLocationToAddressComplete: function() {}
    })
});
},
'esri/tasks/Task':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/json", "dojo/has", "../kernel", "../deferredUtils", "../urlUtils", "../Evented"], function(l, h, m, r, s, n, p, q) {
    return l(q, {
        declaredClass: "esri.tasks._Task",
        _eventMap: {
            error: ["error"],
            complete: ["result"]
        },
        constructor: function(a, c) {
            a && h.isString(a) && (this._url = p.urlToObject(this.url = a));
            c && c.requestOptions && (this.requestOptions = c.requestOptions);
            this.normalization = !0;
            this._errorHandler = h.hitch(this, this._errorHandler);
            this.registerConnectEvents()
        },
        _useSSL: function() {
            var a =
                this._url,
                c = /^http:/i;
            this.url && (this.url = this.url.replace(c, "https:"));
            a && a.path && (a.path = a.path.replace(c, "https:"))
        },
        _encode: function(a, c, e) {
            var d, b, g = {},
                f, k;
            for (f in a)
                if ("declaredClass" !== f && (d = a[f], b = typeof d, null !== d && void 0 !== d && "function" !== b))
                    if (h.isArray(d)) {
                        g[f] = [];
                        k = d.length;
                        for (b = 0; b < k; b++) g[f][b] = this._encode(d[b])
                    } else "object" === b ? d.toJson && (b = d.toJson(e && e[f]), "esri.tasks.FeatureSet" === d.declaredClass && b.spatialReference && (b.sr = b.spatialReference, delete b.spatialReference), g[f] = c ?
                        b : m.toJson(b)) : g[f] = d;
            return g
        },
        _successHandler: function(a, c, e, d) {
            c && this[c].apply(this, a);
            e && e.apply(null, a);
            d && n._resDfd(d, a)
        },
        _errorHandler: function(a, c, e) {
            this.onError(a);
            c && c(a);
            e && e.errback(a)
        },
        setNormalization: function(a) {
            this.normalization = a
        },
        onError: function() {}
    })
});
},
'esri/tasks/AddressCandidate':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../geometry/Point"], function(a, b, d, e, c) {
    return a(null, {
        declaredClass: "esri.tasks.AddressCandidate",
        constructor: function(a) {
            b.mixin(this, a);
            this.location = new c(this.location)
        }
    })
});
},
'esri/styles/basic':function(){
//>>built
define(["dojo/_base/array", "dojo/_base/lang", "dojo/has", "../kernel", "../Color"], function(m, p, r, s, f) {
    function n(a, b) {
        var c;
        if (a) switch (c = {}, c.color = new f(a.color), b) {
            case "point":
                c.outline = {
                    color: new f(a.outline.color),
                    width: a.outline.width
                };
                c.size = a.size;
                break;
            case "line":
                c.width = a.width;
                break;
            case "polygon":
                c.outline = {
                    color: new f(a.outline.color),
                    width: a.outline.width
                }
        }
        return c
    }

    function q(a) {
        "esriGeometryPoint" === a || "esriGeometryMultipoint" === a ? a = "point" : "esriGeometryPolyline" === a ? a = "line" : "esriGeometryPolygon" ===
            a && (a = "polygon");
        return a
    }
    var g = {
            "default": {
                name: "default",
                label: "Default",
                description: "Default theme for basic visualization of features.",
                basemapGroups: {
                    light: "streets gray topo terrain national-geographic oceans osm".split(" "),
                    dark: ["satellite", "hybrid", "dark-gray"]
                },
                pointSchemes: {
                    light: {
                        primary: {
                            color: [77, 77, 77, 1],
                            outline: {
                                color: [255, 255, 255, 1],
                                width: 1
                            },
                            size: 8
                        },
                        secondary: [{
                            color: [226, 119, 40, 1],
                            outline: {
                                color: [255, 255, 255, 1],
                                width: 1
                            },
                            size: 8
                        }, {
                            color: [255, 255, 255, 1],
                            outline: {
                                color: [51, 51, 51, 1],
                                width: 1
                            },
                            size: 8
                        }]
                    },
                    dark: {
                        primary: {
                            color: [255, 255, 255, 1],
                            outline: {
                                color: [26, 26, 26, 1],
                                width: 1
                            },
                            size: 8
                        },
                        secondary: [{
                            color: [226, 119, 40, 1],
                            outline: {
                                color: [255, 255, 255, 1],
                                width: 1
                            },
                            size: 8
                        }, {
                            color: [26, 26, 26, 1],
                            outline: {
                                color: [178, 178, 178, 1],
                                width: 1
                            },
                            size: 8
                        }]
                    }
                },
                lineSchemes: {
                    light: {
                        primary: {
                            color: [77, 77, 77, 1],
                            width: 2
                        },
                        secondary: [{
                            color: [226, 119, 40, 1],
                            width: 2
                        }, {
                            color: [255, 255, 255, 1],
                            width: 2
                        }]
                    },
                    dark: {
                        primary: {
                            color: [255, 255, 255, 1],
                            width: 2
                        },
                        secondary: [{
                            color: [226, 119, 40, 1],
                            width: 2
                        }, {
                            color: [26, 26, 26, 1],
                            width: 2
                        }]
                    }
                },
                polygonSchemes: {
                    light: {
                        primary: {
                            color: [227, 139, 79, 0.8],
                            outline: {
                                color: [255, 255, 255, 1],
                                width: 1
                            }
                        },
                        secondary: [{
                            color: [128, 128, 128, 0.8],
                            outline: {
                                color: [255, 255, 255, 1],
                                width: 1
                            }
                        }, {
                            color: [255, 255, 255, 0.8],
                            outline: {
                                color: [128, 128, 128, 1],
                                width: 1
                            }
                        }]
                    },
                    dark: {
                        primary: {
                            color: [227, 139, 79, 0.8],
                            outline: {
                                color: [51, 51, 51, 1],
                                width: 1
                            }
                        },
                        secondary: [{
                            color: [178, 178, 178, 0.8],
                            outline: {
                                color: [51, 51, 51, 1],
                                width: 1
                            }
                        }, {
                            color: [26, 26, 26, 0.8],
                            outline: {
                                color: [128, 128, 128, 1],
                                width: 1
                            }
                        }]
                    }
                }
            }
        },
        l = {};
    (function() {
        var a, b, c, d, e, f, h, k;
        for (a in g)
            for (d in b =
                g[a], c = b.basemapGroups, e = l[a] = {
                    basemaps: [].concat(c.light).concat(c.dark),
                    point: {},
                    line: {},
                    polygon: {}
                }, c) {
                f = c[d];
                for (h = 0; h < f.length; h++) k = f[h], b.pointSchemes && (e.point[k] = b.pointSchemes[d]), b.lineSchemes && (e.line[k] = b.lineSchemes[d]), b.polygonSchemes && (e.polygon[k] = b.polygonSchemes[d])
            }
    })();
    return {
        getAvailableThemes: function(a) {
            var b = [],
                c, d, e;
            for (c in g) d = g[c], e = l[c], a && -1 === m.indexOf(e.basemaps, a) || b.push({
                name: d.name,
                label: d.label,
                description: d.description,
                basemaps: e.basemaps.slice(0)
            });
            return b
        },
        getSchemes: function(a) {
            var b = a.theme,
                c = a.basemap,
                d = q(a.geometryType);
            a = l[b];
            var e;
            (a = (a = a && a[d]) && a[c]) && (e = {
                primaryScheme: n(a.primary, d),
                secondarySchemes: m.map(a.secondary, function(a) {
                    return n(a, d)
                })
            });
            return e
        },
        cloneScheme: function(a) {
            var b;
            a && (b = p.mixin({}, a), b.color && (b.color = new f(b.color)), b.outline && (b.outline = {
                color: b.outline.color && new f(b.outline.color),
                width: b.outline.width
            }));
            return b
        }
    }
});
},
'esri/layers/FeatureLayer':function(){
//>>built
define(["require", "module", "dojo/_base/declare", "dojo/_base/connect", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/json", "dojo/_base/Deferred", "dojo/date/locale", "dojo/sniff", "dojo/io-query", "dojo/dom-construct", "dojo/i18n", "dojo/when", "dojo/promise/all", "../kernel", "../lang", "../request", "../config", "../deferredUtils", "../SpatialReference", "../symbols/SimpleMarkerSymbol", "../symbols/SimpleLineSymbol", "../symbols/SimpleFillSymbol", "../symbols/jsonUtils", "../renderers/SimpleRenderer", "../renderers/UniqueValueRenderer", "../renderers/jsonUtils", "../tasks/QueryTask", "../tasks/query", "../tasks/FeatureSet", "../tasks/StatisticDefinition", "../geometry/Extent", "../geometry/jsonUtils", "../geometry/normalizeUtils", "../geometry/scaleUtils", "./GraphicsLayer", "./Field", "./TimeInfo", "./FeatureType", "./FeatureTemplate", "./FeatureEditResult", "./LabelClass", "./SnapshotMode", "./OnDemandMode", "./SelectionMode", "./StreamMode", "./TrackManager", "./HeatmapManager", "dojo/i18n!../nls/jsapi", "require"], function(M, S, T, C, q, h, F, u, U, I, V, W, ua, N, X, G, r, D, Y, B, J, Z, $, O, aa, P, ba, ca, da, K, H, ea, Q, fa, ga, ha, ia, ja, ka, la, ma, E, na, L, oa, pa, qa, ra, R, sa) {
    var ta = Y.defaults,
        t = T(ia, {
            declaredClass: "esri.layers.FeatureLayer",
            invalidParams: "query contains one or more unsupported parameters",
            reHostedFS: /https?:\/\/services.*\.arcgis\.com/i,
            maxPointCountForAuto: 4E3,
            maxRecordCountForAuto: 2E3,
            maxVertexCountForAuto: 25E4,
            generalizeForScale: 4E3,
            _eventMap: {
                "add-attachment-complete": ["result"],
                "before-apply-edits": ["adds", "updates", "deletes"],
                "delete-attachments-complete": ["results"],
                "edits-complete": ["adds", "updates", "deletes"],
                "query-attachment-infos-complete": ["results"],
                "query-count-complete": ["count"],
                "query-features-complete": ["featureSet"],
                "query-ids-complete": ["objectIds"],
                "query-related-features-complete": ["featureSets"],
                "selection-complete": ["features", "method"],
                "update-end": ["error", "info"]
            },
            constructor: function(a, b) {
                this._preventInit || this._initFeatureLayer(a, b)
            },
            _initFeatureLayer: function(a, b) {
                this.i18n = sa;
                b = b || {};
                this.showLabels =
                    null != b.showLabels ? b.showLabels : !0;
                this._outFields = b.outFields;
                this._defnExpr = b.definitionExpression;
                this._loadCallback = b.loadCallback;
                var c = b._usePatch;
                this._usePatch = null === c || void 0 === c ? !0 : c;
                this._trackIdField = b.trackIdField;
                this.objectIdField = b.objectIdField;
                this._maxOffset = null != b.maxAllowableOffset ? b.maxAllowableOffset : this.maxAllowableOffset;
                this.quantize = null != b.quantize ? b.quantize : !0;
                this._optEditable = b.editable;
                this._optAutoGen = b.autoGeneralize;
                this.editSummaryCallback = b.editSummaryCallback;
                this.userId = b.userId;
                this.userIsAdmin = b.userIsAdmin;
                this.useMapTime = b.hasOwnProperty("useMapTime") ? !!b.useMapTime : !0;
                this.source = b.source;
                this.gdbVersion = b.gdbVersion;
                this.orderByFields = b.orderByFields;
                this.maxPointCountForAuto = null != b.maxPointCountForAuto ? b.maxPointCountForAuto : this.maxPointCountForAuto;
                this.maxRecordCountForAuto = null != b.maxRecordCountForAuto ? b.maxRecordCountForAuto : this.maxRecordCountForAuto;
                this.maxVertexCountForAuto = null != b.maxVertexCountForAuto ? b.maxVertexCountForAuto : this.maxVertexCountForAuto;
                this.generalizeForScale = null != b.generalizeForScale ? b.generalizeForScale : this.generalizeForScale;
                this.queryPagination = null != b.queryPagination ? b.queryPagination : this.url ? this.reHostedFS.test(this.url) : !1;
                this.multipatchOption = b.multipatchOption;
                this._selectedFeatures = {};
                this._selectedFeaturesArr = [];
                this._newFeatures = [];
                this._deletedFeatures = {};
                this._ulid = this._getUniqueId();
                var d = t,
                    c = this.mode = r.isDefined(b.mode) ? b.mode : d.MODE_ONDEMAND;
                this._isStream && (this.mode = c = d.MODE_STREAM);
                switch (c) {
                    case d.MODE_SNAPSHOT:
                        this.currentMode =
                            d.MODE_SNAPSHOT;
                        this._mode = new L(this);
                        this._isSnapshot = !0;
                        break;
                    case d.MODE_ONDEMAND:
                    case d.MODE_AUTO:
                        this.currentMode = d.MODE_ONDEMAND;
                        this._tileWidth = b.tileWidth || 512;
                        this._tileHeight = b.tileHeight || 512;
                        this._mode = new oa(this);
                        this.latticeTiling = b.latticeTiling;
                        break;
                    case d.MODE_SELECTION:
                        this.currentMode = d.MODE_SELECTION;
                        this._mode = new pa(this);
                        this._isSelOnly = !0;
                        break;
                    case d.MODE_STREAM:
                        this.currentMode = d.MODE_STREAM, this._mode = new qa(this), this._isStream = !0
                }
                this._initLayer = q.hitch(this, this._initLayer);
                this._selectHandler = q.hitch(this, this._selectHandler);
                this._editable = !1;
                if (q.isObject(a) && a.layerDefinition) return this._collection = !0, this.mode = this._isStream ? d.MODE_STREAM : d.MODE_SNAPSHOT, this._initLayer(a), this;
                this._task = new da(this.url, {
                    source: this.source,
                    gdbVersion: this.gdbVersion
                });
                c = this._url.path;
                this._fserver = !1; - 1 !== c.search(/\/FeatureServer\//i) && (this._fserver = !0);
                this.mode === d.MODE_AUTO && this.reHostedFS.test(this.url) && this._queryLimit();
                (d = b.resourceInfo) ? this._initLayer(d): (this.source &&
                    (d = {
                        source: this.source.toJson()
                    }, this._url.query = q.mixin(this._url.query, {
                        layer: F.toJson(d)
                    })), this.gdbVersion && (this._url.query = q.mixin(this._url.query, {
                        gdbVersion: this.gdbVersion
                    })), D({
                        url: c,
                        content: q.mixin({
                            f: "json"
                        }, this._url.query),
                        callbackParamName: "callback",
                        load: this._initLayer,
                        error: this._errorHandler
                    }));
                this.registerConnectEvents()
            },
            _initLayer: function(a, b) {
                if (a || b) {
                    this._json = a;
                    this._findCredential();
                    if (this.credential && this.credential.ssl || a && a._ssl) this._useSSL(), this._task._useSSL();
                    this._collection && (this._isStream || (this.currentMode = t.MODE_SNAPSHOT, this._mode = new L(this)), this._isSnapshot = !0, this._featureSet = a.featureSet, this._nextId = a.nextObjectId, a = a.layerDefinition);
                    this.geometryType = a.geometryType;
                    "string" !== typeof this.multipatchOption && "esriGeometryMultiPatch" === this.geometryType && (this.multipatchOption = "xyFootprint");
                    if (a.hasOwnProperty("capabilities")) {
                        var c = this.capabilities = a.capabilities;
                        c && -1 !== c.toLowerCase().indexOf("editing") ? this._editable = !0 : this._editable = !1
                    } else this._collection || (this._editable = this._fserver);
                    r.isDefined(this._optEditable) ? (this._editable = this._optEditable, delete this._optEditable) : "esriGeometryMultiPatch" === this.geometryType && (this._editable = !1);
                    this._json = F.toJson(this._json);
                    if (this.isEditable()) this._setMaxOffset(null);
                    else if (this.currentMode !== t.MODE_SNAPSHOT && ("esriGeometryPolyline" === this.geometryType || "esriGeometryPolygon" === this.geometryType || this.hasXYFootprint())) this._autoGeneralize = r.isDefined(this._optAutoGen) ? this._optAutoGen :
                        this.currentMode === t.MODE_ONDEMAND, delete this._optAutoGen;
                    var c = a.effectiveMinScale || a.minScale,
                        d = a.effectiveMaxScale || a.maxScale;
                    !this._hasMin && c && this.setMinScale(c);
                    !this._hasMax && d && this.setMaxScale(d);
                    this.layerId = a.id;
                    this.name = a.name;
                    this.description = a.description;
                    this.copyright = a.copyrightText;
                    this.type = a.type;
                    this.displayField = a.displayField;
                    this.defaultDefinitionExpression = a.definitionExpression;
                    this.fullExtent = new Q(a.extent);
                    this.initialExtent = new Q(this.fullExtent.toJson());
                    this.fullExtent.spatialReference &&
                        (this.spatialReference = new J(this.fullExtent.spatialReference.toJson()));
                    this.defaultVisibility = a.defaultVisibility;
                    if ("esriGeometryPoint" === this.geometryType || "esriGeometryMultipoint" === this.geometryType) this.latticeTiling = !1;
                    this.indexedFields = a.indexedFields;
                    this.maxRecordCount = a.maxRecordCount;
                    this.canModifyLayer = a.canModifyLayer;
                    this.supportsStatistics = a.supportsStatistics;
                    this.supportsAdvancedQueries = this._collection ? !1 : a.supportsAdvancedQueries;
                    this.supportsCalculate = a.supportsCalculate;
                    this.supportsAttachmentsByUploadId =
                        a.supportsAttachmentsByUploadId;
                    this.supportsCoordinatesQuantization = a.supportsCoordinatesQuantization;
                    this.quantize = this.quantize && this.supportsCoordinatesQuantization;
                    this.hasLabels = a.hasLabels;
                    this.canScaleSymbols = a.canScaleSymbols;
                    this.supportsRollbackOnFailureParameter = this.supportsRollbackOnFailure = a.supportsRollbackOnFailure;
                    this.syncCanReturnChanges = a.syncCanReturnChanges;
                    this.isDataVersioned = a.isDataVersioned;
                    this.editFieldsInfo = a.editFieldsInfo;
                    this.ownershipBasedAccessControlForFeatures =
                        a.ownershipBasedAccessControlForFeatures;
                    this.editFieldsInfo && this.ownershipBasedAccessControlForFeatures && (this.creatorField = this.editFieldsInfo.creatorField);
                    this.relationships = a.relationships;
                    this.allowGeometryUpdates = r.isDefined(a.allowGeometryUpdates) ? a.allowGeometryUpdates : !0;
                    this.advancedQueryCapabilities = a.advancedQueryCapabilities || {
                        supportsStatistics: this.supportsStatistics,
                        supportsOrderBy: this.supportsAdvancedQueries,
                        supportsDistinct: this.supportsAdvancedQueries
                    };
                    this._setMaxOffset(this._maxOffset, !0);
                    this._isTable = "Table" === this.type;
                    for (var e = this.fields = [], d = a.fields, c = 0; c < d.length; c++) e.push(new ja(d[c]));
                    if (!this.objectIdField) {
                        this.objectIdField = a.objectIdField;
                        if (!this.objectIdField) {
                            d = a.fields;
                            for (c = 0; c < d.length; c++)
                                if (e = d[c], "esriFieldTypeOID" === e.type) {
                                    this.objectIdField = e.name;
                                    break
                                }
                        }!this.objectIdField && !this._isStream && console.debug("esri.layers.FeatureLayer: " + r.substitute({
                            url: this.url
                        }, "objectIdField is not set [url: ${url}]"))
                    }
                    if (!r.isDefined(this._nextId)) {
                        d = this.objectIdField;
                        e = -1;
                        if (this._collection && d)
                            for (var f = (c = this._featureSet) && c.features, k = f ? f.length : 0, g, c = 0; c < k; c++) g = (g = f[c].attributes) && g[d], g > e && (e = g);
                        this._nextId = e + 1
                    }
                    this.globalIdField = a.globalIdField;
                    if (c = this.typeIdField = a.typeIdField)
                        if (c = !this._getField(c) && this._getField(c, !0)) this.typeIdField = c.name;
                    this.visibilityField = a.visibilityField;
                    if (d = a.defaultSymbol) this.defaultSymbol = aa.fromJson(d);
                    var l = this.types = [],
                        m = a.types,
                        n, s, e = (c = this.editFieldsInfo) && c.creatorField,
                        f = c && c.editorField;
                    g = e || f;
                    k = [];
                    if (m)
                        for (c =
                            0; c < m.length; c++) n = new la(m[c]), s = n.templates, g && (s && s.length) && (k = k.concat(s)), l.push(n);
                    m = a.templates;
                    n = this.templates = [];
                    if (m)
                        for (c = 0; c < m.length; c++) l = new ma(m[c]), g && k.push(l), n.push(l);
                    for (c = 0; c < k.length; c++)
                        if (g = q.getObject("prototype.attributes", !1, k[c])) e && delete g[e], f && delete g[f];
                    if (c = a.timeInfo) this.timeInfo = new ka(c), this._startTimeField = c.startTimeField, this._endTimeField = c.endTimeField, this._startTimeField && this._endTimeField && (this._twoTimeFields = !0), this._trackIdField ? c.trackIdField =
                        this._trackIdField : this._trackIdField = c.trackIdField;
                    this.hasAttachments = !this._collection && a.hasAttachments ? !0 : !1;
                    this.htmlPopupType = a.htmlPopupType;
                    var c = a.drawingInfo,
                        p;
                    if ((e = c && c.labelingInfo) && !this.labelingInfo) this.labelingInfo = h.map(e, function(a) {
                        return new na(a)
                    }), this._fixLabelExpr();
                    if (!this.renderer)
                        if (c && c.renderer) {
                            if (p = c.renderer, this.setRenderer(ca.fromJson(p)), "classBreaks" === p.type && this.renderer.setMaxInclusive(!0), !this._collection) {
                                var v = p.type,
                                    d = [];
                                p = this.renderer;
                                switch (v) {
                                    case "simple":
                                        d.push(p.symbol);
                                        break;
                                    case "uniqueValue":
                                    case "classBreaks":
                                        d.push(p.defaultSymbol), d = d.concat(h.map(p.infos, function(a) {
                                            return a.symbol
                                        }))
                                }
                                var d = h.filter(d, r.isDefined),
                                    w = this._url.path + "/images/",
                                    y = this._getToken();
                                h.forEach(d, function(a) {
                                    var b = a.url;
                                    b && (-1 === b.search(/https?\:/) && -1 === b.indexOf("data:") && (a.url = w + b), y && -1 !== a.url.search(/https?\:/) && (a.url += "?token\x3d" + y))
                                })
                            }
                        } else if (d) m = this.types, 0 < m.length ? (p = new ba(this.defaultSymbol, this.typeIdField), h.forEach(m, function(a) {
                            p.addValue(a.id, a.symbol)
                        })) :
                        p = new P(this.defaultSymbol), this.setRenderer(p);
                    else if (!this._isTable) {
                        switch (this.geometryType) {
                            case "esriGeometryPoint":
                            case "esriGeometryMultipoint":
                                v = new Z;
                                break;
                            case "esriGeometryPolyline":
                                v = new $;
                                break;
                            case "esriGeometryPolygon":
                                v = new O;
                                break;
                            default:
                                this.hasXYFootprint() && (v = new O)
                        }
                        this.setRenderer(v ? new P(v) : null)
                    }
                    v = c && c.transparency || 0;
                    !this.hasOwnProperty("opacity") && 0 < v && (this.opacity = 1 - v / 100);
                    this.version = a.currentVersion;
                    this.version || (this.version = "capabilities" in a || "drawingInfo" in
                        a || "hasAttachments" in a || "htmlPopupType" in a || "relationships" in a || "timeInfo" in a || "typeIdField" in a || "types" in a ? 10 : 9.3);
                    if ((I("ie") || 7 <= I("trident") || I("safari")) && this.isEditable() && 10.02 > this.version) this._ts = !0;
                    this.statistics = a.statistics;
                    this._fixRendererFields();
                    this._checkFields();
                    this._updateCaps();
                    var x = function() {
                        this.currentMode !== t.MODE_SNAPSHOT && (this.queryPagination = !1);
                        this.loaded = !0;
                        this.onLoad(this);
                        var a = this._loadCallback;
                        a && (delete this._loadCallback, a(this))
                    };
                    this._collection ?
                        (v = this._featureSet, this._featureSet = null, this._mode._drawFeatures(new H(v)), this._fcAdded = !0, x.call(this)) : this._forceIdentity(this._limitPromise ? function() {
                            var a = this;
                            this._limitPromise.then(function(b) {
                                a._checkMode(b)
                            });
                            this._limitPromise.always(function() {
                                a._limitPromise = null;
                                x.call(a)
                            })
                        } : x)
                }
            },
            setShowLabels: function(a) {
                this.showLabels = a;
                this.onShowLabelsChange()
            },
            onShowLabelsChange: function() {},
            onRendererChange: function(a) {
                this.inherited(arguments);
                var b = this._map;
                this._ager = !(!a || !a.observationAger ||
                    !a.observationRenderer);
                a && "colors" in a && "blurRadius" in a && "maxPixelIntensity" in a ? "esriGeometryPoint" == this.geometryType && (!this._heatmapManager && b) && (this._heatmapManager = new R(this), this._heatmapManager.initialize(b)) : this.renderer && this.renderer.getRendererInfo ? h.some(this.renderer.rendererInfos, function(a) {
                    return a.renderer && "colors" in a.renderer && "blurRadius" in a.renderer
                }) || (this._heatmapManager = null) : this._heatmapManager = null;
                if (a) {
                    var c = [],
                        b = h.filter([a, a.observationRenderer, a.latestObservationRenderer,
                            a.trackRenderer
                        ], r.isDefined),
                        d = function(a) {
                            return null != a && "function" != typeof a && a
                        };
                    h.forEach(b, function(a) {
                        var b = d(a.attributeField),
                            k = d(a.attributeField2);
                        a = d(a.attributeField3);
                        !1 !== b && c.push(b);
                        !1 !== k && c.push(k);
                        !1 !== a && c.push(a)
                    });
                    this._rendererFields = c
                } else this._rendererFields = [];
                this.loaded && (this._fixRendererFields(), this._checkFields(this._rendererFields), this._collection && (this._typesDirty = !0))
            },
            redraw: function() {
                this.inherited(arguments);
                this._trackManager && this._trackManager.container &&
                    this._trackManager.container.redraw()
            },
            _evalSDRenderer: function() {
                this.inherited(arguments);
                var a = this._getRenderer();
                this._ager = !(!a || !a.observationAger || !a.observationRenderer);
                this._trackManager && this._trackManager.container && this._trackManager.container.setRenderer(a && a.trackRenderer)
            },
            _setMap: function(a) {
                var b = this.inherited(arguments),
                    c = this._mode,
                    d = this;
                c && c.initialize(a);
                this.geometryType && this.attr("data-geometry-type", this.geometryType.replace(/esriGeometry/i, "").toLowerCase());
                this._addHandle =
                    this.on("graphic-node-add", function(a) {
                        a = a.graphic.attributes;
                        (a = d._selectedFeatures[a && a[d.objectIdField]]) && a.attr("data-selected", "")
                    });
                return b
            },
            _unsetMap: function(a) {
                var b = this._mode;
                b && b.suspend();
                this._trackManager && (this._trackManager.destroy(), this._trackManager = null);
                C.disconnect(this._zoomConnect);
                C.disconnect(this._addHandle);
                this._zoomConnect = this._addHandle = null;
                this._toggleTime(!1);
                this.inherited("_unsetMap", arguments)
            },
            refresh: function() {
                var a = this._mode;
                a && a.refresh()
            },
            hasXYFootprint: function() {
                return "esriGeometryMultiPatch" ===
                    this.geometryType && "xyFootprint" === this.multipatchOption
            },
            getOutFields: function() {
                return h.filter(this._getOutFields(), function(a) {
                    return "*" === a || !!this._getField(a)
                }, this)
            },
            getField: function(a) {
                return this._getField(a, !0)
            },
            getDomain: function(a, b) {
                var c, d, e = b && b.feature,
                    f = e && this.typeIdField && e.attributes && e.attributes[this.typeIdField];
                null != f && h.some(this.types, function(b) {
                    if (b.id == f) {
                        if ((c = b.domains && b.domains[a]) && "inherited" === c.type) c = this._getLayerDomain(a), d = !0;
                        return !0
                    }
                    return !1
                }, this);
                !d &&
                    !c && (c = this._getLayerDomain(a));
                return c
            },
            _getLayerDomain: function(a) {
                var b;
                h.some(this.fields, function(c) {
                    c.name === a && (b = c.domain);
                    return !!b
                });
                return b
            },
            getType: function(a) {
                var b, c = a && this.typeIdField && a.attributes && a.attributes[this.typeIdField];
                h.some(this.types, function(a) {
                    a.id == c && (b = a);
                    return !!b
                });
                return b
            },
            setEditable: function(a) {
                if (!this._collection) return console.log("FeatureLayer:setEditable - this functionality is not yet supported for layer in a feature service"), this;
                if (!this.loaded) return this._optEditable =
                    a, this;
                var b = this._editable;
                this._editable = a;
                this._updateCaps();
                if (b !== a) this.onCapabilitiesChange();
                return this
            },
            getEditCapabilities: function(a) {
                var b = {
                    canCreate: !1,
                    canUpdate: !1,
                    canDelete: !1
                };
                if (!this.loaded || !this.isEditable()) return b;
                var c = a && a.feature;
                a = a && a.userId;
                var d = h.map(this.capabilities ? this.capabilities.toLowerCase().split(",") : [], q.trim),
                    e = -1 < h.indexOf(d, "editing"),
                    f = e && -1 < h.indexOf(d, "create"),
                    b = e && -1 < h.indexOf(d, "update"),
                    d = e && -1 < h.indexOf(d, "delete"),
                    k = this.ownershipBasedAccessControlForFeatures,
                    g = this.editFieldsInfo,
                    l = g && g.creatorField,
                    g = g && g.realm,
                    c = (c = c && c.attributes) && l ? c[l] : void 0,
                    m = !!this.userIsAdmin,
                    l = !k || m || !(!k.allowOthersToUpdate && !k.allowUpdateToOthers),
                    k = !k || m || !(!k.allowOthersToDelete && !k.allowDeleteToOthers);
                if (m || e && !f && !b && !d) f = b = d = !0;
                e = {
                    canCreate: f,
                    canUpdate: b,
                    canDelete: d
                };
                null === c ? (e.canUpdate = b && l, e.canDelete = d && k) : "" !== c && c && ((a = a || this.getUserId()) && g && (a = a + "@" + g), a.toLowerCase() !== c.toLowerCase() && (e.canUpdate = b && l, e.canDelete = d && k));
                return e
            },
            getUserId: function() {
                var a;
                this.loaded && (a = this.credential && this.credential.userId || this.userId || "");
                return a
            },
            setUserIsAdmin: function(a) {
                this.userIsAdmin = a
            },
            setEditSummaryCallback: function(a) {
                this.editSummaryCallback = a
            },
            getEditSummary: function(a, b, c) {
                c = r.isDefined(c) ? c : (new Date).getTime();
                var d = "";
                c = this.getEditInfo(a, b, c);
                (b = b && b.callback || this.editSummaryCallback) && (c = b(a, c) || "");
                if (q.isString(c)) d = c;
                else {
                    if (c) {
                        a = c.action;
                        b = c.userId;
                        var e = c.timeValue,
                            f = 0;
                        a && f++;
                        b && f++;
                        r.isDefined(e) && f++;
                        1 < f && (d = ("edit" === a ? "edit" : "create") +
                            (b ? "User" : "") + (r.isDefined(e) ? c.displayPattern : ""))
                    }
                    d = d && r.substitute(c, this.i18n.layers.FeatureLayer[d])
                }
                return d
            },
            getEditInfo: function(a, b, c) {
                if (this.loaded) {
                    c = r.isDefined(c) ? c : (new Date).getTime();
                    b = b && b.action || "last";
                    var d = this.editFieldsInfo,
                        e = d && d.creatorField,
                        f = d && d.creationDateField,
                        k = d && d.editorField,
                        d = d && d.editDateField,
                        k = (a = a && a.attributes) && k ? a[k] : void 0,
                        d = a && d ? a[d] : null,
                        e = this._getEditData(a && e ? a[e] : void 0, a && f ? a[f] : null, c);
                    c = this._getEditData(k, d, c);
                    var g;
                    switch (b) {
                        case "creation":
                            g =
                                e;
                            break;
                        case "edit":
                            g = c;
                            break;
                        case "last":
                            g = c || e
                    }
                    g && (g.action = g === c ? "edit" : "creation");
                    return g
                }
            },
            _getEditData: function(a, b, c) {
                var d, e, f;
                r.isDefined(b) && (e = c - b, f = 0 > e ? "Full" : 6E4 > e ? "Seconds" : 12E4 > e ? "Minute" : 36E5 > e ? "Minutes" : 72E5 > e ? "Hour" : 864E5 > e ? "Hours" : 6048E5 > e ? "WeekDay" : "Full");
                if (void 0 !== a || f) d = d || {}, d.userId = a, f && (a = U.format, c = new Date(b), d.minutes = Math.floor(e / 6E4), d.hours = Math.floor(e / 36E5), d.weekDay = a(c, {
                        datePattern: "EEEE",
                        selector: "date"
                    }), d.formattedDate = a(c, {
                        selector: "date"
                    }), d.formattedTime =
                    a(c, {
                        selector: "time"
                    }), d.displayPattern = f, d.timeValue = b);
                return d
            },
            isEditable: function() {
                return !(!this._editable && !this.userIsAdmin)
            },
            setMaxAllowableOffset: function(a) {
                this.isEditable() || this._setMaxOffset(a, !0);
                return this
            },
            getMaxAllowableOffset: function() {
                var a = this._quantizationParameters ? this._quantizationParameters.tolerance : void 0;
                return null != this._maxOffset ? this._maxOffset : a
            },
            _setMaxOffset: function(a, b) {
                if (null == a) return delete this._maxOffset, delete this._quantizationParameters, this;
                this.quantize &&
                    this.supportsCoordinatesQuantization ? ("esriGeometryPolyline" === this.geometryType ? this._maxOffset = a : delete this._maxOffset, this._quantizationParameters = {
                        mode: "view",
                        originPosition: "upperLeft",
                        tolerance: a,
                        extent: this.fullExtent
                    }) : (b || (a = Math.floor(a)), this._maxOffset = a, delete this._quantizationParameters);
                return this
            },
            setAutoGeneralize: function(a) {
                if (this.loaded) {
                    if (!this.isEditable() && this.currentMode !== t.MODE_SNAPSHOT && ("esriGeometryPolyline" === this.geometryType || "esriGeometryPolygon" === this.geometryType ||
                            this.hasXYFootprint()))(this._autoGeneralize = a) ? (a = this._map) && a.loaded && this._setMaxOffset(a.extent.getWidth() / a.width) : this._setMaxOffset(null)
                } else this._optAutoGen = a;
                return this
            },
            setGDBVersion: function(a) {
                if (!this._collection && a !== this.gdbVersion && (a || this.gdbVersion)) this.gdbVersion = a, this._task.gdbVersion = a, this._url.query = q.mixin(this._url.query, {
                    gdbVersion: a
                }), this.loaded && (this.clearSelection(), this._map && this.refresh()), this.onGDBVersionChange();
                return this
            },
            setDefinitionExpression: function(a) {
                this._defnExpr =
                    a;
                (a = this._mode) && a.propertyChangeHandler(1);
                return this
            },
            getDefinitionExpression: function() {
                return this._defnExpr
            },
            setTimeDefinition: function(a) {
                this._isSnapshot ? (this._timeDefn = a, (a = this._mode) && a.propertyChangeHandler(2)) : console.log("FeatureLayer.setTimeDefinition: layer in on-demand or selection mode does not support time definitions. Layer id \x3d " + this.id + ", Layer URL \x3d " + this.url);
                return this
            },
            getTimeDefinition: function() {
                return this._timeDefn
            },
            setTimeOffset: function(a, b) {
                this._timeOffset =
                    a;
                this._timeOffsetUnits = b;
                var c = this._mode;
                c && c.propertyChangeHandler(0);
                return this
            },
            setUseMapTime: function(a) {
                this.useMapTime = a;
                this._toggleTime(!this.suspended);
                (a = this._mode) && a.propertyChangeHandler(0)
            },
            selectFeatures: function(a, b, c, d) {
                b = b || t.SELECTION_NEW;
                a = this._getShallowClone(a);
                var e = this._map,
                    f, k = this,
                    g = B._fixDfd(new u(B._dfdCanceller));
                a.outFields = this.getOutFields();
                a.returnGeometry = !0;
                a.multipatchOption = this.multipatchOption;
                e && (a.outSpatialReference = new J(e.spatialReference.toJson()));
                if (!this._applyQueryFilters(a, !0)) return f = {
                    features: []
                }, this._selectHandler(f, b, c, d, g), g;
                if (e = this._canDoClientSideQuery(a)) g._pendingDfd = N(this._doQuery(a, e)), g._pendingDfd.then(function(a) {
                    f = {
                        features: a
                    };
                    k._selectHandler(f, b, c, d, g)
                });
                else {
                    if (this._collection) return this._resolve([Error("FeatureLayer::selectFeatures - " + this.invalidParams)], null, d, g, !0), g;
                    var l = this;
                    this._ts && (a._ts = (new Date).getTime());
                    (g._pendingDfd = this._task.execute(a)).addCallbacks(function(a) {
                            l._selectHandler(a, b, c, d, g)
                        },
                        function(a) {
                            l._resolve([a], null, d, g, !0)
                        })
                }
                return g
            },
            getSelectedFeatures: function() {
                var a = this._selectedFeatures,
                    b = [],
                    c;
                for (c in a) a.hasOwnProperty(c) && b.push(a[c]);
                return b
            },
            clearSelection: function(a) {
                var b = this._selectedFeatures,
                    c = this._mode,
                    d;
                for (d in b) b.hasOwnProperty(d) && (this._unSelectFeatureIIf(d, c), c._removeFeatureIIf(d));
                this._selectedFeatures = {};
                this._isSelOnly && c._applyTimeFilter(!0);
                if (!a) this.onSelectionClear();
                return this
            },
            setSelectionSymbol: function(a) {
                if (this._selectionSymbol = a) {
                    var b =
                        this._selectedFeatures,
                        c;
                    for (c in b) b.hasOwnProperty(c) && b[c].setSymbol(a)
                }
                return this
            },
            getSelectionSymbol: function() {
                return this._selectionSymbol
            },
            setLabelingInfo: function(a) {
                a ? (this.labelingInfo = a, this._fixLabelExpr()) : delete this.labelingInfo;
                this._collection && (this._typesDirty = !0);
                this.onLabelingInfoChange()
            },
            _fixLabelExpr: function() {
                var a = /\[([^\[\]]+)\]/ig,
                    b, c = this,
                    d = function(a, b) {
                        var d = c._getField(b, !0);
                        return "[" + (d && d.name || b) + "]"
                    };
                h.forEach(this.labelingInfo, function(c) {
                    if (b = c.labelExpression) c.labelExpression =
                        b.replace(a, d)
                })
            },
            __msigns: [{
                n: "applyEdits",
                c: 5,
                a: [{
                    i: 0
                }, {
                    i: 1
                }],
                e: 4,
                f: 1
            }],
            applyEdits: function(a, b, c, d, e, f) {
                var k = f.assembly,
                    g = f.dfd;
                this._applyNormalized(a, k && k[0]);
                this._applyNormalized(b, k && k[1]);
                this.onBeforeApplyEdits(a, b, c);
                var l = {},
                    m = this.objectIdField,
                    k = {
                        f: "json"
                    },
                    n = !1;
                if (this._collection) f = {}, f.addResults = a ? h.map(a, function() {
                        n = !0;
                        return {
                            objectId: this._nextId++,
                            success: !0
                        }
                    }, this) : null, f.updateResults = b ? h.map(b, function(a) {
                        n = !0;
                        var b = a.attributes[m];
                        l[b] = a;
                        return {
                            objectId: b,
                            success: !0
                        }
                    }, this) :
                    null, f.deleteResults = c ? h.map(c, function(a) {
                        n = !0;
                        return {
                            objectId: a.attributes[m],
                            success: !0
                        }
                    }, this) : null, n ? this._editHandler(f, a, l, d, e, g) : this._resolve([f.addResults, f.updateResults, f.deleteResults], null, d, g);
                else {
                    a && 0 < a.length && (k.adds = this._convertFeaturesToJson(a, 0, 1), n = !0);
                    if (b && 0 < b.length) {
                        for (f = 0; f < b.length; f++) {
                            var s = b[f];
                            l[s.attributes[m]] = s
                        }
                        k.updates = this._convertFeaturesToJson(b, 0, 0, 1);
                        n = !0
                    }
                    if (c && 0 < c.length) {
                        b = [];
                        for (f = 0; f < c.length; f++) b.push(c[f].attributes[m]);
                        k.deletes = b.join(",");
                        n = !0
                    }
                    if (n) {
                        var p =
                            this;
                        return D({
                            url: this._url.path + "/applyEdits",
                            content: q.mixin(k, this._url.query),
                            callbackParamName: "callback",
                            load: function(b) {
                                p._editHandler(b, a, l, d, e, g)
                            },
                            error: function(a) {
                                p._resolve([a], null, e, g, !0)
                            }
                        }, {
                            usePost: !0
                        })
                    }
                    this._resolve([], null, d, g)
                }
            },
            queryFeatures: function(a, b, c) {
                return this._query("execute", "onQueryFeaturesComplete", a, b, c)
            },
            queryRelatedFeatures: function(a, b, c) {
                return this._query("executeRelationshipQuery", "onQueryRelatedFeaturesComplete", a, b, c)
            },
            queryIds: function(a, b, c) {
                return this._query("executeForIds",
                    "onQueryIdsComplete", a, b, c)
            },
            queryCount: function(a, b, c) {
                return this._query("executeForCount", "onQueryCountComplete", a, b, c)
            },
            queryExtent: function(a, b, c) {
                return this._query("executeForExtent", "onQueryExtentComplete", a, b, c)
            },
            queryAttachmentInfos: function(a, b, c) {
                var d = this._url.path + "/" + a + "/attachments",
                    e = new u(B._dfdCanceller),
                    f = this;
                e._pendingDfd = D({
                    url: d,
                    content: q.mixin({
                        f: "json"
                    }, this._url.query),
                    callbackParamName: "callback",
                    load: function(c) {
                        c = c.attachmentInfos;
                        var g;
                        h.forEach(c, function(b) {
                            g = V.objectToQuery({
                                gdbVersion: f._url.query &&
                                    f._url.query.gdbVersion,
                                layer: f._url.query && f._url.query.layer,
                                token: f._getToken()
                            });
                            b.url = d + "/" + b.id + (g ? "?" + g : "");
                            b.objectId = a
                        });
                        f._resolve([c], "onQueryAttachmentInfosComplete", b, e)
                    },
                    error: function(a) {
                        f._resolve([a], null, c, e, !0)
                    }
                });
                return e
            },
            addAttachment: function(a, b, c, d) {
                return this._sendAttachment("add", a, b, c, d)
            },
            updateAttachment: function(a, b, c, d, e) {
                c.appendChild(W.create("input", {
                    type: "hidden",
                    name: "attachmentId",
                    value: b
                }));
                return this._sendAttachment("update", a, c, d, e)
            },
            deleteAttachments: function(a,
                b, c, d) {
                var e = this._url.path + "/" + a + "/deleteAttachments",
                    f = new u(B._dfdCanceller),
                    k = this;
                b = {
                    f: "json",
                    attachmentIds: b.join(",")
                };
                f._pendingDfd = D({
                    url: e,
                    content: q.mixin(b, this._url.query),
                    callbackParamName: "callback",
                    load: q.hitch(this, function(b) {
                        b = b.deleteAttachmentResults;
                        b = h.map(b, function(b) {
                            b = new E(b);
                            b.attachmentId = b.objectId;
                            b.objectId = a;
                            return b
                        });
                        k._resolve([b], "onDeleteAttachmentsComplete", c, f)
                    }),
                    error: function(a) {
                        k._resolve([a], null, d, f, !0)
                    }
                }, {
                    usePost: !0
                });
                return f
            },
            addType: function(a) {
                var b =
                    this.types;
                if (b) {
                    if (h.some(b, function(b) {
                            return b.id == a.id ? !0 : !1
                        })) return !1;
                    b.push(a)
                } else this.types = [a];
                return this._typesDirty = !0
            },
            deleteType: function(a) {
                if (this._collection) {
                    var b = this.types;
                    if (b) {
                        var c = -1;
                        h.some(b, function(b, e) {
                            return b.id == a ? (c = e, !0) : !1
                        });
                        if (-1 < c) return this._typesDirty = !0, b.splice(c, 1)[0]
                    }
                }
            },
            toJson: function() {
                var a = this._json;
                if (a = q.isString(a) ? F.fromJson(a) : q.clone(a)) {
                    var a = a.layerDefinition ? a : {
                            layerDefinition: a
                        },
                        b = a.layerDefinition,
                        c = this._collection;
                    if (c && this._typesDirty) {
                        b.types =
                            h.map(this.types || [], function(a) {
                                return a.toJson()
                            });
                        var d = this.renderer,
                            e = this.labelingInfo,
                            f = b.drawingInfo;
                        if ((d || e) && !f) f = b.drawingInfo = {};
                        f && (d && -1 === d.declaredClass.indexOf("TemporalRenderer")) && (f.renderer = d.toJson());
                        e && (f.labelingInfo = h.map(e, function(a) {
                            return a.toJson()
                        }))
                    }
                    d = null;
                    if (!c || this._fcAdded) d = {
                        geometryType: b.geometryType,
                        features: this._convertFeaturesToJson(this.graphics, !0)
                    };
                    a.featureSet = q.mixin({}, a.featureSet || {}, d);
                    a.featureSet.transform && (e = a.featureSet.transform, delete a.featureSet.transform,
                        d = new H(a.featureSet), d.quantize(e), a.featureSet = d.toJson());
                    c && (a.nextObjectId = this._nextId, b.capabilities = this.capabilities);
                    return a
                }
            },
            onSelectionComplete: function() {},
            onSelectionClear: function() {},
            onBeforeApplyEdits: function() {},
            onEditsComplete: function() {},
            onQueryFeaturesComplete: function() {},
            onQueryRelatedFeaturesComplete: function() {},
            onQueryIdsComplete: function() {},
            onQueryCountComplete: function() {},
            onQueryExtentComplete: function() {},
            onQueryAttachmentInfosComplete: function() {},
            onAddAttachmentComplete: function() {},
            onUpdateAttachmentComplete: function() {},
            onDeleteAttachmentsComplete: function() {},
            onCapabilitiesChange: function() {},
            onGDBVersionChange: function() {},
            onQueryLimitExceeded: function() {},
            onLabelingInfoChange: function() {},
            _forceIdentity: function(a) {
                var b = this,
                    c = this._url && this._url.path;
                (this.ownershipBasedAccessControlForFeatures || this.userIsAdmin) && !this._getToken() && c && G.id && G.id._hasPortalSession() && G.id._doPortalSignIn(c) ? G.id.getCredential(c).then(function() {
                        b._findCredential();
                        a.call(b)
                    }, function() {
                        a.call(b)
                    }) :
                    a.call(this)
            },
            _checkMode: function(a) {
                var b = this.geometryType,
                    c = this.maxRecordCount;
                a = (a = a && a.features && a.features[0]) && a.attributes && a.attributes.exceedslimit;
                if (this.mode === t.MODE_AUTO && !this.isEditable() && 0 === a && (this.queryPagination || ("esriGeometryPolyline" === b || "esriGeometryPolygon" === b || "esriGeometryMultipoint" === b || this.hasXYFootprint()) && c >= this.maxRecordCountForAuto || "esriGeometryPoint" === b && c >= this.maxPointCountForAuto)) this.currentMode = t.MODE_SNAPSHOT, this._mode = new L(this), this._isSnapshot = !0, this._autoGeneralize = !1
            },
            _queryLimit: function() {
                var a = this,
                    b = new u;
                this._limitPromise = b.promise;
                setTimeout(function() {
                    var c = new K,
                        d = new ea;
                    d.statisticType = "exceedslimit";
                    d.maxPointCount = a.maxPointCountForAuto;
                    d.maxRecordCount = a.maxRecordCountForAuto;
                    d.maxVertexCount = a.maxVertexCountForAuto;
                    d.outStatisticFieldName = "exceedslimit";
                    c.outStatistics = [d];
                    a.queryFeatures(c).promise.then(function(a) {
                        b.resolve(a)
                    }, function(a) {
                        b.reject(a)
                    })
                }, 0)
            },
            _updateCaps: function() {
                var a = this._editable,
                    b = q.trim(this.capabilities ||
                        ""),
                    c = h.map(b ? b.split(",") : [], q.trim),
                    d = h.map(b ? b.toLowerCase().split(",") : [], q.trim),
                    b = h.indexOf(d, "editing"),
                    e, d = {
                        Create: h.indexOf(d, "create"),
                        Update: h.indexOf(d, "update"),
                        Delete: h.indexOf(d, "delete")
                    };
                if (a && -1 === b) c.push("Editing");
                else if (!a && -1 < b) {
                    a = [b];
                    for (e in d) - 1 < d[e] && a.push(d[e]);
                    a.sort();
                    for (e = a.length - 1; 0 <= e; e--) c.splice(a[e], 1)
                }
                this.capabilities = c.join(",")
            },
            _counter: {
                value: 0
            },
            _getUniqueId: function() {
                return this._counter.value++
            },
            onSuspend: function() {
                this.inherited(arguments);
                this._toggleTime(!1);
                var a = this._mode;
                a && a.suspend()
            },
            onResume: function(a) {
                this.inherited(arguments);
                this._toggleTime(!0);
                this._updateMaxOffset();
                var b = this._mode,
                    c = this._map,
                    d = this._getRenderer();
                if (a.firstOccurrence) {
                    this._fixRendererFields();
                    this._checkFields();
                    this.clearSelection();
                    if (this.timeInfo && !this._trackManager && (this._trackIdField || d && (d.latestObservationRenderer || d.trackRenderer))) this._trackManager = new ra(this), this._trackManager.initialize(c);
                    d && ("colors" in d && "blurRadius" in d && "maxPixelIntensity" in d) &&
                        ("esriGeometryPoint" == this.geometryType && !this._heatmapManager) && (this._heatmapManager = new R(this), this._heatmapManager.initialize(c));
                    if (this.mode === t.MODE_AUTO && this.currentMode === t.MODE_SNAPSHOT && ("esriGeometryPolyline" === this.geometryType || "esriGeometryPolygon" === this.geometryType || this.hasXYFootprint()) && !this.getMaxAllowableOffset()) d = this.generalizeForScale, d = this.maxScale ? this.maxScale : this.minScale ? Math.min(d, this.minScale) : Math.min(d, ha.getScale(c, this.initialExtent)), this.isEditable() ||
                        this._setMaxOffset(c.extent.getWidth() / c.width / c.getScale() * d, !0);
                    this._zoomConnect = C.connect(c, "onZoomEnd", this, this._updateMaxOffset)
                }
                b && (a.firstOccurrence ? b.startup() : b.resume())
            },
            _updateMaxOffset: function() {
                var a = this._map;
                a && a.loaded && this._autoGeneralize && this._setMaxOffset(a.extent.getWidth() / a.width)
            },
            _toggleTime: function(a) {
                var b = this._map;
                a && this.timeInfo && this.useMapTime && b ? (this._mapTimeExtent = b.timeExtent, this._timeConnect || (this._timeConnect = C.connect(b, "onTimeExtentChange", this, this._timeChangeHandler))) :
                    (this._mapTimeExtent = null, C.disconnect(this._timeConnect), this._timeConnect = null)
            },
            _timeChangeHandler: function(a) {
                this._mapTimeExtent = a;
                (a = this._mode) && a.propertyChangeHandler(0)
            },
            _getOffsettedTE: function(a) {
                var b = this._timeOffset,
                    c = this._timeOffsetUnits;
                return a && b && c ? a.offset(-1 * b, c) : a
            },
            _getTimeOverlap: function(a, b) {
                return a && b ? a.intersection(b) : a || b
            },
            _getTimeFilter: function(a) {
                var b = this.getTimeDefinition(),
                    c;
                if (b && (c = this._getTimeOverlap(b, null), !c)) return [!1];
                if (a) {
                    if (a = c ? this._getTimeOverlap(a,
                            c) : a, !a) return [!1]
                } else a = c;
                return [!0, a]
            },
            _getAttributeFilter: function(a) {
                var b = this.getDefinitionExpression();
                return a ? b ? "(" + b + ") AND (" + a + ")" : a : b
            },
            _applyQueryFilters: function(a, b) {
                a.where = this._getAttributeFilter(a.where);
                a.maxAllowableOffset || (a.maxAllowableOffset = this._maxOffset);
                a.quantizationParameters = this._quantizationParameters;
                b && this.supportsAdvancedQueries && (a.orderByFields = a.orderByFields || this.getOrderByFields());
                if (this.timeInfo) {
                    var c = this._getTimeFilter(a.timeExtent);
                    if (c[0]) a.timeExtent =
                        c[1];
                    else return !1
                }
                return !0
            },
            _add: function(a) {
                var b = this._selectionSymbol,
                    c = a.attributes,
                    d = this.visibilityField;
                b && this._isSelOnly && a.setSymbol(b);
                if (d && c && c.hasOwnProperty(d)) a[c[d] ? "show" : "hide"]();
                return this.add.apply(this, arguments)
            },
            _remove: function() {
                return this.remove.apply(this, arguments)
            },
            _canDoClientSideQuery: function(a) {
                var b = [],
                    c = this._map;
                if (!(this._isTable || !c && !this._collection))
                    if (!a.text && !(a.where && a.where !== this.getDefinitionExpression() || a.orderByFields && a.orderByFields.length ||
                            a.outStatistics || a.returnDistinctValues)) {
                        var d = this._isSnapshot,
                            e = this._isSelOnly,
                            f = a.geometry;
                        if (f)
                            if (!e && a.spatialRelationship === K.SPATIAL_REL_INTERSECTS && "extent" === f.type && (d || c.extent.contains(f))) b.push(1);
                            else return;
                        if (c = a.objectIds)
                            if (d) b.push(2);
                            else {
                                var f = c.length,
                                    k = this._mode,
                                    g = 0,
                                    l;
                                for (l = 0; l < f; l++) k._getFeature(c[l]) && g++;
                                if (g === f) b.push(2);
                                else return
                            }
                        if (this.timeInfo)
                            if (a = a.timeExtent, c = this._mapTimeExtent, d) a && b.push(3);
                            else if (e) {
                            if (a) return
                        } else if (c)
                            if (-1 !== h.indexOf(b, 2)) a && b.push(3);
                            else if (-1 !== h.indexOf(b, 1)) a == c && b.push(3);
                        else return;
                        else if (0 < b.length) a && b.push(3);
                        else if (a) return;
                        return 0 < b.length ? b : null
                    }
            },
            _getAbsMid: function(a) {
                return M.toAbsMid ? M.toAbsMid(a) : S.id.replace(/\/[^\/]*$/ig, "/") + a
            },
            _doQuery: function(a, b, c) {
                var d = [],
                    e = this.objectIdField,
                    f = this,
                    k = new u,
                    g = new u,
                    l = this.graphics;
                if (-1 !== h.indexOf(b, 1)) {
                    var m = this.spatialIndex || this._map && this._map.spatialIndex,
                        n, s = a.geometry._normalize(null, !0);
                    null == m && ta.autoSpatialIndexing ? n = (this._map || this).addPlugin(this._getAbsMid("../plugins/spatialIndex")).then(q.hitch(this,
                        q.partial(this._getFromIndex, s, m)), function(a) {
                        g.resolve(q.hitch(this, q.partial(this._filterByExtent, l, s)))
                    }) : m && (n = this._getFromIndex(s, m));
                    n ? n.then(function(a) {
                        for (var b = 0; b < a.length; b++) a[b].results && (d = d.concat(a[b].results));
                        g.resolve(d)
                    }).otherwise(function(a) {
                        g.reject(a)
                    }) : g.resolve(this._filterByExtent(l, s))
                } else g.resolve(l);
                g.then(function(g) {
                    d = g;
                    if (-1 !== h.indexOf(b, 2)) {
                        var l = a.objectIds;
                        d = h.filter(d, function(a) {
                            return -1 < h.indexOf(l, a.attributes[e])
                        })
                    } - 1 !== h.indexOf(b, 3) && f.timeInfo && (g =
                        a.timeExtent, d = f._filterByTime(d, g.startTime, g.endTime).match);
                    c && (d = h.map(d, function(a) {
                        return a.attributes[e]
                    }, this));
                    k.resolve(d)
                });
                return k
            },
            _getFromIndex: function(a, b) {
                b = b || this.spatialIndex || this._map.spatialIndex;
                a instanceof Array || (a = [a]);
                var c = this.id;
                return X(h.map(a, function(a) {
                    return b.intersects(a, c)
                }))
            },
            _filterByExtent: function(a, b) {
                for (var c = [], d = 0, e = a.length; d < e; d++) {
                    var f = a[d],
                        k = f.geometry;
                    k && (this.normalization && b.length ? (b[0].intersects(k) || b[1].intersects(k)) && c.push(f) : b.intersects(k) &&
                        c.push(f))
                }
                return c
            },
            _filterByTime: function(a, b, c) {
                var d = this._startTimeField,
                    e = this._endTimeField,
                    f;
                this._twoTimeFields || (f = d || e);
                var k = r.isDefined,
                    g = [],
                    l = [],
                    m, h = a.length,
                    s, p;
                b = b ? b.getTime() : -Infinity;
                c = c ? c.getTime() : Infinity;
                if (f)
                    for (m = 0; m < h; m++) s = a[m], p = s.attributes, d = p[f], d >= b && d <= c ? g.push(s) : l.push(s);
                else
                    for (m = 0; m < h; m++) s = a[m], p = s.attributes, f = p[d], p = p[e], f = k(f) ? f : -Infinity, p = k(p) ? p : Infinity, f >= b && f <= c || p >= b && p <= c || b >= f && c <= p ? g.push(s) : l.push(s);
                return {
                    match: g,
                    noMatch: l
                }
            },
            _resolve: function(a,
                b, c, d, e) {
                b && this[b].apply(this, a);
                c && c.apply(null, a);
                d && B._resDfd(d, a, e)
            },
            _getShallowClone: function(a) {
                var b = new K,
                    c;
                for (c in a) a.hasOwnProperty(c) && (b[c] = a[c]);
                return b
            },
            _query: function(a, b, c, d, e) {
                var f = this,
                    k = this._map,
                    g = new u(B._dfdCanceller),
                    l = c,
                    h = function(c, e) {
                        if (!e && ("execute" === a || "executeRelationshipQuery" === a)) {
                            var k, h;
                            if ("execute" === a) {
                                k = c.features;
                                h = k.length;
                                for (h -= 1; 0 <= h; h--)
                                    if (k[h]._layer = f, !f._isTable) {
                                        var l = f._mode._getFeature(k[h].attributes[f.objectIdField]);
                                        l && k.splice(h, 1, l)
                                    }
                            } else
                                for (l in c)
                                    if (c.hasOwnProperty(l)) {
                                        k =
                                            c[l].features;
                                        h = k.length;
                                        for (h -= 1; 0 <= h; h--) k[h]._layer = f
                                    }
                        }
                        f._resolve([c], b, d, g)
                    };
                if ("executeRelationshipQuery" !== a) {
                    l = this._getShallowClone(c);
                    l.outFields || (l.outFields = this.getOutFields());
                    l.returnGeometry = c.hasOwnProperty("returnGeometry") ? c.returnGeometry : !c.outStatistics;
                    l.returnGeometry && (l.multipatchOption = this.multipatchOption);
                    var n;
                    k && (l.outSpatialReference = new J(k.spatialReference.toJson()));
                    if (!this._applyQueryFilters(l, "execute" === a && !l.outStatistics)) {
                        switch (a) {
                            case "execute":
                                n = new H({
                                    features: []
                                });
                                break;
                            case "executeForIds":
                                n = [];
                                break;
                            case "executeForCount":
                                n = 0;
                                break;
                            case "executeForExtent":
                                n = {}
                        }
                        h(n, !0);
                        return g
                    }
                    if (c = "executeForExtent" !== a && this._canDoClientSideQuery(l)) return g._pendingDfd = N(this._doQuery(l, c, "executeForIds" === a || "executeForCount" === a)), g._pendingDfd.then(function(b) {
                        switch (a) {
                            case "execute":
                                n = new H;
                                n.features = b;
                                break;
                            case "executeForIds":
                                n = b;
                                break;
                            case "executeForCount":
                                n = b.length
                        }
                        h(n, !0)
                    }), g
                }
                if (this._collection) return this._resolve([Error("FeatureLayer::_query - " + this.invalidParams)],
                    null, e, g, !0), g;
                this._ts && (l._ts = (new Date).getTime());
                (g._pendingDfd = this._task[a](l)).addCallbacks(function(a) {
                    h(a, !!l.outStatistics)
                }, function(a) {
                    f._resolve([a], null, e, g, !0)
                });
                return g
            },
            _convertFeaturesToJson: function(a, b, c, d) {
                var e = [],
                    f = this._selectionSymbol,
                    k = this.visibilityField,
                    g, l = this.objectIdField;
                if (this.loaded && (c || d)) g = h.filter(this.fields, function(a) {
                    return !1 === a.editable && (!d || a.name !== l)
                });
                for (c = 0; c < a.length; c++) {
                    var m = a[c],
                        n = {},
                        s = m.geometry,
                        p = m.attributes,
                        r = m.symbol;
                    if (s && (!d || !this.loaded ||
                            this.allowGeometryUpdates)) n.geometry = s.toJson();
                    k ? (n.attributes = p = q.mixin({}, p), p[k] = m.visible ? 1 : 0) : p && (n.attributes = q.mixin({}, p));
                    n.attributes && (g && g.length) && h.forEach(g, function(a) {
                        delete n.attributes[a.name]
                    });
                    r && r !== f && (n.symbol = r.toJson());
                    e.push(n)
                }
                return b ? e : F.toJson(e)
            },
            _selectHandler: function(a, b, c, d, e) {
                var f;
                d = t;
                switch (b) {
                    case d.SELECTION_NEW:
                        this.clearSelection(!0);
                        f = !0;
                        break;
                    case d.SELECTION_ADD:
                        f = !0;
                        break;
                    case d.SELECTION_SUBTRACT:
                        f = !1
                }
                d = a.features;
                var k = this._mode,
                    g = [],
                    h = this.objectIdField,
                    m, n;
                if (f)
                    for (f = 0; f < d.length; f++) m = d[f], n = m.attributes[h], m = k._addFeatureIIf(n, m), g.push(m), this._selectFeatureIIf(n, m, k);
                else
                    for (f = 0; f < d.length; f++) m = d[f], n = m.attributes[h], this._unSelectFeatureIIf(n, k), n = k._removeFeatureIIf(n), g.push(n || m);
                this._isSelOnly && k._applyTimeFilter(!0);
                this._resolve([g, b, a.exceededTransferLimit ? {
                    queryLimitExceeded: !0
                } : null], "onSelectionComplete", c, e);
                if (a.exceededTransferLimit) this.onQueryLimitExceeded()
            },
            _selectFeatureIIf: function(a, b, c) {
                var d = this._selectedFeatures,
                    e = d[a];
                e || (c._incRefCount(a), d[a] = b, this._isTable || (this._setSelectSymbol(b), b.attr("data-selected", "")));
                return e || b
            },
            _unSelectFeatureIIf: function(a, b) {
                var c = this._selectedFeatures[a];
                c && (b._decRefCount(a), delete this._selectedFeatures[a], this._isTable || (this._setUnSelectSymbol(c), c.attr("data-selected")));
                return c
            },
            _isSelected: function(a) {},
            _setSelectSymbol: function(a) {
                var b = this._selectionSymbol;
                b && !this._isSelOnly && a.setSymbol(b)
            },
            _setUnSelectSymbol: function(a) {
                var b = this._selectionSymbol;
                b &&
                    !this._isSelOnly && b === a.symbol && a.setSymbol(null, !0)
            },
            _getOutFields: function() {
                var a = [this.objectIdField, this.typeIdField, this.creatorField, this._startTimeField, this._endTimeField, this._trackIdField].concat(this._rendererFields).concat(this.dataAttributes),
                    a = h.filter(a, function(a, b, e) {
                        return !!a && h.indexOf(e, a) === b
                    }),
                    b = q.clone(this._outFields);
                if (b) {
                    if (-1 !== h.indexOf(b, "*")) return b;
                    h.forEach(a, function(a) {
                        -1 === h.indexOf(b, a) && b.push(a)
                    });
                    return b
                }
                return a
            },
            _checkFields: function(a) {
                var b = a || this._getOutFields();
                h.forEach(b, function(a) {
                    "*" !== a && (this._getField(a) || console.debug("esri.layers.FeatureLayer: " + r.substitute({
                        url: this.url,
                        field: a
                    }, "unable to find '${field}' field in the layer 'fields' information [url: ${url}]")))
                }, this);
                !a && (!this._isTable && !this._fserver && !this._collection && !this._isStream) && (h.some(this.fields, function(a) {
                    return a && "esriFieldTypeGeometry" === a.type ? !0 : !1
                }) || console.debug("esri.layers.FeatureLayer: " + r.substitute({
                    url: this.url
                }, "unable to find a field of type 'esriFieldTypeGeometry' in the layer 'fields' information. If you are using a map service layer, features will not have geometry [url: ${url}]")))
            },
            _fixFieldCase: function(a, b, c) {
                var d = a && a[b],
                    e;
                if (d && !q.isFunction(d)) {
                    if (e = !this._getField(d) && this._getField(d, !0)) d = a[b] = e.name;
                    c && c.push(d)
                }
                return d
            },
            _fixRendererFields: function() {
                var a = this.renderer;
                this._orderBy = null;
                if (a && 0 < this.fields.length) {
                    var b = [],
                        c, a = h.filter([a, a.observationRenderer, a.latestObservationRenderer, a.trackRenderer], r.isDefined),
                        d = [].concat(a);
                    h.forEach(a, function(a) {
                        h.forEach(a.rendererInfos, function(a) {
                            a.renderer && d.push(a.renderer)
                        })
                    });
                    h.forEach(d, function(a) {
                        this._fixFieldCase(a,
                            "attributeField", b);
                        this._fixFieldCase(a, "attributeField2", b);
                        this._fixFieldCase(a, "attributeField3", b);
                        this._fixFieldCase(a.rotationInfo, "field", b);
                        if ((c = this._fixFieldCase(a.sizeInfo, "field", b)) && !this._orderBy) this._orderBy = [c + " DESC"];
                        this._fixFieldCase(a.sizeInfo, "normalizationField", b);
                        this._fixFieldCase(a.colorInfo, "field", b);
                        this._fixFieldCase(a.colorInfo, "normalizationField", b);
                        this._fixFieldCase(a.field, "field", b);
                        this._fixFieldCase(a.opacityInfo, "field", b);
                        this._fixFieldCase(a.opacityInfo,
                            "normalizationField", b);
                        h.forEach(a.visualVariables, function(a) {
                            c = this._fixFieldCase(a, "field", b);
                            "sizeInfo" === a.type && (c && !this._orderBy) && (this._orderBy = [c + " DESC"]);
                            this._fixFieldCase(a, "normalizationField", b)
                        }, this);
                        if (!this._orderBy && a.addBreak && !q.isFunction(a.attributeField) && (a.backgroundFillSymbol || this._hasSizeDiff(a))) this._orderBy = [a.attributeField + " DESC"]
                    }, this);
                    this._rendererFields = h.filter(b, r.isDefined)
                }
            },
            _hasSizeDiff: function(a) {
                var b = Number.MAX_VALUE,
                    c = -Number.MAX_VALUE,
                    d, e;
                h.forEach(a.infos,
                    function(a) {
                        if (e = a.symbol) {
                            d = 0;
                            switch (e.type) {
                                case "simplemarkersymbol":
                                    d = e.size;
                                    break;
                                case "picturemarkersymbol":
                                    d = (e.width + e.height) / 2;
                                    break;
                                case "simplelinesymbol":
                                case "cartographiclinesymbol":
                                    d = e.width;
                                    break;
                                case "simplefillsymbol":
                                case "picturefillsymbol":
                                    d = e.outline && e.outline.width
                            }
                            d && (b = Math.min(b, d), c = Math.max(c, d))
                        }
                    });
                return b !== Number.MAX_VALUE && c !== -Number.MAX_VALUE && 1 < Math.abs(c - b)
            },
            getOrderByFields: function() {
                var a = this.orderByFields || this._orderBy;
                return this.supportsAdvancedQueries &&
                    a ? h.filter(a, function(a) {
                        a = a.split(" ")[0];
                        return !!this._getField(a, !0)
                    }, this) : null
            },
            _getField: function(a, b) {
                var c = this.fields;
                if (!c || 0 === c.length) return null;
                var d;
                b && (a = a.toLowerCase());
                h.some(c, function(c) {
                    var f = !1;
                    (f = b ? c && c.name.toLowerCase() === a ? !0 : !1 : c && c.name === a ? !0 : !1) && (d = c);
                    return f
                });
                return d
            },
            _getDateOpts: function() {
                this._dtOpts || (this._dtOpts = {
                    properties: h.map(h.filter(this.fields, function(a) {
                        return !!(a && "esriFieldTypeDate" === a.type)
                    }), function(a) {
                        return a.name
                    })
                });
                return this._dtOpts
            },
            _applyNormalized: function(a, b) {
                a && b && h.forEach(a, function(a, d) {
                    a && b[d] && a.setGeometry(b[d])
                })
            },
            _editHandler: function(a, b, c, d, e, f) {
                e = a.addResults;
                var k = a.updateResults;
                a = a.deleteResults;
                var g, l, m, n, q = this.objectIdField,
                    p = this._mode,
                    r = this._isTable;
                g = this.editFieldsInfo;
                var w = this.getOutFields() || [],
                    y = g && g.creatorField,
                    x = g && g.creationDateField,
                    z = g && g.editorField,
                    A = g && g.editDateField;
                g = g && g.realm; - 1 === h.indexOf(w, "*") && (y && -1 === h.indexOf(w, y) && (y = null), x && -1 === h.indexOf(w, x) && (x = null), z && -1 === h.indexOf(w,
                    z) && (z = null), A && -1 === h.indexOf(w, A) && (A = null));
                var w = x || A ? (new Date).getTime() : null,
                    u = y || z ? this.getUserId() : void 0;
                u && g && (u = u + "@" + g);
                if (e)
                    for (g = 0; g < e.length; g++) e[g] = new E(e[g]), r || (l = e[g], l.success && (l = l.objectId, m = b[g], (n = m._graphicsLayer) && n !== this && n.remove(m), n = m.attributes || {}, n[q] = l, y && (n[y] = u), z && (n[z] = u), x && (n[x] = w), A && (n[A] = w), m.setAttributes(n), p._init && p.drawFeature(m)));
                if (k)
                    for (g = 0; g < k.length; g++)
                        if (k[g] = new E(k[g]), !r && (l = k[g], l.success)) {
                            l = l.objectId;
                            m = c[l];
                            if (b = p._getFeature(l)) b.geometry !==
                                m.geometry && b.setGeometry(fa.fromJson(m.geometry.toJson())), this._repaint(b, l);
                            m = b || m;
                            n = m.attributes || {};
                            z && (n[z] = u);
                            A && (n[A] = w);
                            m.setAttributes(n)
                        }
                if (a) {
                    c = [];
                    for (g = 0; g < a.length; g++)
                        if (a[g] = new E(a[g]), !r && (l = a[g], l.success && (l = l.objectId, m = p._getFeature(l)))) this._unSelectFeatureIIf(l, p) && c.push(m), m._count = 0, p._removeFeatureIIf(l);
                    if (0 < c.length) this.onSelectionComplete(c, t.SELECTION_SUBTRACT)
                }
                this._resolve([e, k, a], "onEditsComplete", d, f)
            },
            _sendAttachment: function(a, b, c, d, e) {
                var f = this;
                return D({
                    url: this._url.path +
                        "/" + b + "/" + ("add" === a ? "addAttachment" : "updateAttachment"),
                    form: c,
                    content: q.mixin(this._url.query, {
                        f: "json",
                        token: this._getToken() || void 0
                    }),
                    callbackParamName: "callback.html",
                    handleAs: "json"
                }).addCallback(function(c) {
                    var e = "add" === a ? "onAddAttachmentComplete" : "onUpdateAttachmentComplete";
                    c = new E(c["add" === a ? "addAttachmentResult" : "updateAttachmentResult"]);
                    c.attachmentId = c.objectId;
                    c.objectId = b;
                    f._resolve([c], e, d);
                    return c
                }).addErrback(function(a) {
                    f._resolve([a], null, e, null, !0)
                })
            },
            _repaint: function(a,
                b, c) {
                b = r.isDefined(b) ? b : a.attributes[this.objectIdField];
                (!(b in this._selectedFeatures) || !this._selectionSymbol) && a.setSymbol(a.symbol, c)
            },
            _getKind: function(a) {
                var b = this._trackManager;
                return b ? b.isLatestObservation(a) ? 1 : 0 : 0
            }
        });
    q.mixin(t, {
        MODE_SNAPSHOT: 0,
        MODE_ONDEMAND: 1,
        MODE_SELECTION: 2,
        SELECTION_NEW: 3,
        SELECTION_ADD: 4,
        SELECTION_SUBTRACT: 5,
        MODE_AUTO: 6,
        MODE_STREAM: 7,
        POPUP_NONE: "esriServerHTMLPopupTypeNone",
        POPUP_HTML_TEXT: "esriServerHTMLPopupTypeAsHTMLText",
        POPUP_URL: "esriServerHTMLPopupTypeAsURL"
    });
    ga._createWrappers(t);
    return t
});
},
'esri/renderers/SimpleRenderer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../lang", "../symbols/jsonUtils", "./Renderer"], function(c, d, h, k, e, f, g) {
    return c(g, {
        declaredClass: "esri.renderer.SimpleRenderer",
        constructor: function(a) {
            if (a && !a.declaredClass) {
                var b = a;
                this.symbol = (a = b.symbol) && (a.declaredClass ? a : f.fromJson(a));
                this.label = b.label;
                this.description = b.description
            } else this.symbol = a
        },
        getSymbol: function(a) {
            return this.symbol
        },
        toJson: function() {
            var a = d.mixin(this.inherited(arguments), {
                type: "simple",
                label: this.label,
                description: this.description,
                symbol: this.symbol && this.symbol.toJson()
            });
            return e.fixJson(a)
        }
    })
});
},
'esri/renderers/Renderer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/has", "dojox/gfx/_base", "../kernel", "../Color"], function(w, m, e, x, q, y, n) {
    var s = Math.PI;
    return w(null, {
        declaredClass: "esri.renderer.Renderer",
        constructor: function(a) {
            this._ipDataCache = {};
            if (a && !a.declaredClass) {
                this.rotationInfo = a.rotationInfo;
                if (!this.rotationInfo) {
                    var b = a.rotationType,
                        c = a.rotationExpression;
                    if (b || c) this.rotationInfo = {
                        type: b,
                        expression: c
                    }
                }
                this.setRotationInfo(this.rotationInfo);
                this.setSizeInfo(this._readSizeInfo(a.sizeInfo));
                this.setColorInfo(this._readColorInfo(a.colorInfo));
                this.setOpacityInfo(this._readOpacityInfo(a.transparencyInfo));
                this.setVisualVariables(this._readVariables(a.visualVariables));
                this.setAuthoringInfo(a.authoringInfo)
            }
            this.getSymbol = m.hitch(this, this.getSymbol)
        },
        getSymbol: function(a) {},
        _readSizeInfo: function(a) {
            a && (a.minSize && (a.minSize = q.pt2px(a.minSize)), a.maxSize && (a.maxSize = q.pt2px(a.maxSize)));
            return a
        },
        _readColorInfo: function(a) {
            a && (e.forEach(a.colors, function(b, c) {
                m.isArray(b) && (a.colors[c] =
                    n.toDojoColor(b))
            }), e.forEach(a.stops, function(b, c) {
                b.color && m.isArray(b.color) && (a.stops[c].color = n.toDojoColor(b.color))
            }));
            return a
        },
        _readOpacityInfo: function(a) {
            var b;
            a && (b = m.mixin({}, a), b.transparencyValues && (b.opacityValues = e.map(b.transparencyValues, function(a) {
                return 1 - a / 100
            }), delete b.transparencyValues), b.stops && (b.stops = e.map(b.stops, function(a) {
                a = m.mixin({}, a);
                a.opacity = 1 - a.transparency / 100;
                delete a.transparency;
                return a
            })));
            return b
        },
        _readVariables: function(a) {
            a && (a = e.map(a, function(a) {
                "sizeInfo" ===
                a.type ? a = this._readSizeInfo(a) : "colorInfo" === a.type ? a = this._readColorInfo(a) : "transparencyInfo" === a.type && (a = this._readOpacityInfo(a), a.type = "opacityInfo");
                return a
            }, this));
            return a
        },
        setAuthoringInfo: function(a) {
            this.authoringInfo = a
        },
        setRotationInfo: function(a) {
            if ((a = this.rotationInfo = "string" === typeof a ? {
                    field: a
                } : a) && a.expression && !a.field) {
                var b = a.expression.match(this.rotationRE);
                b && b[1] && (a.field = b[1])
            }
            return this
        },
        rotationRE: /^\[([^\]]+)\]$/i,
        getRotationAngle: function(a) {
            var b = this.rotationInfo,
                c = "arithmetic" === b.type,
                b = b.field,
                d = a.attributes,
                g = 0;
            b && (m.isFunction(b) ? g = b.apply(this, arguments) : d && (g = d[b] || 0), g = (g + (c ? -90 : 0)) * (c ? -1 : 1));
            return g
        },
        setVisualVariables: function(a) {
            var b = this._ipDataCache;
            e.forEach(this.visualVariables, function(a, d) {
                b.hasOwnProperty(d) && (b[d] = null)
            }, this);
            this.visualVariables = a;
            e.forEach(a, function(a, d) {
                "colorInfo" === a.type ? b[d] = this._processColorInfo(a) : "opacityInfo" === a.type && (b[d] = this._processOpacityInfo(a))
            }, this);
            return this
        },
        getVisualVariableValues: function(a) {
            var b =
                this.visualVariables,
                c;
            b && (c = e.map(b, function(b) {
                var c;
                switch (b.type) {
                    case "sizeInfo":
                        c = this.getSize(a, {
                            sizeInfo: b
                        });
                        break;
                    case "colorInfo":
                        c = this.getColor(a, {
                            colorInfo: b
                        });
                        break;
                    case "opacityInfo":
                        c = this.getOpacity(a, {
                            opacityInfo: b
                        })
                }
                return {
                    variable: b,
                    value: c
                }
            }, this));
            return c
        },
        hasVisualVariables: function() {
            return !(!this.getVisualVariablesForType("sizeInfo") && !this.getVisualVariablesForType("colorInfo") && !this.getVisualVariablesForType("opacityInfo"))
        },
        getVisualVariablesForType: function(a) {
            var b =
                this.visualVariables,
                c;
            this[a] ? c = [this[a]] : b && (c = e.filter(b, function(b) {
                return b.type === a
            })) && 0 === c.length && (c = void 0);
            return c
        },
        setSizeInfo: function(a) {
            this.sizeInfo = this.proportionalSymbolInfo = a;
            return this
        },
        setProportionalSymbolInfo: function(a) {
            this.setSizeInfo(a);
            return this
        },
        getSize: function(a, b) {
            var c = a.attributes,
                d = b && b.sizeInfo || this.sizeInfo,
                g = d && d.field,
                f = 0,
                e = "number" === typeof a,
                h = e ? a : null;
            if (g) {
                var k = d.minSize,
                    l = d.maxSize,
                    p = d.minDataValue,
                    n = d.maxDataValue,
                    q = d.valueUnit || "unknown",
                    r = d.valueRepresentation,
                    t = d.scaleBy,
                    v = d.normalizationField,
                    u = c ? parseFloat(c[v]) : void 0,
                    d = b && b.shape;
                "number" !== typeof h && (m.isFunction(g) ? h = g.apply(this, arguments) : c && (h = c[g]));
                if (null == h || v && !e && (isNaN(u) || 0 === u)) return null;
                !isNaN(u) && !e && (h /= u);
                if (null != k && null != l && null != p && null != n) h <= p ? f = k : h >= n ? f = l : (h = (h - p) / (n - p), "area" === t && d ? (k = (r = "circle" === d) ? s * Math.pow(k / 2, 2) : k * k, l = r ? s * Math.pow(l / 2, 2) : l * l, l = k + h * (l - k), f = r ? 2 * Math.sqrt(l / s) : Math.sqrt(l)) : f = k + h * (l - k));
                else if ("unknown" === q) null != k && null != p && (k && p ? (h /= p, f = "circle" ===
                    d ? 2 * Math.sqrt(h * Math.pow(k / 2, 2)) : "square" === d || "diamond" === d || "image" === d ? Math.sqrt(h * Math.pow(k, 2)) : h * k) : f = h + (k || p), f = f < k ? k : f, null != l && f > l && (f = l));
                else {
                    t = (b && b.resolution ? b.resolution : 1) * this._meterIn[q];
                    if ("area" === r) f = Math.sqrt(h / s) / t, f *= 2;
                    else if (f = h / t, "radius" === r || "distance" === r) f *= 2;
                    null != k && f < k && (f = k);
                    null != l && f > l && (f = l)
                }
            } else d && (f = d.minSize);
            return f = isNaN(f) ? 0 : f
        },
        setColorInfo: function(a) {
            this.colorInfo = a;
            this._ipDataCache.colorInfo = this._processColorInfo(a);
            return this
        },
        _processColorInfo: function(a) {
            a &&
                (e.forEach(a.colors, function(b, c) {
                    m.isArray(b) && (a.colors[c] = new n(b))
                }), e.forEach(a.stops, function(b, c) {
                    b.color && m.isArray(b.color) && (a.stops[c].color = new n(b.color))
                }));
            return this._interpolateData(a)
        },
        getColor: function(a, b) {
            var c, d = b && b.colorInfo;
            d && "colorInfo" === d.type ? (c = e.indexOf(this.visualVariables, d), d = this.visualVariables[c]) : (c = "colorInfo", d = this.colorInfo);
            return this._getColorComponent(a, d, this._ipDataCache[c])
        },
        setOpacityInfo: function(a) {
            this.opacityInfo = a;
            this._ipDataCache.opacityInfo =
                this._processOpacityInfo(a);
            return this
        },
        _processOpacityInfo: function(a) {
            return this._interpolateData(a)
        },
        getOpacity: function(a, b) {
            var c, d = b && b.opacityInfo;
            d && "opacityInfo" === d.type ? (c = e.indexOf(this.visualVariables, d), d = this.visualVariables[c]) : (c = "opacityInfo", d = this.opacityInfo);
            return this._getColorComponent(a, d, this._ipDataCache[c], !0)
        },
        _getColorComponent: function(a, b, c, d) {
            var g = a.attributes,
                f = b && b.field,
                e = "number" === typeof a ? a : null,
                h;
            if (f) {
                var k = b.normalizationField,
                    l = g ? parseFloat(g[k]) : void 0;
                "number" !== typeof e && (m.isFunction(f) ? e = f.apply(this, arguments) : g && (e = g[f]));
                null != e && (k && (!isNaN(l) && 0 !== l) && (e /= l), h = d ? this._getOpacity(e, b, c) : this._getColor(e, b, c))
            } else b && (g = b.stops, d ? (h = g && g[0] && g[0].opacity, null == h && (h = b.opacityValues && b.opacityValues[0])) : h = g && g[0] && g[0].color || b.colors && b.colors[0]);
            return h
        },
        _interpolateData: function(a) {
            var b;
            if (a && a.field)
                if (a.colors || a.opacityValues) {
                    var c = (a.colors || a.opacityValues).length,
                        d = a.minDataValue,
                        g = (a.maxDataValue - d) / (c - 1);
                    b = [];
                    for (a = 0; a < c; a++) b[a] =
                        d + a * g
                } else a.stops && (b = e.map(a.stops, function(a) {
                    return a.value
                }));
            return b
        },
        _getOpacity: function(a, b, c) {
            a = this._lookupData(a, c);
            var d;
            b = b || this.opacityInfo;
            a && (c = a[0], d = a[1], c === d ? d = this._getOpacValue(b, c) : (c = this._getOpacValue(b, c), b = this._getOpacValue(b, d), d = c + (b - c) * a[2]));
            return d
        },
        _getOpacValue: function(a, b) {
            return a.opacityValues ? a.opacityValues[b] : a.stops[b].opacity
        },
        _getColor: function(a, b, c) {
            a = this._lookupData(a, c);
            var d;
            b = b || this.colorInfo;
            a && (d = a[0], c = a[1], d = d === c ? this._getColorObj(b, d) :
                n.blendColors(this._getColorObj(b, d), this._getColorObj(b, c), a[2]));
            return d
        },
        _getColorObj: function(a, b) {
            return a.colors ? a.colors[b] : a.stops[b].color
        },
        _lookupData: function(a, b) {
            var c;
            if (b) {
                var d = 0,
                    g = b.length - 1;
                e.some(b, function(b, c) {
                    if (a < b) return g = c, !0;
                    d = c;
                    return !1
                });
                c = [d, g, (a - b[d]) / (b[g] - b[d])]
            }
            return c
        },
        _meterIn: {
            inches: 39.3701,
            feet: 3.28084,
            yards: 1.09361,
            miles: 6.21371E-4,
            "nautical-miles": 5.39957E-4,
            millimeters: 1E3,
            centimeters: 100,
            decimeters: 10,
            meters: 1,
            kilometers: 0.0010,
            "decimal-degrees": 180 / 20015077
        },
        _writeSizeInfo: function(a) {
            if (a) {
                a = m.mixin({}, a);
                a.minSize && (a.minSize = q.px2pt(a.minSize));
                a.maxSize && (a.maxSize = q.px2pt(a.maxSize));
                var b = a.legendOptions;
                if (b && (a.legendOptions = m.mixin({}, b), b = b.customValues)) a.legendOptions.customValues = b.slice(0)
            }
            return a
        },
        _writeColorInfo: function(a) {
            a && (a = m.mixin({}, a), a.colors && (a.colors = e.map(a.colors, function(a) {
                return n.toJsonColor(a)
            })), a.stops && (a.stops = e.map(a.stops, function(a) {
                a = m.mixin({}, a);
                a.color && (a.color = n.toJsonColor(a.color));
                return a
            })));
            return a
        },
        _writeOpacityInfo: function(a) {
            var b;
            a && (b = m.mixin({}, a), b.opacityValues && (b.transparencyValues = e.map(b.opacityValues, function(a) {
                return 100 * (1 - a)
            }), delete b.opacityValues), b.stops && (b.stops = e.map(b.stops, function(a) {
                a = m.mixin({}, a);
                a.transparency = 100 * (1 - a.opacity);
                delete a.opacity;
                return a
            })));
            return b
        },
        toJson: function() {
            var a = this.visualVariables,
                b = this.rotationInfo,
                c = b && b.field,
                d = m.clone(this.authoringInfo),
                c = b && (b.expression || c && (m.isFunction(c) ? c : "[" + c + "]"));
            a && (a = e.map(a, function(a) {
                "sizeInfo" ===
                a.type ? a = this._writeSizeInfo(a) : "colorInfo" === a.type ? a = this._writeColorInfo(a) : "opacityInfo" === a.type && (a = this._writeOpacityInfo(a), a.type = "transparencyInfo");
                return a
            }, this));
            d && e.forEach(d.visualVariables, function(a) {
                "opacityInfo" === a.type && (a.type = "transparencyInfo")
            });
            return {
                rotationType: c && (b.type || "geographic"),
                rotationExpression: c,
                colorInfo: this._writeColorInfo(this.colorInfo),
                transparencyInfo: this._writeOpacityInfo(this.opacityInfo),
                sizeInfo: this._writeSizeInfo(this.sizeInfo),
                visualVariables: a,
                authoringInfo: d
            }
        }
    })
});
},
'esri/renderers/UniqueValueRenderer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/has", "../kernel", "../lang", "../symbols/jsonUtils", "./Renderer"], function(k, g, f, n, p, l, h, m) {
    return k(m, {
        declaredClass: "esri.renderer.UniqueValueRenderer",
        constructor: function(b, a, c, e, d) {
            this.values = [];
            this._symbols = {};
            this.infos = [];
            b && !b.declaredClass ? (a = b, this.defaultSymbol = (b = a.defaultSymbol) && (b.declaredClass ? b : h.fromJson(b)), this.attributeField = a.field1, this.attributeField2 = a.field2, this.attributeField3 = a.field3, this.fieldDelimiter =
                a.fieldDelimiter, this.defaultLabel = a.defaultLabel, g.forEach(a.uniqueValueInfos, this._addValueInfo, this)) : (this.defaultSymbol = b, this.attributeField = a, this.attributeField2 = c, this.attributeField3 = e, this.fieldDelimiter = d);
            this._multiple = !!this.attributeField2
        },
        addValue: function(b, a) {
            var c = f.isObject(b) ? b : {
                value: b,
                symbol: a
            };
            this._addValueInfo(c)
        },
        removeValue: function(b) {
            var a = g.indexOf(this.values, b); - 1 !== a && (this.values.splice(a, 1), delete this._symbols[b], this.infos.splice(a, 1))
        },
        getUniqueValueInfo: function(b) {
            var a =
                this.attributeField,
                c = b.attributes,
                e, d;
            this._multiple ? (b = this.attributeField2, e = this.attributeField3, d = [], a && d.push(c[a]), b && d.push(c[b]), e && d.push(c[e]), a = d.join(this.fieldDelimiter || "")) : a = f.isFunction(a) ? a(b) : c[a];
            return this._symbols[a]
        },
        getSymbol: function(b) {
            return (b = this.getUniqueValueInfo(b)) && b.symbol || this.defaultSymbol
        },
        _addValueInfo: function(b) {
            var a = b.value;
            this.values.push(a);
            this.infos.push(b);
            var c = b.symbol;
            c && !c.declaredClass && (b.symbol = h.fromJson(c));
            this._symbols[a] = b
        },
        toJson: function() {
            var b =
                l.fixJson,
                a = f.mixin(this.inherited(arguments), {
                    type: "uniqueValue",
                    field1: this.attributeField,
                    field2: this.attributeField2,
                    field3: this.attributeField3,
                    fieldDelimiter: this.fieldDelimiter,
                    defaultSymbol: this.defaultSymbol && this.defaultSymbol.toJson(),
                    defaultLabel: this.defaultLabel,
                    uniqueValueInfos: g.map(this.infos || [], function(a) {
                        a = f.mixin({}, a);
                        a.symbol = a.symbol && a.symbol.toJson();
                        a.value += "";
                        return b(a)
                    })
                });
            return b(a)
        }
    })
});
},
'esri/renderers/jsonUtils':function(){
//>>built
define(["dojo/_base/array", "dojo/_base/lang", "dojo/has", "dojox/gfx/_base", "../kernel", "../Color", "../symbols/jsonUtils", "./SimpleRenderer", "./UniqueValueRenderer", "./ClassBreaksRenderer", "./VectorFieldRenderer", "./DotDensityRenderer", "./ScaleDependentRenderer", "./TimeClassBreaksAger", "./TimeRampAger", "./TemporalRenderer", "./HeatmapRenderer"], function(g, k, x, m, y, f, l, n, p, q, r, s, t, e, u, v, w) {
    return {
        fromJson: function(a) {
            var b;
            switch (a.type || "") {
                case "simple":
                    b = new n(a);
                    break;
                case "uniqueValue":
                    b = new p(a);
                    break;
                case "classBreaks":
                    b =
                        new q(a);
                    break;
                case "vectorField":
                    b = new r(a);
                    break;
                case "scaleDependent":
                    b = this._scaleDependentFromJson(a);
                    break;
                case "dotDensity":
                    b = this._dotDensityFromJson(a);
                    break;
                case "temporal":
                    b = this._temporalFromJson(a);
                    break;
                case "heatmap":
                    b = this._heatmapFromJson(a)
            }
            return b
        },
        _scaleDependentFromJson: function(a) {
            var b = {},
                c = a.minScale;
            b.rendererInfos = g.map(a.rendererInfos, function(a) {
                var b = a.maxScale;
                a = {
                    minScale: c,
                    maxScale: b,
                    renderer: a.renderer && this.fromJson(a.renderer)
                };
                c = b;
                return a
            }, this);
            return new t(b)
        },
        _dotDensityFromJson: function(a) {
            a.backgroundColor && k.isArray(a.backgroundColor) && (a.backgroundColor = f.toDojoColor(a.backgroundColor));
            0 < a.dotSize && (a.dotSize = m.pt2px(a.dotSize));
            a.fields && g.forEach(a.fields, function(a) {
                a && k.isArray(a.color) && (a.color = f.toDojoColor(a.color))
            });
            a.legendOptions && (a.legendOptions.backgroundColor && k.isArray(a.legendOptions.backgroundColor) && (a.legendOptions.backgroundColor = f.toDojoColor(a.legendOptions.backgroundColor)), a.legendOptions.outline && (a.legendOptions.outline =
                l.fromJson(a.legendOptions.outline)));
            a.outline && (a.outline = l.fromJson(a.outline));
            return new s(a)
        },
        _temporalFromJson: function(a) {
            var b, c, d;
            a = a || {};
            b = this.fromJson(a.observationRenderer);
            c = a.latestObservationRenderer ? this.fromJson(a.latestObservationRenderer) : null;
            d = a.trackRenderer ? this.fromJson(a.trackRenderer) : null;
            a = this._agerFromJson(a.observationAger);
            return new v(b, c, d, a)
        },
        _agerFromJson: function(a) {
            var b;
            a = a || {};
            a.colorRange || a.sizeRange || a.alphaRange ? b = this._timeRampFromJson(a) : a.agerClassBreakInfos &&
                (b = this._timeClassBreaksFromJson(a));
            return b
        },
        _timeRampFromJson: function(a) {
            var b, c, d;
            a.colorRange && 1 < a.colorRange.length && (b = [f.toDojoColor(a.colorRange[0]), f.toDojoColor(a.colorRange[1])]);
            a.sizeRange && 1 < a.sizeRange.length && (c = [a.sizeRange[0], a.sizeRange[1]]);
            a.alphaRange && 1 < a.alphaRange.length && (d = [a.alphaRange[0] / 255, a.alphaRange[1] / 255]);
            return new u(b, c, d)
        },
        _timeClassBreaksFromJson: function(a) {
            var b = a.agerClassBreakInfos,
                c, d, g = [],
                h;
            c = e.UNIT_DAYS;
            switch (a.timeUnits) {
                case "esriTimeUnitsSeconds":
                    c =
                        e.UNIT_SECONDS;
                    break;
                case "esriTimeUnitsMilliseconds":
                    c = e.UNIT_MILLISECONDS;
                    break;
                case "esriTimeUnitsHours":
                    c = e.UNIT_HOURS;
                    break;
                case "esriTimeUnitsMinutes":
                    c = e.UNIT_MINUTES;
                    break;
                case "esriTimeUnitsMonths":
                    c = e.UNIT_MONTHS;
                    break;
                case "esriTimeUnitsWeeks":
                    c = e.UNIT_WEEKS;
                    break;
                case "esriTimeUnitsYears":
                    c = e.UNIT_YEARS
            }
            for (h = 0; h < b.length; h += 1) a = b[h], d = {
                minAge: 0,
                maxAge: a.oldestAge || Infinity
            }, a.color && (d.color = f.toDojoColor(a.color)), a.alpha && (d.alpha = a.alpha / 255), d.size = a.size, g[h] = d;
            return new e(g, c)
        },
        _heatmapFromJson: function(a) {
            var b = a.colorStops;
            b && b instanceof Array && g.forEach(b, function(a) {
                a.color = f.toDojoColor(a.color)
            });
            return new w(a)
        }
    }
});
},
'esri/renderers/ClassBreaksRenderer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/has", "../kernel", "../lang", "../symbols/jsonUtils", "./Renderer"], function(p, h, k, r, s, n, m, q) {
    return p(q, {
        declaredClass: "esri.renderer.ClassBreaksRenderer",
        constructor: function(a, c) {
            this.breaks = [];
            this._symbols = {};
            this.infos = [];
            this.isMaxInclusive = !0;
            if (a && !a.declaredClass) {
                var b = a;
                this.attributeField = b.field;
                this.defaultSymbol = (a = b.defaultSymbol) && (a.declaredClass ? a : m.fromJson(a));
                this.backgroundFillSymbol = (a = b.backgroundFillSymbol) &&
                    (a.declaredClass ? a : m.fromJson(a));
                this._copy(["defaultLabel", "classificationMethod:rest", "normalizationType:rest", "normalizationField", "normalizationTotal"], b, this);
                var e = b.minValue;
                (b = b.classBreakInfos) && (b[0] && n.isDefined(b[0].classMaxValue)) && h.forEach(b, function(a) {
                    var b = a.classMaxValue;
                    a.minValue = e;
                    e = a.maxValue = b
                }, this);
                h.forEach(b, this._addBreakInfo, this)
            } else this.defaultSymbol = a, this.attributeField = c
        },
        addBreak: function(a, c, b) {
            a = k.isObject(a) ? a : {
                minValue: a,
                maxValue: c,
                symbol: b
            };
            this._addBreakInfo(a)
        },
        removeBreak: function(a, c) {
            var b, e = this.breaks,
                d, g = e.length,
                f = this._symbols;
            for (d = 0; d < g; d++)
                if (b = e[d], b[0] == a && b[1] == c) {
                    e.splice(d, 1);
                    delete f[a + "-" + c];
                    this.infos.splice(d, 1);
                    break
                }
        },
        clearBreaks: function() {
            this.breaks = [];
            this._symbols = {};
            this.infos = []
        },
        getBreakIndex: function(a) {
            var c = this.attributeField,
                b = a.attributes,
                e = this.breaks,
                d = e.length,
                g = this.isMaxInclusive;
            if (k.isFunction(c)) a = c(a);
            else {
                a = parseFloat(b[c]);
                var c = this.normalizationType,
                    f;
                c && (f = parseFloat(this.normalizationTotal), b = parseFloat(b[this.normalizationField]),
                    "log" === c ? a = Math.log(a) * Math.LOG10E : "percent-of-total" === c && !isNaN(f) ? a = 100 * (a / f) : "field" === c && !isNaN(b) && (a /= b))
            }
            for (b = 0; b < d; b++)
                if (c = e[b], c[0] <= a && (g ? a <= c[1] : a < c[1])) return b;
            return -1
        },
        getBreakInfo: function(a) {
            a = this.getBreakIndex(a);
            return -1 !== a ? this.infos[a] : null
        },
        getSymbol: function(a) {
            return (a = this.breaks[this.getBreakIndex(a)]) ? this._symbols[a[0] + "-" + a[1]] : this.defaultSymbol
        },
        setMaxInclusive: function(a) {
            this.isMaxInclusive = a
        },
        _normalizationTypeEnums: [
            ["field", "esriNormalizeByField"],
            ["log",
                "esriNormalizeByLog"
            ],
            ["percent-of-total", "esriNormalizeByPercentOfTotal"]
        ],
        _classificationMethodEnums: [
            ["natural-breaks", "esriClassifyNaturalBreaks"],
            ["equal-interval", "esriClassifyEqualInterval"],
            ["quantile", "esriClassifyQuantile"],
            ["standard-deviation", "esriClassifyStandardDeviation"],
            ["geometrical-interval", "esriClassifyGeometricalInterval"]
        ],
        _copy: function(a, c, b) {
            h.forEach(a, function(a) {
                var d = a.split(":"),
                    g, f, h;
                1 < d.length && (a = d[0], g = this["_" + a + "Enums"], "rest" === d[1] ? (f = "1", h = "0") : "sdk" === d[1] &&
                    (f = "0", h = "1"));
                d = c[a];
                if (void 0 !== d && (b[a] = d, g && f)) {
                    var l, k = g.length;
                    for (l = 0; l < k; l++)
                        if (g[l][f] === d) {
                            b[a] = g[l][h];
                            break
                        }
                }
            }, this)
        },
        _addBreakInfo: function(a) {
            var c = a.minValue,
                b = a.maxValue;
            this.breaks.push([c, b]);
            this.infos.push(a);
            var e = a.symbol;
            e && !e.declaredClass && (a.symbol = m.fromJson(e));
            this._symbols[c + "-" + b] = a.symbol
        },
        toJson: function() {
            var a = this.infos || [],
                c = n.fixJson,
                b = a[0] && a[0].minValue,
                e = this.backgroundFillSymbol,
                a = k.mixin(this.inherited(arguments), {
                    type: "classBreaks",
                    field: this.attributeField,
                    defaultSymbol: this.defaultSymbol && this.defaultSymbol.toJson(),
                    backgroundFillSymbol: e && e.toJson(),
                    minValue: -Infinity === b ? -Number.MAX_VALUE : b,
                    classBreakInfos: h.map(a, function(a) {
                        a = k.mixin({}, a);
                        a.symbol = a.symbol && a.symbol.toJson();
                        a.classMaxValue = Infinity === a.maxValue ? Number.MAX_VALUE : a.maxValue;
                        delete a.minValue;
                        delete a.maxValue;
                        return c(a)
                    })
                });
            this._copy(["defaultLabel", "classificationMethod:sdk", "normalizationType:sdk", "normalizationField", "normalizationTotal"], this, a);
            a.hasOwnProperty("normalizationType") &&
                !a.normalizationType && delete a.normalizationType;
            a.hasOwnProperty("classificationMethod") && !a.classificationMethod && delete a.classificationMethod;
            return c(a)
        }
    })
});
},
'esri/renderers/VectorFieldRenderer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "dojo/_base/array", "../kernel", "../lang", "../Color", "./Renderer", "./ClassBreaksRenderer", "../symbols/SimpleMarkerSymbol", "../symbols/PictureMarkerSymbol", "../symbols/SimpleLineSymbol", "../symbols/jsonUtils", "require"], function(h, k, t, g, u, e, f, p, q, l, m, n, r, s) {
    var b = h(p, {
        declaredClass: "esri.renderer.VectorFieldRenderer",
        patternUrlPrefix: s.toUrl("../images/symbol/sfs/"),
        constructor: function(a) {
            e.isDefined(a) || (a = {});
            a.attributeField = a.attributeField || "Magnitude";
            a.rotationInfo = a.rotationInfo || this._getRotationInfo(a);
            h.safeMixin(this, a);
            this.style = this.style || b.STYLE_SINGLE_ARROW;
            this.singleArrowSymbol && (this.singleArrowSymbol = this.singleArrowSymbol.declaredClass ? this.singleArrowSymbol : r.fromJson(this.singleArrowSymbol));
            this.renderer = new q(this._getDefaultSymbol(), a.attributeField);
            this._updateRenderer(this.style);
            this.flowRepresentation = this.flowRepresentation || this.FLOW_FROM
        },
        getSymbol: function(a) {
            return this.renderer && this.renderer.getSymbol(a)
        },
        setVisualVariables: function(a) {
            a =
                g.filter(a, function(a) {
                    if ("sizeInfo" === a.type) return e.isDefined(this._updateSizeInfo(a))
                }, this);
            this.inherited(arguments);
            return this
        },
        setSizeInfo: function(a) {
            this._updateSizeInfo(a);
            this.inherited(arguments);
            return this
        },
        setProportionalSymbolInfo: function(a) {
            this.setSizeInfo(a);
            return this
        },
        setColorInfo: function(a) {
            return this
        },
        _updateRenderer: function(a) {
            return !e.isDefined(this.renderer) ? Error("Invalid Renderer!") : a === b.STYLE_SINGLE_ARROW ? this._createSingleArrowRenderer() : a === b.STYLE_BEAUFORT_KN ?
                this._createBeaufortKnotsRenderer() : a === b.STYLE_BEAUFORT_METER ? this._createBeaufortMeterRenderer() : a === b.STYLE_BEAUFORT_FEET ? this._createBeaufortFeetRenderer() : a === b.STYLE_BEAUFORT_MILE ? this._createBeaufortMilesRenderer() : a === b.STYLE_BEAUFORT_KM ? this._createBeaufortKilometersRenderer() : a === b.STYLE_OCEAN_CURRENT_M ? this._createCurrentMeterRenderer() : a === b.STYLE_OCEAN_CURRENT_KN ? this._createCurrentKnotsRenderer() : a === b.STYLE_SCALAR ? this._createSimpleScalarRenderer() : a === b.STYLE_WIND_BARBS ? this._createWindBarbsRenderer() :
                this._createClassifiedArrowRenderer()
        },
        _updateSizeInfo: function(a) {
            return a && e.isDefined(a.minSize) && e.isDefined(a.maxSize) && e.isDefined(a.minDataValue) && e.isDefined(a.maxDataValue) ? (this.style === b.STYLE_WIND_BARBS && (a.minSize = a.maxSize), a.field = a.field || "Magnitude", a.type = "sizeInfo", a) : null
        },
        _createClassifiedArrowRenderer: function() {
            this.renderer.defaultSymbol = this._getDefaultSymbol(new f([56, 168, 0]));
            var a = [0, 1E-6, 3.5, 7, 10.5, 14];
            if (e.isDefined(this.minDataValue) && e.isDefined(this.maxDataValue)) {
                var c =
                    (this.maxDataValue - this.minDataValue) / 5,
                    a = [],
                    d, b;
                b = this.minDataValue;
                for (d = 0; 6 > d; d++) a[d] = b, b += c
            }
            this._addBreaks(a, [
                [56, 168, 0],
                [139, 309, 0],
                [255, 255, 0],
                [255, 128, 0],
                [255, 0, 0]
            ])
        },
        _createSingleArrowRenderer: function() {
            this.renderer.defaultSymbol = this.singleArrowSymbol || this._getDefaultSymbol()
        },
        _createBeaufortMeterRenderer: function() {
            this.renderer.defaultSymbol = this._getDefaultSymbol(new f([214, 47, 39]));
            this._addBreaks([0, 0.2, 1.8, 3.3, 5.4, 8.5, 11, 14.1, 17.2, 20.8, 24.4, 28.6, 32.7], [
                [69, 117, 181],
                [101, 137, 184],
                [132, 158, 186],
                [162, 180, 189],
                [192, 204, 190],
                [222, 227, 191],
                [255, 255, 191],
                [255, 220, 161],
                [250, 185, 132],
                [245, 152, 105],
                [237, 117, 81],
                [232, 21, 21]
            ])
        },
        _createBeaufortKnotsRenderer: function() {
            this.renderer.defaultSymbol = this._getDefaultSymbol(new f([214, 47, 39]));
            this._addBreaks([0, 1, 3, 6, 10, 16, 21, 27, 33, 40, 47, 55, 63], [
                [40, 146, 199],
                [89, 162, 186],
                [129, 179, 171],
                [160, 194, 155],
                [191, 212, 138],
                [218, 230, 119],
                [250, 250, 100],
                [252, 213, 83],
                [252, 179, 102],
                [250, 141, 52],
                [247, 110, 42],
                [240, 71, 29]
            ])
        },
        _createBeaufortFeetRenderer: function() {
            var a = [0, 0.2, 1.8, 3.3, 5.4, 8.5, 11, 14.1, 17.2, 20.8, 24.4, 28.6, 32.7];
            g.forEach(a, function(c, d) {
                a[d] *= 3.28084
            });
            this.renderer.defaultSymbol = this._getDefaultSymbol(new f([214, 47, 39]));
            this._addBreaks(a, [
                [69, 117, 181],
                [101, 137, 184],
                [132, 158, 186],
                [162, 180, 189],
                [192, 204, 190],
                [222, 227, 191],
                [255, 255, 191],
                [255, 220, 161],
                [250, 185, 132],
                [245, 152, 105],
                [237, 117, 81],
                [232, 21, 21]
            ])
        },
        _createBeaufortMilesRenderer: function() {
            var a = [0, 0.2, 1.8, 3.3, 5.4, 8.5, 11, 14.1, 17.2, 20.8, 24.4, 28.6, 32.7];
            g.forEach(a, function(c, d) {
                a[d] *= 2.23694
            });
            this.renderer.defaultSymbol = this._getDefaultSymbol(new f([214, 47, 39]));
            this._addBreaks(a, [
                [69, 117, 181],
                [101, 137, 184],
                [132, 158, 186],
                [162, 180, 189],
                [192, 204, 190],
                [222, 227, 191],
                [255, 255, 191],
                [255, 220, 161],
                [250, 185, 132],
                [245, 152, 105],
                [237, 117, 81],
                [232, 21, 21]
            ])
        },
        _createBeaufortKilometersRenderer: function() {
            var a = [0, 0.2, 1.8, 3.3, 5.4, 8.5, 11, 14.1, 17.2, 20.8, 24.4, 28.6, 32.7];
            g.forEach(a, function(c, d) {
                a[d] *= 3.6
            });
            this.renderer.defaultSymbol = this._getDefaultSymbol(new f([214, 47, 39]));
            this._addBreaks(a, [
                [69, 117,
                    181
                ],
                [101, 137, 184],
                [132, 158, 186],
                [162, 180, 189],
                [192, 204, 190],
                [222, 227, 191],
                [255, 255, 191],
                [255, 220, 161],
                [250, 185, 132],
                [245, 152, 105],
                [237, 117, 81],
                [232, 21, 21]
            ])
        },
        _createCurrentMeterRenderer: function() {
            this.renderer.defaultSymbol = this._getDefaultSymbol(new f([177, 177, 177]));
            this._addBreaks([0, 0.5, 1, 1.5, 2], [
                [78, 26, 153],
                [179, 27, 26],
                [202, 128, 26],
                [177, 177, 177]
            ])
        },
        _createCurrentKnotsRenderer: function() {
            this.renderer.defaultSymbol = this._getDefaultSymbol(new f([177, 177, 177]));
            this._addBreaks([0, 0.25, 0.5, 1, 1.5,
                2, 2.5, 3, 3.5, 4
            ], [
                [0, 0, 0],
                [0, 37, 100],
                [78, 26, 153],
                [151, 0, 100],
                [179, 27, 26],
                [177, 78, 26],
                [202, 128, 26],
                [177, 179, 52],
                [177, 177, 177]
            ])
        },
        _createSimpleScalarRenderer: function() {
            this.renderer.defaultSymbol = new m({
                url: this.patternUrlPrefix + "scalar.png",
                height: 20,
                width: 20,
                type: "esriPMS",
                angle: 0
            })
        },
        _createWindBarbsRenderer: function() {
            var a = [],
                c, d;
            for (c = 0; 150 >= c; c += 5) a.push(c);
            d = "M20 20 M5 20 A15 15 0 1 0 35 20 A15 15 0 1 0 5 20 M20 20 M10 20 A10 10 0 1 0 30 20 A10 10 0 1 0 10 20;M25 0 L25 40 M25 35 L17.5 37.5;M25 0 L25 40 L10 45 L25 40;M25 0 L25 40 L10 45 L25 40 M25 35 L17.5 37.5;M25 0 L25 40 L10 45 L25 40 M25 35 L10 40;M25 0 L25 40 L10 45 L25 40 M25 35 L10 40 L25 35 M25 30 L17.5 32.5;M25 0 L25 40 L10 45 L25 40 M25 35 L10 40 L25 35 M25 30 L10 35;M25 0 L25 40 L10 45 L25 40 M25 35 L10 40 L25 35 M25 30 L10 35 L25 30 M25 25 L17.5 27.5;M25 0 L25 40 L10 45 L25 40 M25 35 L10 40 L25 35 M25 30 L10 35 L25 30 M25 25 L10 30;M25 0 L25 40 L10 45 L25 40 M25 35 L10 40 L25 35 M25 30 L10 35 L25 30 M25 25 L10 30 L25 25 M25 20 L17.5 22.5;M25 0 L25 40 L10 40 L25 35;M25 0 L25 40 L10 40 L25 35 M25 30 L17.5 32.5;M25 0 L25 40 L10 40 L25 35 M25 30 L10 35;M25 0 L25 40 L10 40 L25 35 M25 30 L10 35 L25 30 M25 25 L17.5 27.5;M25 0 L25 40 L10 40 L25 35 M25 30 L10 35 L25 30 M25 25 L10 30;M25 0 L25 40 L10 40 L25 35 M25 30 L10 35 L25 30 M25 25 L10 30 L25 25 M25 20 L17.5 22.5;M25 0 L25 40 L10 40 L25 35 M25 30 L10 35 L25 30 M25 25 L10 30 L25 25 M25 20 L10 25;M25 0 L25 40 L10 40 L25 35 M25 30 L10 35 L25 30 M25 25 L10 30 L25 25 M25 20 L10 25 L25 20 M25 15 L17.5 17.5;M25 0 L25 40 L10 40 L25 35 M25 30 L10 35 L25 30 M25 25 L10 30 L25 25 M25 20 L10 25 L25 20 M25 15 L10 20;M25 0 L25 40 L10 40 L25 35 M25 30 L10 35 L25 30 M25 25 L10 30 L25 25 M25 20 L10 25 L25 20 M25 15 L10 20 L25 15 M25 10 L17.5 12.5;M25 0 L25 40 L10 40 L25 35 L10 35 L25 30;M25 0 L25 40 L10 40 L25 35 L10 35 L25 30 M25 25 L17.5 27.5;M25 0 L25 40 L10 40 L25 35 L10 35 L25 30 M25 25 L10 30;M25 0 L25 40 L10 40 L25 35 L10 35 L25 30 M25 25 L10 30 M25 25 M25 20 L17.5 22.5;M25 0 L25 40 L10 40 L25 35 L10 35 L25 30 M25 25 L10 30 M25 25 M25 20 L10 25;M25 0 L25 40 L10 40 L25 35 L10 35 L25 30 M25 25 L10 30 M25 25 M25 20 L10 25 M25 20 M25 15 L17.5 17.5;M25 0 L25 40 L10 40 L25 35 L10 35 L25 30 M25 25 L10 30 M25 25 M25 20 L10 25 M25 20 M25 15 L10 20;M25 0 L25 40 L10 40 L25 35 L10 35 L25 30 M25 25 L10 30 M25 25 M25 20 L10 25 M25 20 M25 15 L10 20 M25 15 M25 10 L17.5 12.5;M25 0 L25 40 L10 40 L25 35 L10 35 L25 30 M25 25 L10 30 M25 25 M25 20 L10 25 M25 20 M25 15 L10 20 M25 15 M25 10 L10 15;M25 0 L25 40 L10 40 L25 35 L10 35 L25 30 M25 25 L10 30 M25 25 M25 20 L10 25 M25 20 M25 15 L10 20 M25 15 M25 10 L10 15 M25 10 M25 5 L17.5 7.5".split(";");
            var b = new m({
                url: this.patternUrlPrefix + "windbarb.png",
                height: 20,
                width: 20,
                type: "esriPMS",
                angle: 0
            });
            this.renderer.defaultSymbol = b;
            for (c = 0; c < a.length - 1; c++) 0 == c ? this.renderer.addBreak({
                minValue: a[c],
                maxValue: a[c + 1],
                symbol: b
            }) : this.renderer.addBreak({
                minValue: a[c],
                maxValue: a[c + 1],
                symbol: (new l).setPath(d[c]).setOutline((new n).setWidth(1.5)).setSize(20).setColor(new f([0, 0, 0, 255]))
            })
        },
        _getDefaultSymbol: function(a) {
            return (new l).setPath("M14,32 14,18 9,23 16,3 22,23 17,18 17,32 z").setOutline((new n).setWidth(0)).setSize(20).setColor(a ||
                new f([0, 92, 230]))
        },
        _getRotationInfo: function(a) {
            var c = a && a.flowRepresentation || b.FLOW_FROM,
                d = a && a.rotationField || "Direction",
                e = b.FLOW_FROM;
            return {
                field: function(a) {
                    a = a.attributes[d];
                    return c === e ? a : a + 180
                },
                type: "geographic"
            }
        },
        _addBreaks: function(a, c) {
            if (!e.isDefined(this.renderer)) return Error("Invalid Renderer!");
            if (!a || !c || !a.length || !c.length || !(a.length >= c.length)) return Error("AddBreaks: Input arguments break values and colors not valid");
            var b;
            for (b = 0; b < c.length; b++) this.renderer.addBreak({
                minValue: a[b],
                maxValue: a[b + 1],
                symbol: this._getDefaultSymbol(new f(c[b]))
            })
        },
        toJson: function() {
            var a = k.mixin(this.inherited(arguments), {
                type: "vectorField",
                style: this.style,
                attributeField: this.attributeField,
                flowRepresentation: this.flowRepresentation
            });
            this.renderer && (this.renderer.defaultSymbol && this.style === b.STYLE_SINGLE_ARROW) && (a.singleArrowSymbol = this.renderer.defaultSymbol.toJson());
            return e.fixJson(a)
        }
    });
    k.mixin(b, {
        STYLE_WIND_BARBS: "wind_speed",
        STYLE_SINGLE_ARROW: "single_arrow",
        STYLE_CLASSIFIED_ARROW: "classified_arrow",
        STYLE_BEAUFORT_KN: "beaufort_kn",
        STYLE_BEAUFORT_METER: "beaufort_m",
        STYLE_BEAUFORT_MILE: "beaufort_mi",
        STYLE_BEAUFORT_FEET: "beaufort_ft",
        STYLE_BEAUFORT_KM: "beaufort_km",
        STYLE_OCEAN_CURRENT_M: "ocean_current_m",
        STYLE_OCEAN_CURRENT_KN: "ocean_current_kn",
        STYLE_SCALAR: "simple_scalar"
    }, {
        FLOW_FROM: "flow_from",
        FLOW_TO: "flow_to"
    });
    return b
});
},
'esri/renderers/DotDensityRenderer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-construct", "dojo/has", "dojox/gfx/_base", "../kernel", "../lang", "../Color", "./Renderer", "../symbols/PictureFillSymbol", "../geometry/ScreenPoint", "../geometry/Point"], function(p, m, q, r, w, s, x, h, k, t, u, v, n) {
    return p(t, {
        declaredClass: "esri.renderer.DotDensityRenderer",
        constructor: function(a) {
            this.dotSize = a.dotSize || 3;
            this.dotValue = a.dotValue;
            this.fields = a.fields;
            this.outline = a.outline;
            this.backgroundColor = a.backgroundColor;
            this.exactCount = a.exactCount ||
                !0;
            this.dotShape = a.dotShape || "square";
            this.legendOptions = a.legendOptions;
            this._exactCountMinArea = 1E4;
            this._currentMapScale = this._map = this._canvas = null;
            this._symbolMap = {};
            this._currentGraphic = this._currentResolution = this._objectIdField = null;
            this._supportsCanvas = window.CanvasRenderingContext2D ? !0 : !1;
            window.CanvasRenderingContext2D || console.log("The DotDensityRenderer requires a Canvas enabled Browser.  IE8 and less does not support Canvas.")
        },
        getSymbol: function(a) {
            var b, c;
            this._currentGraphic = a;
            if (!this._supportsCanvas) return null;
            this._map || (this._map = a.getLayer()._map, this._objectIdField = a.getLayer().objectIdField, this._currentMapScale = this._map.getScale(), this._currentResolution = this._map.extent.getWidth() / this._map.width, this._map.on("zoom-end", m.hitch(this, function(a) {
                this._currentMapScale = this._map.getScale();
                this._currentResolution = a.extent.getWidth() / this._map.width;
                this._symbolMap[this._currentMapScale] = {}
            })));
            if (this._symbolMap[this._currentMapScale] && this._symbolMap[this._currentMapScale][a.attributes[this._objectIdField]]) return b =
                this._symbolMap[this._currentMapScale][a.attributes[this._objectIdField]], c = this._getShapeProperties(a), b.setOffset(c.dx, c.dy), b;
            b = this._generateFieldsCount(this.fields, a.attributes, this.dotValue);
            c = this._getShapeProperties(a);
            b = new u(this._generateImageSrc(c.width, c.height, b, c.minXY, c.maxXY), this.outline, c.width, c.height);
            b.setOffset(c.dx, c.dy);
            this._symbolMap[this._currentMapScale] || (this._symbolMap[this._currentMapScale] = {});
            return this._symbolMap[this._currentMapScale][a.attributes[this._objectIdField]] =
                b
        },
        _generateFieldsCount: function(a, b, c) {
            var e, d;
            for (d = a.length - 1; 0 <= d; d--) e = b[a[d].name] / c, a[d].numPoints = Math.round(e);
            return a
        },
        _getShapeProperties: function(a) {
            var b, c, e, d;
            b = a.geometry.getExtent();
            b.contains(this._map.extent) && (b = this._map.extent);
            e = Math.ceil(b.getWidth() / this._currentResolution);
            d = Math.ceil(b.getHeight() / this._currentResolution);
            c = this._map.toScreen(new n(b.xmin, b.ymin, b.spatialReference));
            b = this._map.toScreen(new n(b.xmax, b.ymax, b.spatialReference));
            a = a.getLayer().getNode().getCTM();
            return {
                minXY: c,
                maxXY: b,
                dx: (c.x - a.e) % e,
                dy: (b.y - a.f) % d,
                width: e,
                height: d
            }
        },
        _generateImageSrc: function(a, b, c, e, d, f) {
            var h = this.dotSize,
                g, k, l;
            this._canvas ? (this._canvas.width = a, this._canvas.height = b) : this._canvas = this._initCanvas(a, b);
            g = this._canvas.getContext("2d");
            if (f = f || this.backgroundColor) g.fillStyle = f.toCss(!0), g.fillRect(0, 0, a, b), g.fill();
            for (f = c.length - 1; 0 <= f; f--) {
                g.fillStyle = c[f].color.toCss(!0);
                for (k = c[f].numPoints - 1; 0 <= k; k--) l = this._getRandomPoint(a, b, e, d), "square" === this.dotShape ? g.fillRect(l.x,
                    l.y, h, h) : "circle" === this.dotShape && (g.beginPath(), g.arc(l.x, l.y, h / 2, 0, 2 * Math.PI, !0)), g.fill()
            }
            return this._canvas.toDataURL()
        },
        _initCanvas: function(a, b) {
            var c = r.create("canvas", {
                id: "canvas",
                width: a + "px",
                height: b + "px",
                style: "position: absolute; left: -10000px; top: 0px;"
            }, null);
            document.body.appendChild(c);
            return c
        },
        _getRandomInt: function(a, b) {
            return Math.floor(Math.random() * (b - a + 1) + a)
        },
        _getRandomPoint: function(a, b, c, e) {
            var d = {},
                f = this.outline && this.outline.width ? this.outline.width : 0;
            if (!0 === this.exactCount &&
                a * b > this._exactCountMinArea) {
                do d.x = this._getRandomInt(c.x, e.x), d.y = this._getRandomInt(e.y, c.y), a = new v(d.x, d.y), a = this._checkPointShapeBounds(a, this.dotSize + f, this._currentGraphic.geometry), !0 === a && (d.x -= c.x, d.y -= e.y); while (!1 === a)
            } else d.x = this._getRandomInt(0, a), d.y = this._getRandomInt(0, b);
            return d
        },
        _checkPointShapeBounds: function(a, b, c) {
            var e = null,
                e = !1,
                d = !0,
                f = 0;
            do {
                switch (f) {
                    case 1:
                        a.x += b;
                        break;
                    case 2:
                        a.y += b;
                        break;
                    case 3:
                        a.x -= b
                }
                e = this._map.toMap(a);
                e = c.contains(e);
                !1 === e && (d = !1);
                f += 1
            } while (3 >=
                f && !0 === d);
            return e
        },
        setDotSize: function(a) {
            0 < a && (this.dotSize = a)
        },
        setDotValue: function(a) {
            0 < a && (this.dotValue = a)
        },
        setOutline: function(a) {
            this.outline = a
        },
        setBackgroundColor: function(a) {
            this.backgroundColor = a
        },
        toJson: function() {
            var a = m.mixin(this.inherited(arguments), {
                type: "dotDensity",
                backgroundColor: k.toJsonColor(this.backgroundColor),
                dotShape: this.dotShape,
                dotSize: 0 < this.dotSize ? s.px2pt(this.dotSize) : 0,
                dotValue: this.dotValue,
                fields: q.map(this.fields, function(a) {
                    return h.fixJson({
                        color: k.toJsonColor(a.color),
                        name: a.name
                    })
                }),
                legendOptions: this.legendOptions && h.fixJson({
                    backgroundColor: k.toJsonColor(this.legendOptions.backgroundColor),
                    dotCoverage: this.legendOptions.dotCoverage,
                    outline: this.legendOptions.outline && this.legendOptions.outline.toJson(),
                    valueUnit: this.legendOptions.valueUnit
                }),
                outline: this.outline && this.outline.toJson()
            });
            return h.fixJson(a)
        }
    })
});
},
'esri/renderers/ScaleDependentRenderer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/has", "../kernel", "../lang", "./Renderer"], function(m, n, p, r, s, l, q) {
    return m(q, {
        declaredClass: "esri.renderer.ScaleDependentRenderer",
        constructor: function(a) {
            this.setRendererInfos(a && a.rendererInfos || [])
        },
        setRendererInfos: function(a) {
            this.rendererInfos = a;
            this._setRangeType();
            return this
        },
        getSymbol: function(a) {
            var b = this.getRendererInfo(a);
            return b && b.renderer && b.renderer.getSymbol(a)
        },
        getRendererInfo: function(a) {
            a = a.getLayer().getMap();
            return "zoom" === this.rangeType ? this.getRendererInfoByZoom(a.getZoom()) : this.getRendererInfoByScale(a.getScale())
        },
        getRendererInfoByZoom: function(a) {
            var b, c = this.rendererInfos,
                e, d = 0;
            do b = c[d], a >= b.minZoom && a <= b.maxZoom && (e = b), d++; while (!e && d < c.length);
            return e
        },
        getRendererInfoByScale: function(a) {
            var b, c = this.rendererInfos,
                e, d = 0,
                f, g, h, k;
            do b = c[d], f = b.minScale, g = b.maxScale, h = !f, k = !g, !h && a <= f && (h = !0), !k && a >= g && (k = !0), h && k && (e = b), d++; while (!e && d < c.length);
            return e
        },
        addRendererInfo: function(a) {
            var b, c = 0,
                e, d = this.rendererInfos,
                f = a.hasOwnProperty("minZoom") ? "minZoom" : "minScale",
                g = d.length;
            do {
                e = d[c];
                if (g === c || a[f] < e[f]) d.splice(c, 0, a), this._setRangeType(), b = !0;
                c++
            } while (!b && c < g);
            return this
        },
        _setRangeType: function() {
            var a = this.rendererInfos;
            if (a = a && a[0]) this.rangeType = a.hasOwnProperty("minZoom") ? "zoom" : a.hasOwnProperty("minScale") ? "scale" : ""
        },
        toJson: function() {
            if ("zoom" === this.rangeType) return null;
            var a = this.rendererInfos || [],
                b = a[0] && a[0].minScale,
                a = p.mixin(this.inherited(arguments), {
                    type: "scaleDependent",
                    minScale: 0 < b ? b : 0,
                    rendererInfos: n.map(a, function(a) {
                        return l.fixJson({
                            maxScale: 0 < a.maxScale ? a.maxScale : 0,
                            renderer: a.renderer && a.renderer.toJson()
                        })
                    })
                });
            return l.fixJson(a)
        }
    })
});
},
'esri/renderers/TimeClassBreaksAger':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/array", "dojo/_base/lang", "dojo/has", "dojo/date", "../kernel", "../lang", "../symbols/jsonUtils", "../Color", "./SymbolAger"], function(k, l, m, t, n, u, p, q, r, s) {
    var b = k(s, {
        declaredClass: "esri.renderer.TimeClassBreaksAger",
        constructor: function(c, a) {
            this.infos = c;
            this.timeUnits = a || "day";
            c.sort(function(a, c) {
                return a.minAge < c.minAge ? -1 : a.minAge > c.minAge ? 1 : 0
            })
        },
        getAgedSymbol: function(c, a) {
            var e = a.getLayer(),
                b = a.attributes,
                f = p.isDefined;
            c = q.fromJson(c.toJson());
            var g = e._map.timeExtent.endTime;
            if (!g) return c;
            var h = n.difference(new Date(b[e._startTimeField]), g, this.timeUnits);
            l.some(this.infos, function(a) {
                if (h >= a.minAge && h <= a.maxAge) {
                    var e = a.color,
                        b = a.size;
                    a = a.alpha;
                    e && c.setColor(e);
                    f(b) && this._setSymbolSize(c, b);
                    f(a) && c.color && (c.color.a = a);
                    return !0
                }
            }, this);
            return c
        },
        toJson: function() {
            var c = {
                    agerClassBreakInfos: []
                },
                a, b, d;
            c.timeUnits = this._getRestUnits(this.timeUnits);
            for (a = 0; a < this.infos.length; a += 1) b = this.infos[a], d = {}, d.oldestAge = Infinity === b.maxAge ? null : b.maxAge, d.size = b.size, b.color &&
                (d.color = r.toJsonColor(b.color)), b.alpha && (d.alpha = Math.round(255 * b.alpha)), c.agerClassBreakInfos[a] = d;
            return c
        },
        _getRestUnits: function(c) {
            var a = "esriTimeUnitsDays";
            switch (c) {
                case b.UNIT_SECONDS:
                    a = "esriTimeUnitsSeconds";
                    break;
                case b.UNIT_MILLISECONDS:
                    a = "esriTimeUnitsMilliseconds";
                    break;
                case b.UNIT_HOURS:
                    a = "esriTimeUnitsHours";
                    break;
                case b.UNIT_MINUTES:
                    a = "esriTimeUnitsMinutes";
                    break;
                case b.UNIT_MONTHS:
                    a = "esriTimeUnitsMonths";
                    break;
                case b.UNIT_WEEKS:
                    a = "esriTimeUnitsWeeks";
                    break;
                case b.UNIT_YEARS:
                    a =
                        "esriTimeUnitsYears"
            }
            return a
        }
    });
    m.mixin(b, {
        UNIT_DAYS: "day",
        UNIT_HOURS: "hour",
        UNIT_MILLISECONDS: "millisecond",
        UNIT_MINUTES: "minute",
        UNIT_MONTHS: "month",
        UNIT_SECONDS: "second",
        UNIT_WEEKS: "week",
        UNIT_YEARS: "year"
    });
    return b
});
},
'esri/renderers/SymbolAger':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel"], function(c, d, e, f) {
    return c(null, {
        declaredClass: "esri.renderer.SymbolAger",
        getAgedSymbol: function(a, b) {},
        _setSymbolSize: function(a, b) {
            switch (a.type) {
                case "simplemarkersymbol":
                    a.setSize(b);
                    break;
                case "picturemarkersymbol":
                    a.setWidth(b);
                    a.setHeight(b);
                    break;
                case "simplelinesymbol":
                case "cartographiclinesymbol":
                    a.setWidth(b);
                    break;
                case "simplefillsymbol":
                case "picturefillsymbol":
                    a.outline && a.outline.setWidth(b)
            }
        }
    })
});
},
'esri/renderers/TimeRampAger':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/Color", "dojo/has", "../kernel", "../symbols/jsonUtils", "../Color", "./SymbolAger"], function(n, s, p, t, u, q, m, r) {
    return n(r, {
        declaredClass: "esri.renderer.TimeRampAger",
        constructor: function(e, k, a) {
            this.colorRange = e;
            this.sizeRange = k;
            this.alphaRange = a
        },
        getAgedSymbol: function(e, k) {
            var a = k.getLayer(),
                c = k.attributes;
            e = q.fromJson(e.toJson());
            var b = a._map.timeExtent,
                d = b.startTime,
                b = b.endTime;
            if (!d || !b) return e;
            d = d.getTime();
            b = b.getTime();
            a = new Date(c[a._startTimeField]);
            a = a.getTime();
            a < d && (a = d);
            d = b === d ? 1 : (a - d) / (b - d);
            if (a = this.sizeRange) c = a[0], b = a[1], a = Math.abs(b - c) * d, this._setSymbolSize(e, c < b ? c + a : c - a);
            if (a = this.colorRange) {
                var b = a[0],
                    g = a[1],
                    l = Math.round,
                    c = new p,
                    f = b.r,
                    h = g.r,
                    a = Math.abs(h - f) * d;
                c.r = l(f < h ? f + a : f - a);
                f = b.g;
                h = g.g;
                a = Math.abs(h - f) * d;
                c.g = l(f < h ? f + a : f - a);
                f = b.b;
                h = g.b;
                a = Math.abs(h - f) * d;
                c.b = l(f < h ? f + a : f - a);
                b = b.a;
                g = g.a;
                a = Math.abs(g - b) * d;
                c.a = b < g ? b + a : b - a;
                e.setColor(c)
            }
            c = e.color;
            if ((a = this.alphaRange) && c) b = a[0], g = a[1], a = Math.abs(g - b) * d, c.a = b < g ? b + a : b - a;
            return e
        },
        toJson: function() {
            var e = {};
            this.sizeRange && (e.sizeRange = this.sizeRange);
            this.colorRange && (e.colorRange = [m.toJsonColor(this.colorRange[0]), m.toJsonColor(this.colorRange[1])]);
            this.alphaRange && (e.alphaRange = [Math.round(255 * this.alphaRange[0]), Math.round(255 * this.alphaRange[1])]);
            return e
        }
    })
});
},
'esri/renderers/TemporalRenderer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "./Renderer"], function(f, h, k, l, g) {
    return f(g, {
        declaredClass: "esri.renderer.TemporalRenderer",
        constructor: function(a, d, c, b) {
            this.observationRenderer = a;
            this.latestObservationRenderer = d;
            this.trackRenderer = c;
            this.observationAger = b
        },
        getSymbol: function(a) {
            var d = a.getLayer(),
                c = this.getObservationRenderer(a),
                b = c && c.getSymbol(a),
                e = this.observationAger;
            d.timeInfo && (d._map.timeExtent && c === this.observationRenderer && e && b) && (b = e.getAgedSymbol(b,
                a));
            return b
        },
        getObservationRenderer: function(a) {
            return 0 === a.getLayer()._getKind(a) ? this.observationRenderer : this.latestObservationRenderer || this.observationRenderer
        },
        toJson: function() {
            var a = {
                type: "temporal"
            };
            a.observationRenderer = this.observationRenderer.toJson();
            this.latestObservationRenderer && (a.latestObservationRenderer = this.latestObservationRenderer.toJson());
            this.trackRenderer && (a.trackRenderer = this.trackRenderer.toJson());
            this.observationAger && (a.observationAger = this.observationAger.toJson());
            return a
        }
    })
});
},
'esri/renderers/HeatmapRenderer':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/dom-construct", "../sniff", "../kernel", "../lang", "../symbols/PictureMarkerSymbol", "../Color", "./Renderer"], function(m, k, h, n, s, t, p, q, l, r) {
    return m([r], {
        declaredClass: "esri.renderer.HeatmapRenderer",
        colors: null,
        blurRadius: 10,
        maxPixelIntensity: 100,
        minPixelIntensity: 0,
        field: null,
        fieldOffset: null,
        colorStops: null,
        constructor: function(a) {
            (this._supportsCanvas = window.CanvasRenderingContext2D ? !0 : !1) ? ("string" == typeof a && (a = JSON.parse(a)), k.mixin(this,
                a), this._canvas = null, !this.colors && !this.colorStops && (this.colorStops = [{
                ratio: 0,
                color: "rgba(255, 140, 0, 0)"
            }, {
                ratio: 0.75,
                color: "rgba(255, 140, 0, 1)"
            }, {
                ratio: 0.9,
                color: "rgba(255, 0,   0, 1)"
            }]), this.gradient = this._generateGradient(this.colorStops || this.colors)) : console.log("The HeatmapRenderer requires a Canvas enabled Browser.  IE8 and less does not support Canvas.")
        },
        getSymbol: function(a) {
            if (!this._supportsCanvas) return !1;
            var b = a.attributes.imageData;
            a = a.attributes.size;
            if (!a) return null;
            var c =
                this._getContext(a[0], a[1]),
                d = c.getImageData(0, 0, a[0], a[1]);
            window.ArrayBuffer && b instanceof ArrayBuffer ? b = window.Uint8ClampedArray ? new Uint8ClampedArray(b) : new Uint8Array(b) : b.BYTES_PER_ELEMENT && 1 !== b.BYTES_PER_ELEMENT && (b = window.Uint8ClampedArray ? new Uint8ClampedArray(b.buffer) : new Uint8Array(b.buffer));
            if (window.CanvasPixelArray && d.data instanceof window.CanvasPixelArray)
                for (var f = d.data, e = f.length; e--;) f[e] = b[e];
            else d.data.set(b);
            c.putImageData(d, 0, 0);
            return new q(c.canvas.toDataURL(), a[0], a[1])
        },
        setColors: function(a) {
            if (a && (a instanceof Array || a.colors)) this.gradient = this._generateGradient(a.colors || a), this.colors = a;
            return this
        },
        setColorStops: function(a) {
            if (a && (a instanceof Array || a.colorStops)) this.gradient = this._generateGradient(a.colorStops || a), this.colorStops = a;
            return this
        },
        setMaxPixelIntensity: function(a) {
            this.maxPixelIntensity = a;
            return this
        },
        setMinPixelIntensity: function(a) {
            this.minPixelIntensity = a;
            return this
        },
        setField: function(a) {
            this.field = a;
            return this
        },
        setFieldOffset: function(a) {
            this.fieldOffset =
                a;
            return this
        },
        setBlurRadius: function(a) {
            this.blurRadius = a;
            return this
        },
        getStats: function() {},
        getHistogramData: function() {},
        toJson: function() {
            var a = k.mixin(this.inherited(arguments), {
                type: "heatmap",
                blurRadius: this.blurRadius,
                colorStops: this._colorsToStops(this.colorStops || this.colors),
                maxPixelIntensity: this.maxPixelIntensity,
                minPixelIntensity: this.minPixelIntensity,
                field: this.field
            });
            null != this.fieldOffset && (a.fieldOffset = this.fieldOffset);
            h.forEach(a.colorStops, function(a) {
                a.color = l.toJsonColor(a.color)
            });
            return p.fixJson(a)
        },
        _getContext: function(a, b) {
            this._canvas ? (this._canvas.width = a, this._canvas.height = b) : this._canvas = this._initCanvas(a, b);
            return this._canvas.getContext("2d")
        },
        _initCanvas: function(a, b) {
            var c = n.create("canvas", {
                id: "hm_canvas-" + Math.floor(1E3 * Math.random()),
                style: "position: absolute; left: -10000px; top: 0px;"
            }, null);
            c.width = a;
            c.height = b;
            document.body.appendChild(c);
            return c
        },
        _generateGradient: function(a, b) {
            b || (b = 512);
            for (var c = this._colorsToStops(a), d = this._getContext(1, b || 512),
                    f = d.createLinearGradient(0, 0, 0, b), e = 0, g; e < c.length; e++) g = c[e], f.addColorStop(g.ratio, g.color.toCss(!0));
            d.fillStyle = f;
            d.fillRect(0, 0, 1, b);
            return d.getImageData(0, 0, 1, b).data
        },
        _colorsToStops: function(a) {
            var b = [];
            if (!a[0]) return b;
            if (null != a[0].ratio) b = h.map(a, function(a) {
                return {
                    ratio: a.ratio,
                    color: this._toColor(a.color)
                }
            }, this);
            else if (null != a[0].value) {
                var c = Infinity,
                    b = -Infinity,
                    d = 0,
                    f;
                for (f = 0; f < a.length; f++) {
                    var e = a[f].value;
                    e < c && (c = e);
                    e > b && (b = e)
                }
                d = b - c;
                this.maxPixelIntensity = b;
                this.minPixelIntensity =
                    c;
                b = h.map(a, function(a) {
                    var b = a.value;
                    a = this._toColor(a.color);
                    return {
                        value: b,
                        ratio: (b - c) / d,
                        color: a
                    }
                }, this)
            } else var g = a.length - 1,
                b = h.map(a, function(a, b) {
                    return {
                        color: this._toColor(a),
                        ratio: b / g
                    }
                }, this);
            return b
        },
        _toColor: function(a) {
            !a.toRgba && !a.declaredClass && (a = new l(a));
            return a
        }
    })
});
},
'esri/tasks/QueryTask':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/_base/Deferred", "dojo/_base/json", "dojo/has", "../kernel", "../request", "../deferredUtils", "../geometry/Extent", "../geometry/normalizeUtils", "./Task", "./FeatureSet"], function(l, g, p, q, m, w, x, k, r, s, t, u, n) {
    l = l(u, {
        declaredClass: "esri.tasks.QueryTask",
        _eventMap: {
            complete: ["featureSet"],
            "execute-for-count-complete": ["count"],
            "execute-for-ids-complete": ["objectIds"],
            "execute-relationship-query-complete": ["featureSets"]
        },
        constructor: function(a, f) {
            this._handler =
                g.hitch(this, this._handler);
            this._relationshipQueryHandler = g.hitch(this, this._relationshipQueryHandler);
            this._executeForIdsHandler = g.hitch(this, this._executeForIdsHandler);
            this._countHandler = g.hitch(this, this._countHandler);
            this._extentHandler = g.hitch(this, this._extentHandler);
            this.source = f && f.source;
            this.gdbVersion = f && f.gdbVersion;
            this.registerConnectEvents()
        },
        __msigns: [{
            n: "execute",
            c: 4,
            a: [{
                i: 0,
                p: ["geometry"]
            }],
            e: 2
        }, {
            n: "executeForIds",
            c: 3,
            a: [{
                i: 0,
                p: ["geometry"]
            }],
            e: 2
        }, {
            n: "executeForCount",
            c: 3,
            a: [{
                i: 0,
                p: ["geometry"]
            }],
            e: 2
        }, {
            n: "executeForExtent",
            c: 3,
            a: [{
                i: 0,
                p: ["geometry"]
            }],
            e: 2
        }],
        onComplete: function() {},
        onExecuteRelationshipQueryComplete: function() {},
        onExecuteForIdsComplete: function() {},
        onExecuteForCountComplete: function() {},
        onExecuteForExtentComplete: function() {},
        execute: function(a, f, e, c, b) {
            var d = b.assembly;
            a = this._encode(g.mixin({}, this._url.query, {
                f: "json"
            }, a.toJson(d && d[0])));
            var h = this._handler,
                v = this._errorHandler;
            this.source && (d = {
                source: this.source.toJson()
            }, a.layer = m.toJson(d));
            this.gdbVersion &&
                (a.gdbVersion = this.gdbVersion);
            return k({
                url: this._url.path + "/query",
                content: a,
                callbackParamName: "callback",
                load: function(a, d) {
                    h(a, d, f, e, b.dfd)
                },
                error: function(a) {
                    v(a, e, b.dfd)
                },
                callbackSuffix: c
            }, this.requestOptions)
        },
        executeRelationshipQuery: function(a, f, e) {
            a = this._encode(g.mixin({}, this._url.query, {
                f: "json"
            }, a.toJson()));
            var c = this._relationshipQueryHandler,
                b = this._errorHandler;
            this.gdbVersion && (a.gdbVersion = this.gdbVersion);
            var d = new q(r._dfdCanceller);
            d._pendingDfd = k({
                url: this._url.path + "/queryRelatedRecords",
                content: a,
                callbackParamName: "callback",
                load: function(a, b) {
                    c(a, b, f, e, d)
                },
                error: function(a) {
                    b(a, e, d)
                }
            }, this.requestOptions);
            return d
        },
        executeForIds: function(a, f, e, c) {
            var b = c.assembly;
            a = this._encode(g.mixin({}, this._url.query, {
                f: "json",
                returnIdsOnly: !0
            }, a.toJson(b && b[0])));
            var d = this._executeForIdsHandler,
                h = this._errorHandler;
            this.source && (b = {
                source: this.source.toJson()
            }, a.layer = m.toJson(b));
            this.gdbVersion && (a.gdbVersion = this.gdbVersion);
            return k({
                url: this._url.path + "/query",
                content: a,
                callbackParamName: "callback",
                load: function(a, b) {
                    d(a, b, f, e, c.dfd)
                },
                error: function(a) {
                    h(a, e, c.dfd)
                }
            }, this.requestOptions)
        },
        executeForCount: function(a, f, e, c) {
            var b = c.assembly;
            a = this._encode(g.mixin({}, this._url.query, {
                f: "json",
                returnIdsOnly: !0,
                returnCountOnly: !0
            }, a.toJson(b && b[0])));
            var d = this._countHandler,
                h = this._errorHandler;
            this.source && (b = {
                source: this.source.toJson()
            }, a.layer = m.toJson(b));
            this.gdbVersion && (a.gdbVersion = this.gdbVersion);
            return k({
                url: this._url.path + "/query",
                content: a,
                callbackParamName: "callback",
                load: function(a,
                    b) {
                    d(a, b, f, e, c.dfd)
                },
                error: function(a) {
                    h(a, e, c.dfd)
                }
            }, this.requestOptions)
        },
        executeForExtent: function(a, f, e, c) {
            var b = c.assembly;
            a = this._encode(g.mixin({}, this._url.query, {
                f: "json",
                returnExtentOnly: !0,
                returnCountOnly: !0
            }, a.toJson(b && b[0])));
            var d = this._extentHandler,
                h = this._errorHandler;
            this.source && (b = {
                source: this.source.toJson()
            }, a.layer = m.toJson(b));
            this.gdbVersion && (a.gdbVersion = this.gdbVersion);
            return k({
                url: this._url.path + "/query",
                content: a,
                callbackParamName: "callback",
                load: function(a, b) {
                    d(a,
                        b, f, e, c.dfd)
                },
                error: function(a) {
                    h(a, e, c.dfd)
                }
            }, this.requestOptions)
        },
        _handler: function(a, f, e, c, b) {
            try {
                var d = new n(a);
                this._successHandler([d], "onComplete", e, b)
            } catch (h) {
                this._errorHandler(h, c, b)
            }
        },
        _relationshipQueryHandler: function(a, f, e, c, b) {
            try {
                var d = a.geometryType,
                    h = a.spatialReference,
                    g = {};
                p.forEach(a.relatedRecordGroups, function(a) {
                    var b = {};
                    b.geometryType = d;
                    b.spatialReference = h;
                    b.features = a.relatedRecords;
                    b = new n(b);
                    if (null != a.objectId) g[a.objectId] = b;
                    else
                        for (var c in a) a.hasOwnProperty(c) &&
                            "relatedRecords" !== c && (g[a[c]] = b)
                });
                this._successHandler([g], "onExecuteRelationshipQueryComplete", e, b)
            } catch (k) {
                this._errorHandler(k, c, b)
            }
        },
        _executeForIdsHandler: function(a, f, e, c, b) {
            try {
                this._successHandler([a.objectIds], "onExecuteForIdsComplete", e, b)
            } catch (d) {
                this._errorHandler(d, c, b)
            }
        },
        _countHandler: function(a, f, e, c, b) {
            try {
                var d, g = a.features,
                    k = a.objectIds;
                if (k) d = k.length;
                else {
                    if (g) throw Error("Unable to perform query. Please check your parameters.");
                    d = a.count
                }
                this._successHandler([d], "onExecuteForCountComplete",
                    e, b)
            } catch (l) {
                this._errorHandler(l, c, b)
            }
        },
        _extentHandler: function(a, f, e, c, b) {
            try {
                a.extent && (a.extent = new s(a.extent)), this._successHandler([a], "onExecuteForExtentComplete", e, b)
            } catch (d) {
                this._errorHandler(d, c, b)
            }
        }
    });
    t._createWrappers(l);
    return l
});
},
'esri/geometry/normalizeUtils':function(){
//>>built
define(["dojo/_base/array", "dojo/_base/lang", "dojo/_base/Deferred", "dojo/has", "../kernel", "../config", "../deferredUtils", "./Polyline", "./Polygon", "./webMercatorUtils", "./jsonUtils"], function(h, m, E, M, N, K, y, v, A, z, L) {
    function w(a, f) {
        return Math.ceil((a - f) / (2 * f))
    }

    function B(a, f) {
        var c = a.paths || a.rings,
            b, e, d = c.length,
            n;
        for (b = 0; b < d; b++) {
            n = c[b].length;
            for (e = 0; e < n; e++) {
                var p = a.getPoint(b, e);
                a.setPoint(b, e, p.offset(f, 0))
            }
        }
        return a
    }

    function F(a, f) {
        if (!(a instanceof v || a instanceof A)) throw console.error("_straightLineDensify: the input geometry is neither polyline nor polygon"),
            Error("_straightLineDensify: the input geometry is neither polyline nor polygon");
        var c = a instanceof v,
            b = [],
            e;
        h.forEach(c ? a.paths : a.rings, function(a) {
            b.push(e = []);
            e.push([a[0][0], a[0][1]]);
            var n, c, q, l, k, g, h, x, m, r, s, t;
            for (k = 0; k < a.length - 1; k++) {
                n = a[k][0];
                c = a[k][1];
                q = a[k + 1][0];
                l = a[k + 1][1];
                h = Math.sqrt((q - n) * (q - n) + (l - c) * (l - c));
                x = (l - c) / h;
                m = (q - n) / h;
                r = h / f;
                if (1 < r) {
                    for (g = 1; g <= r - 1; g++) t = g * f, s = m * t + n, t = x * t + c, e.push([s, t]);
                    g = (h + Math.floor(r - 1) * f) / 2;
                    s = m * g + n;
                    t = x * g + c;
                    e.push([s, t])
                }
                e.push([q, l])
            }
        });
        return c ? new v({
            paths: b,
            spatialReference: a.spatialReference
        }) : new A({
            rings: b,
            spatialReference: a.spatialReference
        })
    }

    function C(a, f, c) {
        f && (a = F(a, 1E6), a = z.webMercatorToGeographic(a, !0));
        c && (a = B(a, c));
        return a
    }

    function D(a, f, c) {
        var b = a.x || a[0],
            e;
        b > f ? (e = w(b, f), a.x ? a = a.offset(e * -2 * f, 0) : a[0] = b + e * -2 * f) : b < c && (e = w(b, c), a.x ? a = a.offset(e * -2 * c, 0) : a[0] = b + e * -2 * c);
        return a
    }

    function G(a, f) {
        var c = -1;
        h.forEach(f.cutIndexes, function(b, e) {
            var d = f.geometries[e];
            h.forEach(d.rings || d.paths, function(a, e) {
                h.some(a, function(b) {
                    if (!(180 > b[0])) {
                        b = 0;
                        var c, f = a.length,
                            g;
                        for (c = 0; c < f; c++) g = a[c][0], b = g > b ? g : b;
                        b = Number(b.toFixed(9));
                        b = -360 * w(b, 180);
                        f = a.length;
                        for (c = 0; c < f; c++) g = d.getPoint(e, c), d.setPoint(e, c, g.offset(b, 0))
                    }
                    return !0
                })
            });
            b === c ? d.rings ? h.forEach(d.rings, function(d) {
                a[b] = a[b].addRing(d)
            }) : h.forEach(d.paths, function(d) {
                a[b] = a[b].addPath(d)
            }) : (c = b, a[b] = d)
        });
        return a
    }

    function H(a, f, c, b) {
        var e = new E;
        e.addCallbacks(c, b);
        f = f || K.defaults.geometryService;
        var d = [],
            n = [],
            p, q, l, k, g, m, x, u, r = 0;
        h.forEach(a, function(a) {
            if (a)
                if (p || (p = a.spatialReference,
                        q = p._getInfo(), k = (l = p._isWebMercator()) ? 2.0037508342788905E7 : 180, g = l ? -2.0037508342788905E7 : -180, m = l ? 102100 : 4326, x = new v({
                            paths: [
                                [
                                    [k, g],
                                    [k, k]
                                ]
                            ],
                            spatialReference: {
                                wkid: m
                            }
                        }), u = new v({
                            paths: [
                                [
                                    [g, g],
                                    [g, k]
                                ]
                            ],
                            spatialReference: {
                                wkid: m
                            }
                        })), q) {
                    var b = L.fromJson(a.toJson()),
                        c = a.getExtent();
                    "point" === a.type ? d.push(D(b, k, g)) : "multipoint" === a.type ? (b.points = h.map(b.points, function(a) {
                        return D(a, k, g)
                    }), d.push(b)) : "extent" === a.type ? (b = c._normalize(null, null, q), d.push(b.rings ? new A(b) : b)) : c ? (a = w(c.xmin, g) * 2 * k, b = 0 ===
                        a ? b : B(b, a), c = c.offset(a, 0), c.intersects(x) && c.xmax !== k ? (r = c.xmax > r ? c.xmax : r, b = C(b, l), n.push(b), d.push("cut")) : c.intersects(u) && c.xmin !== g ? (r = c.xmax * 2 * k > r ? c.xmax * 2 * k : r, b = C(b, l, 360), n.push(b), d.push("cut")) : d.push(b)) : d.push(b)
                } else d.push(a);
            else d.push(a)
        });
        c = new v;
        b = w(r, k);
        for (var s = -90, t = b; 0 < b;) {
            var y = -180 + 360 * b;
            c.addPath([
                [y, s],
                [y, -1 * s]
            ]);
            s *= -1;
            b--
        }
        0 < n.length && 0 < t ? f ? f.cut(n, c, function(b) {
            n = G(n, b);
            var c = [];
            h.forEach(d, function(b, e) {
                if ("cut" === b) {
                    var f = n.shift();
                    a[e].rings && 1 < a[e].rings.length &&
                        f.rings.length >= a[e].rings.length ? (d[e] = "simplify", c.push(f)) : d[e] = !0 === l ? z.geographicToWebMercator(f) : f
                }
            });
            0 < c.length ? f.simplify(c, function(a) {
                h.forEach(d, function(b, c) {
                    "simplify" === b && (d[c] = !0 === l ? z.geographicToWebMercator(a.shift()) : a.shift())
                });
                e.callback(d)
            }, function(a) {
                e.errback(a)
            }) : e.callback(d)
        }, function(a) {
            e.errback(a)
        }) : e.errback(Error("esri.geometry.normalizeCentralMeridian: 'geometryService' argument is missing.")) : (h.forEach(d, function(a, b) {
            if ("cut" === a) {
                var c = n.shift();
                d[b] = !0 === l ?
                    z.geographicToWebMercator(c) : c
            }
        }), e.callback(d));
        return e
    }

    function u(a, f, c, b) {
        var e = !1,
            d;
        m.isObject(a) && a && (m.isArray(a) ? a.length && ((d = a[0] && a[0].declaredClass) && -1 !== d.indexOf("Graphic") ? (a = h.map(a, function(a) {
            return a.geometry
        }), e = a.length ? !0 : !1) : d && -1 !== d.indexOf("esri.geometry.") && (e = !0)) : (d = a.declaredClass) && -1 !== d.indexOf("FeatureSet") ? (a = h.map(a.features || [], function(a) {
            return a.geometry
        }), e = a.length ? !0 : !1) : d && -1 !== d.indexOf("esri.geometry.") && (e = !0));
        e && f.push({
            index: c,
            property: b,
            value: a
        })
    }

    function I(a, f) {
        var c = [];
        h.forEach(f, function(b) {
            var e = b.i,
                d = a[e];
            b = b.p;
            var f;
            if (m.isObject(d) && d)
                if (b)
                    if ("*" === b[0])
                        for (f in d) d.hasOwnProperty(f) && u(d[f], c, e, f);
                    else h.forEach(b, function(a) {
                        u(m.getObject(a, !1, d), c, e, a)
                    });
            else u(d, c, e)
        });
        return c
    }

    function J(a, f) {
        var c = 0,
            b = {};
        h.forEach(f, function(e) {
            var d = e.index,
                f = e.property,
                h = e.value,
                q = h.length || 1,
                l = a.slice(c, c + q);
            m.isArray(h) || (l = l[0]);
            c += q;
            delete e.value;
            f ? (b[d] = b[d] || {}, b[d][f] = l) : b[d] = l
        });
        return b
    }
    return {
        normalizeCentralMeridian: H,
        _foldCutResults: G,
        _prepareGeometryForCut: C,
        _offsetMagnitude: w,
        _pointNormalization: D,
        _updatePolyGeometry: B,
        _straightLineDensify: F,
        _createWrappers: function(a) {
            var f = m.isObject(a) ? a.prototype : m.getObject(a + ".prototype");
            h.forEach(f.__msigns, function(a) {
                var b = f[a.n];
                f[a.n] = function() {
                    var e = this,
                        d = [],
                        f, p = new E(y._dfdCanceller);
                    a.f && y._fixDfd(p);
                    for (f = 0; f < a.c; f++) d[f] = arguments[f];
                    var m = {
                        dfd: p
                    };
                    d.push(m);
                    var l, k = [],
                        g;
                    e.normalization && !e._isTable && (l = I(d, a.a), h.forEach(l, function(a) {
                        k = k.concat(a.value)
                    }), k.length && (g = H(k)));
                    g ? (p._pendingDfd = g, g.addCallbacks(function(a) {
                        p.canceled || (m.assembly = J(a, l), p._pendingDfd = b.apply(e, d))
                    }, function(b) {
                        var f = e.declaredClass;
                        f && -1 !== f.indexOf("FeatureLayer") ? e._resolve([b], null, d[a.e], p, !0) : e._errorHandler(b, d[a.e], p)
                    })) : p._pendingDfd = b.apply(e, d);
                    return p
                }
            })
        },
        _disassemble: I,
        _addToBucket: u,
        _reassemble: J
    }
});
},
'esri/tasks/FeatureSet':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/has", "../kernel", "../lang", "../graphic", "../SpatialReference", "../graphicsUtils", "../geometry/jsonUtils", "../symbols/jsonUtils"], function(w, x, y, E, F, z, A, B, C, v, D) {
    return w(null, {
        declaredClass: "esri.tasks.FeatureSet",
        constructor: function(a) {
            if (a) {
                x.mixin(this, a);
                var b = this.features,
                    n = a.spatialReference,
                    p = v.getGeometryType(a.geometryType),
                    n = this.spatialReference = new B(n);
                this.geometryType = a.geometryType;
                a.fields && (this.fields = a.fields);
                y.forEach(b,
                    function(a, l) {
                        var q = a.geometry && a.geometry.spatialReference;
                        b[l] = new A(p && a.geometry ? new p(a.geometry) : null, a.symbol && D.fromJson(a.symbol), a.attributes);
                        b[l].geometry && !q && b[l].geometry.setSpatialReference(n)
                    });
                this._hydrate()
            } else this.features = []
        },
        displayFieldName: null,
        geometryType: null,
        spatialReference: null,
        fieldAliases: null,
        toJson: function(a) {
            var b = {};
            this.displayFieldName && (b.displayFieldName = this.displayFieldName);
            this.fields && (b.fields = this.fields);
            this.spatialReference ? b.spatialReference =
                this.spatialReference.toJson() : this.features[0] && this.features[0].geometry && (b.spatialReference = this.features[0].geometry.spatialReference.toJson());
            this.features[0] && (this.features[0].geometry && (b.geometryType = v.getJsonType(this.features[0].geometry)), b.features = C._encodeGraphics(this.features, a));
            b.exceededTransferLimit = this.exceededTransferLimit;
            b.transform = this.transform;
            return z.fixJson(b)
        },
        _hydrate: function() {
            var a = this.transform;
            if (a) {
                var b = this.features,
                    n, p = a.translate[0],
                    s = a.translate[1],
                    l = a.scale[0],
                    q = a.scale[1],
                    u = function(a, b, r) {
                        if ("esriGeometryPoint" === a) return function(a) {
                            a.x = b(a.x);
                            a.y = r(a.y)
                        };
                        if ("esriGeometryPolyline" === a || "esriGeometryPolygon" === a) return function(a) {
                            a = a.rings || a.paths;
                            var h, k, c, e, f, g, m, d;
                            h = 0;
                            for (k = a.length; h < k; h++) {
                                f = a[h];
                                c = 0;
                                for (e = f.length; c < e; c++) g = f[c], 0 < c ? (m += g[0], d += g[1]) : (m = g[0], d = g[1]), g[0] = b(m), g[1] = r(d)
                            }
                        };
                        if ("esriGeometryEnvelope" === a) return function(a) {
                            a.xmin = b(a.xmin);
                            a.ymin = r(a.ymin);
                            a.xmax = b(a.xmax);
                            a.ymax = r(a.ymax)
                        };
                        if ("esriGeometryMultipoint" ===
                            a) return function(a) {
                            a = a.points;
                            var h, k, c, e, f;
                            h = 0;
                            for (k = a.length; h < k; h++) c = a[h], 0 < h ? (e += c[0], f += c[1]) : (e = c[0], f = c[1]), c[0] = b(e), c[1] = r(f)
                        }
                    }(this.geometryType, function(a) {
                        return a * l + p
                    }, function(a) {
                        return s - a * q
                    }),
                    a = 0;
                for (n = b.length; a < n; a++) b[a].geometry && u(b[a].geometry);
                this.transform = null
            }
        },
        quantize: function(a) {
            var b = a.translate[0],
                n = a.translate[1],
                p = a.scale[0],
                s = a.scale[1],
                l = this.features,
                q = function(a, b, h) {
                    var k, c, e, f, g, m, d = [];
                    k = 0;
                    for (c = a.length; k < c; k++)
                        if (e = a[k], 0 < k) {
                            if (m = b(e[0]), e = h(e[1]), m !==
                                f || e !== g) d.push([m - f, e - g]), f = m, g = e
                        } else f = b(e[0]), g = h(e[1]), d.push([f, g]);
                    return 0 < d.length ? d : null
                },
                u = function(a, b, h) {
                    if ("esriGeometryPoint" === a) return function(a) {
                        a.x = b(a.x);
                        a.y = h(a.y);
                        return a
                    };
                    if ("esriGeometryPolyline" === a || "esriGeometryPolygon" === a) return function(a) {
                        var c, e, f, g, d;
                        f = a.rings || a.paths;
                        d = [];
                        c = 0;
                        for (e = f.length; c < e; c++) g = f[c], (g = q(g, b, h)) && d.push(g);
                        return 0 < d.length ? (a.rings ? a.rings = d : a.paths = d, a) : null
                    };
                    if ("esriGeometryMultipoint" === a) return function(a) {
                        var c;
                        c = q(a.points, b, h);
                        return 0 <
                            c.length ? (a.points = c, a) : null
                    };
                    if ("esriGeometryEnvelope" === a) return function(a) {
                        return a
                    }
                }(this.geometryType, function(a) {
                    return Math.round((a - b) / p)
                }, function(a) {
                    return Math.round((n - a) / s)
                }),
                d, t;
            d = 0;
            for (t = l.length; d < t; d++) u(l[d].geometry) || (l.splice(d, 1), d--, t--);
            this.transform = a;
            return this
        }
    })
});
},
'esri/graphicsUtils':function(){
//>>built
define(["dojo/_base/lang", "dojo/_base/array", "dojo/has", "./kernel", "./geometry/Extent"], function(k, f, l, m, h) {
    return {
        graphicsExtent: function(d) {
            var a = d[0].geometry,
                b = a.getExtent(),
                c, e, g = d.length;
            null === b && (b = new h(a.x, a.y, a.x, a.y, a.spatialReference));
            for (e = 1; e < g; e++) c = (a = d[e].geometry).getExtent(), null === c && (c = new h(a.x, a.y, a.x, a.y, a.spatialReference)), b = b.union(c);
            return 0 > b.getWidth() && 0 > b.getHeight() ? null : b
        },
        getGeometries: function(d) {
            return f.map(d, function(a) {
                return a.geometry
            })
        },
        _encodeGraphics: function(d,
            a) {
            var b = [],
                c, e, g;
            f.forEach(d, function(d, f) {
                c = d.toJson();
                e = {};
                c.geometry && (g = a && a[f], e.geometry = g && g.toJson() || c.geometry);
                c.attributes && (e.attributes = c.attributes);
                b[f] = e
            });
            return b
        }
    }
});
},
'esri/tasks/StatisticDefinition':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel"], function(a, b, c, d) {
    return a(null, {
        declaredClass: "esri.tasks.StatisticDefinition",
        toJson: function() {
            return {
                statisticType: this.statisticType,
                onStatisticField: this.onStatisticField,
                outStatisticFieldName: this.outStatisticFieldName,
                maxPointCount: this.maxPointCount,
                maxRecordCount: this.maxRecordCount,
                maxVertexCount: this.maxVertexCount
            }
        }
    })
});
},
'esri/layers/Field':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "./RangeDomain", "./CodedValueDomain"], function(c, b, f, g, d, e) {
    return c(null, {
        declaredClass: "esri.layers.Field",
        constructor: function(a) {
            if (a && b.isObject(a) && (this.name = a.name, this.type = a.type, this.alias = a.alias, this.length = a.length, this.editable = a.editable, this.nullable = a.nullable, (a = a.domain) && b.isObject(a))) switch (a.type) {
                case "range":
                    this.domain = new d(a);
                    break;
                case "codedValue":
                    this.domain = new e(a)
            }
        }
    })
});
},
'esri/layers/RangeDomain':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../lang", "./Domain"], function(b, c, f, g, d, e) {
    return b([e], {
        declaredClass: "esri.layers.RangeDomain",
        constructor: function(a) {
            a && c.isObject(a) && (this.minValue = a.range[0], this.maxValue = a.range[1])
        },
        toJson: function() {
            var a = this.inherited(arguments);
            a.range = [this.minValue, this.maxValue];
            return d.fixJson(a)
        }
    })
});
},
'esri/layers/Domain':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../lang"], function(b, c, e, f, d) {
    return b(null, {
        declaredClass: "esri.layers.Domain",
        constructor: function(a) {
            a && c.isObject(a) && (this.name = a.name, this.type = a.type)
        },
        toJson: function() {
            return d.fixJson({
                name: this.name,
                type: this.type
            })
        }
    })
});
},
'esri/layers/CodedValueDomain':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/has", "../kernel", "../lang", "./Domain"], function(d, b, e, h, k, f, g) {
    return d([g], {
        declaredClass: "esri.layers.CodedValueDomain",
        constructor: function(a) {
            a && b.isObject(a) && (this.codedValues = a.codedValues)
        },
        getName: function(a) {
            var c;
            e.some(this.codedValues, function(b) {
                b.code == a && (c = b.name);
                return !!c
            });
            return c
        },
        toJson: function() {
            var a = this.inherited(arguments);
            a.codedValues = b.clone(this.codedValues);
            return f.fixJson(a)
        }
    })
});
},
'esri/layers/FeatureType':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/has", "../kernel", "../lang", "../symbols/jsonUtils", "./RangeDomain", "./CodedValueDomain", "./InheritedDomain", "./FeatureTemplate"], function(g, h, k, s, t, l, m, n, p, q, r) {
    return g(null, {
        declaredClass: "esri.layers.FeatureType",
        constructor: function(a) {
            if (a && h.isObject(a)) {
                this.id = a.id;
                this.name = a.name;
                var c = a.symbol;
                c && (this.symbol = m.fromJson(c));
                var c = a.domains,
                    b, e = this.domains = {};
                for (b in c)
                    if (c.hasOwnProperty(b)) {
                        var d = c[b];
                        switch (d.type) {
                            case "range":
                                e[b] =
                                    new n(d);
                                break;
                            case "codedValue":
                                e[b] = new p(d);
                                break;
                            case "inherited":
                                e[b] = new q(d)
                        }
                    }
                if (b = a.templates) {
                    c = this.templates = [];
                    for (a = 0; a < b.length; a++) c.push(new r(b[a]))
                }
            }
        },
        toJson: function() {
            var a = {
                    id: this.id,
                    name: this.name,
                    symbol: this.symbol && this.symbol.toJson()
                },
                c, b = this.domains,
                e = this.templates,
                d = l.fixJson;
            if (b) {
                var f = a.domains = {};
                for (c in b) b.hasOwnProperty(c) && (f[c] = b[c] && b[c].toJson());
                d(f)
            }
            e && (a.templates = k.map(e, function(a) {
                return a.toJson()
            }));
            return d(a)
        }
    })
});
},
'esri/layers/InheritedDomain':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "./Domain"], function(a, c, d, e, b) {
    return a([b], {
        declaredClass: "esri.layers.InheritedDomain"
    })
});
},
'esri/layers/FeatureTemplate':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../lang", "../graphic"], function(b, c, f, g, d, e) {
    b = b(null, {
        declaredClass: "esri.layers.FeatureTemplate",
        constructor: function(a) {
            a && c.isObject(a) && (this.name = a.name, this.description = a.description, this.drawingTool = a.drawingTool, a = a.prototype, this.prototype = new e(a.geometry, null, a.attributes))
        },
        toJson: function() {
            return d.fixJson({
                name: this.name,
                description: this.description,
                drawingTool: this.drawingTool,
                prototype: this.prototype && this.prototype.toJson()
            })
        }
    });
    c.mixin(b, {
        TOOL_AUTO_COMPLETE_POLYGON: "esriFeatureEditToolAutoCompletePolygon",
        TOOL_CIRCLE: "esriFeatureEditToolCircle",
        TOOL_ELLIPSE: "esriFeatureEditToolEllipse",
        TOOL_FREEHAND: "esriFeatureEditToolFreehand",
        TOOL_LINE: "esriFeatureEditToolLine",
        TOOL_NONE: "esriFeatureEditToolNone",
        TOOL_POINT: "esriFeatureEditToolPoint",
        TOOL_POLYGON: "esriFeatureEditToolPolygon",
        TOOL_RECTANGLE: "esriFeatureEditToolRectangle",
        TOOL_ARROW: "esriFeatureEditToolArrow",
        TOOL_TRIANGLE: "esriFeatureEditToolTriangle",
        TOOL_LEFT_ARROW: "esriFeatureEditToolLeftArrow",
        TOOL_RIGHT_ARROW: "esriFeatureEditToolRightArrow",
        TOOL_UP_ARROW: "esriFeatureEditToolUpArrow",
        TOOL_DOWN_ARROW: "esriFeatureEditToolDownArrow"
    });
    return b
});
},
'esri/layers/FeatureEditResult':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel"], function(b, c, d, e) {
    return b(null, {
        declaredClass: "esri.layers.FeatureEditResult",
        constructor: function(a) {
            a && c.isObject(a) && (this.objectId = a.objectId, this.success = a.success, a.success || (a = a.error, this.error = Error(), this.error.code = a.code, this.error.message = a.description))
        }
    })
});
},
'esri/layers/LabelClass':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "dojox/gfx/_base", "../kernel", "../lang", "../symbols/TextSymbol", "../symbols/ShieldLabelSymbol"], function(e, c, h, b, k, d, f, g) {
    return e(null, {
        declaredClass: "esri.layers.LabelClass",
        labelPlacement: null,
        labelExpression: null,
        useCodedValues: null,
        symbol: null,
        maxScale: 0,
        minScale: 0,
        where: null,
        sizeInfo: null,
        _labelPlacementLookup: {
            "above-center": "esriServerPointLabelPlacementAboveCenter",
            "above-left": "esriServerPointLabelPlacementAboveLeft",
            "above-right": "esriServerPointLabelPlacementAboveRight",
            "below-center": "esriServerPointLabelPlacementBelowCenter",
            "below-left": "esriServerPointLabelPlacementBelowLeft",
            "below-right": "esriServerPointLabelPlacementBelowRight",
            "center-center": "esriServerPointLabelPlacementCenterCenter",
            "center-left": "esriServerPointLabelPlacementCenterLeft",
            "center-right": "esriServerPointLabelPlacementCenterRight",
            "above-after": "esriServerLinePlacementAboveAfter",
            "above-along": "esriServerLinePlacementAboveAlong",
            "above-before": "esriServerLinePlacementAboveBefore",
            "above-start": "esriServerLinePlacementAboveStart",
            "above-end": "esriServerLinePlacementAboveEnd",
            "below-after": "esriServerLinePlacementBelowAfter",
            "below-along": "esriServerLinePlacementBelowAlong",
            "below-before": "esriServerLinePlacementBelowBefore",
            "below-start": "esriServerLinePlacementBelowStart",
            "below-end": "esriServerLinePlacementBelowEnd",
            "center-after": "esriServerLinePlacementCenterAfter",
            "center-along": "esriServerLinePlacementCenterAlong",
            "center-before": "esriServerLinePlacementCenterBefore",
            "center-start": "esriServerLinePlacementCenterStart",
            "center-end": "esriServerLinePlacementCenterEnd",
            "always-horizontal": "esriServerPolygonPlacementAlwaysHorizontal"
        },
        constructor: function(a) {
            if (a && (c.mixin(this, a), this._labelPlacementLookup.hasOwnProperty(this.labelPlacement) || (this.labelPlacement = d.valueOf(this._labelPlacementLookup, a.labelPlacement)), a.symbol && (this.symbol = "esriSHD" === a.symbol.type ? new g(a.symbol) : new f(a.symbol)), a = this.sizeInfo)) a.minSize && (a.minSize = b.pt2px(a.minSize)), a.maxSize && (a.maxSize = b.pt2px(a.maxSize))
        },
        getSymbol: function() {
            return this.symbol
        },
        toJson: function() {
            var a = this.sizeInfo;
            a && (a = c.mixin({}, a), a.minSize && (a.minSize = b.px2pt(a.minSize)), a.maxSize && (a.maxSize = b.px2pt(a.maxSize)));
            a = {
                labelExpression: this.labelExpression,
                labelExpressionInfo: this.labelExpressionInfo && c.clone(this.labelExpressionInfo),
                useCodedValues: this.useCodedValues,
                maxScale: this.maxScale,
                minScale: this.minScale,
                where: this.where,
                sizeInfo: a,
                labelPlacement: this._labelPlacementLookup.hasOwnProperty(this.labelPlacement) ? this._labelPlacementLookup[this.labelPlacement] : this.labelPlacement,
                symbol: this.symbol && this.symbol.toJson()
            };
            return d.fixJson(a)
        }
    })
});
},
'esri/symbols/ShieldLabelSymbol':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/sniff", "dojox/gfx/_base", "../kernel", "../lang", "../urlUtils", "./MarkerSymbol", "./Font"], function(c, f, k, e, q, l, m, n, p) {
    var g = {
        url: "",
        width: 12,
        height: 12,
        angle: 0,
        xoffset: 0,
        yoffset: 0
    };
    c = c(n, {
        declaredClass: "esri.symbol.ShieldLabelSymbol",
        type: "shieldlabelsymbol",
        color: [255, 255, 255, 1],
        width: 32,
        height: 32,
        font: e.defaultFont,
        constructor: function(a, b, d, h, c) {
            a ? f.isString(a) ? (this.url = a, b && (this.color = b), d && (this.width = d), h && (this.height = h), void 0 !== c && (this.font = c)) :
                (this.width = e.pt2px(a.width), this.height = e.pt2px(a.height), b = a.imageData, !(9 > k("ie")) && b && (d = this.url, this.url = "data:" + (a.contentType || "image") + ";base64," + b, this.imageData = d)) : f.mixin(this, g)
        },
        getStroke: function() {
            return null
        },
        getFill: function() {
            return this.color
        },
        setWidth: function(a) {
            this.width = a;
            return this
        },
        setHeight: function(a) {
            this.height = a;
            return this
        },
        setUrl: function(a) {
            a !== this.url && (delete this.imageData, delete this.contentType);
            this.url = a;
            return this
        },
        setFont: function(a) {
            this.font = a;
            return this
        },
        setText: function(a) {
            this.text = a;
            return this
        },
        getWidth: function() {
            return this.width
        },
        getHeight: function() {
            return this.height
        },
        getShapeDescriptors: function() {
            return {
                defaultShape: {
                    type: "image",
                    x: -Math.round(this.width / 2),
                    y: -Math.round(this.height / 2),
                    width: this.width,
                    height: this.height,
                    src: this.url || ""
                },
                fill: null,
                stroke: null
            }
        },
        toJson: function() {
            var a = this.url,
                b = this.imageData;
            if (0 === a.indexOf("data:")) var d = a,
                a = b,
                b = d.indexOf(";base64,") + 8,
                b = d.substr(b);
            var a = m.getAbsoluteUrl(a),
                d = e.px2pt(this.width),
                d = isNaN(d) ? void 0 : d,
                c = e.px2pt(this.height),
                c = isNaN(c) ? void 0 : c,
                a = l.fixJson(f.mixin(this.inherited("toJson", arguments), {
                    type: "esriSHD",
                    url: a,
                    imageData: b,
                    contentType: this.contentType,
                    width: d,
                    height: c
                }));
            this.font ? (b = new p(this.font), a.font = b.toJson()) : a.font = null;
            delete a.size;
            a.imageData || delete a.imageData;
            return a
        }
    });
    c.defaultProps = g;
    return c
});
},
'esri/layers/SnapshotMode':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "../SpatialReference", "../tasks/query", "./RenderMode"], function(l, e, q, r, m, n, p) {
    return l([p], {
        declaredClass: "esri.layers._SnapshotMode",
        constructor: function(a) {
            this.featureLayer = a;
            this.pagination = a.queryPagination;
            this._featureMap = {};
            this._drawFeatures = e.hitch(this, this._drawFeatures);
            this._queryErrorHandler = e.hitch(this, this._queryErrorHandler)
        },
        startup: function() {
            this.pagination = this.pagination && null != this.featureLayer.maxRecordCount;
            this.featureLayer._collection ? this._applyTimeFilter() : this._fetchAll()
        },
        propertyChangeHandler: function(a) {
            this._init && (a ? this.featureLayer._collection ? console.log("FeatureLayer: layer created by value (from a feature collection) does not support definition expressions and time definitions. Layer id \x3d " + this.featureLayer.id) : this._fetchAll() : this._applyTimeFilter())
        },
        drawFeature: function(a) {
            var d = a.attributes[this.featureLayer.objectIdField];
            this._addFeatureIIf(d, a);
            this._incRefCount(d)
        },
        resume: function() {
            this.propertyChangeHandler(0)
        },
        refresh: function() {
            var a = this.featureLayer;
            a._collection ? (a._fireUpdateStart(), a._refresh(!0), a._fireUpdateEnd()) : this._fetchAll()
        },
        _getRequestId: function(a) {
            return ("_" + a.name + a.layerId + a._ulid).replace(/[^a-zA-Z0-9\_]+/g, "_")
        },
        _fetchAll: function() {
            var a = this.featureLayer;
            !a._collection && !a.suspended && (a._fireUpdateStart(), this._clearIIf(), this._sendRequest())
        },
        _sendRequest: function(a) {
            var d = this.map,
                b = this.featureLayer,
                g = b.getDefinitionExpression(),
                c = new n;
            c.outFields = b.getOutFields();
            c.where = g ||
                "1\x3d1";
            c.returnGeometry = !0;
            c.outSpatialReference = new m(d.spatialReference.toJson());
            c.timeExtent = b.getTimeDefinition();
            c.maxAllowableOffset = b._maxOffset;
            c.quantizationParameters = b._quantizationParameters;
            b._ts && (c._ts = (new Date).getTime());
            c.orderByFields = b.supportsAdvancedQueries ? b.getOrderByFields() : null;
            c.multipatchOption = b.multipatchOption;
            this.pagination && (this._start = c.start = null == a ? 0 : a, c.num = b.maxRecordCount);
            var f;
            b._usePatch && (f = this._getRequestId(b), this._cancelPendingRequest(null, f));
            b._task.execute(c, this._drawFeatures, this._queryErrorHandler, f)
        },
        _drawFeatures: function(a) {
            this._purgeRequests();
            var d = a.features,
                b = this.featureLayer,
                g = b.objectIdField,
                c, f = d.length,
                e = a.exceededTransferLimit && !b._collection,
                h, k;
            for (c = 0; c < f; c++) h = d[c], k = h.attributes[g], this._addFeatureIIf(k, h), this._incRefCount(k);
            this._applyTimeFilter(!0);
            if (!this.pagination || !e) b._fireUpdateEnd(null, a.exceededTransferLimit ? {
                queryLimitExceeded: !0
            } : null);
            e && (this.pagination && this._sendRequest(this._start + b.maxRecordCount),
                b.onQueryLimitExceeded())
        },
        _queryErrorHandler: function(a) {
            this._purgeRequests();
            var d = this.featureLayer;
            d._errorHandler(a);
            d._fireUpdateEnd(a)
        }
    })
});
},
'esri/layers/RenderMode':function(){
//>>built
define(["dojo/_base/kernel", "dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/has", "dojo/io/script", "../kernel"], function(l, m, n, h, p, f, q) {
    return m(null, {
        declaredClass: "esri.layers._RenderMode",
        constructor: function() {
            this._prefix = "jsonp_" + (l._scopeName || "dojo") + "IoScript"
        },
        initialize: function(a) {
            this.map = a;
            this._init = !0
        },
        startup: function() {},
        propertyChangeHandler: function(a) {},
        destroy: function() {
            this._init = !1
        },
        drawFeature: function(a) {},
        suspend: function() {},
        resume: function() {},
        refresh: function() {},
        _incRefCount: function(a) {
            (a = this._featureMap[a]) && a._count++
        },
        _decRefCount: function(a) {
            (a = this._featureMap[a]) && a._count--
        },
        _getFeature: function(a) {
            return this._featureMap[a]
        },
        _addFeatureIIf: function(a, b) {
            var c = this._featureMap,
                e = c[a],
                d = this.featureLayer;
            e || (c[a] = b, d._add(b), b._count = 0);
            return e || b
        },
        _removeFeatureIIf: function(a) {
            var b = this._featureMap[a],
                c = this.featureLayer;
            if (b) {
                if (b._count) return;
                delete this._featureMap[a];
                c._remove(b)
            }
            return b
        },
        _clearIIf: function() {
            var a;
            a = this.featureLayer;
            var b =
                a.graphics,
                c = a._selectedFeatures,
                e = a.objectIdField;
            for (a = b.length - 1; 0 <= a; a--) {
                var d = b[a],
                    g = d.attributes[e];
                g in c ? d._count = 1 : (d._count = 0, this._removeFeatureIIf(g))
            }
        },
        _isPending: function(a) {
            return f[this._prefix + a] ? !0 : !1
        },
        _cancelPendingRequest: function(a, b) {
            if (a = a || f[this._prefix + b]) try {
                a.cancel(), f._validCheck(a)
            } catch (c) {}
        },
        _purgeRequests: function() {
            f._validCheck(null)
        },
        _toggleVisibility: function(a) {
            var b = this.featureLayer,
                c = b.graphics,
                e = a ? "show" : "hide",
                d, g = c.length;
            a = a && b._ager;
            for (d = 0; d < g; d++) {
                var k =
                    c[d];
                k[e]();
                a && b._repaint(k)
            }
        },
        _applyTimeFilter: function(a) {
            var b = this.featureLayer;
            if (b.timeInfo && !b.suspended) {
                a || b._fireUpdateStart();
                var c = b._trackManager;
                c && c.clearTracks();
                var e = b.getTimeDefinition(),
                    d = b._getOffsettedTE(b._mapTimeExtent);
                d ? (d = b._getTimeOverlap(e, d)) ? (e = b._filterByTime(b.graphics, d.startTime, d.endTime), c && c.addFeatures(e.match), h.forEach(e.match, function(a) {
                    var c = a._shape;
                    a.visible || (a.show(), (c = a._shape) && c._moveToFront());
                    b._ager && c && b._repaint(a)
                }), h.forEach(e.noMatch, function(a) {
                    a.visible &&
                        a.hide()
                })) : this._toggleVisibility(!1) : (c && c.addFeatures(b.graphics), this._toggleVisibility(!0));
                c && (c.moveLatestToFront(), c.drawTracks());
                a || b._fireUpdateEnd()
            }
        }
    })
});
},
'esri/layers/OnDemandMode':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/connect", "dojo/_base/lang", "dojo/_base/array", "dojo/has", "../kernel", "../geometry/Point", "../tasks/query", "./RenderMode", "./GridLayout"], function(t, m, v, r, z, A, w, u, x, y) {
    return t([x], {
        declaredClass: "esri.layers._OnDemandMode",
        constructor: function(b) {
            this.featureLayer = b;
            this._featureMap = {};
            this._queryErrorHandler = v.hitch(this, this._queryErrorHandler)
        },
        initialize: function(b) {
            this.inherited(arguments);
            var a = this.featureLayer,
                c = a._srInfo;
            this._gridLayer = new y(new w(c ? c.valid[0] :
                b.extent.xmin, b.extent.ymax, b.spatialReference), {
                width: a._tileWidth,
                height: a._tileHeight
            }, {
                width: b.width,
                height: b.height
            }, c);
            this._cellMap = {};
            this._gridLayer.setResolution(b.extent)
        },
        startup: function() {
            this._ioQueue = [];
            this.featureLayer.suspended || (this._zoomHandler(), this._enableConnectors())
        },
        propertyChangeHandler: function(b) {
            this._init && (2 > b ? this._zoomHandler() : console.log("FeatureLayer: layer in on-demand mode does not support time definitions. Layer id \x3d " + this.featureLayer.id + ", Layer URL \x3d " +
                this.featureLayer.url))
        },
        destroy: function() {
            this._disableConnectors();
            this.inherited(arguments)
        },
        drawFeature: function(b) {
            var a = this._gridLayer,
                c = b.geometry,
                e = [];
            if (c)
                for (var e = a.getCellsInExtent("point" === c.type ? {
                        xmin: c.x,
                        ymin: c.y,
                        xmax: c.x,
                        ymax: c.y
                    } : c.getExtent(), !1).cells, a = this._cellMap, d, g = b.attributes[this.featureLayer.objectIdField], f, h, k, c = 0; c < e.length; c++) d = e[c], f = d.latticeID, h = d.row, k = d.col, f ? d = a[f] = a[f] || d : (a[h] = a[h] || {}, d = a[h][k] = a[h][k] || d), d.features = d.features || [], d.features.push(b),
                    this._addFeatureIIf(g, b), this._incRefCount(g)
        },
        suspend: function() {
            this._init && this._disableConnectors()
        },
        resume: function() {
            this._init && (this._enableConnectors(), this._zoomHandler())
        },
        refresh: function() {
            this._zoomHandler()
        },
        _enableConnectors: function() {
            var b = this.map;
            this._zoomConnect = m.connect(b, "onZoomEnd", this, this._zoomHandler);
            this._panConnect = m.connect(b, "onPanEnd", this, this._panHandler);
            this._resizeConnect = m.connect(b, "onResize", this, this._panHandler)
        },
        _disableConnectors: function() {
            m.disconnect(this._zoomConnect);
            m.disconnect(this._panConnect);
            m.disconnect(this._resizeConnect)
        },
        _zoomHandler: function() {
            this._processIOQueue(!0);
            var b = this.featureLayer,
                a = this.map;
            b.suspended || (b._fireUpdateStart(), this._clearIIf(), (b = b._trackManager) && b.clearTracks(), this._cellMap = {}, this._gridLayer.setResolution(a.extent), this._sendRequest())
        },
        _panHandler: function(b) {
            this.featureLayer._fireUpdateStart();
            this._sendRequest(this.featureLayer._resized && b)
        },
        _getRequestId: function(b, a) {
            return ("_" + b.name + b.layerId + b._ulid + "_" + a.resolution +
                "_" + (a.latticeID || a.row + "_" + a.col)).replace(/[^a-zA-Z0-9\_]+/g, "_")
        },
        _sendRequest: function(b) {
            this._exceeds = !1;
            var a = this.featureLayer,
                c = this.map;
            b = b || c.extent;
            c = this._gridLayer.getCellsInExtent(b, a.latticeTiling).cells;
            if (!a.isEditable()) var e = this._cellMap,
                c = r.filter(c, function(a) {
                    if (a.lattice) {
                        if (e[a.latticeID]) return !1
                    } else if (e[a.row] && e[a.row][a.col]) return !1;
                    return !0
                });
            var d = a.getOutFields(),
                g = a.getDefinitionExpression(),
                f = a._getOffsettedTE(a._mapTimeExtent),
                h = a.supportsAdvancedQueries ? a.getOrderByFields() :
                null,
                k = a._usePatch,
                p = this._ioQueue,
                n, m = this,
                t = this._drawFeatures,
                q, l, s;
            this._pending = this._pending || 0;
            for (n = 0; n < c.length; n++) {
                q = c[n];
                l = new u;
                l.geometry = q.extent || q.lattice;
                l.outFields = d;
                l.where = g;
                a.latticeTiling && q.extent && (l.spatialRelationship = u.SPATIAL_REL_CONTAINS);
                l.returnGeometry = !0;
                l.timeExtent = f;
                a._ts && (l._ts = (new Date).getTime());
                l.orderByFields = h;
                l.multipatchOption = a.multipatchOption;
                l.maxAllowableOffset = a._maxOffset;
                l.quantizationParameters = a._quantizationParameters;
                s = null;
                if (k && (s = this._getRequestId(a,
                        q), this._isPending(s))) continue;
                this._pending++;
                p.push(a._task.execute(l, function() {
                    var a = q;
                    return function(b) {
                        t.apply(m, [b, a])
                    }
                }.call(this), this._queryErrorHandler, s))
            }
            this._removeOldCells(b);
            this._endCheck()
        },
        _drawFeatures: function(b, a) {
            this._exceeds = this._exceeds || b.exceededTransferLimit;
            this._finalizeIO();
            var c = this.map.extent,
                e = a.extent,
                d = a.row,
                g = a.col,
                f = this.featureLayer.objectIdField,
                h = b.features,
                k = this._gridLayer,
                p = this._cellMap,
                n = a.latticeID,
                m = n ? p[n] : p[d] && p[d][g];
            if (a.resolution != k._resolution ||
                (n ? n !== k.getLatticeID(c) : !k.intersects(e, c))) m && this._removeCell(d, g, n);
            else if (m) this._updateCell(m, h);
            else {
                a.features = h;
                n ? p[n] = a : (p[d] = p[d] || {}, p[d][g] = a);
                e = h.length;
                for (c = 0; c < e; c++) d = h[c], g = d.attributes[f], this._addFeatureIIf(g, d), this._incRefCount(g)
            }
            this._endCheck()
        },
        _queryErrorHandler: function(b) {
            this._finalizeIO();
            this.featureLayer._errorHandler(b);
            this._endCheck(!0)
        },
        _finalizeIO: function() {
            this._purgeRequests();
            this._pending--
        },
        _endCheck: function(b) {
            if (0 === this._pending) {
                this._processIOQueue();
                var a = this.featureLayer,
                    c = a._trackManager;
                c && (c.clearTracks(), c.addFeatures(a.graphics), a._ager && r.forEach(a.graphics, function(b) {
                    b._shape && a._repaint(b)
                }), c.moveLatestToFront(), c.drawTracks());
                this.featureLayer._fireUpdateEnd(b && Error("FeatureLayer: an error occurred while updating the layer"), this._exceeds ? {
                    queryLimitExceeded: !0
                } : null);
                if (this._exceeds) a.onQueryLimitExceeded()
            }
        },
        _processIOQueue: function(b) {
            this._ioQueue = r.filter(this._ioQueue, function(a) {
                return -1 < a.fired ? !1 : !0
            });
            b && r.forEach(this._ioQueue,
                this._cancelPendingRequest)
        },
        _removeOldCells: function(b) {
            var a = this._cellMap,
                c = this._gridLayer,
                e, d;
            for (e in a)
                if (a[e]) {
                    var g = a[e],
                        f = g.latticeID,
                        h = 0,
                        k = 0;
                    if (f) h++, f !== c.getLatticeID(b) && (this._removeCell(null, null, f), k++);
                    else
                        for (d in g) g[d] && (h++, c.intersects(g[d].extent, b) || (this._removeCell(e, d), k++));
                    k === h && delete a[e]
                }
        },
        _updateCell: function(b, a) {
            var c = this.featureLayer,
                e = c.objectIdField,
                c = c._selectedFeatures,
                d, g = a.length;
            b.features = b.features || [];
            for (d = 0; d < g; d++) {
                var f = a[d],
                    h = f.attributes[e],
                    k = this._addFeatureIIf(h, f);
                k === f ? (this._incRefCount(h), b.features.push(k)) : h in c || (k.setGeometry(f.geometry), k.setAttributes(f.attributes))
            }
        },
        _removeCell: function(b, a, c) {
            var e = this._cellMap,
                d = this.featureLayer,
                g = d.objectIdField,
                f = c ? e[c] : e[b] && e[b][a];
            if (f) {
                c ? delete e[c] : delete e[b][a];
                b = f.features;
                for (a = 0; a < b.length; a++) c = b[a].attributes[g], this._decRefCount(c), c in d._selectedFeatures || this._removeFeatureIIf(c)
            }
        }
    })
});
},
'esri/layers/GridLayout':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/has", "../kernel", "../SpatialReference", "../geometry/Extent", "../geometry/Polyline"], function(t, y, u, z, A, v, w, x) {
    return t(null, {
        declaredClass: "esri.layers._GridLayout",
        constructor: function(a, d, b, e) {
            this.origin = a;
            this.cellWidth = d.width;
            this.cellHeight = d.height;
            this.mapWidth = b.width;
            this.mapHeight = b.height;
            this.srInfo = e
        },
        setResolution: function(a) {
            this._resolution = (a.xmax - a.xmin) / this.mapWidth;
            this.srInfo && (a = Math.round(2 * this.srInfo.valid[1] /
                this._resolution), a = Math.round(a / this.cellWidth), this._frameStats = [a, 0, a - 1])
        },
        getCellCoordinates: function(a) {
            var d = this._resolution,
                b = this.origin;
            return {
                row: Math.floor((b.y - a.y) / (this.cellHeight * d)),
                col: Math.floor((a.x - b.x) / (this.cellWidth * d))
            }
        },
        normalize: function(a) {
            var d = this._frameStats;
            if (d) {
                var b = d[0],
                    e = d[1],
                    d = d[2];
                a < e ? (a %= b, a = a < e ? a + b : a) : a > d && (a %= b)
            }
            return a
        },
        intersects: function(a, d) {
            var b = this.srInfo;
            return b ? u.some(d._getParts(b), function(b) {
                return a.intersects(b.extent)
            }) : a.intersects(d)
        },
        getCellExtent: function(a, d) {
            var b = this._resolution,
                e = this.origin,
                k = this.cellWidth,
                l = this.cellHeight;
            return new w(d * k * b + e.x, e.y - (a + 1) * l * b, (d + 1) * k * b + e.x, e.y - a * l * b, new v(e.spatialReference.toJson()))
        },
        getLatticeID: function(a) {
            var d = this.getCellCoordinates({
                    x: a.xmin,
                    y: a.ymax
                }),
                b = this.getCellCoordinates({
                    x: a.xmax,
                    y: a.ymin
                });
            a = d.row;
            var e = b.row,
                d = this.normalize(d.col),
                b = this.normalize(b.col);
            return a + "_" + e + "_" + d + "_" + b
        },
        sorter: function(a, d) {
            return a < d ? -1 : 1
        },
        getCellsInExtent: function(a, d) {
            var b = this.getCellCoordinates({
                    x: a.xmin,
                    y: a.ymax
                }),
                e = this.getCellCoordinates({
                    x: a.xmax,
                    y: a.ymin
                }),
                k = b.row,
                l = e.row,
                b = b.col,
                e = e.col,
                n = [],
                c, f, m, g = [],
                h = [],
                q, r, s, p = [];
            for (c = k; c <= l; c++)
                for (f = b; f <= e; f++) m = this.normalize(f), a = this.getCellExtent(c, m), n.push({
                    row: c,
                    col: m,
                    extent: a,
                    resolution: this._resolution
                }), d && (g.push(a.xmin, a.xmax), h.push(a.ymin, a.ymax));
            b = this.normalize(b);
            e = this.normalize(e);
            g.sort(this.sorter);
            h.sort(this.sorter);
            f = g.length;
            for (c = f - 1; 0 <= c; c--) c < f - 1 && g[c] === g[c + 1] && g.splice(c, 1);
            f = h.length;
            for (c = f - 1; 0 <= c; c--) c < f - 1 && h[c] === h[c +
                1] && h.splice(c, 1);
            if (g.length && h.length) {
                m = g[0];
                q = g[g.length - 1];
                r = h[0];
                s = h[h.length - 1];
                f = g.length;
                for (c = 0; c < f; c++) p.push([
                    [g[c], s],
                    [g[c], r]
                ]);
                f = h.length;
                for (c = 0; c < f; c++) p.push([
                    [m, h[c]],
                    [q, h[c]]
                ]);
                c = new x({
                    paths: p,
                    spatialReference: this.origin.spatialReference.toJson()
                });
                n.push({
                    latticeID: k + "_" + l + "_" + b + "_" + e,
                    lattice: c,
                    resolution: this._resolution
                })
            }
            return {
                minRow: k,
                maxRow: l,
                minCol: b,
                maxCol: e,
                cells: n
            }
        }
    })
});
},
'esri/layers/SelectionMode':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/has", "../kernel", "./RenderMode"], function(b, d, e, f, c) {
    return b([c], {
        declaredClass: "esri.layers._SelectionMode",
        constructor: function(a) {
            this.featureLayer = a;
            this._featureMap = {}
        },
        propertyChangeHandler: function(a) {
            this._init && 0 === a && this._applyTimeFilter()
        },
        resume: function() {
            this.propertyChangeHandler(0)
        }
    })
});
},
'esri/layers/StreamMode':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/has", "../kernel", "../SpatialReference", "../tasks/query", "../tasks/QueryTask", "../geometry/jsonUtils", "./RenderMode"], function(p, n, k, v, w, q, r, s, t, u) {
    return p([u], {
        declaredClass: "esri.layers._StreamMode",
        constructor: function(a, b) {
            this.featureLayer = a;
            this._featureMap = {};
            this._setRefreshRate();
            this._drawBuffer = {
                adds: [],
                updates: []
            };
            this._timeoutId = null;
            this._flushDrawBuffer = n.hitch(this, this._flushDrawBuffer);
            this._featuresByTime = {};
            this._lastEndTimeCheck =
                null;
            this._maxFeatureAge = 0;
            a.purgeOptions && (a.purgeOptions.age && "number" === typeof a.purgeOptions.age) && (this._maxFeatureAge = 1E3 * Math.ceil(60 * a.purgeOptions.age));
            this._drawFeatures = n.hitch(this, this._drawFeatures);
            this._queryErrorHandler = n.hitch(this, this._queryErrorHandler)
        },
        startup: function() {},
        propertyChangeHandler: function(a) {
            this._init && (0 === a ? this._applyTimeFilter() : 3 === a ? this._redrawAllTracks() : console.debug("StreamLayer: Stream Layer only supports changing map time or maximumTrackPoints. Layer id \x3d " +
                this.featureLayer.id))
        },
        drawFeature: function(a) {
            var b = this.featureLayer,
                c = b.objectIdField;
            this._timeoutId || (this._timeoutId = setTimeout(this._flushDrawBuffer, this._refreshRate));
            b._joinField && this._getFeature(a.attributes[c]) ? this._drawBuffer.updates.push({
                oid: a.attributes[c],
                updates: a
            }) : this._drawBuffer.adds.push(a)
        },
        resume: function() {
            this.propertyChangeHandler(0)
        },
        refresh: function() {
            var a = this.featureLayer;
            a && (!a._relatedUrl && !a._keepLatestUrl ? (a._fireUpdateStart(), a.clear(), a._fireUpdateEnd()) :
                (a._fireUpdateStart(), a._refreshing = !0, a.disconnect(), a.clear(), a._relatedQueried = !1, a._keepLatestQueried = !1, a.connect()))
        },
        _drawFeatures: function(a) {
            this._purgeRequests();
            var b = this.featureLayer;
            b._create(a.features || []);
            b._fireUpdateEnd(null, null)
        },
        _applyTimeFilter: function(a) {
            this.inherited(arguments);
            this._redrawAllTracks()
        },
        _removeFeatures: function(a) {
            var b = this.featureLayer,
                c = b.objectIdField;
            a && k.forEach(a, function(a) {
                    a = a.attributes[c];
                    b._unSelectFeatureIIf(a, this);
                    this._decRefCount(a);
                    this._removeFeatureIIf(a)
                },
                this)
        },
        _addFeatures: function(a) {
            var b = this.featureLayer,
                c = b._endTimeField,
                f = b._startTimeField,
                d, h, e, g = [],
                l = [],
                m = [];
            d = b._trackManager;
            h = b.objectIdField;
            if (d)
                for (e in a = d.addFeatures(a), a) a.hasOwnProperty(e) && (g.push(e), a[e].adds && (l = l.concat(a[e].adds)), a[e].deletes && (m = m.concat(a[e].deletes)));
            else l = a;
            k.forEach(l, function(a) {
                var b = a.attributes[h],
                    d;
                d = c && a.attributes[c];
                !d && this._maxFeatureAge && (d = f && a.attributes[f] ? a.attributes[f] + this._maxFeatureAge : Date.now() + this._maxFeatureAge);
                d && (d = 1E3 * Math.ceil(d /
                    1E3), this._featuresByTime[d] ? this._featuresByTime[d].push(b) : this._featuresByTime[d] = [b]);
                this._addFeatureIIf(b, a);
                this._incRefCount(b)
            }, this);
            m.length && this._removeFeatures(m);
            d && d.refreshTracks(g)
        },
        _updateFeatures: function(a) {
            var b = this.featureLayer,
                c, f, d = [];
            c = b._trackManager;
            f = b._trackIdField;
            k.forEach(a, function(a) {
                var e = a.updates;
                a = this._getFeature(a.oid);
                var g;
                if (a) {
                    e.geometry && a.setGeometry(e.geometry);
                    e = e.attributes || {};
                    for (g in e) e.hasOwnProperty(g) && (a.attributes[g] = e[g]);
                    a.visible = this._checkFeatureTimeIntersects(a);
                    c && a.attributes[f] ? d.push(a.attributes[f]) : b._repaint(a, null, !0)
                }
            }, this);
            d.length && c.refreshTracks(d)
        },
        _redrawAllTracks: function() {
            var a = this.featureLayer._trackManager,
                b;
            if (a && (b = a.trimTracks()) && 0 < b.length) this._removeFeatures(b), a.refreshTracks()
        },
        _flushDrawBuffer: function() {
            clearTimeout(this._timeoutId);
            var a = this._drawBuffer,
                b = a.adds.splice(0, a.adds.length),
                c = a.updates.splice(0, a.updates.length),
                a = this.featureLayer;
            if (!a) return !1;
            a.updating || a._fireUpdateStart();
            this._addFeatures(b);
            this._updateFeatures(c);
            if ((b = this._getExpiredFeatures()) && b.length) this._removeFeatures(b), a._trackManager && a._trackManager.removeFeatures(b);
            a._purge();
            a._fireUpdateEnd();
            this._timeoutId = null
        },
        _clearDrawBuffer: function() {
            var a = this._timeoutId,
                b = this._drawBuffer,
                c = b.adds,
                b = b.updates;
            a && clearTimeout(a);
            c.splice(0, c.length);
            b.splice(0, b.length);
            this._timeoutId = null
        },
        _clearTimeBin: function() {
            this._featuresByTime = {};
            this._lastEndTimeCheck = 1E3 * Math.ceil(Date.now() / 1E3)
        },
        _clearFeatureMap: function() {
            this._featureMap = {}
        },
        _setRefreshRate: function(a) {
            a =
                a || 0 === a ? a : 200;
            0 > a && (a = 200);
            this._refreshRate = a
        },
        _checkFeatureTimeIntersects: function(a) {
            var b = this.featureLayer,
                c = b.getMap().timeExtent;
            return !c || !b.timeInfo || !b.timeInfo.startTimeField && !b.timeInfo.endTimeField ? !0 : 0 < b._filterByTime([a], c.startTime, c.endTime).match.length
        },
        _getRequestId: function(a) {
            return ("_" + a.name + a.layerId + a._ulid).replace(/[^a-zA-Z0-9\_]+/g, "_")
        },
        _fetchArchive: function(a) {
            var b = this.featureLayer,
                c, f, d, h, e, g;
            b._fireUpdateStart();
            if (a && this.map) a = new s(a), c = new r, f = this.map, d =
                b.getFilter() || {}, h = d.where || "1\x3d1", e = d.geometry ? t.fromJson(d.geometry) : null, d = d.outFields ? d.outFields.split(",") : ["*"], c.geometry = e, c.where = h, c.outFields = d, c.returnGeometry = !0, c.outSpatialReference = new q(f.spatialReference.toJson()), b._usePatch && (g = this._getRequestId(b), this._cancelPendingRequest(null, g)), a.execute(c, this._drawFeatures, this._queryErrorHandler, g);
            else return this._fireUpdateEnd({
                error: "Archive data cannot be fetched if no feature service url is provided or if the layer is not added to a map"
            }), !1
        },
        _queryErrorHandler: function(a) {
            this._purgeRequests();
            var b = this.featureLayer;
            b._errorHandler(a);
            b._fireUpdateEnd(a)
        },
        _getExpiredFeatures: function() {
            var a, b, c, f = [],
                d = [];
            if (!this.featureLayer._endTimeField && !this._maxFeatureAge) return d;
            a = 1E3 * Math.floor(this._lastEndTimeCheck / 1E3);
            this._lastEndTimeCheck = b = 1E3 * Math.ceil(Date.now() / 1E3);
            if (a && a !== b)
                for (c = this._featuresByTime; a <= b; a += 1E3) c[a] && (f = f.concat(c[a]), delete c[a]);
            k.forEach(f, function(a) {
                (a = this._getFeature(a)) && d.push(a)
            }, this);
            return d
        }
    })
});
},
'esri/layers/TrackManager':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/has", "../kernel", "../graphic", "../geometry/Polyline", "./GraphicsLayer"], function(m, r, d, s, t, n, p, q) {
    return m(null, {
        declaredClass: "esri.layers._TrackManager",
        constructor: function(a) {
            this.layer = a;
            this.trackMap = {};
            this.trackLineMap = {}
        },
        initialize: function(a) {
            this.map = a;
            var c = this.layer,
                b = c._getRenderer(),
                b = b && b.trackRenderer;
            if ("esriGeometryPoint" === c.geometryType) {
                var e = this.container = new q._GraphicsLayer({
                    id: c.id + "_tracks",
                    _child: !0
                });
                e.loaded = !0;
                e.onLoad(e);
                e._setMap(a, c._div);
                e.setRenderer(b)
            }
        },
        addFeatures: function(a) {
            var c = this.trackMap,
                b = this.layer,
                e = b._trackIdField,
                f = [];
            d.forEach(a, function(a) {
                var b = a.attributes[e];
                (c[b] = c[b] || []).push(a); - 1 === d.indexOf(f, b) && f.push(b)
            });
            var g = b._startTimeField,
                k = b.objectIdField,
                h = function(b, a) {
                    var c = b.attributes[g],
                        f = a.attributes[g];
                    return c === f ? b.attributes[k] < a.attributes[k] ? -1 : 1 : c < f ? -1 : 1
                };
            d.forEach(f, function(b) {
                c[b].sort(h)
            })
        },
        trimTracks: function(a) {
            function c(a) {
                for (a = b[a] || []; a.length >
                    e;) f.push(a.shift())
            }
            var b = this.trackMap,
                e = this.layer.maximumTrackPoints || 0,
                f = [],
                g;
            if (!e) return f;
            if (a) d.forEach(a, function(a) {
                c(a)
            });
            else
                for (g in b) b.hasOwnProperty(g) && c(g);
            return f
        },
        drawTracks: function(a) {
            function c(a) {
                var c = f[a],
                    h, d, l;
                d = b.trackLineMap[a];
                e.remove(d);
                delete b.trackLineMap[a];
                if (!c || 2 > c.length) return !1;
                d = [];
                for (h = c.length - 1; 0 <= h; h--)(l = c[h].geometry) && d.push([l.x, l.y]);
                c = {};
                c[k] = a;
                1 < d.length && (d = new n(new p({
                    paths: [d],
                    spatialReference: g
                }), null, c), e.add(d), b.trackLineMap[a] = d)
            }
            var b = this,
                e = this.container,
                f, g, k, h;
            if (e)
                if (f = this.trackMap, g = this.map.spatialReference, k = this.layer._trackIdField, a) d.forEach(a, function(a) {
                    c(a)
                });
                else
                    for (h in f) f.hasOwnProperty(h) && c(h)
        },
        refreshTracks: function(a) {
            function c(a) {
                var c, d;
                b.drawTracks([a]);
                if (g && g.latestObservationRenderer) {
                    a = e[a] || [];
                    c = a.length;
                    for (d = 0; d < c; d++) f._repaint(a[d], null, !0)
                }
            }
            var b = this,
                e = this.trackMap,
                f = this.layer,
                g = f._getRenderer(),
                k;
            if (a) d.forEach(a, function(a) {
                c(a)
            });
            else
                for (k in e) e.hasOwnProperty(k) && c(k);
            this.moveLatestToFront()
        },
        moveLatestToFront: function(a) {
            d.forEach(this.getLatestObservations(a), function(a) {
                var b = a._shape;
                b && b._moveToFront();
                this._repaint(a, null, !0)
            }, this.layer)
        },
        getLatestObservations: function(a) {
            function c(a) {
                a = f[a];
                return a[a.length - 1]
            }
            var b = [],
                e = this.layer._getRenderer(),
                f = this.trackMap,
                g;
            if (!e.latestObservationRenderer) return b;
            if (a) d.forEach(a, function(a) {
                b.push(c(a))
            });
            else
                for (g in f) f.hasOwnProperty(g) && b.push(c(g));
            return b
        },
        clearTracks: function(a) {
            var c = this.getLatestObservations(a),
                b = this.container,
                e;
            a ? d.forEach(a, function(a) {
                delete this.trackMap[a];
                b && (e = this.trackLineMap[a], b.remove(e), delete this.trackLineMap[a])
            }, this) : (this.trackMap = {}, this.trackLineMap = {}, b && b.clear());
            d.forEach(c, function(a) {
                this._repaint(a, null, !0)
            }, this.layer)
        },
        isLatestObservation: function(a) {
            var c = this.trackMap[a.attributes[this.layer._trackIdField]];
            return c ? c[c.length - 1] === a : !1
        },
        destroy: function() {
            var a = this.container;
            a && (a.clear(), a._unsetMap(this.map, this.layer._div));
            this.map = this.layer = this.trackMap = this.container =
                null
        }
    })
});
},
'esri/layers/HeatmapManager':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/aspect", "dojo/_base/array", "require", "../kernel", "../sniff", "../geometry/Point", "../geometry/webMercatorUtils", "./MapImage", "./FeatureLayer", "../renderers/HeatmapRenderer", "../tasks/query", "dojo/_base/fx"], function(t, r, u, q, v, D, E, w, x, y, z, l, A, s) {
    function B() {}

    function C(b) {
        var a = b.layer;
        return {
            geometry: b.geometry,
            attributes: b.attributes,
            getLayer: function() {
                return a
            }
        }
    }
    return t(null, {
        declaredClass: "esri.layers.HeatmapManager",
        heatmapRenderer: null,
        sourceLayer: null,
        imageLayer: null,
        useTiles: !0,
        useWorker: !1,
        map: null,
        constructor: function(b) {
            this.sourceLayer = b;
            this._hndls = []
        },
        initialize: function(b) {
            this.map = b;
            var a = this.sourceLayer,
                d = a.renderer;
            a.setDrawMode(!1);
            this.imageLayer = b._getMapImageLyr();
            var c = this;
            this.heatmapRenderer = d instanceof l ? d : (d.getRendererInfoByZoom(b.getZoom()) || d.getRendererInfoByScale(b.getScale())).renderer;
            this.recalculateHeatmap = this.recalculateHeatmap.bind(this);
            this._removeRenderer = this._removeRenderer.bind(this);
            this._handleRendererChange = this._handleRendererChange.bind(this);
            this._rendererChangeHandle = this.sourceLayer.on("renderer-change", this._handleRendererChange);
            this._handleOpacityChange = this._handleOpacityChange.bind(this);
            this._reprojectFeature = this._reprojectFeature.bind(this);
            v(["../workers/heatmapCalculator"], function(a) {
                c._calculator = new a(r.mixin({
                    width: c.map.width,
                    height: c.map.height
                }, c._getOptions()));
                c._setupRenderer();
                c.heatmapRenderer.getStats = a.calculateStats;
                c.heatmapRenderer.getHistogramData = a.getHistogramData
            })
        },
        destroy: function() {
            this._removeHandlers();
            this._rendererChangeHandle && this._rendererChangeHandle.remove();
            this._rendererChangeHandle = this.sourceLayer = this.imageLayer = this.map = this.heatmapRenderer = this._hndls = null
        },
        _handleRendererChange: function(b) {
            var a = b.renderer,
                d = a instanceof l;
            this.heatmapRenderer ? d ? this.heatmapRenderer = a : this._removeRenderer(b) : d && (this.heatmapRenderer = a, this.sourceLayer && this.map && this._setupRenderer())
        },
        _handleOpacityChange: function(b) {
            b = b.opacity;
            var a = this._getImageBySourceId(this.sourceLayer.id);
            a && a.setOpacity(b)
        },
        _setupRenderer: function() {
            var b = this._hndls,
                a = this.sourceLayer,
                d = this.map,
                c = this;
            a._originalDraw = a._draw;
            a._draw = B;
            a._div.clear();
            setTimeout(this._resetGraphics.bind(this), 250);
            b.push(a.on("update-end", function(a) {
                c.recalculateHeatmap()
            }));
            b.push(a.on("suspend", function(a) {
                (a = c._getImageBySourceId(c.sourceLayer.id)) && a.hide()
            }));
            b.push(a.on("resume", function(a) {
                (a = c._getImageBySourceId(c.sourceLayer.id)) && a.show()
            }));
            b.push(u.after(a, "redraw", this.recalculateHeatmap));
            b.push(d.on("layer-remove", function(b) {
                b.layer ==
                    a && ((b = c._getImageBySourceId(c.sourceLayer.id)) && c.imageLayer.removeImage(b), c._removeRenderer({
                        target: a
                    }))
            }));
            a._collection && b.push(a.on("graphic-add", function(a) {
                c._reprojectFeature(a.graphic)
            }));
            a.mode !== z.MODE_ONDEMAND && (b.push(d.on("resize, pan-end", function(a) {
                setTimeout(c.recalculateHeatmap, 16)
            })), b.push(d.on("zoom-end", function(b) {
                setTimeout(function() {
                    a._getRenderer().isInstanceOf(l) && c.recalculateHeatmap()
                }, 16)
            })));
            b.push(a.on("opacity-change", this._handleOpacityChange));
            this.imageLayer.suspended &&
                this.imageLayer.resume();
            a.graphics && a.graphics.length && (a.graphics[0].geometry && !d.spatialReference.equals(a.graphics[0].geometry.spatialReference) && q.forEach(a.graphics, function(a) {
                this._reprojectFeature(a)
            }.bind(this)), this.recalculateHeatmap())
        },
        _removeRenderer: function(b) {
            var a = b.target;
            a._draw = a._originalDraw;
            delete a._originalDraw;
            a.setDrawMode(!0);
            this._removeHandlers();
            this._hndls = [];
            var d = this._getImageBySourceId(this.sourceLayer.id);
            d && this.imageLayer.removeImage(d);
            a.renderer != b.renderer &&
                a.renderer.getRendererInfo ? this.heatmapRenderer = null : (a.redraw(), this.destroy())
        },
        recalculateHeatmap: function() {
            this._calculator ? this._doMainCalculation() : this._calculatorClient && this._doWorkerCalculation()
        },
        _reprojectFeature: function(b) {
            if (b && b.geometry) {
                var a = b.geometry,
                    d = this.map.spatialReference;
                d.equals(a.spatialReference) || (a = x.project(a, d), null == a ? console.log("Unable to reproject features to map's spatial reference. Please convert feature geometry before adding to layer") : b.geometry = a)
            }
        },
        _doWorkerCalculation: function() {},
        _doMainCalculation: function() {
            var b = this.sourceLayer,
                a = this.map,
                d = this.heatmapRenderer,
                c = this.map.extent,
                h = this.map.width,
                p = this.map.height,
                f = this._calculator,
                g = this,
                m = function(e) {
                    e = g._getScreenPoints(e.features, a, b);
                    e = f.calculateImageData(r.mixin({
                        screenPoints: e,
                        mapinfo: {
                            extent: [c.xmin, c.ymin, c.xmax, c.ymax],
                            resolution: a.getResolution()
                        },
                        width: h,
                        height: p
                    }, g._getOptions()));
                    e = d.getSymbol(C({
                        geometry: a.extent,
                        attributes: {
                            size: [h, p],
                            imageData: e
                        },
                        layer: b
                    }));
                    e = new y({
                        extent: a.extent,
                        href: e.url,
                        opacity: 0,
                        sourceId: b.id
                    });
                    g._swapMapImages(e, g._getImageBySourceId(b.id));
                    b.suspended && e.hide()
                },
                k = {
                    geometry: a.extent,
                    timeExtent: b.useMapTime ? a.timeExtent : void 0,
                    spatialRelationship: A.SPATIAL_REL_INTERSECTS
                };
            null != b._canDoClientSideQuery(k) ? b.queryFeatures(k, m) : m({
                features: b.graphics
            })
        },
        _getScreenPoints: function(b, a, d) {
            var c = [],
                h = b.length,
                p = 0,
                f = 0,
                g, m = new w(a.extent.xmin, a.extent.ymax, a.spatialReference),
                k = a.toScreen(m),
                e = k.x,
                k = k.y,
                l = a.getResolution(),
                n;
            for ((f = a.extent.getCacheValue("_parts")) && (n = q.map(f, function(b) {
                    return d._intersects(a,
                        b.extent)[0]
                })); h--;) f = b[h], f.geometry && (g = {
                x: Math.ceil((f.geometry.x - m.x) / l + e),
                y: Math.floor((m.y - f.geometry.y) / l - k),
                attributes: f.attributes
            }, n && (f = 1 < n.length && g.x < -n[0] ? n[1] : n[0], g.x += f), c[p++] = g);
            return c
        },
        _getImageBySourceId: function(b) {
            var a = this.imageLayer.getImages(),
                a = q.filter(a, function(a) {
                    return a.sourceId == b
                });
            if (a.length) return a[a.length - 1]
        },
        _swapMapImages: function(b, a) {
            function d() {
                c.removeImage(a)
            }
            var c = this.imageLayer,
                h = this.sourceLayer.opacity || 1;
            c.addImage(b);
            s.anim(b._node, {
                    opacity: h
                },
                null, null,
                function() {
                    b.opacity = h
                });
            null != a && s.anim(a._node, {
                opacity: 0
            }, null, null, d)
        },
        _removeHandlers: function() {
            if (null != this._hndls)
                for (var b = this._hndls.length; b--;) this._hndls[b].remove()
        },
        _getOptions: function() {
            var b = this.heatmapRenderer;
            return {
                blurRadius: b.blurRadius,
                gradient: b.gradient,
                maxPixelIntensity: b.maxPixelIntensity,
                minPixelIntensity: b.minPixelIntensity,
                field: b.field,
                fieldOffset: b.fieldOffset
            }
        },
        _resetGraphics: function() {
            for (var b = this.sourceLayer.graphics, a = b.length, d; a--;) d = b[a], d._shape =
                d._offsets = void 0
        }
    })
});
},
'esri/layers/MapImage':function(){
//>>built
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/dom-style", "dojo/has", "../kernel", "../domUtils", "../geometry/Extent"], function(e, f, g, k, l, d, h) {
    return e(null, {
        declaredClass: "esri.layers.MapImage",
        constructor: function(a) {
            f.mixin(this, a);
            this.extent = new h(this.extent)
        },
        visible: !0,
        opacity: 1,
        getLayer: function() {
            return this._layer
        },
        getNode: function() {
            return this._node
        },
        show: function() {
            if (!this.visible) {
                this.visible = !0;
                var a = this._node,
                    b = this._layer,
                    c;
                if (a) {
                    if (c = b && b._div) b.suspended || b._setPos(a, c._left,
                        c._top), (b._active || c).appendChild(a);
                    d.show(a)
                }
            }
        },
        hide: function() {
            if (this.visible) {
                this.visible = !1;
                var a = this._node;
                a && (d.hide(a), a.parentNode && a.parentNode.removeChild(a))
            }
        },
        setOpacity: function(a) {
            var b = this._node;
            this.opacity = a;
            b && g.set(b, "opacity", a)
        }
    })
});
},
'url:esri/dijit/Search/templates/Search.html':"<div role=\"presentation\" class=\"${theme}\">\r\n  <div role=\"presentation\" class=\"${css.searchGroup}\" data-dojo-attach-point=\"containerNode\">\r\n    <div data-dojo-attach-point=\"expandNode\" class=\"${css.searchExpandContainer}\">\r\n      <div class=\"${css.searchAnimateContainer}\">\r\n        <div role=\"button\" title=\"${_i18n.widgets.Search.main.searchIn}\" id=\"${id}_menu_button\" class=\"${css.searchBtn} ${css.searchToggle}\" tabindex=\"0\" data-dojo-attach-point=\"sourcesBtnNode\">\r\n          <span role=\"presentation\" class=\"${css.searchToggleIcon}\"></span><span class=\"${css.searchSourceName}\" data-dojo-attach-point=\"sourceNameNode\"></span>\r\n        </div>\r\n        <div class=\"${css.searchInputGroup}\">\r\n          <input autocomplete=\"off\" type=\"text\" tabindex=\"0\" class=\"${css.searchInput}\" value=\"${value}\" aria-haspopup=\"true\" id=\"${id}_input\" data-dojo-attach-point=\"inputNode\" role=\"textbox\">\r\n          <div role=\"button\" class=\"${css.searchClear}\" tabindex=\"0\" data-dojo-attach-point=\"clearNode\"><span class=\"${css.searchClearIcon}\"></span><span class=\"${css.searchSpinner}\"></span>\r\n          </div>\r\n          <div aria-labelledby=\"${id}_input\" data-dojo-attach-point=\"suggestionsNode\" class=\"${css.searchMenu} ${css.suggestionsMenu}\" role=\"menu\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div role=\"button\" title=\"${_i18n.widgets.Search.main.searchButtonTitle}\" class=\"${css.searchBtn} ${css.searchSubmit}\" tabindex=\"0\" data-dojo-attach-point=\"submitNode\">\r\n      <span role=\"presentation\" class=\"${css.searchIcon}\"></span>\r\n      <span class=\"${css.searchButtonText}\">${_i18n.widgets.Search.main.searchButtonTitle}</span>\r\n    </div>\r\n    <div aria-labelledby=\"${id}_menu_button\" data-dojo-attach-point=\"sourcesNode\" class=\"${css.searchMenu} ${css.sourcesMenu}\" role=\"menu\"></div>\r\n    <div data-dojo-attach-point=\"noResultsMenuNode\" class=\"${css.searchMenu} ${css.searchNoResultsMenu}\"></div>\r\n    <div class=\"${css.searchClearFloat}\"></div>\r\n  </div>\r\n</div>",
'*now':function(r){r(['dojo/i18n!*preload*dojo/nls/dojo*["ar","ca","cs","da","de","el","en-gb","es-es","fi-fi","fr-fr","he-il","hu","it-it","ja-jp","ko-kr","nl-nl","nb","pl","pt-br","pt-pt","ru","sk","sl","sv","th","tr","zh-tw","zh-cn"]']);}
}});
(function(){
	// must use this.require to make this work in node.js
	var require = this.require;
	// consume the cached dojo layer
	require({cache:{}});
	!require.async && require(["dojo"]);
	require.boot && require.apply(null, require.boot);
})();
